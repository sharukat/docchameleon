Package,Java API,Question,SISE,CROKAGE,DocChameleon
lang,String,Converting an int to a binary string representation in Java?,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Convert Integer to Binary:

import java.util.Scanner;

public class IntegerToBinary {

    public static void main(String[] args) {

        Scanner input = new Scanner( System.in );

        System.out.println(""Enter Integer: "");
        String integerString =input.nextLine();

        System.out.println(""Binary Number: ""+Integer.toBinaryString(Integer.parseInt(integerString)));
    }

}
Output:

Enter Integer:

10

Binary Number: 1010","One way to convert an int to a binary string representation in Java is by using the static method `toBinaryString` from the `Integer` class. It takes an `int` as input and returns a `String` representing the integer argument as an unsigned integer in base 2.
Here is an example:
```java
int number = 345;
String binaryString = Integer.toBinaryString(number);
System.out.println(binaryString); // Output: 1001110101
```"
lang,String,How to convert binary string value to decimal,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Use Integer.parseInt (see javadoc), that converts your String to int using base two:

int decimalValue = Integer.parseInt(c, 2);","To convert a binary string value to a decimal in Java, you can use the `Integer.parseInt(String s, int radix)` method. The `radix` argument specifies the radix (base) of the string to be parsed; in this case, it should be set to 2 for binary. This method returns an `int` representing the value of the converted string.

Here's an example:
```java
int decimalValue = Integer.parseInt(binaryString, 2);
```
This can also be done with `Long`, `BigInteger` and `BigDecimal` classes, using the appropriate `parse*` method for each class."
lang,Thread,How to make a Java thread wait for another threads output?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","You can use Thread.join() to do that:

Thread[] threads = new Thread[numOfThreads];
for (int i = 0; i < threads.length; i++) {
    threads[i] = new Thread(new Runnable() {
        public void run() {
            System.out.println(""xxx"");
        }
    });
    threads[i].start();
}

for (int i = 0; i < threads.length; i++) {
    try {
        threads[i].join();
    } catch (InterruptedException e) {
    }
}
For your solution

Thread[] threads = new Thread[3];
threads[i] = new Thread(new Runnable() {
        ...
}).start();
threads[i] = new Thread(new Runnable() {
        ...
}).start();
threads[i] = new Thread(new Runnable() {
        ...
}).start();

for (int i = 0; i < threads.length; i++) {
    try {
        threads[i].join();
    } catch (InterruptedException e) {
    }
}","There are multiple ways to make a Java thread wait for another thread's output. Here are some of them:
1. Use the Thread.join() method: This will block the current thread until the thread you want to wait for terminates. You can use this in a for loop to join each thread in a collection of threads.
2. Use a CountDownLatch: Initialize a CountDownLatch with a counter of 1. Call latch.await() in the waiting thread and latch.countDown() in the notifying thread. The awaiting thread will be unblocked when the count reaches zero.
3. Use an ExecutorCompletionService: If you submit all your tasks to an ExecutorCompletionService, you can call awaitTermination() to wait for all threads to complete.
4. Use a CyclicBarrier: A CyclicBarrier lets a set of threads wait for each other to reach a common barrier point. You can use it as a more general solution for when you need to wait for multiple threads.
5. Create a helper method waitFor() that loops through a collection of threads and calls join() on each one.
6. If your threads are running inside a ThreadPoolExecutor, you can use the FutureTask returned by submit() to wait for the thread's completion.
7. You can also make use of the synchronized keyword along with the wait() and notify() methods."
lang,Thread,When does Javas Thread.sleep throw InterruptedException?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","In this solution, I defined an interface Interruptible, and a method ignoreInterruption which converts an Interruptible to a Runnable:

public class Foo {

  public static void main(String... args) {
    new Thread(ignoreInterruption(Foo::bar)).start();
    new Thread(ignoreInterruption(() -> Foo.baz(1, 2, 3))).start();
  }

  static void bar() throws InterruptedException {
    // do something
    Thread.sleep(1000);
  }

  static void baz(int a, int b, int c) throws InterruptedException {
    // do something
    Thread.sleep(1000);
  }  

  interface Interruptible {
    public void run() throws InterruptedException;
  }

  static Runnable ignoreInterruption(Interruptible interruptible) {
    return () -> { 
      try {
        interruptible.run();
      }
      catch(InterruptedException ie) {
        // ignored
      }
    };
  }

}","Java's Thread.sleep() method throws an InterruptedException when the sleeping thread is interrupted by another thread. This can be handled by catching the exception and performing specific actions, such as restoring the interrupt status or custom handling based on the requirements of your application. If you want to mock and throw an InterruptedException when Thread.sleep() is called, you can use a testing framework like JUnit and Mockito to interrupt the thread."
lang,Thread,Java: Thread.currentThread().sleep(x) vs. Thread.sleep(x),"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","The Thread.interrupt() method interrupts the specific Thread that the instance references to:

Thread x = getSomeThreadInstance();
x.interrupt();
The x variable can refer to any thread instance.

The Thread.currentThread().interrupt() method is the same as before, but applied to the current Thread, interrupting only the current thread of execution. It is equivalent to:

Thread x = Thread.currentThread();
x.interrupt();
About Thread.sleep() and Thread.currentThread().sleep() there is no difference. sleep() is a static method on the Thread class, and makes no difference on the way you call it. Calling it causes the current thread of execution to pause for the indicated amount of time.

Nonetheless, one should not call static method on an instance, which means static method should be called in a static way.","The sleep() function is a static method and both Thread.sleep(x) and Thread.currentThread().sleep(x) perform the same action - they invoke the same method. However, using Thread.sleep(x) is considered good style as Thread.currentThread().sleep(x) looks like it is calling a method on a specific object. 

The sleep() method puts the current thread to sleep for a specified time in milliseconds. The unit of time can also be specified using Java's TimeUnit class, e.g. TimeUnit.SECONDS.sleep(5)."
lang,Thread,How a thread should close itself in Java?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","You can add a method like this as any blocking IO operation will throw an IOException:-

public void close() throws IOException {
    this.socket.close();
}
From the javadoc:-

Closes this socket. Any thread currently blocked in accept() will throw a SocketException.","In Java, threads can be closed using the following methods:

1. Using the Thread.stop() method: This method can be used to stop a thread. However, it might have various effects depending on what the thread was doing. It might die quietly, print a stack trace, or go into an odd state where it does not release the locks it should have.
2. Using the jp.java.lang.Thread.detach() and jp.java.lang.Thread.attachAsDaemon() methods: These methods can be used to ensure that the process ends cleanly. They are particularly useful when the thread ends and it wasn't detached, preventing memory leaks.
3. Using a third-party tool jkillthread: It is a command-line tool that uses the Oracle JDK 6+ Attach API to attach to a Java VM and kill an individual thread. You can download jkillthread-1.0.jar and run it using the java command from a JDK to kill a thread."
net,Socket,Java sending and receiving file (byte[]) over sockets,"Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>
<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.
Buffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>
<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.
<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.
Servers with threadpools  or with threads handling more than one connection each  now become possible.
If only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.
With non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.
A <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>
Selectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.
pattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>
<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>
I don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>","Take a look at the tutorial on Reading from and Writing to a Socket.

To write a byte array to a socket you would:

byte[] message = ...;
Socket socket=new Socket(ipAddress, port);
OutputStream socketOutputStream = socket.getOutputStream();
socketOutputStream.write(message);
Similarly, to read, you would use socket.getInputStream.","Here is a possible solution for sending and receiving files over sockets in Java:
```java
//Server-side code
ServerSocket serverSocket = null;
Socket socket = null;
serverSocket = new ServerSocket(4444);
socket = serverSocket.accept();
DataOutputStream out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
byte[] bytes = new byte [1024];
int count;
while ((count = in.read(bytes)) > 0) {
    out.write(bytes, 0, count);
}
<co: 0>out.close();
in.close();
socket.close();
serverSocket.close();

//Client-side code
Socket socket = null;
DataOutputStream out = null;
DataInputStream in = null;
String host = ""127.0.0.1"";
socket = new Socket(host, 4444);
out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
File file = new File(""path/to/file"");
long length = file.length();
byte[] bytes = new byte [(int) length];
FileInputStream fis = new FileInputStream(file);
int count;
while ((count = fis.read(bytes)) > 0) {
    out.write(bytes, 0, count);
}
<co: 0>out.close();
in.close();
socket.close();
```"
net,Socket,Sending compressed JPG image over socket,"Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>
<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.
Buffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>
<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.
<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.
Servers with threadpools  or with threads handling more than one connection each  now become possible.
If only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.
With non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.
A <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>
Selectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.
pattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>
<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>
I don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>","Actually the code looks ok. Here's a complete code, that works fine on my machine:

import java.awt.*;
import java.awt.image.BufferedImage;
import java.net.*;

import javax.imageio.ImageIO;
import javax.swing.*;

public class Server {
  public static void main(String[] args) throws Exception {
    BufferedImage screencapture = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
    try (ServerSocket serv = new ServerSocket(25000)) {
      System.out.println(""waiting..."");
      try (Socket socket = serv.accept()) {
        System.out.println(""client connected"");
        ImageIO.write(screencapture, ""jpg"", socket.getOutputStream());
        System.out.println(""sent"");
      }
    }
  }
}

class Client {
  public static void main(String[] args) throws Exception {
    try(Socket socket = new Socket(""localhost"", 25000)){
      BufferedImage image = ImageIO.read(socket.getInputStream());
      JLabel label = new JLabel(new ImageIcon(image));
      JFrame f = new JFrame(""vnc"");
      f.getContentPane().add(label);
      f.pack();
      f.setVisible(true);
    }
  }
}
Though this will only work if you close the socket after sending the images. It will fail if you'll just try to send a few images over the same socket. See https://stackoverflow.com/a/6973863/211205.","A socket is an endpoint for communication between two machines. Sockets use the TCP/IP protocol by default.

To send a compressed JPG over a socket, you can make use of Java's built-in JPEG writer plugin. First, create a new socket and establish a connection:
```java
Socket socket = new Socket(host, port);
socket.connect(endpoint);
```
Then, use the JPEGImageWriteParam class and the BufferedImage class to send the compressed JPG over the socket:
```java
BufferedImage image = ... // Create or load the image you want to send
JPEGImageWriteParam jpegParams = new JPEGImageWriteParam(Locale.getDefault());
jpegParams.setCompressionQuality(1.0f); // Set quality, 1.0f is the highest
ImageWriter writer = ImageIO.getImageWriter(socket.getOutputStream(), ""jpeg"");
writer.setOutput(socket.getOutputStream());
writer.write(image);
```
Make sure to replace host, port, and endpoint with the appropriate values for your use case."
sql,Connection,Authentication during connection to MongoDB server instance using Java,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Following on from Bob Kuhar's accepted answer, in Mongo3 the mechanism has change to SHA1 from challenge response as shown in the code snippet. I need to update the code snippet as follows:

...
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
...

// Manage the mongo db connection...
List<ServerAddress> seeds = new ArrayList<ServerAddress>();
seeds.add( new ServerAddress(configuration.getMongoHost(), configuration.getMongoPort() ));
List<MongoCredential> credentials = new ArrayList<MongoCredential>();
credentials.add(
    MongoCredential.createScramSha1Credential(
        configuration.getMongoUser(),
        configuration.getMongoDb(),
        configuration.getMongoPassword().toCharArray()
    )
);
MongoClient mongo = new MongoClient( seeds, credentials );","One way to authenticate connection to a MongoDB server instance is to use the mongoose library. You can establish a connection by providing your username and password in the connection string or options. 

Here are a few examples of doing so:
1. mongoose.connect('mongodb://username:password@host:port(usually 27017)/db')
2. var options = {¬†user: 'myUserName', pass: 'myPassword' } mongoose.connect(uri, options);

Alternatively, you can use the MongoDB-supported authentication mechanisms plugin for Java. The Maven coordinates for the plugin are:
<dependency>¬†<groupId>org.mongodb</groupId>¬†<artifactId>mongosql-auth</artifactId>¬†<version>1.2.0</version>¬†</dependency>

You can also enable authentication in your MongoDB instance and provide the relevant username and password when connecting to the instance, for example:
mongo -u johndoe -p --authenticationDatabase admin"
sql,Connection,How to get database url from java.sql.Connection?,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","I believe you can use the DatabaseMetaData object from the Connection and then get the URL. Try:

DatabaseMetaData dmd = connection.getMetaData();
String url = dmd.getURL();","To get the database URL from a `java.sql.Connection`, you can use the following code:
```java
DatabaseMetaData dmd = connection.getMetaData();
String url = dmd.getURL();
```
This gets the `DatabaseMetaData` object from the `Connection` object, and then uses the `getURL()` method to retrieve the URL."
sql,Connection,How to get database schema name when using oracle jdbc connection?,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","You can get schema name using

Connection conn = 
DriverManager.getConnection(""jdbc:oracle:thin:@server:port:SID"",prop);    
DatabaseMetaData databaseMetaData = conn.getMetaData();
System.out.println(""schema name >>>> ""+databaseMetaData.getUserName());","To get the database schema name when using an Oracle JDBC connection, you can use the following methods:
1. Append &currentSchema=my_namespace to the connection URL.
2. Use the method Connection#getSchema. This executes the oracle-specific command alter session set current_schema = ? in the background.
3. Specify the schema name in the JDBC connection string, or set it using the user name. For instance, to set the schema name to 'xyz', use 'xyz' as the username in the connection string.

Here's an example of a JDBC connection string that sets the schema name to 'schema_name':
```
java -jar target/jdbc-tester-1.1.jar schema_name schema_password jdbc:oracle:thin:@//host:port/SID
```"
sql,Connection,Connect Java to a MySQL database,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","To create database through Java code, you must use executeUpdate(sql) instead of executeQuery(sql); and connect to the mysql database as root:

connection =  DriverManager.getConnection(
    ""jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull"",
    ""root"", ""root""
);
Statement st = connection.createStatement();
st.executeUpdate(sql);
st.close();","To connect a Java application to a MySQL database, you need to:

1. Import the required packages, including `java.sql.*`.
2. Register the JDBC driver by initialising a driver to open a communication channel with the database. This typically involves calling `Class.forName(""com.mysql.jdbc.Driver"")`.
3. Open a connection to the database using `DriverManager.getConnection()`. This requires a database URL in the form `jdbc:mysql://localhost:3306/databaseName`, along with a username and password.
4. Create a statement object using the connection, e.g. `Statement stmt = con.createStatement()`.
5. Execute SQL queries on the database with the statement object, e.g. `stmt.executeQuery()`.
6. Remember to close the connection when it's no longer needed.

You may also need to set up a few configuration details, such as granting the appropriate permissions to the host and user, and ensuring that the MySQL server is set up to accept the connection."
sql,Connection,Should you set up database connection properties in server.xml or context.xml,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","A connection pool operates by performing the work of creating connections ahead of time. In the case of a JDBC connection pool, a pool of Connection objects is created at the time the application server starts. The client can access the connection object in connection pool and return the object to pool once the db work is completed.

Context.xml

   <Resource name=""jdbc/TestDB"" auth=""Container"" type=""javax.sql.DataSource"" 
maxActive=""100"" maxIdle=""30"" maxWait=""10000"" username=""root"" password="""" 
driverClassName=""com.mysql.jdbc.Driver""               
url=""jdbc:mysql://localhost:3306/cdcol""/>
//This should be added in the servers context,xml file. For example if you are using apache server then the context.xml will be found in C:\apache-tomcat-6.0.26\conf\Context.xml

web.xml

  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/TestDB</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>
//This should be added in the web.xml of the local project. (Not in server's web.xml).

Context ctx=new InitialContext();
          Context envContext = (Context)ctx.lookup(""java:comp/env"");
          DataSource ds=(DataSource)envContext.lookup(""jdbc/TestDB"");//TestDB is the Database Name
          con=ds.getConnection();
          stmt = con.createStatement();","There are different recommendations for the best place to keep your database connection properties.

One suggestion is to keep the properties in the server configuration file, e.g. <tomcat>/conf/server.xml, rather than in the application's META-INF/context.xml file. This allows the same WAR file to be deployed on multiple servers, each with their own database configuration. The WAR file can live anywhere on the file system and doesn't need to be moved when Tomcat is upgraded, making it a scalable solution.

Another suggestion is to use an application-specific context.xml file, linked to from the WAR file. This approach is also favoured by those using Spring, who recommend setting up your datasource in Spring configuration files rather than in the server configuration."
sql,ResultSet,HSQLDB delete row(s) from JDBC resultset,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","Specify the cursor holdability in the code:

c.prepareStatement(select,
     ResultSet.TYPE_SCROLL_INSENSITIVE,
     ResultSet.CONCUR_UPDATABLE,
     ResultSet.HOLD_CURSORS_OVER_COMMIT);
The problem seems to be that HSQLDB JDBC driver uses ResultSet.CLOSE_CURSOS_AT_COMMIT as the default value.","To delete a row from a JDBC resultset using HSQLDB, you should first create your statement with the following parameters:
```java
Statement stmt = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
```
Or, if you are using a PreparedStatement:
```java
PreparedStatement prepStmt = dbCon.prepareStatement(sqlStr, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);
```

Then, simply call the deleteRow() method on your ResultSet object. However, note that not all DBMS and JDBC drivers allow this, and you may have to issue a SQL DELETE command instead."
sql,ResultSet,How to programmatically create a Java ResultSet from custom data with no database,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","Why you are getting ""Closed resultset:next"" error, see here:

Why am I getting ResultSet is closed error when I never closed any

I suppose you are not using some ORM framework like Hibernate.

In this case, map the resultset data in the DAO or build an object mapper yourself, which maps the ResultSet to a some Data Transfer Object. Then pass this object to the createExcel() method.

Something like this:

ResultSet rs = myDao.getResult();
List<ExcelDto> excelDtos = new ArrayList<>();
ExcelDto excelDto;
while (rs.next()) {      
    excelDto = new ExcelDto();    
    dto.setXCol(rs.getString(""XColumn""))
    excelDtos.add(dto);  
}
excelCreator.createExcel(excelDtos);
Then in the excelCreator you can work with an ArrayList instead of ResultSet.","You can programmatically create a Java ResultSet from custom data without a database by doing the following:
1. Create a class that implements the ResultSet interface. This is because ResultSet is a final class and cannot be inherited.
2. Alternatively, you can create a dynamic proxy class of the ResultSet interface and implement only the methods that you need. You can use the InvocationHandler interface to implement this.
3. Use a mocking framework like Mockito to mock the ResultSet object.
4. Use a CSV Jdbc driver to create a ResultSet object from a CSV file.
5. Create an in-memory database and populate the data you want in it. You can then use the data in the ResultSet object."
sql,ResultSet,Retrieve column names from java.sql.ResultSet,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","You can use the the ResultSetMetaData (http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html) object for that, like this:

ResultSet rs = stmt.executeQuery(""SELECT * FROM table"");
ResultSetMetaData rsmd = rs.getMetaData();
String firstColumnName = rsmd.getColumnName(1);","To retrieve column names from a **java.sql.ResultSet** interface, you need to use the **getMetaData()** method, which returns a **ResultSetMetaData** interface object. You can then use the following methods:

- **getColumnName(int i)** - Accepts an integer value representing the index of a column and returns a String value representing the name of the specified column. Indexes start from 1.
- **getColumnCount()** - Returns the number of columns. 

Here is an example:

```java
ResultSetMetaData rsMetaData = rs.getMetaData();
int count = rsMetaData.getColumnCount();
for(int i = 1; i<=count; i++) {
System.out.println(rsMetaData.getColumnName(i));
}
```

This code will output the names of the columns to the console."
util,ArrayList,How to sort a Map by Value (ArrayList) size in Java?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","If you are using java-8, here's also a way to do this:

List<String> keys = unsortedMap.entrySet()
                   .stream()
                   .sorted((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()))
                   .map(Map.Entry::getKey)
                   .collect(Collectors.toList());
System.out.println(keys); //[C, A, B]
What it does is:

get a Stream of the entries of your map
sort the entries by the the size of each arraylist
map each entry to its corresponding key
collect the result in a List
If you want you could also write the sorted line as :

.sorted(Comparator.comparing(e -> e.getValue().size(), Comparator.reverseOrder()))","You can sort a Map by the size of its ArrayList values using the following approach:
1. Create a new instance of LinkedHashMap
2. Iterate through the original Map and copy the entries into the LinkedHashMap, which preserves the order of insertion.
3. To sort the Map based on the size of the ArrayList values, create a List from the entrySet() of the Map, and then sort this List using a Comparator.
4. Finally, iterate through the sorted List and create a new Map from the sorted entries.

Here's the code implementing the above approach:
```java
import static java.util.Comparator.comparingInt;
import static java.util.stream.Collectors.toMap;

public static <K, V extends Collection> Map<K, V> sortMapByValueSize(Map<K, V> map) {
List<Map.Entry<K, V>> list = new ArrayList<>(map.entrySet());
Collections.sort(list, comparingInt(e -> e.getValue().size()));
return list.stream().collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));
}
```"
util,ArrayList,How to convert comma-separated String to ArrayList?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","Here is another one for converting CSV to ArrayList:

String str=""string,with,comma"";
ArrayList aList= new ArrayList(Arrays.asList(str.split("","")));
for(int i=0;i<aList.size();i++)
{
    System.out.println("" -->""+aList.get(i));
}
Prints you

-->string
-->with
-->comma","Here is a method to convert a comma-separated string to an ArrayList in Java:
```java
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Test {
public static void main(String[] args) {
String commaSeparated = ""item1 , item2 , item3""; 
List<String> items = new ArrayList(Arrays.asList(commaSeparated.split(""\\s*,\\s*)));
System.out.println(items); #output: [item1, item2, item3]
}
}
```"
util,ArrayList,How to get ArrayList<Integer> and Scanner to play nice?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","Your problem is here :

 while(scan.hasNextInt()){  <-- This will loop untill you enter any non integer value
     list.add(scan.nextInt());
  }
You just have to enter a character say e.g q once you finished entering all the integer values and then your program will print expected results.

Sample Input :14 17 18 33 54 1 4 6 q","Here is a way to make ArrayList<Integer> and Scanner play nice together.
```java
import java.util;* public class CyclicShiftApp{* public static void main(String[] args){* Scanner scan = new Scanner(System.in);* ArrayList<Integer> list = new ArrayList<Integer>(); * System.out.print(""Enter integers please ""); *System.out.println(""(EOF or non-integer to terminate): ""); *while(scan.hasNextInt()){* list.add(scan.nextInt());}* Integer [] nums = list.toArray(new Integer [0]); *for(int i = 0; i < nums.length; i++){* System.out.println(nums [i]);}* } }
```
In this code, the user is expected to enter integers one after the other, and the while loop terminates when the user enters a non-integer value. The integers entered are stored in an ArrayList, and are subsequently printed."
util,Map,JAXB java.util.Map to key value pairs,"<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>
<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.
<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>
<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>
actually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>
If you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.
That means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>
Using a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();
As of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>
(By the way  a map can t contain twice the same value  your second put will overwrite the first one.
map is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>
If you want your map to never change  you should after the initialization wrap your map by <code>Collections.
The map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.
Also  the key and the value of each entry is immutable  cannot be changed.
See the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>
Pass an existing map  get back an immutable copy of that map.</p> <p>
For efficiency  if the passed map is already truly immutable  the <code>copyOf</code>
method produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.
If the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.
We see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>
An alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>
The utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>","I'm still working on a better solution but using MOXy JAXB, I've been able to handle the following XML:

<?xml version=""1.0"" encoding=""UTF-8""?>
<root>
   <mapProperty>
      <map>
         <key>value</key>
         <key2>value2</key2>
      </map>
   </mapProperty>
</root>
You need to use an @XmlJavaTypeAdapter on your Map property:

import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

@XmlRootElement
public class Root {

    private Map<String, String> mapProperty;

    public Root() {
        mapProperty = new HashMap<String, String>();
    }

    @XmlJavaTypeAdapter(MapAdapter.class)
    public Map<String, String> getMapProperty() {
        return mapProperty;
    }

    public void setMapProperty(Map<String, String> map) {
        this.mapProperty = map;
    }

}
The implementation of the XmlAdapter is as follows:

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class MapAdapter extends XmlAdapter<AdaptedMap, Map<String, String>> {

    @Override
    public AdaptedMap marshal(Map<String, String> map) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.newDocument();
        Element rootElement = document.createElement(""map"");
        document.appendChild(rootElement);

        for(Entry<String,String> entry : map.entrySet()) {
            Element mapElement = document.createElement(entry.getKey());
            mapElement.setTextContent(entry.getValue());
            rootElement.appendChild(mapElement);
        }

        AdaptedMap adaptedMap = new AdaptedMap();
        adaptedMap.setValue(document);
        return adaptedMap;
    }

    @Override
    public Map<String, String> unmarshal(AdaptedMap adaptedMap) throws Exception {
        Map<String, String> map = new HashMap<String, String>();
        Element rootElement = (Element) adaptedMap.getValue();
        NodeList childNodes = rootElement.getChildNodes();
        for(int x=0,size=childNodes.getLength(); x<size; x++) {
            Node childNode = childNodes.item(x);
            if(childNode.getNodeType() == Node.ELEMENT_NODE) {
                map.put(childNode.getLocalName(), childNode.getTextContent());
            }
        }
        return map;
    }

}
The AdpatedMap class is where all the magic happens, we will use a DOM to represent the content. We will trick JAXB intro dealing with a DOM through the combination of @XmlAnyElement and a property of type Object:

import javax.xml.bind.annotation.XmlAnyElement;

public class AdaptedMap {

    private Object value;

    @XmlAnyElement
    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

}
This solution requires the MOXy JAXB implementation. You can configure the JAXB runtime to use the MOXy implementation by adding a file named jaxb.properties in with your model classes with the following entry:

javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory
The following demo code can be used to verify the code:

import java.io.File;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class Demo {

    public static void main(String[] args) throws Exception {
        JAXBContext jc = JAXBContext.newInstance(Root.class);

        Unmarshaller unmarshaller = jc.createUnmarshaller();
        Root root = (Root) unmarshaller.unmarshal(new File(""src/forum74/input.xml""));

        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(root, System.out);
    }
}","I couldn't find much information about converting a java.util.Map object into key-value pairs using JAXB. However, since Map implements the Bindings interface, which extends Map<String, Object>, it should be possible to access a Map as a Bindings object, which may be more suitable for conversion into XML using JAXB. 

Here's an example of how you might do this: 
```java
MapK,V myMap = new HashMap()[];
// Add entries to the map
<co: 5>Bindings bindings = (Bindings) myMap;
```
Then, once you have your Map implemented as a Bindings object, you can use the unmarshal method from JAXB to convert it into XML. 

Alternatively, since Map implements the Set<Map.Entry<K,V>>> entrySet method, you could extract the key-value pairs as Entries and use those. However, I wasn't able to find any clear information about how you might convert these into a useable format."
util,Map,serialize json object which extends map,"<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>
<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.
<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>
<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>
actually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>
If you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.
That means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>
Using a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();
As of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>
(By the way  a map can t contain twice the same value  your second put will overwrite the first one.
map is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>
If you want your map to never change  you should after the initialization wrap your map by <code>Collections.
The map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.
Also  the key and the value of each entry is immutable  cannot be changed.
See the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>
Pass an existing map  get back an immutable copy of that map.</p> <p>
For efficiency  if the passed map is already truly immutable  the <code>copyOf</code>
method produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.
If the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.
We see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>
An alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>
The utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>","I came up with this solution:

public class ArrayToMapDeserializer extends JsonDeserializer<SortedMap<Object, Object>>
    implements ContextualDeserializer {

    private Class<?> keyAs;

    private Class<?> contentAs;

    @Override
    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
        return this.deserialize(p, ctxt, new HashMap<>());
    }

    @Override
    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt,
        Map<Object, Object> intoValue) throws IOException, JsonProcessingException {
        JsonNode node = p.readValueAsTree();
        ObjectCodec codec = p.getCodec();
        if (node.isArray()) {
            node.forEach(entry -> {
                try {
                    JsonNode keyNode = entry.get(0);
                    JsonNode valueNode = entry.get(1);
                    intoValue.put(keyNode.traverse(codec).readValueAs(this.keyAs),
                        valueNode.traverse(codec).readValueAs(this.contentAs));
                } catch (NullPointerException | IOException e) {
                    // skip entry
                }
            });
        }
        return intoValue;
    }

    @Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
        throws JsonMappingException {
        JsonDeserialize jsonDeserialize = property.getAnnotation(JsonDeserialize.class);
        this.keyAs = jsonDeserialize.keyAs();
        this.contentAs = jsonDeserialize.contentAs();
        return this;
    }

}
which can be used like this:

public class Baz {

    @JsonSerialize(using = MapToArraySerializer.class)
    @JsonDeserialize(using = ArrayToMapDeserializer.class,
        keyAs = Foo.class, contentAs = Bar.class)
    Map<Foo, Bar> map;

}","You can serialize a JSON object which extends Map in Kotlin by using the JsonElement function. The function replaces the Map with JsonObject and also converts the keys and values accordingly.

You can also use the FasterXML library to achieve the serialization of a Map implementation with additional properties. The library has a tool called Jackson which can treat the Map implementation as a plain old object. However, this functionality is available only from Jackson 2.9 onwards.
Angular also provides a way to achieve this by using HttpInterceptor to modify the outgoing request bodies."
awt,Image,Take a screenshot and save as Image in Java,N/A,"Use Robot#createScreenCapture().

BufferedImage image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
ImageIO.write(image, ""png"", new File(""/screenshot.png""));","You can use the java.awt.Robot class to take a screenshot and save it as an image in Java. Here's an example of how you can do it:

import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;

public class Screenshot {
   public static void main(String[] args) {
       Robot robot = new Robot();
       Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
       BufferedImage capture = robot.createScreenCapture(screenRect);
       ImageIO.write(capture, ""bmp"", new File(args[0]));
   }
}"
awt,Image,Is there a way to take a screenshot using Java and save it to some sort of Image?,N/A,"GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();  
GraphicsDevice[] screens = ge.getScreenDevices();       
Rectangle allScreenBounds = new Rectangle();  
for (GraphicsDevice screen : screens) {  
       Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();        
       allScreenBounds.width += screenBounds.width;  
       allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);
       allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x);
       allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y);
      } 
Robot robot = new Robot();
BufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds);
File file = new File(""C:\\Users\\Joe\\Desktop\\scr.png"");
if(!file.exists())
    file.createNewFile();
FileOutputStream fos = new FileOutputStream(file);
ImageIO.write( bufferedImage, ""png"", fos );
bufferedImage will contain a full screenshot, this was tested with three monitors","Here is a code snippet that uses the Robot class to take a full screenshot:
```java
Robot robot = new Robot();
Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
Rectangle screenRect = new Rectangle(screenSize);
BufferedImage capture = robot.createScreenCapture(screenRect);
ImageIO.write(capture, ""bmp"", new File(""screenshot.bmp""));
```"
awt,Image,"Java- Write Text onto Image, then Write to Output File",N/A,"It's easy, just get the Graphics object from the image and draw your string onto the image. This example (and output image) is doing that:

public static void main(String[] args) throws Exception {
    final BufferedImage image = ImageIO.read(new URL(
        ""http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png""));

    Graphics g = image.getGraphics();
    g.setFont(g.getFont().deriveFont(30f));
    g.drawString(""Hello World!"", 100, 100);
    g.dispose();

    ImageIO.write(image, ""png"", new File(""test.png""));
}","Here's a piece of code that accomplishes the task of writing text onto an image and saving it as an output file:

```java
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;

public class WatermarkImage {
    public static void main(String[] args) {
        File origFile = new File(""C:/OrignalImage.jpg"");
        ImageIcon icon = new ImageIcon(origFile.getPath());

        // Create BufferedImage object of the same width and height as the original image
        BufferedImage bufferedImage = new BufferedImage(
            icon.getIconWidth(), 
            icon.getIconHeight(), 
            BufferedImage.TYPE_INT_RGB
        );

        // Create graphics object and add original image to it
        Graphics graphics = bufferedImage.getGraphics();
        graphics.drawImage(icon.getImage(), 0, 0, null);

        // Set font for the watermark text
        graphics.setFont(new Font(""Arial"", Font.BOLD, 30));

        // Add the watermark text
        String watermark = ""Sample Text"";
        graphics.drawString(watermark, 0, icon.getIconHeight() / 2);

        File newFile = new File(""C:/WatermarkedImage.jpg"");
        try {
            ImageIO.write(bufferedImage, ""jpg"", newFile);
            System.out.println(newFile.getPath() + "" created successfully!"");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

Make sure to change the file paths ""C:/OrignalImage.jpg"" and ""C:/WatermarkedImage.jpg"" to the required file paths."