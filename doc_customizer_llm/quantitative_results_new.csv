Package,Java API,Question,SISE,JADEITE,CROKAGE,ADECK,DocChameleon,SISE_context_relevancy,CROKAGE_context_relevancy,DocChameleon_context_relevancy
applet,Applet,Loading and displaying local Images in Java Applet,"<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>
Therefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.
<p>...the compiler is treating <code>\D</code> as a single escaped character rather than as two characters.
The compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\D</code>  <code>\A</code>  <code>\t</code>) in that string.
<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>
<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.
itself  then you can embed one into the other  for your specific case you can embed <strong>
<p>There are so many things wrong with the applets it is hard to know where to begin.
But let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>
Instead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().
Presumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>
Don t try to set the size of an applet.
method might be called repeatedly.
As a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>
than implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.
The methods in the <code>actionPerformed()</code> are equally nonsensical.
until after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.
method is meant to be called multiple times  the <code>init()</code>
<p>I had the very same problem and found a trick that need to be applied server side.
It seems that jars aren t cached if their mime type is incorrect.
<p>Another problem I found is related to a specific jar.
My archive parameter was listing many jars  but only a few were cached.
I found that all jars upto a specific one where cached  all remaining jars weren t cached at all.
While loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .
I still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.
<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= 
<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>","Most common way to construct:
Class appletClass = É;
Applet realApplet = (Applet)appletClass.newInstance();
Based on 10 examples","It's likely the image can't be accessed from its current context, remember, applets normally run in a very tight security sandbox which prevents them from accessing files on the local/client file system.

You either need to load the images from the server the applet is been loaded from (using getDocument/CodeBase or a relative URL), or based on your example, as embedded an resource, for example

tileset_terrain = ImageIO.read(getClass().getResource(""/res/tileset_terrain.png""));
This assumes that the image is included within the Jar file under the /res directory.

If the image resides on the server from which the applet is been load, you could also use

try {
    URL url = new URL(getCodeBase(), ""res/tileset_terrain.png"");
    img = ImageIO.read(url);
} catch (IOException e) {
    e.printStackTrace();
}
Take a look at Reading/Loading images and What Applets Can and Cannot Do for more details.","*******************usage scenario 1********************** 
----------usage scenario----------
How to specify correctly codebase and archive in Java applet?
----------Explanation----------
I suggest the following solution : 


Place myjar.jar in the http://myurl.com/classes folder; 
Assuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:
----------Code Sample----------


type=""application/x-java-applet;jpi-version=6"" 
archive=""myjar.jar"" 
codebase=""http://myurl.com/classes"">
no applet



*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java graphics JApplet
----------Explanation----------
A JPanel with no components has a default size of 0x0. Try this source:
----------Code Sample----------
// 
import java.awt.*;

import java.awt.event.*;
import javax.swing.*;

public class Shape extends JApplet {

/**
*
*/
private static final long serialVersionUID = 1L;

// making the radiobuttons for the shape choices
JRadioButton squareButton = new JRadioButton(""Square"",true);
JRadioButton ovalButton = new JRadioButton(""Oval"",false);
JRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);
JRadioButton triangleButton = new JRadioButton(""Triangle"",false);

// making radiobuttons for the color choices
JRadioButton redButton = new JRadioButton(""Red"",true);
JRadioButton blueButton = new JRadioButton(""Blue"",false);
JRadioButton greenButton = new JRadioButton(""Green"",false);
JRadioButton yellowButton = new JRadioButton(""Yellow"",false);

// making buttons draw and animate
JButton drawButton = new JButton(""Draw!"");
JButton animateButton = new JButton(""Animate!"");

// making JTextFields for length and width
JTextField lengthField = new JTextField(""Enter a length"",15);
JTextField widthField = new JTextField(""Enter a width"",15);

// making JPanel, in which the radiobuttons will go01
JPanel shapePanel = new JPanel();
JPanel colorPanel = new JPanel();
JPanel buttonPanel = new JPanel();
JPanel textPanel = new JPanel();
drawPanel dPanel;

ButtonGroup shapeGroup = new ButtonGroup();
ButtonGroup colorGroup = new ButtonGroup();

// variables that will dictates the shape, size and color
int length = 200;
int width = 200;
Color color = Color.RED;
String shape = ""square"";

public void init() {
setLayout(new FlowLayout()); // setting layout for the applet
// This is set by HTML!
//setSize(680,480);

// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5
shapePanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""
shapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));

// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5
colorPanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""
colorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));

// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5
buttonPanel.setLayout(new GridLayout(1,2,5,5));

// adding a color border
buttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));

// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5
textPanel.setLayout(new GridLayout(1,2,5,5));

// adding some attributes for lengthField and widthField
lengthField.setFont(new Font(""Arial"",Font.PLAIN,12));
lengthField.setForeground(new Color(150,150,150));

widthField.setFont(new Font(""Arial"",Font.PLAIN,12));
widthField.setForeground(new Color(150,150,150));

// using shapegroup to organize the JRadioButtons
shapeGroup.add(squareButton);
shapeGroup.add(ovalButton);
shapeGroup.add(rectangleButton);
shapeGroup.add(triangleButton);

// using colorgroup to organize the color radiobuttons
colorGroup.add(redButton);
colorGroup.add(blueButton);
colorGroup.add(greenButton);
colorGroup.add(yellowButton);

// add the shape buttons to the panel so they appear in a square form
shapePanel.add(squareButton);
shapePanel.add(ovalButton);
shapePanel.add(rectangleButton);
shapePanel.add(triangleButton);

// adding color buttons to the color panel
colorPanel.add(redButton);
colorPanel.add(blueButton);
colorPanel.add(greenButton);
colorPanel.add(yellowButton);

// adding jbuttons
buttonPanel.add(drawButton);
buttonPanel.add(animateButton);

// adding textfields to the textPanel
textPanel.add(lengthField);
textPanel.add(widthField);

dPanel = new drawPanel();
dPanel.setPreferredSize(new Dimension(500,300));

// adding panels to the applet
add(shapePanel);
add(colorPanel);
add(buttonPanel);
add(textPanel);
add(dPanel);

// adding focus listener to lengthField and widthField
lengthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
lengthField.setText("""");
lengthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

widthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
widthField.setText("""");
widthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

drawButton.addActionListener(new drawListener());

}

// when the person presses paint, this will be executed to paint the specific shape, color with the width and length
class drawListener implements ActionListener {
public void actionPerformed(ActionEvent e) {

int mylength = 5;
int mywidth = 5;

try {
mylength = Integer.parseInt(lengthField.getText());;
mywidth = Integer.parseInt(widthField.getText());;
}catch(Exception ex) {
JOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);
}

if((mylength > 200 || mylength < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid length message"", JOptionPane.ERROR_MESSAGE);
}else if((mywidth > 200 || mywidth < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid width message"", JOptionPane.ERROR_MESSAGE);
}else {
length = mylength;
width = mywidth;

// checking which color button is selected
if(redButton.isSelected()) {
color = Color.RED;
}else if(blueButton.isSelected()) {
color = Color.BLUE;
}else if(greenButton.isSelected()) {
color = Color.GREEN;
}else if(yellowButton.isSelected()) {
color = Color.YELLOW;
}

// checking which shape has been selected
if(rectangleButton.isSelected()) {
shape = ""rectangle"";
}else if(triangleButton.isSelected()) {
shape = ""triangle"";
}else if(ovalButton.isSelected()) {
shape = ""oval"";
}else if(squareButton.isSelected()) {
shape = ""square"";
}

//System.out.printf(""%3d %3d %s %s \n"",length,width,shape,color);

}

}
}

// This will be used to do the painting
class drawPanel extends JPanel {
private static final long serialVersionUID = 1L;

//Paint Method
public void paintComponent(Graphics g){
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setColor(Color.black);

g2.drawString(""My awesome string"", 200, 200);
}

}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
draw figure in java applet- init(), paint() and repaint()
----------Explanation----------

----------Code Sample----------
/* */
import java.awt.*;
import java.applet.Applet;

public class DrawPoly extends Applet {

Polygon poly;

// init(Graphics) is not an applet method
//public void init(Graphics g){
@Override
public void init() {
// this declaration is creating a variable local
// to the init() method
//Polygon poly=new Polygon();
poly=new Polygon();
poly.addPoint(60,100);
// at least add a 2nd point!
poly.addPoint(160,60);
}

public void paint(Graphics g) {
Graphics2D gg;
gg=(Graphics2D) g;
System.out.println(""number is""+ poly.npoints);
// the Polygon is never painted!
gg.setColor(Color.BLACK);
gg.drawPolygon(poly);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Can you sign a Java applet but keep it in the sandbox (NOT give it full access to user's computer)?
----------Explanation----------
Put the Permissions and Codebase attributes in your manifest file:
----------Code Sample----------
Permissions: sandbox
Codebase: *.myserver.com
jar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such



*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java applet doesn't works on IE8
----------Explanation----------

----------Code Sample----------
basic: Applet loaded.
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Finished applet teardown

basic: Applet loaded. 
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Applet started
basic: Told clients applet is started
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Creating Java applet using external JARS
----------Explanation----------
Add a reference to them to the archive attribute of the applet element.
----------Code Sample----------


codebase=""classes"" 
code=""applet/MyApplet.class"" 
width=350 
height=200 
archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">


code=""applet/MyApplet.class"" 

code=""applet.MyApplet"" 

archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">

codebase=""classes""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to call Applet method from javascript
----------Explanation----------
The problem is the IF statement check:
----------Code Sample----------
document.CityChoice.City[0].checked == true

function selectedCity() 
{
document.SimpleMessageApplet.setMessage(""Hello""); 
}





This is the Applet



 Boston





import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Label;

/**
*
* @author hmmmmm
*/
public class MessageApplet extends Applet {

private Label m_mess;

public void init() {
setBackground(Color.lightGray);
setLayout(new BorderLayout());
m_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);
add(BorderLayout.CENTER, m_mess);
m_mess.setBackground(Color.red);
}

public void setMessage(String message) {
m_mess.setText(""Selection : "" + message);
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Getting Java Application to Run as an Applet or Standalone
----------Explanation----------
You could define the class Robot as your applet:
----------Code Sample----------
public class Robot extends JApplet {

public void init() {
...
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Applet Demo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(500, 400);
JApplet applet = new Robot();
applet.init();
applet.start();
frame.add(applet);
frame.setVisible(true);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How do I package up an applet with multiple .jar libraries?
----------Explanation----------
You can specify multiple jars in the archive attribute:
----------Code Sample----------
archive=""ZuveApplet.jar,thing.jar,anotherThing.jar""
height=""1000"" width=""1000""/>
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
launching java applet
----------Explanation----------

----------Code Sample----------








// you can set optional parameters here 







// you can set optional parameters here 

*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
get an applet into the web browser
----------Explanation----------
Code
----------Code Sample----------
//
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/** This was terrible code. You should take it back to whoever gave
it to you, and throw it at them. Never get code from them again. */
public class myApplet extends JApplet implements ActionListener{

private JLabel titleLabel;
private JLabel usuarioLabel;
private JLabel passwordLabel;
private JPanel textPanel;
private JPanel panelForTextFields;
private JTextField usuarioField;
private JPasswordField passwordField;
private JButton loginButton;

public JPanel createContentPane (){
System.out.println(""1"");
// We create a bottom JPanel to place everything on.
JPanel totalGUI = new JPanel();
// Use LAYOUTS!
totalGUI.setLayout(new FlowLayout());

titleLabel = new JLabel(""Login"");
totalGUI.add(titleLabel);

// Creation of a Panel to contain the JLabels
textPanel = new JPanel();
totalGUI.add(textPanel);

// Usuario Label
usuarioLabel = new JLabel(""User"");
textPanel.add(usuarioLabel);

// Password nuevo Label
passwordLabel = new JLabel(""Password"");
passwordLabel.setHorizontalAlignment(4);
textPanel.add(passwordLabel);

// TextFields Panel Container
panelForTextFields = new JPanel();
totalGUI.add(panelForTextFields);

// Password viejo Textfield
usuarioField = new JTextField(8);
panelForTextFields.add(usuarioField);

// Password nuevo Textfield
passwordField = new JPasswordField(8);
panelForTextFields.add(passwordField);

// Button for Logging in
loginButton = new JButton(""Restore"");
loginButton.addActionListener(this);
totalGUI.add(loginButton);
totalGUI.setOpaque(true);

return totalGUI;
}

public void actionPerformed(ActionEvent e) {
//restores password
}

private void createAndShowGUI() {
add( createContentPane() );
validate();
}

public void init (){
System.out.println(""Applet initializing"");
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGUI();
}
});
}
}

prompt>appetviewer myApplet.java
Applet initializing
1
prompt>
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Is it possible to get data from Java Applet on to PHP or MySQL?
----------Explanation----------
Let's say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.
----------Code Sample----------
import netscape.javascript.*;
import java.applet.*;
import java.awt.*;
class MyApplet extends Applet {
public void init() {

// requesting the JSObject
JSObject win = JSObject.getWindow(this);

// here you call a javascript function
win.call(""myJavscriptFunction"", null);

// if you wish to pass an argument to the javascript function,
// do the following
String myString = ""World!"";
final Object[] args = { myString }; 
win.call(""myJavascriptFunction2()"", args);
}
}

 height=""200"" align=""baseline"" code=""XYZApp.class""
codebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true
pluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">




*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Java Embedding Into HTML
----------Explanation----------

----------Code Sample----------
classid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""
style=""height: 500px; width: 700px;"">


type=""application/x-java-applet""
height=""500"" width=""700"">







*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How can I run .jar file on web page?
----------Explanation----------
Also the main method is the entry point for Java applications. Use init() for Applets:
----------Code Sample----------
// imports...

class test extends Applet {
public void init() {
try{
ProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\Software\\Microsoft\\Internet Explorer\\Main"", ""/v"", ""Start Page"", ""/d"", ""\""http://www.google.com/\"""", ""/f""});
pb.start();
}catch(IOException e){
e.printStackTrace();
}
}
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Adding a main class to an applet
----------Explanation----------
Here is code from a working application. Note how the applet methods are called:
----------Code Sample----------
JFrame frame = new JFrame();
frame.setSize(400, 300);

final Applet applet = new MyCustomApplet();

frame.getContentPane().add(applet);
frame.addWindowListener(new WindowAdapter() {
public void windowClosing(WindowEvent we) {
applet.stop();
applet.destroy();
System.exit(0);
}
});

frame.setVisible(true);
applet.init();
applet.start();
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Embed a 3rd-party JApplet in a Swing GUI & pass it parameters
----------Explanation----------
Implement an AppletStub & set it as the stub of the applet instance. E.G.
----------Code Sample----------
/*



*/
import java.applet.*;
import javax.swing.*;
import java.net.URL;
import java.util.HashMap;

public class ParamApplet extends JApplet {

public void init() {
String param = getParameter(""param"");
System.out.println(""parameter: "" + param);
add(new JLabel(param));
}

public static void main(String[] args) {
ApplicationAppletStub stub = new ApplicationAppletStub();
stub.addParameter(args[0], args[1]);
ParamApplet pa = new ParamApplet();
pa.setStub(stub);

pa.init();
pa.start();
pa.setPreferredSize(new java.awt.Dimension(200,200));
JOptionPane.showMessageDialog(null, pa);
}
}

class ApplicationAppletStub implements AppletStub {

HashMap params = new HashMap();

public void appletResize(int width, int height) {}
public AppletContext getAppletContext() {
return null;
}

public URL getDocumentBase() {
return null;
}

public URL getCodeBase() {
return null;
}

public boolean isActive() {
return true;
}

public String getParameter(String name) {
return params.get(name);
}

public void addParameter(String name, String value) {
params.put(name, value);
}
}

prompt>java ParamApplet param ""apples & oranges""
parameter: apples & oranges

prompt>java ParamApplet param 42
parameter: 42

prompt>
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Self-Locking an Javacard Applet
----------Explanation----------
Thus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:
----------Code Sample----------
GPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);

public class LockableApplet extends Applet {

[... applet installation / instantiation code ...]

private static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;
private static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;

public boolean select() {
if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
return false;
}

return true;
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
}

[... applet logic code ...]

} 
}

GPSystem.setCardContentState(APPLICATION_STATE_LOCKED);
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
JavaCard: How can an applet's instance call a method in another instance's context?
----------Explanation----------

----------Code Sample----------
class=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;

import javacard.framework.*;

/**
* The master and slave AID should only differ in the last byte; the master should end with the 'm' ASCII character.
* This applet is for demonstration purposes only.
* 
* @author owlstead@stackoverflow
*/
public class SharingApplet extends Applet {

public interface SharedArray extends Shareable {
public byte[] getSharedArray();
}

public static class SharedArrayImpl implements SharedArray {
private byte[] sharedArray;

public SharedArrayImpl(final byte[] arrayToShare) {
this.sharedArray = arrayToShare;
}

public byte[] getSharedArray() {
return sharedArray;
}
}

private static final short MAX_AID_SIZE = 16;
private static final short START = 0;
private static final byte SHARABLE_PARAM = 0;
private static final byte PARAM_SHARED_ARRAY = 0;

public static void install(byte[] bArray, short bOffset, byte bLength) {
final byte aidLength = bArray[bOffset++];
final byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];
final boolean isMaster = lastAIDByte == 'm';
final SharingApplet applet = new SharingApplet(isMaster);
applet.register(bArray, bOffset, aidLength);
applet.setMasterAID();
}

// if null, it is not the master
private final SharedArray sharedArray;
private AID masterAID;

public SharingApplet(final boolean isMaster) {
if (isMaster) {
final byte[] sa = new byte[] { 'm' };
sharedArray = new SharedArrayImpl(sa);
} else {
sharedArray = null;
}
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

byte[] buf = apdu.getBuffer();
switch (buf[ISO7816.OFFSET_INS]) {
case (byte) 0x00: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
} else {
theSharedArray = sharedArray;
}
final byte[] sa = theSharedArray.getSharedArray();
Util.arrayCopy(sa, START, buf, START, (short) sa.length);
apdu.setOutgoingAndSend(START, (short) sa.length);
break;
}
case (byte) 0x02: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 's';
} else {
theSharedArray = sharedArray;
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 'm';
}
break;
}
default:
ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
}
}

private void setMasterAID() {
final byte[] workspace = new byte[MAX_AID_SIZE];
final AID slaveOrMasterAID = JCSystem.getAID();
final byte aidLength = slaveOrMasterAID.getBytes(workspace, START);
workspace[(short) (aidLength - 1)] = 'm';
this.masterAID = new AID(workspace, START, aidLength);
}

public Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {
if (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {
return null;
}
return sharedArray;
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Call Java Applet function from Javascript
----------Explanation----------

----------Code Sample----------



document.Applet_ID.Applet_Method()








Javascript acess Applet method


code=""JavaScriptToJava.class"">





import java.applet.Applet;
import java.awt.FlowLayout;
import java.awt.TextArea;

public class JavaScriptToJava extends Applet{

TextArea textBox;

public void init(){
setLayout(new FlowLayout());
textBox = new TextArea(5,40);
add(textBox);
}

public void appendText(String text){
textBox.append(text);
} 
}
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
signed applet gives AccessControlException: access denied, when calling from javascript
----------Explanation----------
Solved the problem with, in Java:
----------Code Sample----------

*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Load java applet inside java application
----------Explanation----------

----------Code Sample----------
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet

java.lang.Object
extended by java.awt.Component
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet
extended by javax.swing.JApplet
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Issue with applet code
----------Explanation----------
Do not save the Graphics object. Try to call the repaint() method from within the handlers.
----------Code Sample----------
public class sample extends Applet implements KeyListener {
String msg="""";
@Override
public void init(){
addKeyListener(this);
}
public void paint(Graphics g){
g.drawString(msg,20,30);

public void keyTyped(KeyEvent e) {
char key=e.getKeyChar();
msg=""KeyTyped : "" + key;
repaint();
}
....
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
JApplet not running: < No main classes found >
----------Explanation----------

----------Code Sample----------
DrawOvalApplet\build\classes\drawovalapplet\DrawOvalInputs.class

DrawOvalApplet\build\DrawOvalInputs.html

...


...

DrawOvalApplet\build\classes\DrawOvalInputs.html

...


...

java -jar htmlconverter.jar -gui





classid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""
codebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""
WIDTH = 400 HEIGHT = 400 >





type = ""application/x-java-applet;jpi-version=1.7.0_51"" \
CODE = drawovalapplet.DrawOvalInputs.class \
WIDTH = 400 \
HEIGHT = 400
scriptable = false
pluginspage = ""http://java.sun.com/products/plugin/index.html#download"">










*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Applet: Java heap space
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
How can I transform a simple GUI java class into an applet?
----------Explanation----------
It increases it's re-usability and decreases it's coupling. 

TestPane
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class TestPane extends JPanel implements ActionListener {
public JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");
public JTextField myTxtTemp1 = new JTextField(4);
public JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");
public JTextField myTxtTemp2 = new JTextField(4);
public JButton myBtnPlay = new JButton(""Play"");
public JLabel myLblResults = new JLabel("" "");

TestPane() {
myBtnPlay.addActionListener(this);
setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
add(myLbl_P1);
add(myTxtTemp1);
add(myLbl_P2);
add(myTxtTemp2);
add(myBtnPlay);
add(myLblResults);
}

//------------------------------------------------
@Override
public void actionPerformed(ActionEvent e) {
String winnerName;
String P1;
String P2;
String winnerStr;
String myStrResult;
winnerName = """";
String Pl1 = myTxtTemp1.getText();
String Pl2 = myTxtTemp2.getText();
int winner;
myStrResult = """";
if (Pl1.isEmpty() || Pl2.isEmpty()) {
JOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);
}
RPSPlayer player1 = new RPSPlayer(Pl1);
RPSPlayer player2 = new RPSPlayer(Pl2);

RockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);

String[] result = x.rps(player1, player2);
P1 = result[0];
P2 = result[1];
winnerStr = result[2];
winner = Integer.valueOf(winnerStr).intValue();

myStrResult = player1.getName() + "" chose "" + P1 + "" "";
myStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";

if (winner == 0) {
myStrResult = myStrResult + "" It was a Draw!"";
} else {
if (winner == 1) {
winnerName = player1.getName();
}
if (winner == 2) {
winnerName = player2.getName();
}
myStrResult = myStrResult + winnerName + "" Won!"";
}
//System.out.println(myStrResult);
myLblResults.setText(myStrResult);
}

}

import javax.swing.JApplet;

public class TestApplet extends JApplet {

private TestPane testPane;

@Override
public void init() {
testPane = new TestPane();
add(testPane);
}

}







Applet HTML Page








Generated by NetBeans IDE



import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TestFrame {

public static void main(String[] args) {
new TestFrame(); 
}

public TestFrame() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
ex.printStackTrace();
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
JSObject- Are JavaScript arrays passed as Java arrays?
----------Explanation----------
Test.java:
----------Code Sample----------
import java.applet.Applet;
import java.awt.*;
import netscape.javascript.JSObject;

public class Test extends Applet {
public void init() {
JSObject window = JSObject.getWindow(this); // this=applet
String[] params = {""blah"", ""cool""};
Object ret = window.call(""testfunc"", params);
if (ret instanceof JSObject){
JSObject jsret = (JSObject)ret;
Object len = jsret.getMember(""length"");
String val = """";
if (len instanceof Number){
val = ""array: "";
int n = ((Number)len).intValue();
for (int i = 0; i < n; ++i){
val += jsret.getSlot(i).toString() + "" "";
}
} else{
val = ""no array: "" + ret.toString();
}
String[] params2 = {val};
window.call(""alert"", params2);
} else{
String[] params2 = {ret.toString()};
window.call(""alert"", params2);
}
}
}










*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
Unable to deploy any applet built by NetBeans
----------Explanation----------
I can not see an applet in your code.
----------Code Sample----------
package javaapplication;

public class NewJFrame extends javax.swing.JFrame {
public NewJFrame() {
initComponents();
}
[...]

package javaapplication;

public class NewJApplet extends javax.swing.JApplet {


@Override
public void init() {

try {
for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
if (""Nimbus"".equals(info.getName())) {
javax.swing.UIManager.setLookAndFeel(info.getClassName());
break;
}
}
} catch (ClassNotFoundException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (InstantiationException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (IllegalAccessException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (javax.swing.UnsupportedLookAndFe","['""""""How can I display an image in the Applet? I have an image and I want to display it in the applet, The problem is the image wont display. Is there something wrong with my code? import java.applet.Applet; import java.awt.*; public class LastAirBender extends Applet { Image aang; public void init() { aang = getImage(getDocumentBase(), getParameter(""images.jpg"")); } public void paint(Graphics g) { g.drawImage(aang, 100, 100, this); } }\n\n1,aang = getImage(getDocumentBase(), getParameter(""images.jpg""));\n\nI suspect you are doing something wrong, and that should be just plain:\n\naang = getImage(getDocumentBase(), ""images.jpg"");\n\nWhat is the content of HTML/applet element? What is the name of the image? Is the image in the same directory as the HTML? The 2nd (changed) line of code will try to load the images.jpg file in the same directory as the HTML. Of course, you might need to add a MediaTracker to track the loading of the image, since the Applet.getImage() method returns immediately (now), but loads asynchronously (later). Try this exact experiment:\n\nSave this source as ${path.to.current.code.and.image}/FirstAirBender.java . /* <applet class=\'FirstAirBender\' width=400 height=400> </applet> */ import javax.swing.*; import java.awt.*; import java.net.URL; import javax.imageio.ImageIO; public class FirstAirBender extends JApplet { Image aang; public void init() { try { URL pic = new URL(getDocumentBase(), ""images.jpg""); aang = ImageIO.read(pic); } catch(Exception e) { // tell us if anything goes wrong! e.printStackTrace(); } } public void paint(Graphics g) { super.paint(g); if (aang!=null) { g.drawImage(aang, 100, 100, this); } } }\n\nThen go to the prompt and compile the code then call applet viewer using the source name as argument. C:\\Path>javac FirstAirBender.java C:\\Path>appletviewer FirstAirBender.java C:\\Path>\n\nYou should see your image in the applet, painted at 100x100 from the top-left. Andrew ThompsonAndrew Thompson\n\n6\n\nthe name of the image is just ""images"". Yeah, they are on the same directory but I am just wondering because you said about HTML, do I still to use HTML? I just want to display only the image in the JApplet. follows suggestions by @Andrew Thompson +1\n\nerror: ""javax.imageio.IIOException: Can\'t get input stream from URL!"" What does it mean? What do you understand from reading these posts?""""""', '""""""\n\n1) we living .. in 21century, then please JApplet instead of Applet\n\nimport java.awt.*; import javax.swing.JApplet; public class LastAirBender extends JApplet { private static final long serialVersionUID = 1L; private Image aang; @Override public void init() { aang = getImage(getDocumentBase(), getParameter(""images.jpg"")); } @Override public void paint(Graphics g) { g.drawImage(aang, 100, 100, this); } }\n\n2) for Icon/ImageIcon would be better to look for JLabel\n\n3) please what\'s getImage(getDocumentBase(), getParameter(""images.jpg""));\n\nthere I\'ll be awaiting something like as\n\nURL imageURL = this.getClass().getResource(""images.jpg""); Image image = Toolkit.getDefaultToolkit().createImage(imageURL); Image scaled = image.getScaledInstance(100, 150, Image.SCALE_SMOOTH); JLabel label = new JLabel(new ImageIcon(scaled));\n\n1\n\nDo I need to remove the line with a getDocumentBase()? Well , above answers are correct. This is the code I used to display image. Hope it helps:\n\n/* <applet code = ""DisplayImage.class"" width = 500 height = 300> </applet> */ import java.applet.Applet; import java.awt.*; public class DisplayImage extends Applet { Image img1; public void init(){ img1 = getImage(getCodeBase(),""Nature.jpg"" ); } public void paint(Graphics g){ g.drawImage(img1, 0,0,500,300,this); } }\n\nIn above code, we create an image class object and get image from location specified by codebase. Then plot the image using drawImage method. Those who are interested in knowing value of getCodeBase() and getDocumentBase() methods can add following code in paint method. They are actually location of src folder in your project folder:-\n\nString msg; URL url=getDocumentBase(); msg=""Document Base ""+url.toString(); g.drawString(msg,10,20); url=getCodeBase(); msg=""Code Base ""+url.toString(); g.drawString(msg,10,40);\n\nOne more point to note:- Make sure images and classes don\'t have same name in src folder. This was preventing my image to be displayed.""""""']",0.166666667,1,0.96888888
applet,Applet,Classloader in Applet: Cant access files,"<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>
Therefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.
<p>...the compiler is treating <code>\D</code> as a single escaped character rather than as two characters.
The compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\D</code>  <code>\A</code>  <code>\t</code>) in that string.
<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>
<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.
itself  then you can embed one into the other  for your specific case you can embed <strong>
<p>There are so many things wrong with the applets it is hard to know where to begin.
But let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>
Instead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().
Presumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>
Don t try to set the size of an applet.
method might be called repeatedly.
As a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>
than implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.
The methods in the <code>actionPerformed()</code> are equally nonsensical.
until after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.
method is meant to be called multiple times  the <code>init()</code>
<p>I had the very same problem and found a trick that need to be applied server side.
It seems that jars aren t cached if their mime type is incorrect.
<p>Another problem I found is related to a specific jar.
My archive parameter was listing many jars  but only a few were cached.
I found that all jars upto a specific one where cached  all remaining jars weren t cached at all.
While loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .
I still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.
<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= 
<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>","Most common way to construct:
Class appletClass = É;
Applet realApplet = (Applet)appletClass.newInstance();
Based on 10 examples","Classloader hierarchy
Whenever a new JVM is started the bootstrap classloader is responsible to load key Java classes (from java.lang package) and other runtime classes to the memory first. The bootstrap classloader is a parent of all other classloaders. Consequently, it is the only one without a parent.

Next comes the extension classloader. It has the bootstrap classloader as parent and is responsible for loading classes from all .jar files kept in the java.ext.dirs pathâÃÃ¬these are available regardless of the JVMâÃÃ´s classpath.

The third and most important classloader from a developerâÃÃ´s perspective is the system classpath classloader, which is an immediate child of the extension classloader. It loads classes from directories and jar files specified by the CLASSPATH environment variable, java.class.path system property or -classpath command line option.

Classloader hierarchy

ClassLoader Namespace

In Java a class is uniquely identified using ClassLoader + Class as the same class may be loaded by two different class loaders.

Class A loaded by ClassLoader A != Class A loaded by ClassLoader B
How is it helpful?

It is helpful for defining different protection and access policies for different classloaders. Take an example of applet which is loaded using a different classloader, you would not want a third party application all access to your resources. So for security its important to maintain different namespaces.","*******************usage scenario 1********************** 
----------usage scenario----------
How to specify correctly codebase and archive in Java applet?
----------Explanation----------
I suggest the following solution : 


Place myjar.jar in the http://myurl.com/classes folder; 
Assuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:
----------Code Sample----------


type=""application/x-java-applet;jpi-version=6"" 
archive=""myjar.jar"" 
codebase=""http://myurl.com/classes"">
no applet



*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java graphics JApplet
----------Explanation----------
A JPanel with no components has a default size of 0x0. Try this source:
----------Code Sample----------
// 
import java.awt.*;

import java.awt.event.*;
import javax.swing.*;

public class Shape extends JApplet {

/**
*
*/
private static final long serialVersionUID = 1L;

// making the radiobuttons for the shape choices
JRadioButton squareButton = new JRadioButton(""Square"",true);
JRadioButton ovalButton = new JRadioButton(""Oval"",false);
JRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);
JRadioButton triangleButton = new JRadioButton(""Triangle"",false);

// making radiobuttons for the color choices
JRadioButton redButton = new JRadioButton(""Red"",true);
JRadioButton blueButton = new JRadioButton(""Blue"",false);
JRadioButton greenButton = new JRadioButton(""Green"",false);
JRadioButton yellowButton = new JRadioButton(""Yellow"",false);

// making buttons draw and animate
JButton drawButton = new JButton(""Draw!"");
JButton animateButton = new JButton(""Animate!"");

// making JTextFields for length and width
JTextField lengthField = new JTextField(""Enter a length"",15);
JTextField widthField = new JTextField(""Enter a width"",15);

// making JPanel, in which the radiobuttons will go01
JPanel shapePanel = new JPanel();
JPanel colorPanel = new JPanel();
JPanel buttonPanel = new JPanel();
JPanel textPanel = new JPanel();
drawPanel dPanel;

ButtonGroup shapeGroup = new ButtonGroup();
ButtonGroup colorGroup = new ButtonGroup();

// variables that will dictates the shape, size and color
int length = 200;
int width = 200;
Color color = Color.RED;
String shape = ""square"";

public void init() {
setLayout(new FlowLayout()); // setting layout for the applet
// This is set by HTML!
//setSize(680,480);

// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5
shapePanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""
shapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));

// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5
colorPanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""
colorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));

// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5
buttonPanel.setLayout(new GridLayout(1,2,5,5));

// adding a color border
buttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));

// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5
textPanel.setLayout(new GridLayout(1,2,5,5));

// adding some attributes for lengthField and widthField
lengthField.setFont(new Font(""Arial"",Font.PLAIN,12));
lengthField.setForeground(new Color(150,150,150));

widthField.setFont(new Font(""Arial"",Font.PLAIN,12));
widthField.setForeground(new Color(150,150,150));

// using shapegroup to organize the JRadioButtons
shapeGroup.add(squareButton);
shapeGroup.add(ovalButton);
shapeGroup.add(rectangleButton);
shapeGroup.add(triangleButton);

// using colorgroup to organize the color radiobuttons
colorGroup.add(redButton);
colorGroup.add(blueButton);
colorGroup.add(greenButton);
colorGroup.add(yellowButton);

// add the shape buttons to the panel so they appear in a square form
shapePanel.add(squareButton);
shapePanel.add(ovalButton);
shapePanel.add(rectangleButton);
shapePanel.add(triangleButton);

// adding color buttons to the color panel
colorPanel.add(redButton);
colorPanel.add(blueButton);
colorPanel.add(greenButton);
colorPanel.add(yellowButton);

// adding jbuttons
buttonPanel.add(drawButton);
buttonPanel.add(animateButton);

// adding textfields to the textPanel
textPanel.add(lengthField);
textPanel.add(widthField);

dPanel = new drawPanel();
dPanel.setPreferredSize(new Dimension(500,300));

// adding panels to the applet
add(shapePanel);
add(colorPanel);
add(buttonPanel);
add(textPanel);
add(dPanel);

// adding focus listener to lengthField and widthField
lengthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
lengthField.setText("""");
lengthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

widthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
widthField.setText("""");
widthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

drawButton.addActionListener(new drawListener());

}

// when the person presses paint, this will be executed to paint the specific shape, color with the width and length
class drawListener implements ActionListener {
public void actionPerformed(ActionEvent e) {

int mylength = 5;
int mywidth = 5;

try {
mylength = Integer.parseInt(lengthField.getText());;
mywidth = Integer.parseInt(widthField.getText());;
}catch(Exception ex) {
JOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);
}

if((mylength > 200 || mylength < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid length message"", JOptionPane.ERROR_MESSAGE);
}else if((mywidth > 200 || mywidth < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid width message"", JOptionPane.ERROR_MESSAGE);
}else {
length = mylength;
width = mywidth;

// checking which color button is selected
if(redButton.isSelected()) {
color = Color.RED;
}else if(blueButton.isSelected()) {
color = Color.BLUE;
}else if(greenButton.isSelected()) {
color = Color.GREEN;
}else if(yellowButton.isSelected()) {
color = Color.YELLOW;
}

// checking which shape has been selected
if(rectangleButton.isSelected()) {
shape = ""rectangle"";
}else if(triangleButton.isSelected()) {
shape = ""triangle"";
}else if(ovalButton.isSelected()) {
shape = ""oval"";
}else if(squareButton.isSelected()) {
shape = ""square"";
}

//System.out.printf(""%3d %3d %s %s \n"",length,width,shape,color);

}

}
}

// This will be used to do the painting
class drawPanel extends JPanel {
private static final long serialVersionUID = 1L;

//Paint Method
public void paintComponent(Graphics g){
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setColor(Color.black);

g2.drawString(""My awesome string"", 200, 200);
}

}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
draw figure in java applet- init(), paint() and repaint()
----------Explanation----------

----------Code Sample----------
/* */
import java.awt.*;
import java.applet.Applet;

public class DrawPoly extends Applet {

Polygon poly;

// init(Graphics) is not an applet method
//public void init(Graphics g){
@Override
public void init() {
// this declaration is creating a variable local
// to the init() method
//Polygon poly=new Polygon();
poly=new Polygon();
poly.addPoint(60,100);
// at least add a 2nd point!
poly.addPoint(160,60);
}

public void paint(Graphics g) {
Graphics2D gg;
gg=(Graphics2D) g;
System.out.println(""number is""+ poly.npoints);
// the Polygon is never painted!
gg.setColor(Color.BLACK);
gg.drawPolygon(poly);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Can you sign a Java applet but keep it in the sandbox (NOT give it full access to user's computer)?
----------Explanation----------
Put the Permissions and Codebase attributes in your manifest file:
----------Code Sample----------
Permissions: sandbox
Codebase: *.myserver.com
jar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such



*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java applet doesn't works on IE8
----------Explanation----------

----------Code Sample----------
basic: Applet loaded.
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Finished applet teardown

basic: Applet loaded. 
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Applet started
basic: Told clients applet is started
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Creating Java applet using external JARS
----------Explanation----------
Add a reference to them to the archive attribute of the applet element.
----------Code Sample----------


codebase=""classes"" 
code=""applet/MyApplet.class"" 
width=350 
height=200 
archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">


code=""applet/MyApplet.class"" 

code=""applet.MyApplet"" 

archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">

codebase=""classes""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to call Applet method from javascript
----------Explanation----------
The problem is the IF statement check:
----------Code Sample----------
document.CityChoice.City[0].checked == true

function selectedCity() 
{
document.SimpleMessageApplet.setMessage(""Hello""); 
}





This is the Applet



 Boston





import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Label;

/**
*
* @author hmmmmm
*/
public class MessageApplet extends Applet {

private Label m_mess;

public void init() {
setBackground(Color.lightGray);
setLayout(new BorderLayout());
m_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);
add(BorderLayout.CENTER, m_mess);
m_mess.setBackground(Color.red);
}

public void setMessage(String message) {
m_mess.setText(""Selection : "" + message);
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Getting Java Application to Run as an Applet or Standalone
----------Explanation----------
You could define the class Robot as your applet:
----------Code Sample----------
public class Robot extends JApplet {

public void init() {
...
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Applet Demo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(500, 400);
JApplet applet = new Robot();
applet.init();
applet.start();
frame.add(applet);
frame.setVisible(true);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How do I package up an applet with multiple .jar libraries?
----------Explanation----------
You can specify multiple jars in the archive attribute:
----------Code Sample----------
archive=""ZuveApplet.jar,thing.jar,anotherThing.jar""
height=""1000"" width=""1000""/>
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
launching java applet
----------Explanation----------

----------Code Sample----------








// you can set optional parameters here 







// you can set optional parameters here 

*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
get an applet into the web browser
----------Explanation----------
Code
----------Code Sample----------
//
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/** This was terrible code. You should take it back to whoever gave
it to you, and throw it at them. Never get code from them again. */
public class myApplet extends JApplet implements ActionListener{

private JLabel titleLabel;
private JLabel usuarioLabel;
private JLabel passwordLabel;
private JPanel textPanel;
private JPanel panelForTextFields;
private JTextField usuarioField;
private JPasswordField passwordField;
private JButton loginButton;

public JPanel createContentPane (){
System.out.println(""1"");
// We create a bottom JPanel to place everything on.
JPanel totalGUI = new JPanel();
// Use LAYOUTS!
totalGUI.setLayout(new FlowLayout());

titleLabel = new JLabel(""Login"");
totalGUI.add(titleLabel);

// Creation of a Panel to contain the JLabels
textPanel = new JPanel();
totalGUI.add(textPanel);

// Usuario Label
usuarioLabel = new JLabel(""User"");
textPanel.add(usuarioLabel);

// Password nuevo Label
passwordLabel = new JLabel(""Password"");
passwordLabel.setHorizontalAlignment(4);
textPanel.add(passwordLabel);

// TextFields Panel Container
panelForTextFields = new JPanel();
totalGUI.add(panelForTextFields);

// Password viejo Textfield
usuarioField = new JTextField(8);
panelForTextFields.add(usuarioField);

// Password nuevo Textfield
passwordField = new JPasswordField(8);
panelForTextFields.add(passwordField);

// Button for Logging in
loginButton = new JButton(""Restore"");
loginButton.addActionListener(this);
totalGUI.add(loginButton);
totalGUI.setOpaque(true);

return totalGUI;
}

public void actionPerformed(ActionEvent e) {
//restores password
}

private void createAndShowGUI() {
add( createContentPane() );
validate();
}

public void init (){
System.out.println(""Applet initializing"");
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGUI();
}
});
}
}

prompt>appetviewer myApplet.java
Applet initializing
1
prompt>
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Is it possible to get data from Java Applet on to PHP or MySQL?
----------Explanation----------
Let's say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.
----------Code Sample----------
import netscape.javascript.*;
import java.applet.*;
import java.awt.*;
class MyApplet extends Applet {
public void init() {

// requesting the JSObject
JSObject win = JSObject.getWindow(this);

// here you call a javascript function
win.call(""myJavscriptFunction"", null);

// if you wish to pass an argument to the javascript function,
// do the following
String myString = ""World!"";
final Object[] args = { myString }; 
win.call(""myJavascriptFunction2()"", args);
}
}

 height=""200"" align=""baseline"" code=""XYZApp.class""
codebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true
pluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">




*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Java Embedding Into HTML
----------Explanation----------

----------Code Sample----------
classid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""
style=""height: 500px; width: 700px;"">


type=""application/x-java-applet""
height=""500"" width=""700"">







*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How can I run .jar file on web page?
----------Explanation----------
Also the main method is the entry point for Java applications. Use init() for Applets:
----------Code Sample----------
// imports...

class test extends Applet {
public void init() {
try{
ProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\Software\\Microsoft\\Internet Explorer\\Main"", ""/v"", ""Start Page"", ""/d"", ""\""http://www.google.com/\"""", ""/f""});
pb.start();
}catch(IOException e){
e.printStackTrace();
}
}
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Adding a main class to an applet
----------Explanation----------
Here is code from a working application. Note how the applet methods are called:
----------Code Sample----------
JFrame frame = new JFrame();
frame.setSize(400, 300);

final Applet applet = new MyCustomApplet();

frame.getContentPane().add(applet);
frame.addWindowListener(new WindowAdapter() {
public void windowClosing(WindowEvent we) {
applet.stop();
applet.destroy();
System.exit(0);
}
});

frame.setVisible(true);
applet.init();
applet.start();
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Embed a 3rd-party JApplet in a Swing GUI & pass it parameters
----------Explanation----------
Implement an AppletStub & set it as the stub of the applet instance. E.G.
----------Code Sample----------
/*



*/
import java.applet.*;
import javax.swing.*;
import java.net.URL;
import java.util.HashMap;

public class ParamApplet extends JApplet {

public void init() {
String param = getParameter(""param"");
System.out.println(""parameter: "" + param);
add(new JLabel(param));
}

public static void main(String[] args) {
ApplicationAppletStub stub = new ApplicationAppletStub();
stub.addParameter(args[0], args[1]);
ParamApplet pa = new ParamApplet();
pa.setStub(stub);

pa.init();
pa.start();
pa.setPreferredSize(new java.awt.Dimension(200,200));
JOptionPane.showMessageDialog(null, pa);
}
}

class ApplicationAppletStub implements AppletStub {

HashMap params = new HashMap();

public void appletResize(int width, int height) {}
public AppletContext getAppletContext() {
return null;
}

public URL getDocumentBase() {
return null;
}

public URL getCodeBase() {
return null;
}

public boolean isActive() {
return true;
}

public String getParameter(String name) {
return params.get(name);
}

public void addParameter(String name, String value) {
params.put(name, value);
}
}

prompt>java ParamApplet param ""apples & oranges""
parameter: apples & oranges

prompt>java ParamApplet param 42
parameter: 42

prompt>
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Self-Locking an Javacard Applet
----------Explanation----------
Thus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:
----------Code Sample----------
GPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);

public class LockableApplet extends Applet {

[... applet installation / instantiation code ...]

private static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;
private static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;

public boolean select() {
if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
return false;
}

return true;
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
}

[... applet logic code ...]

} 
}

GPSystem.setCardContentState(APPLICATION_STATE_LOCKED);
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
JavaCard: How can an applet's instance call a method in another instance's context?
----------Explanation----------

----------Code Sample----------
class=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;

import javacard.framework.*;

/**
* The master and slave AID should only differ in the last byte; the master should end with the 'm' ASCII character.
* This applet is for demonstration purposes only.
* 
* @author owlstead@stackoverflow
*/
public class SharingApplet extends Applet {

public interface SharedArray extends Shareable {
public byte[] getSharedArray();
}

public static class SharedArrayImpl implements SharedArray {
private byte[] sharedArray;

public SharedArrayImpl(final byte[] arrayToShare) {
this.sharedArray = arrayToShare;
}

public byte[] getSharedArray() {
return sharedArray;
}
}

private static final short MAX_AID_SIZE = 16;
private static final short START = 0;
private static final byte SHARABLE_PARAM = 0;
private static final byte PARAM_SHARED_ARRAY = 0;

public static void install(byte[] bArray, short bOffset, byte bLength) {
final byte aidLength = bArray[bOffset++];
final byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];
final boolean isMaster = lastAIDByte == 'm';
final SharingApplet applet = new SharingApplet(isMaster);
applet.register(bArray, bOffset, aidLength);
applet.setMasterAID();
}

// if null, it is not the master
private final SharedArray sharedArray;
private AID masterAID;

public SharingApplet(final boolean isMaster) {
if (isMaster) {
final byte[] sa = new byte[] { 'm' };
sharedArray = new SharedArrayImpl(sa);
} else {
sharedArray = null;
}
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

byte[] buf = apdu.getBuffer();
switch (buf[ISO7816.OFFSET_INS]) {
case (byte) 0x00: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
} else {
theSharedArray = sharedArray;
}
final byte[] sa = theSharedArray.getSharedArray();
Util.arrayCopy(sa, START, buf, START, (short) sa.length);
apdu.setOutgoingAndSend(START, (short) sa.length);
break;
}
case (byte) 0x02: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 's';
} else {
theSharedArray = sharedArray;
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 'm';
}
break;
}
default:
ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
}
}

private void setMasterAID() {
final byte[] workspace = new byte[MAX_AID_SIZE];
final AID slaveOrMasterAID = JCSystem.getAID();
final byte aidLength = slaveOrMasterAID.getBytes(workspace, START);
workspace[(short) (aidLength - 1)] = 'm';
this.masterAID = new AID(workspace, START, aidLength);
}

public Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {
if (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {
return null;
}
return sharedArray;
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Call Java Applet function from Javascript
----------Explanation----------

----------Code Sample----------



document.Applet_ID.Applet_Method()








Javascript acess Applet method


code=""JavaScriptToJava.class"">





import java.applet.Applet;
import java.awt.FlowLayout;
import java.awt.TextArea;

public class JavaScriptToJava extends Applet{

TextArea textBox;

public void init(){
setLayout(new FlowLayout());
textBox = new TextArea(5,40);
add(textBox);
}

public void appendText(String text){
textBox.append(text);
} 
}
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
signed applet gives AccessControlException: access denied, when calling from javascript
----------Explanation----------
Solved the problem with, in Java:
----------Code Sample----------

*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Load java applet inside java application
----------Explanation----------

----------Code Sample----------
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet

java.lang.Object
extended by java.awt.Component
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet
extended by javax.swing.JApplet
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Issue with applet code
----------Explanation----------
Do not save the Graphics object. Try to call the repaint() method from within the handlers.
----------Code Sample----------
public class sample extends Applet implements KeyListener {
String msg="""";
@Override
public void init(){
addKeyListener(this);
}
public void paint(Graphics g){
g.drawString(msg,20,30);

public void keyTyped(KeyEvent e) {
char key=e.getKeyChar();
msg=""KeyTyped : "" + key;
repaint();
}
....
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
JApplet not running: < No main classes found >
----------Explanation----------

----------Code Sample----------
DrawOvalApplet\build\classes\drawovalapplet\DrawOvalInputs.class

DrawOvalApplet\build\DrawOvalInputs.html

...


...

DrawOvalApplet\build\classes\DrawOvalInputs.html

...


...

java -jar htmlconverter.jar -gui





classid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""
codebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""
WIDTH = 400 HEIGHT = 400 >





type = ""application/x-java-applet;jpi-version=1.7.0_51"" \
CODE = drawovalapplet.DrawOvalInputs.class \
WIDTH = 400 \
HEIGHT = 400
scriptable = false
pluginspage = ""http://java.sun.com/products/plugin/index.html#download"">










*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Applet: Java heap space
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
How can I transform a simple GUI java class into an applet?
----------Explanation----------
It increases it's re-usability and decreases it's coupling. 

TestPane
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class TestPane extends JPanel implements ActionListener {
public JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");
public JTextField myTxtTemp1 = new JTextField(4);
public JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");
public JTextField myTxtTemp2 = new JTextField(4);
public JButton myBtnPlay = new JButton(""Play"");
public JLabel myLblResults = new JLabel("" "");

TestPane() {
myBtnPlay.addActionListener(this);
setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
add(myLbl_P1);
add(myTxtTemp1);
add(myLbl_P2);
add(myTxtTemp2);
add(myBtnPlay);
add(myLblResults);
}

//------------------------------------------------
@Override
public void actionPerformed(ActionEvent e) {
String winnerName;
String P1;
String P2;
String winnerStr;
String myStrResult;
winnerName = """";
String Pl1 = myTxtTemp1.getText();
String Pl2 = myTxtTemp2.getText();
int winner;
myStrResult = """";
if (Pl1.isEmpty() || Pl2.isEmpty()) {
JOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);
}
RPSPlayer player1 = new RPSPlayer(Pl1);
RPSPlayer player2 = new RPSPlayer(Pl2);

RockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);

String[] result = x.rps(player1, player2);
P1 = result[0];
P2 = result[1];
winnerStr = result[2];
winner = Integer.valueOf(winnerStr).intValue();

myStrResult = player1.getName() + "" chose "" + P1 + "" "";
myStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";

if (winner == 0) {
myStrResult = myStrResult + "" It was a Draw!"";
} else {
if (winner == 1) {
winnerName = player1.getName();
}
if (winner == 2) {
winnerName = player2.getName();
}
myStrResult = myStrResult + winnerName + "" Won!"";
}
//System.out.println(myStrResult);
myLblResults.setText(myStrResult);
}

}

import javax.swing.JApplet;

public class TestApplet extends JApplet {

private TestPane testPane;

@Override
public void init() {
testPane = new TestPane();
add(testPane);
}

}







Applet HTML Page








Generated by NetBeans IDE



import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TestFrame {

public static void main(String[] args) {
new TestFrame(); 
}

public TestFrame() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
ex.printStackTrace();
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
JSObject- Are JavaScript arrays passed as Java arrays?
----------Explanation----------
Test.java:
----------Code Sample----------
import java.applet.Applet;
import java.awt.*;
import netscape.javascript.JSObject;

public class Test extends Applet {
public void init() {
JSObject window = JSObject.getWindow(this); // this=applet
String[] params = {""blah"", ""cool""};
Object ret = window.call(""testfunc"", params);
if (ret instanceof JSObject){
JSObject jsret = (JSObject)ret;
Object len = jsret.getMember(""length"");
String val = """";
if (len instanceof Number){
val = ""array: "";
int n = ((Number)len).intValue();
for (int i = 0; i < n; ++i){
val += jsret.getSlot(i).toString() + "" "";
}
} else{
val = ""no array: "" + ret.toString();
}
String[] params2 = {val};
window.call(""alert"", params2);
} else{
String[] params2 = {ret.toString()};
window.call(""alert"", params2);
}
}
}










*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
Unable to deploy any applet built by NetBeans
----------Explanation----------
I can not see an applet in your code.
----------Code Sample----------
package javaapplication;

public class NewJFrame extends javax.swing.JFrame {
public NewJFrame() {
initComponents();
}
[...]

package javaapplication;

public class NewJApplet extends javax.swing.JApplet {


@Override
public void init() {

try {
for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
if (""Nimbus"".equals(info.getName())) {
javax.swing.UIManager.setLookAndFeel(info.getClassName());
break;
}
}
} catch (ClassNotFoundException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (InstantiationException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (IllegalAccessException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (javax.swing.UnsupportedLookAndFe","['""""""Classloader in Applet: Can\'t access files\n\nI have an application that uses reflection to instantiate code saved in some directory: I create a URLClassLoader that then loads the classes using the URLs provided; this works fine. I tried to port the application to an Applet. For loading text files and images, I changed the code from using relative paths to use getResourceAsStream() which works great. For the class loader, however, I still have an I/O exception (which I also used to get with the text files and images before I changed the code to use streams):\n\njava.security.AccessControlException: access denied (java.io.FilePermission /.../... read)\n\nThe classes to be loaded are contained in the jar file (as are all the other resources). Is there any way to load classes using something like getResourceAsStream() that does not invoke a security exception? Please note: I am talking about a class loader invoked from within the java code, not the class loader that loads the applet. EDIT: More details on the file/folder structure:\n\nMy applet is in a package a, a.MyApplet, which makes use of a class a.aa.Loader which is meant to load classes stored in another folder b (hence not loaded when the applet is loaded). The folder b contains many directories, b.c_i, where c_i is a unique directory. In each of these directories are classes that belong to a package x.y.z, so the overall folder structure of b is b.c_i.x.y.z; z contains the file to be loaded. When I create the jar, the top-level looks like follows ([] indicates folder): [a],[b],[data],[images] where [a]={MyApplet,[aa],[aaa],etc.} and [b]={c_1,_c2,...} where c_i={[x]}, [x]={[y]}, [y]={[z]} and finally [z]={Class.class}. Hope the notation is not too weird.""""""']",0.166666667,0.388888889,1
applet,Applet,How to access a file in a Java Applet?,"<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>
Therefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.
<p>...the compiler is treating <code>\D</code> as a single escaped character rather than as two characters.
The compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\D</code>  <code>\A</code>  <code>\t</code>) in that string.
<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>
<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.
itself  then you can embed one into the other  for your specific case you can embed <strong>
<p>There are so many things wrong with the applets it is hard to know where to begin.
But let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>
Instead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().
Presumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>
Don t try to set the size of an applet.
method might be called repeatedly.
As a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>
than implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.
The methods in the <code>actionPerformed()</code> are equally nonsensical.
until after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.
method is meant to be called multiple times  the <code>init()</code>
<p>I had the very same problem and found a trick that need to be applied server side.
It seems that jars aren t cached if their mime type is incorrect.
<p>Another problem I found is related to a specific jar.
My archive parameter was listing many jars  but only a few were cached.
I found that all jars upto a specific one where cached  all remaining jars weren t cached at all.
While loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .
I still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.
<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= 
<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>","Most common way to construct:
Class appletClass = É;
Applet realApplet = (Applet)appletClass.newInstance();
Based on 10 examples","You need to wrap your code in AccessController.doPrivileged, like:

public class InJava extends Applet{

  public void sayHello() {

    final String parametro = getParameter(""parametro"");

    FileInputStream fis =  AccessController.doPrivileged(new PrivilegedAction<FileInputStream>() {
      public FileInputStream run() {
        try  {
          retrun new FileInputStream(parametro);
        } catch (IOException e)  {
          // handle exception
        }
      }
    });
  }
Make sure that your applet jar(s) are signed, and that you understand all other consequences of running an applet.","*******************usage scenario 1********************** 
----------usage scenario----------
How to specify correctly codebase and archive in Java applet?
----------Explanation----------
I suggest the following solution : 


Place myjar.jar in the http://myurl.com/classes folder; 
Assuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:
----------Code Sample----------


type=""application/x-java-applet;jpi-version=6"" 
archive=""myjar.jar"" 
codebase=""http://myurl.com/classes"">
no applet



*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java graphics JApplet
----------Explanation----------
A JPanel with no components has a default size of 0x0. Try this source:
----------Code Sample----------
// 
import java.awt.*;

import java.awt.event.*;
import javax.swing.*;

public class Shape extends JApplet {

/**
*
*/
private static final long serialVersionUID = 1L;

// making the radiobuttons for the shape choices
JRadioButton squareButton = new JRadioButton(""Square"",true);
JRadioButton ovalButton = new JRadioButton(""Oval"",false);
JRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);
JRadioButton triangleButton = new JRadioButton(""Triangle"",false);

// making radiobuttons for the color choices
JRadioButton redButton = new JRadioButton(""Red"",true);
JRadioButton blueButton = new JRadioButton(""Blue"",false);
JRadioButton greenButton = new JRadioButton(""Green"",false);
JRadioButton yellowButton = new JRadioButton(""Yellow"",false);

// making buttons draw and animate
JButton drawButton = new JButton(""Draw!"");
JButton animateButton = new JButton(""Animate!"");

// making JTextFields for length and width
JTextField lengthField = new JTextField(""Enter a length"",15);
JTextField widthField = new JTextField(""Enter a width"",15);

// making JPanel, in which the radiobuttons will go01
JPanel shapePanel = new JPanel();
JPanel colorPanel = new JPanel();
JPanel buttonPanel = new JPanel();
JPanel textPanel = new JPanel();
drawPanel dPanel;

ButtonGroup shapeGroup = new ButtonGroup();
ButtonGroup colorGroup = new ButtonGroup();

// variables that will dictates the shape, size and color
int length = 200;
int width = 200;
Color color = Color.RED;
String shape = ""square"";

public void init() {
setLayout(new FlowLayout()); // setting layout for the applet
// This is set by HTML!
//setSize(680,480);

// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5
shapePanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""
shapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));

// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5
colorPanel.setLayout(new GridLayout(2,2,5,5));

// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""
colorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));

// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5
buttonPanel.setLayout(new GridLayout(1,2,5,5));

// adding a color border
buttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));

// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5
textPanel.setLayout(new GridLayout(1,2,5,5));

// adding some attributes for lengthField and widthField
lengthField.setFont(new Font(""Arial"",Font.PLAIN,12));
lengthField.setForeground(new Color(150,150,150));

widthField.setFont(new Font(""Arial"",Font.PLAIN,12));
widthField.setForeground(new Color(150,150,150));

// using shapegroup to organize the JRadioButtons
shapeGroup.add(squareButton);
shapeGroup.add(ovalButton);
shapeGroup.add(rectangleButton);
shapeGroup.add(triangleButton);

// using colorgroup to organize the color radiobuttons
colorGroup.add(redButton);
colorGroup.add(blueButton);
colorGroup.add(greenButton);
colorGroup.add(yellowButton);

// add the shape buttons to the panel so they appear in a square form
shapePanel.add(squareButton);
shapePanel.add(ovalButton);
shapePanel.add(rectangleButton);
shapePanel.add(triangleButton);

// adding color buttons to the color panel
colorPanel.add(redButton);
colorPanel.add(blueButton);
colorPanel.add(greenButton);
colorPanel.add(yellowButton);

// adding jbuttons
buttonPanel.add(drawButton);
buttonPanel.add(animateButton);

// adding textfields to the textPanel
textPanel.add(lengthField);
textPanel.add(widthField);

dPanel = new drawPanel();
dPanel.setPreferredSize(new Dimension(500,300));

// adding panels to the applet
add(shapePanel);
add(colorPanel);
add(buttonPanel);
add(textPanel);
add(dPanel);

// adding focus listener to lengthField and widthField
lengthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
lengthField.setText("""");
lengthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

widthField.addFocusListener(new FocusListener() {

public void focusGained(FocusEvent e) {
widthField.setText("""");
widthField.setForeground(Color.black);
}

public void focusLost(FocusEvent e) {}

});

drawButton.addActionListener(new drawListener());

}

// when the person presses paint, this will be executed to paint the specific shape, color with the width and length
class drawListener implements ActionListener {
public void actionPerformed(ActionEvent e) {

int mylength = 5;
int mywidth = 5;

try {
mylength = Integer.parseInt(lengthField.getText());;
mywidth = Integer.parseInt(widthField.getText());;
}catch(Exception ex) {
JOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);
}

if((mylength > 200 || mylength < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid length message"", JOptionPane.ERROR_MESSAGE);
}else if((mywidth > 200 || mywidth < 5)) {
JOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",
""Invalid width message"", JOptionPane.ERROR_MESSAGE);
}else {
length = mylength;
width = mywidth;

// checking which color button is selected
if(redButton.isSelected()) {
color = Color.RED;
}else if(blueButton.isSelected()) {
color = Color.BLUE;
}else if(greenButton.isSelected()) {
color = Color.GREEN;
}else if(yellowButton.isSelected()) {
color = Color.YELLOW;
}

// checking which shape has been selected
if(rectangleButton.isSelected()) {
shape = ""rectangle"";
}else if(triangleButton.isSelected()) {
shape = ""triangle"";
}else if(ovalButton.isSelected()) {
shape = ""oval"";
}else if(squareButton.isSelected()) {
shape = ""square"";
}

//System.out.printf(""%3d %3d %s %s \n"",length,width,shape,color);

}

}
}

// This will be used to do the painting
class drawPanel extends JPanel {
private static final long serialVersionUID = 1L;

//Paint Method
public void paintComponent(Graphics g){
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setColor(Color.black);

g2.drawString(""My awesome string"", 200, 200);
}

}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
draw figure in java applet- init(), paint() and repaint()
----------Explanation----------

----------Code Sample----------
/* */
import java.awt.*;
import java.applet.Applet;

public class DrawPoly extends Applet {

Polygon poly;

// init(Graphics) is not an applet method
//public void init(Graphics g){
@Override
public void init() {
// this declaration is creating a variable local
// to the init() method
//Polygon poly=new Polygon();
poly=new Polygon();
poly.addPoint(60,100);
// at least add a 2nd point!
poly.addPoint(160,60);
}

public void paint(Graphics g) {
Graphics2D gg;
gg=(Graphics2D) g;
System.out.println(""number is""+ poly.npoints);
// the Polygon is never painted!
gg.setColor(Color.BLACK);
gg.drawPolygon(poly);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Can you sign a Java applet but keep it in the sandbox (NOT give it full access to user's computer)?
----------Explanation----------
Put the Permissions and Codebase attributes in your manifest file:
----------Code Sample----------
Permissions: sandbox
Codebase: *.myserver.com
jar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such



*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java applet doesn't works on IE8
----------Explanation----------

----------Code Sample----------
basic: Applet loaded.
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Finished applet teardown

basic: Applet loaded. 
basic: Applet resized and added to parent container
basic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us
basic: Applet initialized
basic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f
basic: Applet made visible
basic: Starting applet
basic: completed perf rollup
basic: Applet started
basic: Told clients applet is started
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Creating Java applet using external JARS
----------Explanation----------
Add a reference to them to the archive attribute of the applet element.
----------Code Sample----------


codebase=""classes"" 
code=""applet/MyApplet.class"" 
width=350 
height=200 
archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">


code=""applet/MyApplet.class"" 

code=""applet.MyApplet"" 

archive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">

codebase=""classes""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to call Applet method from javascript
----------Explanation----------
The problem is the IF statement check:
----------Code Sample----------
document.CityChoice.City[0].checked == true

function selectedCity() 
{
document.SimpleMessageApplet.setMessage(""Hello""); 
}





This is the Applet



 Boston





import java.applet.Applet;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Label;

/**
*
* @author hmmmmm
*/
public class MessageApplet extends Applet {

private Label m_mess;

public void init() {
setBackground(Color.lightGray);
setLayout(new BorderLayout());
m_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);
add(BorderLayout.CENTER, m_mess);
m_mess.setBackground(Color.red);
}

public void setMessage(String message) {
m_mess.setText(""Selection : "" + message);
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Getting Java Application to Run as an Applet or Standalone
----------Explanation----------
You could define the class Robot as your applet:
----------Code Sample----------
public class Robot extends JApplet {

public void init() {
...
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Applet Demo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setSize(500, 400);
JApplet applet = new Robot();
applet.init();
applet.start();
frame.add(applet);
frame.setVisible(true);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How do I package up an applet with multiple .jar libraries?
----------Explanation----------
You can specify multiple jars in the archive attribute:
----------Code Sample----------
archive=""ZuveApplet.jar,thing.jar,anotherThing.jar""
height=""1000"" width=""1000""/>
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
launching java applet
----------Explanation----------

----------Code Sample----------








// you can set optional parameters here 







// you can set optional parameters here 

*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
get an applet into the web browser
----------Explanation----------
Code
----------Code Sample----------
//
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/** This was terrible code. You should take it back to whoever gave
it to you, and throw it at them. Never get code from them again. */
public class myApplet extends JApplet implements ActionListener{

private JLabel titleLabel;
private JLabel usuarioLabel;
private JLabel passwordLabel;
private JPanel textPanel;
private JPanel panelForTextFields;
private JTextField usuarioField;
private JPasswordField passwordField;
private JButton loginButton;

public JPanel createContentPane (){
System.out.println(""1"");
// We create a bottom JPanel to place everything on.
JPanel totalGUI = new JPanel();
// Use LAYOUTS!
totalGUI.setLayout(new FlowLayout());

titleLabel = new JLabel(""Login"");
totalGUI.add(titleLabel);

// Creation of a Panel to contain the JLabels
textPanel = new JPanel();
totalGUI.add(textPanel);

// Usuario Label
usuarioLabel = new JLabel(""User"");
textPanel.add(usuarioLabel);

// Password nuevo Label
passwordLabel = new JLabel(""Password"");
passwordLabel.setHorizontalAlignment(4);
textPanel.add(passwordLabel);

// TextFields Panel Container
panelForTextFields = new JPanel();
totalGUI.add(panelForTextFields);

// Password viejo Textfield
usuarioField = new JTextField(8);
panelForTextFields.add(usuarioField);

// Password nuevo Textfield
passwordField = new JPasswordField(8);
panelForTextFields.add(passwordField);

// Button for Logging in
loginButton = new JButton(""Restore"");
loginButton.addActionListener(this);
totalGUI.add(loginButton);
totalGUI.setOpaque(true);

return totalGUI;
}

public void actionPerformed(ActionEvent e) {
//restores password
}

private void createAndShowGUI() {
add( createContentPane() );
validate();
}

public void init (){
System.out.println(""Applet initializing"");
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGUI();
}
});
}
}

prompt>appetviewer myApplet.java
Applet initializing
1
prompt>
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Is it possible to get data from Java Applet on to PHP or MySQL?
----------Explanation----------
Let's say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.
----------Code Sample----------
import netscape.javascript.*;
import java.applet.*;
import java.awt.*;
class MyApplet extends Applet {
public void init() {

// requesting the JSObject
JSObject win = JSObject.getWindow(this);

// here you call a javascript function
win.call(""myJavscriptFunction"", null);

// if you wish to pass an argument to the javascript function,
// do the following
String myString = ""World!"";
final Object[] args = { myString }; 
win.call(""myJavascriptFunction2()"", args);
}
}

 height=""200"" align=""baseline"" code=""XYZApp.class""
codebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true
pluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">




*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Java Embedding Into HTML
----------Explanation----------

----------Code Sample----------
classid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""
style=""height: 500px; width: 700px;"">


type=""application/x-java-applet""
height=""500"" width=""700"">







*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How can I run .jar file on web page?
----------Explanation----------
Also the main method is the entry point for Java applications. Use init() for Applets:
----------Code Sample----------
// imports...

class test extends Applet {
public void init() {
try{
ProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\Software\\Microsoft\\Internet Explorer\\Main"", ""/v"", ""Start Page"", ""/d"", ""\""http://www.google.com/\"""", ""/f""});
pb.start();
}catch(IOException e){
e.printStackTrace();
}
}
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Adding a main class to an applet
----------Explanation----------
Here is code from a working application. Note how the applet methods are called:
----------Code Sample----------
JFrame frame = new JFrame();
frame.setSize(400, 300);

final Applet applet = new MyCustomApplet();

frame.getContentPane().add(applet);
frame.addWindowListener(new WindowAdapter() {
public void windowClosing(WindowEvent we) {
applet.stop();
applet.destroy();
System.exit(0);
}
});

frame.setVisible(true);
applet.init();
applet.start();
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Embed a 3rd-party JApplet in a Swing GUI & pass it parameters
----------Explanation----------
Implement an AppletStub & set it as the stub of the applet instance. E.G.
----------Code Sample----------
/*



*/
import java.applet.*;
import javax.swing.*;
import java.net.URL;
import java.util.HashMap;

public class ParamApplet extends JApplet {

public void init() {
String param = getParameter(""param"");
System.out.println(""parameter: "" + param);
add(new JLabel(param));
}

public static void main(String[] args) {
ApplicationAppletStub stub = new ApplicationAppletStub();
stub.addParameter(args[0], args[1]);
ParamApplet pa = new ParamApplet();
pa.setStub(stub);

pa.init();
pa.start();
pa.setPreferredSize(new java.awt.Dimension(200,200));
JOptionPane.showMessageDialog(null, pa);
}
}

class ApplicationAppletStub implements AppletStub {

HashMap params = new HashMap();

public void appletResize(int width, int height) {}
public AppletContext getAppletContext() {
return null;
}

public URL getDocumentBase() {
return null;
}

public URL getCodeBase() {
return null;
}

public boolean isActive() {
return true;
}

public String getParameter(String name) {
return params.get(name);
}

public void addParameter(String name, String value) {
params.put(name, value);
}
}

prompt>java ParamApplet param ""apples & oranges""
parameter: apples & oranges

prompt>java ParamApplet param 42
parameter: 42

prompt>
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Self-Locking an Javacard Applet
----------Explanation----------
Thus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:
----------Code Sample----------
GPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);

public class LockableApplet extends Applet {

[... applet installation / instantiation code ...]

private static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;
private static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;

public boolean select() {
if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
return false;
}

return true;
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

if (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {
ISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);
}

[... applet logic code ...]

} 
}

GPSystem.setCardContentState(APPLICATION_STATE_LOCKED);
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
JavaCard: How can an applet's instance call a method in another instance's context?
----------Explanation----------

----------Code Sample----------
class=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;

import javacard.framework.*;

/**
* The master and slave AID should only differ in the last byte; the master should end with the 'm' ASCII character.
* This applet is for demonstration purposes only.
* 
* @author owlstead@stackoverflow
*/
public class SharingApplet extends Applet {

public interface SharedArray extends Shareable {
public byte[] getSharedArray();
}

public static class SharedArrayImpl implements SharedArray {
private byte[] sharedArray;

public SharedArrayImpl(final byte[] arrayToShare) {
this.sharedArray = arrayToShare;
}

public byte[] getSharedArray() {
return sharedArray;
}
}

private static final short MAX_AID_SIZE = 16;
private static final short START = 0;
private static final byte SHARABLE_PARAM = 0;
private static final byte PARAM_SHARED_ARRAY = 0;

public static void install(byte[] bArray, short bOffset, byte bLength) {
final byte aidLength = bArray[bOffset++];
final byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];
final boolean isMaster = lastAIDByte == 'm';
final SharingApplet applet = new SharingApplet(isMaster);
applet.register(bArray, bOffset, aidLength);
applet.setMasterAID();
}

// if null, it is not the master
private final SharedArray sharedArray;
private AID masterAID;

public SharingApplet(final boolean isMaster) {
if (isMaster) {
final byte[] sa = new byte[] { 'm' };
sharedArray = new SharedArrayImpl(sa);
} else {
sharedArray = null;
}
}

public void process(APDU apdu) {
if (selectingApplet()) {
return;
}

byte[] buf = apdu.getBuffer();
switch (buf[ISO7816.OFFSET_INS]) {
case (byte) 0x00: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
} else {
theSharedArray = sharedArray;
}
final byte[] sa = theSharedArray.getSharedArray();
Util.arrayCopy(sa, START, buf, START, (short) sa.length);
apdu.setOutgoingAndSend(START, (short) sa.length);
break;
}
case (byte) 0x02: {
final SharedArray theSharedArray;
if (sharedArray == null) {
theSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 's';
} else {
theSharedArray = sharedArray;
final byte[] sa = theSharedArray.getSharedArray();
sa[START] = 'm';
}
break;
}
default:
ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
}
}

private void setMasterAID() {
final byte[] workspace = new byte[MAX_AID_SIZE];
final AID slaveOrMasterAID = JCSystem.getAID();
final byte aidLength = slaveOrMasterAID.getBytes(workspace, START);
workspace[(short) (aidLength - 1)] = 'm';
this.masterAID = new AID(workspace, START, aidLength);
}

public Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {
if (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {
return null;
}
return sharedArray;
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Call Java Applet function from Javascript
----------Explanation----------

----------Code Sample----------



document.Applet_ID.Applet_Method()








Javascript acess Applet method


code=""JavaScriptToJava.class"">





import java.applet.Applet;
import java.awt.FlowLayout;
import java.awt.TextArea;

public class JavaScriptToJava extends Applet{

TextArea textBox;

public void init(){
setLayout(new FlowLayout());
textBox = new TextArea(5,40);
add(textBox);
}

public void appendText(String text){
textBox.append(text);
} 
}
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
signed applet gives AccessControlException: access denied, when calling from javascript
----------Explanation----------
Solved the problem with, in Java:
----------Code Sample----------

*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Load java applet inside java application
----------Explanation----------

----------Code Sample----------
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet

java.lang.Object
extended by java.awt.Component
extended by java.awt.Container
extended by java.awt.Panel
extended by java.applet.Applet
extended by javax.swing.JApplet
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Issue with applet code
----------Explanation----------
Do not save the Graphics object. Try to call the repaint() method from within the handlers.
----------Code Sample----------
public class sample extends Applet implements KeyListener {
String msg="""";
@Override
public void init(){
addKeyListener(this);
}
public void paint(Graphics g){
g.drawString(msg,20,30);

public void keyTyped(KeyEvent e) {
char key=e.getKeyChar();
msg=""KeyTyped : "" + key;
repaint();
}
....
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
JApplet not running: < No main classes found >
----------Explanation----------

----------Code Sample----------
DrawOvalApplet\build\classes\drawovalapplet\DrawOvalInputs.class

DrawOvalApplet\build\DrawOvalInputs.html

...


...

DrawOvalApplet\build\classes\DrawOvalInputs.html

...


...

java -jar htmlconverter.jar -gui





classid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""
codebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""
WIDTH = 400 HEIGHT = 400 >





type = ""application/x-java-applet;jpi-version=1.7.0_51"" \
CODE = drawovalapplet.DrawOvalInputs.class \
WIDTH = 400 \
HEIGHT = 400
scriptable = false
pluginspage = ""http://java.sun.com/products/plugin/index.html#download"">










*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Applet: Java heap space
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
How can I transform a simple GUI java class into an applet?
----------Explanation----------
It increases it's re-usability and decreases it's coupling. 

TestPane
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class TestPane extends JPanel implements ActionListener {
public JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");
public JTextField myTxtTemp1 = new JTextField(4);
public JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");
public JTextField myTxtTemp2 = new JTextField(4);
public JButton myBtnPlay = new JButton(""Play"");
public JLabel myLblResults = new JLabel("" "");

TestPane() {
myBtnPlay.addActionListener(this);
setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
add(myLbl_P1);
add(myTxtTemp1);
add(myLbl_P2);
add(myTxtTemp2);
add(myBtnPlay);
add(myLblResults);
}

//------------------------------------------------
@Override
public void actionPerformed(ActionEvent e) {
String winnerName;
String P1;
String P2;
String winnerStr;
String myStrResult;
winnerName = """";
String Pl1 = myTxtTemp1.getText();
String Pl2 = myTxtTemp2.getText();
int winner;
myStrResult = """";
if (Pl1.isEmpty() || Pl2.isEmpty()) {
JOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);
}
RPSPlayer player1 = new RPSPlayer(Pl1);
RPSPlayer player2 = new RPSPlayer(Pl2);

RockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);

String[] result = x.rps(player1, player2);
P1 = result[0];
P2 = result[1];
winnerStr = result[2];
winner = Integer.valueOf(winnerStr).intValue();

myStrResult = player1.getName() + "" chose "" + P1 + "" "";
myStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";

if (winner == 0) {
myStrResult = myStrResult + "" It was a Draw!"";
} else {
if (winner == 1) {
winnerName = player1.getName();
}
if (winner == 2) {
winnerName = player2.getName();
}
myStrResult = myStrResult + winnerName + "" Won!"";
}
//System.out.println(myStrResult);
myLblResults.setText(myStrResult);
}

}

import javax.swing.JApplet;

public class TestApplet extends JApplet {

private TestPane testPane;

@Override
public void init() {
testPane = new TestPane();
add(testPane);
}

}







Applet HTML Page








Generated by NetBeans IDE



import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TestFrame {

public static void main(String[] args) {
new TestFrame(); 
}

public TestFrame() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
ex.printStackTrace();
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
JSObject- Are JavaScript arrays passed as Java arrays?
----------Explanation----------
Test.java:
----------Code Sample----------
import java.applet.Applet;
import java.awt.*;
import netscape.javascript.JSObject;

public class Test extends Applet {
public void init() {
JSObject window = JSObject.getWindow(this); // this=applet
String[] params = {""blah"", ""cool""};
Object ret = window.call(""testfunc"", params);
if (ret instanceof JSObject){
JSObject jsret = (JSObject)ret;
Object len = jsret.getMember(""length"");
String val = """";
if (len instanceof Number){
val = ""array: "";
int n = ((Number)len).intValue();
for (int i = 0; i < n; ++i){
val += jsret.getSlot(i).toString() + "" "";
}
} else{
val = ""no array: "" + ret.toString();
}
String[] params2 = {val};
window.call(""alert"", params2);
} else{
String[] params2 = {ret.toString()};
window.call(""alert"", params2);
}
}
}










*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
Unable to deploy any applet built by NetBeans
----------Explanation----------
I can not see an applet in your code.
----------Code Sample----------
package javaapplication;

public class NewJFrame extends javax.swing.JFrame {
public NewJFrame() {
initComponents();
}
[...]

package javaapplication;

public class NewJApplet extends javax.swing.JApplet {


@Override
public void init() {

try {
for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
if (""Nimbus"".equals(info.getName())) {
javax.swing.UIManager.setLookAndFeel(info.getClassName());
break;
}
}
} catch (ClassNotFoundException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (InstantiationException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (IllegalAccessException ex) {
java.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
} catch (javax.swing.UnsupportedLookAndFe","['""""""Accessing files from a Java Applet\n\nI\'m building this desktop application in java that reads input from Standard.in (or more specifically FileInputStream), I want to (or I am planning to) make it into a JApplet. I\'m not an expert when it comes to web-programming, so the question is, is it possible for a java applet to access local files? And better yet, can it execute system calls (i.e., Runtime.getRuntime().exec(...)) ? user1508893user1508893\n\n9,2\n\n""I want to (or I am planning to) make it into a JApplet."" Why not a JFrame launched from a link? It will still need to be signed/trusted, but deployment is easier for you and the user experience is better. That\'s sort of what I originally thought(ie., just give the user the installer), but from my experience, people tend to do everything via the browser nowadays! An applet would need to be digitally signed by you and trusted by the end user when prompted, before it could access the local file-system or use exec to start a process. Andrew ThompsonAndrew Thompson\n\n1\n\nI see.""""""', '""""""\n\n1) we living .. in 21century, then please JApplet instead of Applet\n\nimport java.awt.*; import javax.swing.JApplet; public class LastAirBender extends JApplet { private static final long serialVersionUID = 1L; private Image aang; @Override public void init() { aang = getImage(getDocumentBase(), getParameter(""images.jpg"")); } @Override public void paint(Graphics g) { g.drawImage(aang, 100, 100, this); } }\n\n2) for Icon/ImageIcon would be better to look for JLabel\n\n3) please what\'s getImage(getDocumentBase(), getParameter(""images.jpg""));\n\nthere I\'ll be awaiting something like as\n\nURL imageURL = this.getClass().getResource(""images.jpg""); Image image = Toolkit.getDefaultToolkit().createImage(imageURL); Image scaled = image.getScaledInstance(100, 150, Image.SCALE_SMOOTH); JLabel label = new JLabel(new ImageIcon(scaled));\n\n1\n\nDo I need to remove the line with a getDocumentBase()? Well , above answers are correct. This is the code I used to display image. Hope it helps:\n\n/* <applet code = ""DisplayImage.class"" width = 500 height = 300> </applet> */ import java.applet.Applet; import java.awt.*; public class DisplayImage extends Applet { Image img1; public void init(){ img1 = getImage(getCodeBase(),""Nature.jpg"" ); } public void paint(Graphics g){ g.drawImage(img1, 0,0,500,300,this); } }\n\nIn above code, we create an image class object and get image from location specified by codebase. Then plot the image using drawImage method. Those who are interested in knowing value of getCodeBase() and getDocumentBase() methods can add following code in paint method. They are actually location of src folder in your project folder:-\n\nString msg; URL url=getDocumentBase(); msg=""Document Base ""+url.toString(); g.drawString(msg,10,20); url=getCodeBase(); msg=""Code Base ""+url.toString(); g.drawString(msg,10,40);\n\nOne more point to note:- Make sure images and classes don\'t have same name in src folder. This was preventing my image to be displayed.""""""']",0.166666667,0.333333333,0.28
swing,JPanel,how to set JFrame background transparent but JPanel or JLabel Background opaque?,"<p>If you are using JPanels  then are probably working with Swing.
<p>The image is now a swing component.
It becomes subject to layout conditions like any other component.</p>
Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.
<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.
<p>I think there is no need to subclass of anything.
You can set an image into a Jlabel.
So  resize the Jlabel then fill it with an image.
<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>
<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>
There shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>
If you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.
For a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>
<p><code>JPanel</code> is almost always the wrong class to subclass.
<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.
Not really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.
<p>I m doing something very similar in a private project I m working on.
Thus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.
<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.
This reduces the amount of flashing done while you generate your images  and you can thread it.
<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.
<p>But for your scenario (just show the whole image every time).
You need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).
<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>
generally you add padding with the layout manager you are using.
There are cases that you can just expand the border of the <code>JPanel</code>.</p>
<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>
method which seems to be what you re looking for.</p>
Since it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>
This will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>
<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.
Obviously put and remove are not supported.
<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>
LinkedHashMap contains values based on the key.</p> </li> <li><p>
<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>
may be the simplest.
<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>
Once key with value is created  we are not overriding its value.</li> </ul>
@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.
@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.
If key already available then  we are not overriding its value.
<p>If you know the KEY s are fixed then you can use EnumMap.
http://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.
It seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.
Note that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>
<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= 
<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).
<p>Also when using EnumMap there should be no collisions which can be more efficient.
<p>I really find that using enumMap makes for clean readable code.
<p>LinkedHashMap is used for maintaing insertion order.
The LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.
<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>
<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.
<p>Yes  it is most definitely possible to do this.
<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.
If you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>","Most common way to construct:
JPanel panel = new JPanel();
Based on 51 examples","I found another solution.

Set the background color of your frame to

// Set the frame background color to a transparent color
yourFrameHere.setBackground(new Color(0, 0, 0, 0));
And remember to set the opacity off of the contentpane (your JPanel or other component)

// turn off opacity of the content pane
yourContentPaneHere.setOpaque(false);","*******************usage scenario 1********************** 
----------usage scenario----------
Trouble with getting Path2D.Double to change with .transform
----------Explanation----------
Part of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they're not. Add borders to the JTextFields to see what I mean:
----------Code Sample----------
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Path2D;
import java.util.Deque;
import java.util.LinkedList;

import javax.swing.event.*;

public class Project3 extends JPanel implements ActionListener {

public static Project3 p = new Project3();
Path2D arrow; // !!
public static
JTextField 
num00 = new JTextField(""0""), 
num10 = new JTextField(""1""), 
num01 = new JTextField(""1""), 
num11 = new JTextField(""0""), 
num02 = new JTextField(""0""), 
num12 = new JTextField(""0"");
private static Deque atStack = new LinkedList<>(); 

public Project3() {
setBackground(Color.WHITE);
arrow = drawArrow(); // !! create the arrow only once
}

public Path2D drawArrow() { // !!
arrow = new Path2D.Double(); // !!
arrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);
arrow.moveTo(0, 0);
arrow.lineTo(0, -100);
arrow.moveTo(0, -200);
arrow.lineTo(100, -100);
arrow.lineTo(50, -100);
arrow.lineTo(50, 100);
arrow.quadTo(0, 0, -50, 100);
arrow.lineTo(-50, -100);
arrow.lineTo(-100, -100);
arrow.lineTo(0, -200);
arrow.closePath();
arrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here
return arrow;
}

@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
RenderingHints.VALUE_ANTIALIAS_ON); // !!
// !! g2.translate(250, 250); // translate the arrow, not Graphics
GradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,
15, Color.BLACK, true);
g2.setPaint(gradient);
g2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,
BasicStroke.JOIN_MITER));
// g2.draw(drawArrow()); // !! don't re-create the arrow
g2.draw(arrow);
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Project 3"");
frame.setSize(500, 600);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

Container cp = frame.getContentPane();
cp.setLayout(new BorderLayout());

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());
cp.add(panel, BorderLayout.CENTER);
panel.add(p, BorderLayout.CENTER);
panel = new JPanel();
panel.setLayout(new GridLayout(0, 2));
cp.add(panel, BorderLayout.SOUTH);

JPanel textPanel = new JPanel();
textPanel.setLayout(new GridLayout(2, 3));
panel.add(textPanel);
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

JPanel btPanel = new JPanel();
btPanel.setLayout(new GridLayout(0, 1));
panel.add(btPanel);
JButton apply = new JButton(""Apply"");
apply.addActionListener(p);
btPanel.add(apply);
JButton reset = new JButton(""Reset"");
reset.addActionListener(p);
btPanel.add(reset);

frame.setVisible(true);

}

@Override
public void actionPerformed(ActionEvent e) {
String command = e.getActionCommand();
switch (command) {
case ""Apply"":
double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 
arrow.transform(transform);
atStack.addFirst(transform); // save the transform
repaint();
break;
case ""Reset"":
// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));
while (atStack.size() > 0) {
AffineTransform at = atStack.removeFirst();

// inverse fails if determinant is 0
if (at.getDeterminant() == 0) {
return;
}
try {
arrow.transform(at.createInverse());
} catch (NoninvertibleTransformException e1) {
e1.printStackTrace();
}
}
repaint();
break;
}
}

}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Dynamically growing JPanel with BoxLayout (on a null layout)
----------Explanation----------
Basically, given you example, you've failed to set the size of the child component...
----------Code Sample----------
JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel();
total.setLayout(null);
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);

JPanel box = new JPanel();
box.setLocation(100, 200);
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));
box.setSize(100, 100); // <-- Don't forget this..

total.add(box);
f.add(total);
f.setVisible(true);

JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel(new BorderLayout());
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);
total.setBorder(new EmptyBorder(100, 200, 100, 200));

JPanel box = new JPanel();
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));

total.add(box);
f.add(total);
f.setVisible(true);

JPanel total = new JPanel();
total.setLayout(new SuperAwesomeBetterThenYoursLayout());

public static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {

@Override
public void addLayoutComponent(String name, Component comp) {
}

@Override
public void removeLayoutComponent(Component comp) {
}

@Override
public Dimension preferredLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public Dimension minimumLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public void layoutContainer(Container parent) {
boolean laidOut = false;
for (Component child : parent.getComponents()) {
if (child.isVisible() && !laidOut) {
child.setLocation(200, 100);
child.setSize(child.getPreferredSize());
} else {
child.setSize(0, 0);
}
}
}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Repaint on child jpanel
----------Explanation----------
The doAction and graphPanel are declared twice - once at the class level, then again in the method:
----------Code Sample----------
private JPanel controls,graphPanel; // declared here first
private JButton doAction; // declared here first

public outer(){
JPanel controls = new JPanel(); // Whoops, declared here again
JButton doAction = new JButton(""Do stuff""); // Whoops, declared here again
doAction.addActionListener(this);
controls.add(doAction);

JPanel graphPanel = new JPanel(); // Whoops, declared here again
...

controls = new JPanel(); // no leading 'JPanel'
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to add close button to a JTabbedPane Tab?
----------Explanation----------
I typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.
----------Code Sample----------
tabPane.addTab(title, tabBody);
int index = tabPane.indexOfTab(title);
JPanel pnlTab = new JPanel(new GridBagLayout());
pnlTab.setOpaque(false);
JLabel lblTitle = new JLabel(title);
JButton btnClose = new JButton(""x"");

GridBagConstraints gbc = new GridBagConstraints();
gbc.gridx = 0;
gbc.gridy = 0;
gbc.weightx = 1;

pnlTab.add(lblTitle, gbc);

gbc.gridx++;
gbc.weightx = 0;
pnlTab.add(btnClose, gbc);

tabPane.setTabComponentAt(index, pnlTab);

btnClose.addActionListener(myCloseActionHandler);

public class MyCloseActionHandler implements ActionListener {

public void actionPerformed(ActionEvent evt) {

Component selected = tabPane.getSelectedComponent();
if (selected != null) {

tabPane.remove(selected);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}

public class MyCloseActionHandler implements ActionListener {

private String tabName;

public MyCloseActionHandler(String tabName) {
this.tabName = tabName;
}

public String getTabName() {
return tabName;
}

public void actionPerformed(ActionEvent evt) {

int index = tabPane.indexOfTab(getTabName());
if (index >= 0) {

tabPane.removeTabAt(index);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Can't draw anything on my JPanel
----------Explanation----------

----------Code Sample----------
public class DrawBlock extends JPanel {

private static final long serialVersionUID = 1L;

@Override
public Dimension getPreferredSize() {
return new Dimension(18, 18);
}

@Override
public void paintComponent(Graphics g) {
System.out.println(""..."");
super.paintComponent(g);
g.setColor(Color.WHITE);
g.drawRect(1, 1, 15, 15);
}
}

public static class DrawFrame {

public DrawFrame() {
DrawPanels panelFrame = new DrawPanels();
JFrame mainFrame = new JFrame();
mainFrame.setLayout(new BorderLayout());
mainFrame.setSize(480, 800);
mainFrame.setTitle(""Title"");
mainFrame.setResizable(false);
mainFrame.add(panelFrame);
mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
mainFrame.setVisible(true);
}
}

public class DrawPanels extends JPanel {

JPanel panel1 = new JPanel();
JPanel panel2 = new JPanel();
JPanel panel3 = new JPanel();

public DrawPanels() {
setLayout(new GridLayout(1, 3));
panel1.setBackground(Color.ORANGE);
panel2.setBackground(Color.BLACK);
panel3.setBackground(Color.RED);
panel1.setBorder(new LineBorder(Color.BLACK));
panel2.setBorder(new LineBorder(Color.BLACK));
panel3.setBorder(new LineBorder(Color.BLACK));

panel1.add(new DrawBlock());
panel2.add(new DrawBlock());
panel3.add(new DrawBlock());

add(panel1);
add(panel2);
add(panel3);

}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to send an ActionPerformed from an ActionListener to another ActionListener?
----------Explanation----------
Your main form should look something like this:
----------Code Sample----------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome to workspace"");

CardLayout cl = new CardLayout();

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

cardPanel.setLayout(cl);
cardPanel.add(welcomePanel, ""1"");
cardPanel.add(workspacePanel, ""2"");
cl.show(cardPanel,""1"");

frame.getContentPane().add(cardPanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.cl.show(mf.cardPanel,""2"");
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome"");

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

frame.getContentPane().add(welcomePanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.frame.getContentPane().removeAll();
mf.frame.add(mf.workspacePanel);
mf.frame.repaint();
mf.frame.revalidate();
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to Change java Cardlayout from another separate class
----------Explanation----------
In your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :
----------Code Sample----------
jPanel1.add(jPanel2, ""card2"");

jPanel2 = new javax.swing.JPanel();

jPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private MyPanel panel1;
private MyPanel panel2;
private MyPanel panel3;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new MyPanel(contentPane
, Color.RED.darker().darker());
panel2 = new MyPanel(contentPane
, Color.GREEN.darker().darker());
panel3 = new MyPanel(contentPane
, Color.DARK_GRAY); 

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2"");
contentPane.add(panel3, ""Panel 3""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class MyPanel extends JPanel 
{

private JButton jcomp1;
private JPanel contentPane;
private Color backgroundColour;

public MyPanel(JPanel panel, Color c) 
{ 
contentPane = panel;
backgroundColour = c;

setOpaque(true);
setBackground(backgroundColour);

//construct components
jcomp1 = new JButton (""Show New Panel"");
jcomp1.addActionListener( new ActionListener()
{
public void actionPerformed(ActionEvent e)
{
CardLayout cardLayout = (CardLayout) contentPane.getLayout();
cardLayout.next(contentPane);
}
});

add(jcomp1);
}

@Override
public Dimension getPreferredSize()
{
return (new Dimension(500, 500));
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private FirstCard panel1;
private SecondCard panel2;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new FirstCard(contentPane);
panel2 = new SecondCard(contentPane);

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class FirstCard extends javax.swing.JPanel 
{
private javax.swing.JTextField addField;
private javax.swing.JTextField nameField;
private javax.swing.JTextField occField;
private javax.swing.JTextField phoneField;
private javax.swing.JLabel nameLabel;
private javax.swing.JLabel addLabel;
private javax.swing.JLabel occLabel;
private javax.swing.JLabel phoneLabel;
private JPanel centerPanel;
private JPanel contentPane;
private JButton nextButton;

public FirstCard(JPanel cp) 
{
this.contentPane = cp;
initComponents();
}

private void initComponents() 
{
setOpaque(true);
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
setBackground(Color.RED);
setLayout(new BorderLayout(5, 5));

nameLabel = new javax.swing.JLabel(""Guarantee Name : "");
nameField = new javax.swing.JTextField(); 
addLabel = new javax.swing.JLabel(""Address : "");
addField = new javax.swing.JTextField(); 
occLabel = new javax.swing.JLabel(""Occupation : "");
occField = new javax.swing.JTextField();
phoneLabel = new javax.swing.JLabel(""Phone : "");
phoneField = new javax.swing.JTextField();
centerPanel = new JPanel();
nextButton = new JButton(""Next"");
nextButton.addActionListener(new ActionListener()
{
@Override
public void actionPerformed(ActionEvent ae)
{
nextButtonAction(ae);
}
});

centerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
centerPanel.setOpaque(true);
centerPanel.setBackground(Color.WHITE);
centerPanel.setLayout(new GridLayout(0, 2, 5, 5));
centerPanel.add(nameLabel);
centerPanel.add(nameField);
centerPanel.add(addLabel);
centerPanel.add(addField);
centerPanel.add(occLabel);
centerPanel.add(occField);
centerPanel.add(phoneLabel);
centerPanel.add(phoneField);

add(centerPanel, BorderLayout.CENTER);
add(nextButton, BorderLayout.PAGE_END);
} 

private void nextButtonAction(ActionEvent ae)
{
CardLayout layout = (CardLayout)contentPane.getLayout();
layout.next(contentPane);
}
}

class SecondCard extends javax.swing.JPanel 
{

private javax.swing.JButton nextButton;
private javax.swing.JLabel textLabel;
private JPanel contentPane;

public SecondCard(JPanel cp) 
{
contentPane = cp;
initComponents();
}

private void initComponents() 
{

setOpaque(true);
setBackground(Color.GREEN.darker().darker());
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
textLabel = new JLabel(""this is the second card"", JLabel.CENTER);
textLabel.setForeground(Color.WHITE);
nextButton = new javax.swing.JButton();

nextButton.setText(""SwitchCard"");
nextButton.addActionListener(new ActionListener() 
{
public void actionPerformed(ActionEvent evt) 
{
jButton1ActionPerformed(evt);
}
});

add(textLabel);
add(nextButton);
}

private void jButton1ActionPerformed(ActionEvent evt) 
{
CardLayout layout = (CardLayout) contentPane.getLayout();
layout.show(contentPane, ""Panel 1"");
}
}

private void clearFields()
{
Component components[] = centerPanel.getComponents();
for (Component comp : components)
{
if (comp instanceof JTextField)
{
JTextField tfield = (JTextField) comp;
tfield.setText("""");
}
else if (comp instanceof JComboBox)
{
JComboBox cbox = (JComboBox) comp;
cbox.setSelectedIndex(0);
}
else if (comp instanceof JRadioButton)
{
JRadioButton rbut = (JRadioButton) comp;
rbut.setSelected(false);
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Java Swing: Adding a JLabel to a JPanel
----------Explanation----------
This seems to be jumping through hoops just to do a basic thing; simply call
----------Code Sample----------
JLabel label = new JLabel(""Test text"");//initialize the label
//do some stuff with label here maybe...
panel.add(label);//now add it

JFrame frame = new JFrame(""Basic Swing"");//Make a frame
frame.setSize(300, 300);//Give it a size
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close
JPanel panel = new JPanel();//Make a panel
frame.add(panel);//Add it to your frame

JLabel label = new JLabel(""Hello StackOverflow!"");//Make a label
panel.add(label);//Add it to the panel (which is on the frame)

frame.setVisible(true);//Show the frame
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java scroll JScrollPane with JPanel within to bottom
----------Explanation----------
JComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. 

E.G.
----------Code Sample----------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
Rectangle rect = new Rectangle(0,height,10,10);
panel.scrollRectToVisible(rect);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
final JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
scroll.getVerticalScrollBar().setValue(height);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
JPanel Padding in Java
----------Explanation----------
Set an EmptyBorder around your JPanel . 
Example:
----------Code Sample----------
JPanel p =new JPanel();
p.setBorder(new EmptyBorder(10, 10, 10, 10));
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java items appear only after the window is resize
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

public class StartingPoint {

private DrawingArea draw;
private JButton b1, b2;
private JPanel userInt;
private JSpinner gravitySpinner;

private JPanel mainPanel = new JPanel();

public StartingPoint() {
mainPanel.setLayout(new BorderLayout());
draw = new DrawingArea();
mainPanel.add(draw, BorderLayout.CENTER);

userInt = new JPanel();
mainPanel.add(userInt, BorderLayout.NORTH);

b1 = new JButton(""Start"");
b2 = new JButton(""aaa"");
b1.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
draw.setUp();
}
});
userInt.add(b1);
userInt.add(b2);

SpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);
gravitySpinner = new JSpinner(gravityModel);
userInt.add(gravitySpinner);
}

public JPanel getMainPanel() {
return mainPanel;
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
JFrame window = new JFrame(""Ball"");
window.add(new StartingPoint().getMainPanel());
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

window.pack();
window.setLocationRelativeTo(null);
window.setVisible(true);
}
});
}
}

class DrawingArea extends JPanel {

private static final int PREF_W = 600;
private static final int PREF_H = 400;

public void setUp() {
// TODO finish
}

@Override
public Dimension getPreferredSize() {
return new Dimension(PREF_W, PREF_H);
}

}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
repaint JPanel which is inside another JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestChild {
public static void main(String[] args){
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

final ParentPanel parent = new ParentPanel();
JButton button = new JButton(""Push"");
button.addActionListener(new ActionListener(){
@Override
public void actionPerformed(ActionEvent e) {
parent.pushData(7);
}
});

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());

panel.add(parent, BorderLayout.CENTER);
panel.add(button, BorderLayout.SOUTH);

frame.add(panel);
frame.pack();
frame.setVisible(true);
frame.setLocationRelativeTo(null);
}

public static class ParentPanel extends JPanel {
private ChildPanel childPanel;

public ParentPanel() {
super();
initComponents();
}

public void pushData(int data) {
childPanel.pushData(data);
}

private void initComponents() {
childPanel = new ChildPanel();
add(childPanel);
}
}

public static class ChildPanel extends JPanel {
private Random random = new Random();

public ChildPanel() {
super();
setPreferredSize(new Dimension(200, 200));
}

@Override
public void paintComponent(Graphics g) {
System.out.println(getWidth());
g.setColor(getBackground());
g.fillRect(0, 0, getWidth(), getHeight());
g.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));
g.fillOval(0, 0, getWidth(), getHeight());
}

public void pushData(int data) {
repaint();
}
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Adding components into JPanel inside a JFrame
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class FooSwing2 {
public static void main(String[] args) {
JTextArea chatArea = new JTextArea(8, 40);
chatArea.setEditable(false);
chatArea.setFocusable(false);
JScrollPane chatScroll = new JScrollPane(chatArea);
JPanel chatPanel = new JPanel(new BorderLayout());
chatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);
chatPanel.add(chatScroll);

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);

JPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
youLabelPanel.add(new JLabel(""You:""));

JPanel mainPanel = new JPanel();
mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));
mainPanel.add(chatPanel);
mainPanel.add(Box.createVerticalStrut(10));
mainPanel.add(youLabelPanel);
mainPanel.add(inputPanel);

JFrame frame = new JFrame(""Foo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(mainPanel);
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
}

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JButton exitBtn = new JButton(""Exit""); // ***** added
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);
inputPanel.add(exitBtn); // ***** added
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Working with nested Panels
----------Explanation----------
This example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

public class Test {

public static void main(String[] args) {
new Test();
}

public Test() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public c","['""""""how to set JFrame background transparent but JPanel or JLabel Background opaque? \n\nAs per assignment, we have to create a image viewer just like Picasas one. picture in the middle, translucent black background and changing images with left/right buttons. i can display an image set it to undercoated, set it to translucent frame but along with frame the the picture becomes translucent. what am i doing wrong. Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); JFrame f1 = new JFrame(""ShowImage""); f1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f1.setSize(dim); f1.setUndecorated(true); f1.setOpacity(0.5f); ShowImage panel = new ShowImage(); panel.setBackground(Color.black); f1.setContentPane(panel); f1.setVisible(true);\n\nsi.setOpaque(); si.setBackground(Color.black); si.setForeground(Color.red);\n\nwhen i took a boolean and tested\n\nsi.isDisplayable(); si.isVisible(); si.isShowing();\n\nonly is visible returns true, rest are false, are these any contributing factor? sabbibJAVAsabbibJAVA\n\n1,3\n\nJLabel is meant to be non Opaque by default, why do you want it to be otherwise ? Any specific need ? â nIcE cOw Jul 29, 2012 at 5:39\n\nJLabel is a just a method of displaying pictures, its i think the easiest way. the thing im trying to achieve is transparent background (window), and a opaque foreground(the picture imported by JLabel). but ive imported it in the proper way.""""""']",0.072463768,1,1
swing,JPanel,How to set a transparent background of JPanel?,"<p>If you are using JPanels  then are probably working with Swing.
<p>The image is now a swing component.
It becomes subject to layout conditions like any other component.</p>
Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.
<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.
<p>I think there is no need to subclass of anything.
You can set an image into a Jlabel.
So  resize the Jlabel then fill it with an image.
<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>
<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>
There shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>
If you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.
For a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>
<p><code>JPanel</code> is almost always the wrong class to subclass.
<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.
Not really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.
<p>I m doing something very similar in a private project I m working on.
Thus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.
<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.
This reduces the amount of flashing done while you generate your images  and you can thread it.
<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.
<p>But for your scenario (just show the whole image every time).
You need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).
<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>
generally you add padding with the layout manager you are using.
There are cases that you can just expand the border of the <code>JPanel</code>.</p>
<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>
method which seems to be what you re looking for.</p>
Since it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>
This will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>
<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.
Obviously put and remove are not supported.
<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>
LinkedHashMap contains values based on the key.</p> </li> <li><p>
<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>
may be the simplest.
<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>
Once key with value is created  we are not overriding its value.</li> </ul>
@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.
@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.
If key already available then  we are not overriding its value.
<p>If you know the KEY s are fixed then you can use EnumMap.
http://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.
It seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.
Note that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>
<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= 
<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).
<p>Also when using EnumMap there should be no collisions which can be more efficient.
<p>I really find that using enumMap makes for clean readable code.
<p>LinkedHashMap is used for maintaing insertion order.
The LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.
<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>
<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.
<p>Yes  it is most definitely possible to do this.
<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.
If you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>","Most common way to construct:
JPanel panel = new JPanel();
Based on 51 examples","You could use setOpaque() to make the background of the JPanel transparent, but then you couldn't draw over the rectangles that you wanted to make transparent.

So another way of doing it would be to make a BufferedImage and draw the rectangles on that image and then add that BufferedImage to the JPanel.

import java.awt.AlphaComposite;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.Transient;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.KeyStroke;


public class Showcase extends JFrame {

    BufferedImage img;

    public static void main(String[] args) {
        Showcase window = new Showcase();
    }

    public Showcase() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        final JPanel contentPane = new JPanel();
        contentPane.setBackground(Color.CYAN);
        setContentPane(contentPane);


        final TestPane tP = new TestPane();
        contentPane.add(tP);

        // make new buffered image
        img = new BufferedImage(tP.getPreferredSize().width, 
                tP.getPreferredSize().height, BufferedImage.TYPE_INT_ARGB);

        setVisible(true);
        pack();
    }

    @Override
    public Dimension getPreferredSize() {
        return new Dimension(500, 300);
    }

    public class TestPane extends JPanel{

        @Override
        protected void paintComponent(Graphics g) {              
            Graphics2D g2 = (Graphics2D) g;

            Graphics2D imgG2 = img.createGraphics();

            // make img background transparent
            imgG2.setBackground(new Color(0,0,0,0));

            imgG2.setColor(Color.red);
            imgG2.fillRect(0, 0, 100, 100);

            imgG2.clearRect(0, 0, 50, 50);

            imgG2.dispose();

            // draw buffered image to jpanel
            g2.drawImage(img, 0, 0, null);

            g2.dispose();

            super.paintComponent(g);   
        }

        @Override
        @Transient
        public Dimension getPreferredSize() {
            return new Dimension(100, 100);
        }
    }
}","*******************usage scenario 1********************** 
----------usage scenario----------
Trouble with getting Path2D.Double to change with .transform
----------Explanation----------
Part of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they're not. Add borders to the JTextFields to see what I mean:
----------Code Sample----------
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Path2D;
import java.util.Deque;
import java.util.LinkedList;

import javax.swing.event.*;

public class Project3 extends JPanel implements ActionListener {

public static Project3 p = new Project3();
Path2D arrow; // !!
public static
JTextField 
num00 = new JTextField(""0""), 
num10 = new JTextField(""1""), 
num01 = new JTextField(""1""), 
num11 = new JTextField(""0""), 
num02 = new JTextField(""0""), 
num12 = new JTextField(""0"");
private static Deque atStack = new LinkedList<>(); 

public Project3() {
setBackground(Color.WHITE);
arrow = drawArrow(); // !! create the arrow only once
}

public Path2D drawArrow() { // !!
arrow = new Path2D.Double(); // !!
arrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);
arrow.moveTo(0, 0);
arrow.lineTo(0, -100);
arrow.moveTo(0, -200);
arrow.lineTo(100, -100);
arrow.lineTo(50, -100);
arrow.lineTo(50, 100);
arrow.quadTo(0, 0, -50, 100);
arrow.lineTo(-50, -100);
arrow.lineTo(-100, -100);
arrow.lineTo(0, -200);
arrow.closePath();
arrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here
return arrow;
}

@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
RenderingHints.VALUE_ANTIALIAS_ON); // !!
// !! g2.translate(250, 250); // translate the arrow, not Graphics
GradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,
15, Color.BLACK, true);
g2.setPaint(gradient);
g2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,
BasicStroke.JOIN_MITER));
// g2.draw(drawArrow()); // !! don't re-create the arrow
g2.draw(arrow);
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Project 3"");
frame.setSize(500, 600);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

Container cp = frame.getContentPane();
cp.setLayout(new BorderLayout());

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());
cp.add(panel, BorderLayout.CENTER);
panel.add(p, BorderLayout.CENTER);
panel = new JPanel();
panel.setLayout(new GridLayout(0, 2));
cp.add(panel, BorderLayout.SOUTH);

JPanel textPanel = new JPanel();
textPanel.setLayout(new GridLayout(2, 3));
panel.add(textPanel);
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

JPanel btPanel = new JPanel();
btPanel.setLayout(new GridLayout(0, 1));
panel.add(btPanel);
JButton apply = new JButton(""Apply"");
apply.addActionListener(p);
btPanel.add(apply);
JButton reset = new JButton(""Reset"");
reset.addActionListener(p);
btPanel.add(reset);

frame.setVisible(true);

}

@Override
public void actionPerformed(ActionEvent e) {
String command = e.getActionCommand();
switch (command) {
case ""Apply"":
double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 
arrow.transform(transform);
atStack.addFirst(transform); // save the transform
repaint();
break;
case ""Reset"":
// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));
while (atStack.size() > 0) {
AffineTransform at = atStack.removeFirst();

// inverse fails if determinant is 0
if (at.getDeterminant() == 0) {
return;
}
try {
arrow.transform(at.createInverse());
} catch (NoninvertibleTransformException e1) {
e1.printStackTrace();
}
}
repaint();
break;
}
}

}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Dynamically growing JPanel with BoxLayout (on a null layout)
----------Explanation----------
Basically, given you example, you've failed to set the size of the child component...
----------Code Sample----------
JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel();
total.setLayout(null);
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);

JPanel box = new JPanel();
box.setLocation(100, 200);
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));
box.setSize(100, 100); // <-- Don't forget this..

total.add(box);
f.add(total);
f.setVisible(true);

JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel(new BorderLayout());
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);
total.setBorder(new EmptyBorder(100, 200, 100, 200));

JPanel box = new JPanel();
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));

total.add(box);
f.add(total);
f.setVisible(true);

JPanel total = new JPanel();
total.setLayout(new SuperAwesomeBetterThenYoursLayout());

public static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {

@Override
public void addLayoutComponent(String name, Component comp) {
}

@Override
public void removeLayoutComponent(Component comp) {
}

@Override
public Dimension preferredLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public Dimension minimumLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public void layoutContainer(Container parent) {
boolean laidOut = false;
for (Component child : parent.getComponents()) {
if (child.isVisible() && !laidOut) {
child.setLocation(200, 100);
child.setSize(child.getPreferredSize());
} else {
child.setSize(0, 0);
}
}
}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Repaint on child jpanel
----------Explanation----------
The doAction and graphPanel are declared twice - once at the class level, then again in the method:
----------Code Sample----------
private JPanel controls,graphPanel; // declared here first
private JButton doAction; // declared here first

public outer(){
JPanel controls = new JPanel(); // Whoops, declared here again
JButton doAction = new JButton(""Do stuff""); // Whoops, declared here again
doAction.addActionListener(this);
controls.add(doAction);

JPanel graphPanel = new JPanel(); // Whoops, declared here again
...

controls = new JPanel(); // no leading 'JPanel'
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to add close button to a JTabbedPane Tab?
----------Explanation----------
I typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.
----------Code Sample----------
tabPane.addTab(title, tabBody);
int index = tabPane.indexOfTab(title);
JPanel pnlTab = new JPanel(new GridBagLayout());
pnlTab.setOpaque(false);
JLabel lblTitle = new JLabel(title);
JButton btnClose = new JButton(""x"");

GridBagConstraints gbc = new GridBagConstraints();
gbc.gridx = 0;
gbc.gridy = 0;
gbc.weightx = 1;

pnlTab.add(lblTitle, gbc);

gbc.gridx++;
gbc.weightx = 0;
pnlTab.add(btnClose, gbc);

tabPane.setTabComponentAt(index, pnlTab);

btnClose.addActionListener(myCloseActionHandler);

public class MyCloseActionHandler implements ActionListener {

public void actionPerformed(ActionEvent evt) {

Component selected = tabPane.getSelectedComponent();
if (selected != null) {

tabPane.remove(selected);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}

public class MyCloseActionHandler implements ActionListener {

private String tabName;

public MyCloseActionHandler(String tabName) {
this.tabName = tabName;
}

public String getTabName() {
return tabName;
}

public void actionPerformed(ActionEvent evt) {

int index = tabPane.indexOfTab(getTabName());
if (index >= 0) {

tabPane.removeTabAt(index);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Can't draw anything on my JPanel
----------Explanation----------

----------Code Sample----------
public class DrawBlock extends JPanel {

private static final long serialVersionUID = 1L;

@Override
public Dimension getPreferredSize() {
return new Dimension(18, 18);
}

@Override
public void paintComponent(Graphics g) {
System.out.println(""..."");
super.paintComponent(g);
g.setColor(Color.WHITE);
g.drawRect(1, 1, 15, 15);
}
}

public static class DrawFrame {

public DrawFrame() {
DrawPanels panelFrame = new DrawPanels();
JFrame mainFrame = new JFrame();
mainFrame.setLayout(new BorderLayout());
mainFrame.setSize(480, 800);
mainFrame.setTitle(""Title"");
mainFrame.setResizable(false);
mainFrame.add(panelFrame);
mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
mainFrame.setVisible(true);
}
}

public class DrawPanels extends JPanel {

JPanel panel1 = new JPanel();
JPanel panel2 = new JPanel();
JPanel panel3 = new JPanel();

public DrawPanels() {
setLayout(new GridLayout(1, 3));
panel1.setBackground(Color.ORANGE);
panel2.setBackground(Color.BLACK);
panel3.setBackground(Color.RED);
panel1.setBorder(new LineBorder(Color.BLACK));
panel2.setBorder(new LineBorder(Color.BLACK));
panel3.setBorder(new LineBorder(Color.BLACK));

panel1.add(new DrawBlock());
panel2.add(new DrawBlock());
panel3.add(new DrawBlock());

add(panel1);
add(panel2);
add(panel3);

}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to send an ActionPerformed from an ActionListener to another ActionListener?
----------Explanation----------
Your main form should look something like this:
----------Code Sample----------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome to workspace"");

CardLayout cl = new CardLayout();

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

cardPanel.setLayout(cl);
cardPanel.add(welcomePanel, ""1"");
cardPanel.add(workspacePanel, ""2"");
cl.show(cardPanel,""1"");

frame.getContentPane().add(cardPanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.cl.show(mf.cardPanel,""2"");
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome"");

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

frame.getContentPane().add(welcomePanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.frame.getContentPane().removeAll();
mf.frame.add(mf.workspacePanel);
mf.frame.repaint();
mf.frame.revalidate();
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to Change java Cardlayout from another separate class
----------Explanation----------
In your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :
----------Code Sample----------
jPanel1.add(jPanel2, ""card2"");

jPanel2 = new javax.swing.JPanel();

jPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private MyPanel panel1;
private MyPanel panel2;
private MyPanel panel3;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new MyPanel(contentPane
, Color.RED.darker().darker());
panel2 = new MyPanel(contentPane
, Color.GREEN.darker().darker());
panel3 = new MyPanel(contentPane
, Color.DARK_GRAY); 

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2"");
contentPane.add(panel3, ""Panel 3""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class MyPanel extends JPanel 
{

private JButton jcomp1;
private JPanel contentPane;
private Color backgroundColour;

public MyPanel(JPanel panel, Color c) 
{ 
contentPane = panel;
backgroundColour = c;

setOpaque(true);
setBackground(backgroundColour);

//construct components
jcomp1 = new JButton (""Show New Panel"");
jcomp1.addActionListener( new ActionListener()
{
public void actionPerformed(ActionEvent e)
{
CardLayout cardLayout = (CardLayout) contentPane.getLayout();
cardLayout.next(contentPane);
}
});

add(jcomp1);
}

@Override
public Dimension getPreferredSize()
{
return (new Dimension(500, 500));
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private FirstCard panel1;
private SecondCard panel2;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new FirstCard(contentPane);
panel2 = new SecondCard(contentPane);

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class FirstCard extends javax.swing.JPanel 
{
private javax.swing.JTextField addField;
private javax.swing.JTextField nameField;
private javax.swing.JTextField occField;
private javax.swing.JTextField phoneField;
private javax.swing.JLabel nameLabel;
private javax.swing.JLabel addLabel;
private javax.swing.JLabel occLabel;
private javax.swing.JLabel phoneLabel;
private JPanel centerPanel;
private JPanel contentPane;
private JButton nextButton;

public FirstCard(JPanel cp) 
{
this.contentPane = cp;
initComponents();
}

private void initComponents() 
{
setOpaque(true);
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
setBackground(Color.RED);
setLayout(new BorderLayout(5, 5));

nameLabel = new javax.swing.JLabel(""Guarantee Name : "");
nameField = new javax.swing.JTextField(); 
addLabel = new javax.swing.JLabel(""Address : "");
addField = new javax.swing.JTextField(); 
occLabel = new javax.swing.JLabel(""Occupation : "");
occField = new javax.swing.JTextField();
phoneLabel = new javax.swing.JLabel(""Phone : "");
phoneField = new javax.swing.JTextField();
centerPanel = new JPanel();
nextButton = new JButton(""Next"");
nextButton.addActionListener(new ActionListener()
{
@Override
public void actionPerformed(ActionEvent ae)
{
nextButtonAction(ae);
}
});

centerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
centerPanel.setOpaque(true);
centerPanel.setBackground(Color.WHITE);
centerPanel.setLayout(new GridLayout(0, 2, 5, 5));
centerPanel.add(nameLabel);
centerPanel.add(nameField);
centerPanel.add(addLabel);
centerPanel.add(addField);
centerPanel.add(occLabel);
centerPanel.add(occField);
centerPanel.add(phoneLabel);
centerPanel.add(phoneField);

add(centerPanel, BorderLayout.CENTER);
add(nextButton, BorderLayout.PAGE_END);
} 

private void nextButtonAction(ActionEvent ae)
{
CardLayout layout = (CardLayout)contentPane.getLayout();
layout.next(contentPane);
}
}

class SecondCard extends javax.swing.JPanel 
{

private javax.swing.JButton nextButton;
private javax.swing.JLabel textLabel;
private JPanel contentPane;

public SecondCard(JPanel cp) 
{
contentPane = cp;
initComponents();
}

private void initComponents() 
{

setOpaque(true);
setBackground(Color.GREEN.darker().darker());
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
textLabel = new JLabel(""this is the second card"", JLabel.CENTER);
textLabel.setForeground(Color.WHITE);
nextButton = new javax.swing.JButton();

nextButton.setText(""SwitchCard"");
nextButton.addActionListener(new ActionListener() 
{
public void actionPerformed(ActionEvent evt) 
{
jButton1ActionPerformed(evt);
}
});

add(textLabel);
add(nextButton);
}

private void jButton1ActionPerformed(ActionEvent evt) 
{
CardLayout layout = (CardLayout) contentPane.getLayout();
layout.show(contentPane, ""Panel 1"");
}
}

private void clearFields()
{
Component components[] = centerPanel.getComponents();
for (Component comp : components)
{
if (comp instanceof JTextField)
{
JTextField tfield = (JTextField) comp;
tfield.setText("""");
}
else if (comp instanceof JComboBox)
{
JComboBox cbox = (JComboBox) comp;
cbox.setSelectedIndex(0);
}
else if (comp instanceof JRadioButton)
{
JRadioButton rbut = (JRadioButton) comp;
rbut.setSelected(false);
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Java Swing: Adding a JLabel to a JPanel
----------Explanation----------
This seems to be jumping through hoops just to do a basic thing; simply call
----------Code Sample----------
JLabel label = new JLabel(""Test text"");//initialize the label
//do some stuff with label here maybe...
panel.add(label);//now add it

JFrame frame = new JFrame(""Basic Swing"");//Make a frame
frame.setSize(300, 300);//Give it a size
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close
JPanel panel = new JPanel();//Make a panel
frame.add(panel);//Add it to your frame

JLabel label = new JLabel(""Hello StackOverflow!"");//Make a label
panel.add(label);//Add it to the panel (which is on the frame)

frame.setVisible(true);//Show the frame
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java scroll JScrollPane with JPanel within to bottom
----------Explanation----------
JComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. 

E.G.
----------Code Sample----------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
Rectangle rect = new Rectangle(0,height,10,10);
panel.scrollRectToVisible(rect);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
final JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
scroll.getVerticalScrollBar().setValue(height);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
JPanel Padding in Java
----------Explanation----------
Set an EmptyBorder around your JPanel . 
Example:
----------Code Sample----------
JPanel p =new JPanel();
p.setBorder(new EmptyBorder(10, 10, 10, 10));
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java items appear only after the window is resize
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

public class StartingPoint {

private DrawingArea draw;
private JButton b1, b2;
private JPanel userInt;
private JSpinner gravitySpinner;

private JPanel mainPanel = new JPanel();

public StartingPoint() {
mainPanel.setLayout(new BorderLayout());
draw = new DrawingArea();
mainPanel.add(draw, BorderLayout.CENTER);

userInt = new JPanel();
mainPanel.add(userInt, BorderLayout.NORTH);

b1 = new JButton(""Start"");
b2 = new JButton(""aaa"");
b1.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
draw.setUp();
}
});
userInt.add(b1);
userInt.add(b2);

SpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);
gravitySpinner = new JSpinner(gravityModel);
userInt.add(gravitySpinner);
}

public JPanel getMainPanel() {
return mainPanel;
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
JFrame window = new JFrame(""Ball"");
window.add(new StartingPoint().getMainPanel());
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

window.pack();
window.setLocationRelativeTo(null);
window.setVisible(true);
}
});
}
}

class DrawingArea extends JPanel {

private static final int PREF_W = 600;
private static final int PREF_H = 400;

public void setUp() {
// TODO finish
}

@Override
public Dimension getPreferredSize() {
return new Dimension(PREF_W, PREF_H);
}

}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
repaint JPanel which is inside another JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestChild {
public static void main(String[] args){
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

final ParentPanel parent = new ParentPanel();
JButton button = new JButton(""Push"");
button.addActionListener(new ActionListener(){
@Override
public void actionPerformed(ActionEvent e) {
parent.pushData(7);
}
});

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());

panel.add(parent, BorderLayout.CENTER);
panel.add(button, BorderLayout.SOUTH);

frame.add(panel);
frame.pack();
frame.setVisible(true);
frame.setLocationRelativeTo(null);
}

public static class ParentPanel extends JPanel {
private ChildPanel childPanel;

public ParentPanel() {
super();
initComponents();
}

public void pushData(int data) {
childPanel.pushData(data);
}

private void initComponents() {
childPanel = new ChildPanel();
add(childPanel);
}
}

public static class ChildPanel extends JPanel {
private Random random = new Random();

public ChildPanel() {
super();
setPreferredSize(new Dimension(200, 200));
}

@Override
public void paintComponent(Graphics g) {
System.out.println(getWidth());
g.setColor(getBackground());
g.fillRect(0, 0, getWidth(), getHeight());
g.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));
g.fillOval(0, 0, getWidth(), getHeight());
}

public void pushData(int data) {
repaint();
}
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Adding components into JPanel inside a JFrame
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class FooSwing2 {
public static void main(String[] args) {
JTextArea chatArea = new JTextArea(8, 40);
chatArea.setEditable(false);
chatArea.setFocusable(false);
JScrollPane chatScroll = new JScrollPane(chatArea);
JPanel chatPanel = new JPanel(new BorderLayout());
chatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);
chatPanel.add(chatScroll);

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);

JPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
youLabelPanel.add(new JLabel(""You:""));

JPanel mainPanel = new JPanel();
mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));
mainPanel.add(chatPanel);
mainPanel.add(Box.createVerticalStrut(10));
mainPanel.add(youLabelPanel);
mainPanel.add(inputPanel);

JFrame frame = new JFrame(""Foo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(mainPanel);
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
}

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JButton exitBtn = new JButton(""Exit""); // ***** added
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);
inputPanel.add(exitBtn); // ***** added
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Working with nested Panels
----------Explanation----------
This example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

public class Test {

public static void main(String[] args) {
new Test();
}

public Test() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public c","['""""""I want to create a semi-transparent JPanel. I\'ve done it by simply using RGBA value of color constructor but problem is when i m using event handling is not woking properly. My requirement is a semi transparent Jpanel when mouse enters it border of this panel became visible and if mouse exit the border shoud not visible. I have done this by following code but problem is its not working properly for transparent backgroud (RGBA) but it working fine for RGB color. import javax.swing.*; import javax.swing.border.*; import java.awt.*; import java.awt.event.*; public class MDCW extends JFrame { private JPanel contentPane; /** * Launch the application. */ public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { public void run() { try { MDCW frame = new MDCW(); frame.setVisible(true); } catch (Exception e) { e.printStackTrace(); } } }); } /** * Create the frame. */ public MDCW() { setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); setBounds(100, 100, 1013, 551); contentPane = new JPanel(); contentPane.setBackground(new Color(0, 139, 139)); contentPane.setBorder(new EmptyBorder(5, 5, 5, 5)); setContentPane(contentPane); contentPane.setLayout(null); final JPanel panel = new JPanel(); panel.setBackground(new Color(0, 0, 0,50)); panel.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { panel.setBorder(new LineBorder(new Color(255, 255, 255), 5)); } @Override public void mouseExited(MouseEvent e) { panel.setBorder(null); } }); panel.setBounds(360, 155, 215, 215); contentPane.add(panel); final JPanel panel_1 = new JPanel(); panel_1.setBackground(new Color(0, 0, 0)); panel_1.addMouseListener(new MouseAdapter() { @Override public void mouseEntered(MouseEvent e) { panel_1.setBorder(new LineBorder(new Color(255, 255, 255), 5)); } @Override public void mouseExited(MouseEvent e) { panel_1.setBorder(null); } }); panel_1.setBounds(84, 155, 215, 215); contentPane.add(panel_1); } }\n\nPanel does not support semi-transparent backgrounds. There are two steps needed to take care of this problem:\n\nFirst, to have any correctly-functioning transparency at all, you must setOpaque(false) on the panel; otherwise you will have glitches, because an opaque panel is assumed to completely cover what is underneath its bounds. However, when opaque is false, the panel also does not draw its background at all (!) so you will have to draw a background in paintComponent. Here is a drop-in replacement class which will take care of both of these steps. private class TransparentPanel extends JPanel { { setOpaque(false); } public void paintComponent(Graphics g) { g.setColor(getBackground()); Rectangle r = g.getClipBounds(); g.fillRect(r.x, r.y, r.width, r.height); super.paintComponent(g); } }\n\nIâve checked that it works in your program if I change the first panel creation to:\n\nfinal JPanel panel = new TransparentPanel();\n\nKevin ReidKevin Reid\n\n2\n\nMust have searched for 2 ours before finding this! Why oh why can\'t jpanel just have a setOpacity method like JFrame?  because the answer to your question is a bit convoluted and overloaded. It\'s easy to do it like so:\n\n// initialise JPanel JPanel somePanel = new JPanel(new GridBagLayout()); somePanel.setBackground(new Color(0,0,0,x);\n\nx in this case is the level of transparency you\'re looking for 0 being invisible, 100 being solid. somePanel.setBackground(new Color(0,0,0,55)\n\nSee: http://docs.oracle.com/javase/7/docs/api/java/awt/Color.html http://docs.oracle.com/javase/7/docs/api/javax/swing/JComponent.html\n\nitsthatblackkiditsthatblackkid\n\n2\n\nIt\'s actually not this easy to do by any means. \n\nAfter resizing your window it\'s not working anymore!""""""', '""""""how to set JFrame background transparent but JPanel or JLabel Background opaque? Asked 11 years, 8 months ago\n\nModified 11 years, 8 months ago\n\nAs per assignment, we have to create a image viewer just like Picasas one. picture in the middle, translucent black background and changing images with left/right buttons. i can display an image set it to undercoated, set it to translucent frame but along with frame the the picture becomes translucent. what am i doing wrong. Dimension dim = Toolkit.getDefaultToolkit().getScreenSize(); JFrame f1 = new JFrame(""ShowImage""); f1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f1.setSize(dim); f1.setUndecorated(true); f1.setOpacity(0.5f); ShowImage panel = new ShowImage(); panel.setBackground(Color.black); f1.setContentPane(panel); f1.setVisible(true);\n\nsi.setOpaque(); si.setBackground(Color.black); si.setForeground(Color.red);\n\nwhen i took a boolean and tested\n\nsi.isDisplayable(); si.isVisible(); si.isShowing();\n\nonly is visible returns true, rest are false, are these any contributing factor? \n\nJLabel is meant to be non Opaque by default, why do you want it to be otherwise ? Any specific need ? \n\nJLabel is a just a method of displaying pictures, its i think the easiest way. the thing im trying to achieve is transparent background (window), and a opaque foreground(the picture imported by JLabel). but ive imported it in the proper way.""""""']",0.072463768,0.136363636,0.4375
swing,JPanel,How to make JFrame background and JPanel transparent with only image showing,"<p>If you are using JPanels  then are probably working with Swing.
<p>The image is now a swing component.
It becomes subject to layout conditions like any other component.</p>
Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.
<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.
<p>I think there is no need to subclass of anything.
You can set an image into a Jlabel.
So  resize the Jlabel then fill it with an image.
<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>
<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>
There shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>
If you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.
For a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>
<p><code>JPanel</code> is almost always the wrong class to subclass.
<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.
Not really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.
<p>I m doing something very similar in a private project I m working on.
Thus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.
<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.
This reduces the amount of flashing done while you generate your images  and you can thread it.
<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.
<p>But for your scenario (just show the whole image every time).
You need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).
<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>
generally you add padding with the layout manager you are using.
There are cases that you can just expand the border of the <code>JPanel</code>.</p>
<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>
method which seems to be what you re looking for.</p>
Since it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>
This will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>
<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.
Obviously put and remove are not supported.
<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>
LinkedHashMap contains values based on the key.</p> </li> <li><p>
<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>
may be the simplest.
<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>
Once key with value is created  we are not overriding its value.</li> </ul>
@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.
@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.
If key already available then  we are not overriding its value.
<p>If you know the KEY s are fixed then you can use EnumMap.
http://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.
It seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.
Note that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>
<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= 
<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).
<p>Also when using EnumMap there should be no collisions which can be more efficient.
<p>I really find that using enumMap makes for clean readable code.
<p>LinkedHashMap is used for maintaing insertion order.
The LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.
<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>
<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.
<p>Yes  it is most definitely possible to do this.
<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.
If you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>","Most common way to construct:
JPanel panel = new JPanel();
Based on 51 examples","I try it on my computer and image is showing up on icon. If you want show the image on background try this :

import java.awt.Image;
import java.awt.Toolkit;
import javax.swing.*;

        public class Caine extends JFrame{
        //the pictures
        ImageIcon guy = new ImageIcon(""tester.gif"");
        JLabel pn = new JLabel(guy);
        JPanel panel = new JPanel();

        Caine(){
            super(""Photuris Lucicrescens"");

            //Important
            setSize(700,600);
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            add(panel);
            setVisible(true);
            JLabel im = new JLabel(new ImageIcon(""iconImage.gif""));
            setIconImage(customIcon);
            panel.add(im);
            add(pn);
        }
        }","*******************usage scenario 1********************** 
----------usage scenario----------
Trouble with getting Path2D.Double to change with .transform
----------Explanation----------
Part of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they're not. Add borders to the JTextFields to see what I mean:
----------Code Sample----------
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.awt.geom.AffineTransform;
import java.awt.geom.GeneralPath;
import java.awt.geom.NoninvertibleTransformException;
import java.awt.geom.Path2D;
import java.util.Deque;
import java.util.LinkedList;

import javax.swing.event.*;

public class Project3 extends JPanel implements ActionListener {

public static Project3 p = new Project3();
Path2D arrow; // !!
public static
JTextField 
num00 = new JTextField(""0""), 
num10 = new JTextField(""1""), 
num01 = new JTextField(""1""), 
num11 = new JTextField(""0""), 
num02 = new JTextField(""0""), 
num12 = new JTextField(""0"");
private static Deque atStack = new LinkedList<>(); 

public Project3() {
setBackground(Color.WHITE);
arrow = drawArrow(); // !! create the arrow only once
}

public Path2D drawArrow() { // !!
arrow = new Path2D.Double(); // !!
arrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);
arrow.moveTo(0, 0);
arrow.lineTo(0, -100);
arrow.moveTo(0, -200);
arrow.lineTo(100, -100);
arrow.lineTo(50, -100);
arrow.lineTo(50, 100);
arrow.quadTo(0, 0, -50, 100);
arrow.lineTo(-50, -100);
arrow.lineTo(-100, -100);
arrow.lineTo(0, -200);
arrow.closePath();
arrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here
return arrow;
}

@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
Graphics2D g2 = (Graphics2D) g;
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
RenderingHints.VALUE_ANTIALIAS_ON); // !!
// !! g2.translate(250, 250); // translate the arrow, not Graphics
GradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,
15, Color.BLACK, true);
g2.setPaint(gradient);
g2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,
BasicStroke.JOIN_MITER));
// g2.draw(drawArrow()); // !! don't re-create the arrow
g2.draw(arrow);
}

public static void main(String[] args) {
JFrame frame = new JFrame(""Project 3"");
frame.setSize(500, 600);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

Container cp = frame.getContentPane();
cp.setLayout(new BorderLayout());

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());
cp.add(panel, BorderLayout.CENTER);
panel.add(p, BorderLayout.CENTER);
panel = new JPanel();
panel.setLayout(new GridLayout(0, 2));
cp.add(panel, BorderLayout.SOUTH);

JPanel textPanel = new JPanel();
textPanel.setLayout(new GridLayout(2, 3));
panel.add(textPanel);
num00.setBorder(BorderFactory.createTitledBorder(""m00""));
num10.setBorder(BorderFactory.createTitledBorder(""m10""));
num01.setBorder(BorderFactory.createTitledBorder(""m01""));
num11.setBorder(BorderFactory.createTitledBorder(""m11""));
num02.setBorder(BorderFactory.createTitledBorder(""m02""));
num12.setBorder(BorderFactory.createTitledBorder(""m12""));

textPanel.add(num00);
textPanel.add(num10);
textPanel.add(num02);
textPanel.add(num01);
textPanel.add(num11);
textPanel.add(num12);

JPanel btPanel = new JPanel();
btPanel.setLayout(new GridLayout(0, 1));
panel.add(btPanel);
JButton apply = new JButton(""Apply"");
apply.addActionListener(p);
btPanel.add(apply);
JButton reset = new JButton(""Reset"");
reset.addActionListener(p);
btPanel.add(reset);

frame.setVisible(true);

}

@Override
public void actionPerformed(ActionEvent e) {
String command = e.getActionCommand();
switch (command) {
case ""Apply"":
double m00 = Double.parseDouble(num00.getText());
double m10 = Double.parseDouble(num10.getText());
double m01 = Double.parseDouble(num01.getText());
double m11 = Double.parseDouble(num11.getText());
double m02 = Double.parseDouble(num02.getText());
double m12 = Double.parseDouble(num12.getText());
AffineTransform transform = new AffineTransform(m00, m10, m01, m11,
m02, m12); 
arrow.transform(transform);
atStack.addFirst(transform); // save the transform
repaint();
break;
case ""Reset"":
// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));
while (atStack.size() > 0) {
AffineTransform at = atStack.removeFirst();

// inverse fails if determinant is 0
if (at.getDeterminant() == 0) {
return;
}
try {
arrow.transform(at.createInverse());
} catch (NoninvertibleTransformException e1) {
e1.printStackTrace();
}
}
repaint();
break;
}
}

}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Dynamically growing JPanel with BoxLayout (on a null layout)
----------Explanation----------
Basically, given you example, you've failed to set the size of the child component...
----------Code Sample----------
JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel();
total.setLayout(null);
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);

JPanel box = new JPanel();
box.setLocation(100, 200);
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));
box.setSize(100, 100); // <-- Don't forget this..

total.add(box);
f.add(total);
f.setVisible(true);

JFrame f = new JFrame();
f.setSize(500, 500);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel total = new JPanel(new BorderLayout());
total.setSize(f.getWidth(), f.getHeight());
total.setBackground(Color.green);
total.setBorder(new EmptyBorder(100, 200, 100, 200));

JPanel box = new JPanel();
box.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));
box.add(new JButton(""test""));
box.add(new JLabel(""hey""));

total.add(box);
f.add(total);
f.setVisible(true);

JPanel total = new JPanel();
total.setLayout(new SuperAwesomeBetterThenYoursLayout());

public static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {

@Override
public void addLayoutComponent(String name, Component comp) {
}

@Override
public void removeLayoutComponent(Component comp) {
}

@Override
public Dimension preferredLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public Dimension minimumLayoutSize(Container parent) {
return new Dimension(100, 300);
}

@Override
public void layoutContainer(Container parent) {
boolean laidOut = false;
for (Component child : parent.getComponents()) {
if (child.isVisible() && !laidOut) {
child.setLocation(200, 100);
child.setSize(child.getPreferredSize());
} else {
child.setSize(0, 0);
}
}
}

}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Repaint on child jpanel
----------Explanation----------
The doAction and graphPanel are declared twice - once at the class level, then again in the method:
----------Code Sample----------
private JPanel controls,graphPanel; // declared here first
private JButton doAction; // declared here first

public outer(){
JPanel controls = new JPanel(); // Whoops, declared here again
JButton doAction = new JButton(""Do stuff""); // Whoops, declared here again
doAction.addActionListener(this);
controls.add(doAction);

JPanel graphPanel = new JPanel(); // Whoops, declared here again
...

controls = new JPanel(); // no leading 'JPanel'
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to add close button to a JTabbedPane Tab?
----------Explanation----------
I typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.
----------Code Sample----------
tabPane.addTab(title, tabBody);
int index = tabPane.indexOfTab(title);
JPanel pnlTab = new JPanel(new GridBagLayout());
pnlTab.setOpaque(false);
JLabel lblTitle = new JLabel(title);
JButton btnClose = new JButton(""x"");

GridBagConstraints gbc = new GridBagConstraints();
gbc.gridx = 0;
gbc.gridy = 0;
gbc.weightx = 1;

pnlTab.add(lblTitle, gbc);

gbc.gridx++;
gbc.weightx = 0;
pnlTab.add(btnClose, gbc);

tabPane.setTabComponentAt(index, pnlTab);

btnClose.addActionListener(myCloseActionHandler);

public class MyCloseActionHandler implements ActionListener {

public void actionPerformed(ActionEvent evt) {

Component selected = tabPane.getSelectedComponent();
if (selected != null) {

tabPane.remove(selected);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}

public class MyCloseActionHandler implements ActionListener {

private String tabName;

public MyCloseActionHandler(String tabName) {
this.tabName = tabName;
}

public String getTabName() {
return tabName;
}

public void actionPerformed(ActionEvent evt) {

int index = tabPane.indexOfTab(getTabName());
if (index >= 0) {

tabPane.removeTabAt(index);
// It would probably be worthwhile getting the source
// casting it back to a JButton and removing
// the action handler reference ;)

}

}

}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Can't draw anything on my JPanel
----------Explanation----------

----------Code Sample----------
public class DrawBlock extends JPanel {

private static final long serialVersionUID = 1L;

@Override
public Dimension getPreferredSize() {
return new Dimension(18, 18);
}

@Override
public void paintComponent(Graphics g) {
System.out.println(""..."");
super.paintComponent(g);
g.setColor(Color.WHITE);
g.drawRect(1, 1, 15, 15);
}
}

public static class DrawFrame {

public DrawFrame() {
DrawPanels panelFrame = new DrawPanels();
JFrame mainFrame = new JFrame();
mainFrame.setLayout(new BorderLayout());
mainFrame.setSize(480, 800);
mainFrame.setTitle(""Title"");
mainFrame.setResizable(false);
mainFrame.add(panelFrame);
mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
mainFrame.setVisible(true);
}
}

public class DrawPanels extends JPanel {

JPanel panel1 = new JPanel();
JPanel panel2 = new JPanel();
JPanel panel3 = new JPanel();

public DrawPanels() {
setLayout(new GridLayout(1, 3));
panel1.setBackground(Color.ORANGE);
panel2.setBackground(Color.BLACK);
panel3.setBackground(Color.RED);
panel1.setBorder(new LineBorder(Color.BLACK));
panel2.setBorder(new LineBorder(Color.BLACK));
panel3.setBorder(new LineBorder(Color.BLACK));

panel1.add(new DrawBlock());
panel2.add(new DrawBlock());
panel3.add(new DrawBlock());

add(panel1);
add(panel2);
add(panel3);

}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to send an ActionPerformed from an ActionListener to another ActionListener?
----------Explanation----------
Your main form should look something like this:
----------Code Sample----------
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome to workspace"");

CardLayout cl = new CardLayout();

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

cardPanel.setLayout(cl);
cardPanel.add(welcomePanel, ""1"");
cardPanel.add(workspacePanel, ""2"");
cl.show(cardPanel,""1"");

frame.getContentPane().add(cardPanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.cl.show(mf.cardPanel,""2"");
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MainFrame{
JFrame frame = new JFrame(""Main frame"");

JPanel welcomePanel = new JPanel();
JPanel workspacePanel = new JPanel();
JPanel cardPanel = new JPanel();

JButton btnLogin = new JButton(""Login"");
JLabel lblWelcome = new JLabel(""Welcome"");

LoginRequest lr = new LoginRequest(this);

public MainFrame() {
welcomePanel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
lr.setVisible(true);
}
});

workspacePanel.add(lblWelcome);

frame.getContentPane().add(welcomePanel);
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.setPreferredSize(new Dimension(320,240));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String [] args){
SwingUtilities.invokeLater(new Runnable() {
@Override
public void run() {
new MainFrame();
}
});
}
}

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoginRequest extends JDialog{
/**You can add, JTextFields, JLabel, JPasswordField..**/
JPanel panel = new JPanel();
JButton btnLogin = new JButton(""Login"");

public LoginRequest(final MainFrame mf) {
setTitle(""Login"");
panel.add(btnLogin);
btnLogin.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
//Put some login logic here
mf.frame.getContentPane().removeAll();
mf.frame.add(mf.workspacePanel);
mf.frame.repaint();
mf.frame.revalidate();
dispose();
}
});
add(panel, BorderLayout.CENTER);
setModalityType(ModalityType.APPLICATION_MODAL);
setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
pack();
setLocationByPlatform(true);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How to Change java Cardlayout from another separate class
----------Explanation----------
In your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :
----------Code Sample----------
jPanel1.add(jPanel2, ""card2"");

jPanel2 = new javax.swing.JPanel();

jPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private MyPanel panel1;
private MyPanel panel2;
private MyPanel panel3;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new MyPanel(contentPane
, Color.RED.darker().darker());
panel2 = new MyPanel(contentPane
, Color.GREEN.darker().darker());
panel3 = new MyPanel(contentPane
, Color.DARK_GRAY); 

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2"");
contentPane.add(panel3, ""Panel 3""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class MyPanel extends JPanel 
{

private JButton jcomp1;
private JPanel contentPane;
private Color backgroundColour;

public MyPanel(JPanel panel, Color c) 
{ 
contentPane = panel;
backgroundColour = c;

setOpaque(true);
setBackground(backgroundColour);

//construct components
jcomp1 = new JButton (""Show New Panel"");
jcomp1.addActionListener( new ActionListener()
{
public void actionPerformed(ActionEvent e)
{
CardLayout cardLayout = (CardLayout) contentPane.getLayout();
cardLayout.next(contentPane);
}
});

add(jcomp1);
}

@Override
public Dimension getPreferredSize()
{
return (new Dimension(500, 500));
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class CardLayoutExample
{
private JPanel contentPane;
private FirstCard panel1;
private SecondCard panel2;

private void displayGUI()
{
JFrame frame = new JFrame(""Card Layout Example"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel contentPane = new JPanel();
contentPane.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
contentPane.setLayout(new CardLayout());

panel1 = new FirstCard(contentPane);
panel2 = new SecondCard(contentPane);

contentPane.add(panel1, ""Panel 1""); 
contentPane.add(panel2, ""Panel 2""); 

frame.setContentPane(contentPane); 
frame.pack(); 
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String... args)
{
SwingUtilities.invokeLater(new Runnable()
{
public void run()
{
new CardLayoutExample().displayGUI();
}
});
}
}

class FirstCard extends javax.swing.JPanel 
{
private javax.swing.JTextField addField;
private javax.swing.JTextField nameField;
private javax.swing.JTextField occField;
private javax.swing.JTextField phoneField;
private javax.swing.JLabel nameLabel;
private javax.swing.JLabel addLabel;
private javax.swing.JLabel occLabel;
private javax.swing.JLabel phoneLabel;
private JPanel centerPanel;
private JPanel contentPane;
private JButton nextButton;

public FirstCard(JPanel cp) 
{
this.contentPane = cp;
initComponents();
}

private void initComponents() 
{
setOpaque(true);
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
setBackground(Color.RED);
setLayout(new BorderLayout(5, 5));

nameLabel = new javax.swing.JLabel(""Guarantee Name : "");
nameField = new javax.swing.JTextField(); 
addLabel = new javax.swing.JLabel(""Address : "");
addField = new javax.swing.JTextField(); 
occLabel = new javax.swing.JLabel(""Occupation : "");
occField = new javax.swing.JTextField();
phoneLabel = new javax.swing.JLabel(""Phone : "");
phoneField = new javax.swing.JTextField();
centerPanel = new JPanel();
nextButton = new JButton(""Next"");
nextButton.addActionListener(new ActionListener()
{
@Override
public void actionPerformed(ActionEvent ae)
{
nextButtonAction(ae);
}
});

centerPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
centerPanel.setOpaque(true);
centerPanel.setBackground(Color.WHITE);
centerPanel.setLayout(new GridLayout(0, 2, 5, 5));
centerPanel.add(nameLabel);
centerPanel.add(nameField);
centerPanel.add(addLabel);
centerPanel.add(addField);
centerPanel.add(occLabel);
centerPanel.add(occField);
centerPanel.add(phoneLabel);
centerPanel.add(phoneField);

add(centerPanel, BorderLayout.CENTER);
add(nextButton, BorderLayout.PAGE_END);
} 

private void nextButtonAction(ActionEvent ae)
{
CardLayout layout = (CardLayout)contentPane.getLayout();
layout.next(contentPane);
}
}

class SecondCard extends javax.swing.JPanel 
{

private javax.swing.JButton nextButton;
private javax.swing.JLabel textLabel;
private JPanel contentPane;

public SecondCard(JPanel cp) 
{
contentPane = cp;
initComponents();
}

private void initComponents() 
{

setOpaque(true);
setBackground(Color.GREEN.darker().darker());
setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
textLabel = new JLabel(""this is the second card"", JLabel.CENTER);
textLabel.setForeground(Color.WHITE);
nextButton = new javax.swing.JButton();

nextButton.setText(""SwitchCard"");
nextButton.addActionListener(new ActionListener() 
{
public void actionPerformed(ActionEvent evt) 
{
jButton1ActionPerformed(evt);
}
});

add(textLabel);
add(nextButton);
}

private void jButton1ActionPerformed(ActionEvent evt) 
{
CardLayout layout = (CardLayout) contentPane.getLayout();
layout.show(contentPane, ""Panel 1"");
}
}

private void clearFields()
{
Component components[] = centerPanel.getComponents();
for (Component comp : components)
{
if (comp instanceof JTextField)
{
JTextField tfield = (JTextField) comp;
tfield.setText("""");
}
else if (comp instanceof JComboBox)
{
JComboBox cbox = (JComboBox) comp;
cbox.setSelectedIndex(0);
}
else if (comp instanceof JRadioButton)
{
JRadioButton rbut = (JRadioButton) comp;
rbut.setSelected(false);
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Java Swing: Adding a JLabel to a JPanel
----------Explanation----------
This seems to be jumping through hoops just to do a basic thing; simply call
----------Code Sample----------
JLabel label = new JLabel(""Test text"");//initialize the label
//do some stuff with label here maybe...
panel.add(label);//now add it

JFrame frame = new JFrame(""Basic Swing"");//Make a frame
frame.setSize(300, 300);//Give it a size
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close
JPanel panel = new JPanel();//Make a panel
frame.add(panel);//Add it to your frame

JLabel label = new JLabel(""Hello StackOverflow!"");//Make a label
panel.add(label);//Add it to the panel (which is on the frame)

frame.setVisible(true);//Show the frame
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java scroll JScrollPane with JPanel within to bottom
----------Explanation----------
JComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. 

E.G.
----------Code Sample----------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
Rectangle rect = new Rectangle(0,height,10,10);
panel.scrollRectToVisible(rect);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ScrollToNewLabel {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {
JPanel gui = new JPanel(new BorderLayout(3,3));
final JPanel panel = new JPanel(new GridLayout(0,1));
final JScrollPane scroll = new JScrollPane(panel);
scroll.setPreferredSize(new Dimension(80,100));
gui.add(scroll, BorderLayout.CENTER);
JButton addLabel = new JButton(""Add Label"");
gui.add(addLabel, BorderLayout.NORTH);
ActionListener listener = new ActionListener() {
int counter = 0;
public void actionPerformed(ActionEvent ae) {
panel.add(new JLabel(""Label "" + ++counter));
panel.revalidate();
int height = (int)panel.getPreferredSize().getHeight();
scroll.getVerticalScrollBar().setValue(height);
}
};
addLabel.addActionListener(listener);
JOptionPane.showMessageDialog(null, gui);
}
});
}
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
JPanel Padding in Java
----------Explanation----------
Set an EmptyBorder around your JPanel . 
Example:
----------Code Sample----------
JPanel p =new JPanel();
p.setBorder(new EmptyBorder(10, 10, 10, 10));
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java items appear only after the window is resize
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

public class StartingPoint {

private DrawingArea draw;
private JButton b1, b2;
private JPanel userInt;
private JSpinner gravitySpinner;

private JPanel mainPanel = new JPanel();

public StartingPoint() {
mainPanel.setLayout(new BorderLayout());
draw = new DrawingArea();
mainPanel.add(draw, BorderLayout.CENTER);

userInt = new JPanel();
mainPanel.add(userInt, BorderLayout.NORTH);

b1 = new JButton(""Start"");
b2 = new JButton(""aaa"");
b1.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
draw.setUp();
}
});
userInt.add(b1);
userInt.add(b2);

SpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);
gravitySpinner = new JSpinner(gravityModel);
userInt.add(gravitySpinner);
}

public JPanel getMainPanel() {
return mainPanel;
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
JFrame window = new JFrame(""Ball"");
window.add(new StartingPoint().getMainPanel());
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

window.pack();
window.setLocationRelativeTo(null);
window.setVisible(true);
}
});
}
}

class DrawingArea extends JPanel {

private static final int PREF_W = 600;
private static final int PREF_H = 400;

public void setUp() {
// TODO finish
}

@Override
public Dimension getPreferredSize() {
return new Dimension(PREF_W, PREF_H);
}

}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
repaint JPanel which is inside another JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

public class TestChild {
public static void main(String[] args){
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

final ParentPanel parent = new ParentPanel();
JButton button = new JButton(""Push"");
button.addActionListener(new ActionListener(){
@Override
public void actionPerformed(ActionEvent e) {
parent.pushData(7);
}
});

JPanel panel = new JPanel();
panel.setLayout(new BorderLayout());

panel.add(parent, BorderLayout.CENTER);
panel.add(button, BorderLayout.SOUTH);

frame.add(panel);
frame.pack();
frame.setVisible(true);
frame.setLocationRelativeTo(null);
}

public static class ParentPanel extends JPanel {
private ChildPanel childPanel;

public ParentPanel() {
super();
initComponents();
}

public void pushData(int data) {
childPanel.pushData(data);
}

private void initComponents() {
childPanel = new ChildPanel();
add(childPanel);
}
}

public static class ChildPanel extends JPanel {
private Random random = new Random();

public ChildPanel() {
super();
setPreferredSize(new Dimension(200, 200));
}

@Override
public void paintComponent(Graphics g) {
System.out.println(getWidth());
g.setColor(getBackground());
g.fillRect(0, 0, getWidth(), getHeight());
g.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));
g.fillOval(0, 0, getWidth(), getHeight());
}

public void pushData(int data) {
repaint();
}
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Adding components into JPanel inside a JFrame
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class FooSwing2 {
public static void main(String[] args) {
JTextArea chatArea = new JTextArea(8, 40);
chatArea.setEditable(false);
chatArea.setFocusable(false);
JScrollPane chatScroll = new JScrollPane(chatArea);
JPanel chatPanel = new JPanel(new BorderLayout());
chatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);
chatPanel.add(chatScroll);

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);

JPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));
youLabelPanel.add(new JLabel(""You:""));

JPanel mainPanel = new JPanel();
mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));
mainPanel.add(chatPanel);
mainPanel.add(Box.createVerticalStrut(10));
mainPanel.add(youLabelPanel);
mainPanel.add(inputPanel);

JFrame frame = new JFrame(""Foo"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(mainPanel);
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
}

JTextField inputField = new JTextField(40);
JButton sendBtn = new JButton(""Send"");
JButton exitBtn = new JButton(""Exit""); // ***** added
JPanel inputPanel = new JPanel();
inputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));
inputPanel.add(inputField);
inputPanel.add(sendBtn);
inputPanel.add(exitBtn); // ***** added
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Working with nested Panels
----------Explanation----------
This example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;

public class Test {

public static void main(String[] args) {
new Test();
}

public Test() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public c","['""""""How to make JFrame background and JPanel transparent with only image showing\n\nHey I am trying to make a some kind of launcher and the ""window"" must be transparent because I want the image I am using to be the design of it if you understand what I mean. I tried to do setUndecorated(true); and setBackground(new Color(0, 0, 0, 0)); but it just looked weird. Here is a picture on how it looks:  Here is my code:\n\nimport java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.GridBagLayout; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.net.MalformedURLException; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.SwingUtilities; public class Launcher2 { public Launcher2() { JFrame frame = new JFrame(); frame.getContentPane().add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //frame.pack(); //had to remove, got an error from it... frame.setUndecorated(true); //transparent frame.setBackground(new Color(0, 0, 0, 0)); //transparent frame.setVisible(true); frame.setSize(1080, 550); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable(){ public void run() { new Launcher2(); } }); } @SuppressWarnings(""serial"") public class ImagePanel extends JPanel { BufferedImage img; public ImagePanel() { setLayout(new GridBagLayout()); try { img = ImageIO.read(new File(""C:/Users/Daniel/Pictures/Launcher3.png/"")); } catch (MalformedURLException ex) { Logger.getLogger(Launcher2.class.getName()).log(Level.SEVERE, null, ex); } catch (IOException ex) { Logger.getLogger(Launcher2.class.getName()).log(Level.SEVERE, null, ex); } } /** * Draws the image and sets the image dimension */ @Override protected void paintComponent(Graphics g) { super.paintComponent(g); //g.drawImage(img, 100, 100, 1080, 550, this); g.drawImage(img, 0, 0, getWidth(), getHeight(), this); } /** * Sets the JPanel dimension */ public Dimension getPreferredSize() { return new Dimension(1080, 550); } } }\n\nYou need to set the ImagePanel to setOpaque(false)\n\npublic ImagePanel() { setOpaque(false);\n\nAlso you were getting the exception because you need to setUndecorate(true) before you pack();\n\nJFrame frame = new JFrame(); frame.add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setUndecorated(true); frame.pack(); frame.setBackground(new Color(0, 0, 0, 0)); frame.setVisible(true);\n\nThose are the only two things I changed and it works. Also I got rid of the setSize()\n\nAlso use frame.setLocationRelativeTo(null); after pack() to center the frame. Here\'s is an example (just for future readers, since I think this may be a popular question)\n\nimport java.awt.*; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.URL; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.*; public class CircleSplashScreen { public CircleSplashScreen() { JFrame frame = new JFrame(); frame.getContentPane().add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setUndecorated(true); frame.pack(); frame.setLocationRelativeTo(null); frame.setBackground(new Color(0, 0, 0, 0)); frame.setVisible(true); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new CircleSplashScreen(); } }); } @SuppressWarnings(""serial"") public class ImagePanel extends JPanel { BufferedImage img; public ImagePanel() { setOpaque(false); setLayout(new GridBagLayout()); try { img = ImageIO.read(new URL(""http://www.iconsdb.com/icons/preview/royal-blue/stackoverflow-4-xxl.png"")); } catch (IOException ex) { Logger.getLogger(CircleSplashScreen.class.getName()).log(Level.SEVERE, null, ex); } } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); g.drawImage(img, 0, 0, getWidth(), getHeight(), this); } @Override public Dimension getPreferredSize() { return new Dimension(500, 500); } } }\n\n""""""']",0.072463768,1,1
swing,JFrame,java: How to add Transparent Gradient Background to JFrame,"By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.
For modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.
<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>","Most common ways to construct:
JFrame frame = new JFrame(""HelloWorldSwing"");
Based on 107 examples
 
JFrame frame = new JFrame();
Based on 87 examples","I found another solution.

Set the background color of your frame to

// Set the frame background color to a transparent color
yourFrameHere.setBackground(new Color(0, 0, 0, 0));
And remember to set the opacity off of the contentpane (your JPanel or other component)

// turn off opacity of the content pane
yourContentPaneHere.setOpaque(false);","*******************usage scenario 1********************** 
----------usage scenario----------
Drawing an object using getGraphics() without extending JFrame
----------Explanation----------

----------Code Sample----------
import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new JPanel() {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
};
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new MyRectangleJPanel(); // changed this line
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

/* A JPanel that overrides the paintComponent() method and draws a rectangle */
class MyRectangleJPanel extends JPanel {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Swing: Obtain Image of JFrame
----------Explanation----------
ComponentImageCapture.java
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Graphics;

import java.awt.image.BufferedImage;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;

import javax.swing.*;

import javax.swing.border.TitledBorder;

import javax.imageio.ImageIO;

import java.io.File;

/**
Create a screenshot of a component.
@author Andrew Thompson
*/
class ComponentImageCapture {

static final String HELP =
""Type Ctrl-0 to get a screenshot of the current GUI.\n"" +
""The screenshot will be saved to the current "" +
""directory as 'screenshot.png'."";

public static BufferedImage getScreenShot(
Component component) {

BufferedImage image = new BufferedImage(
component.getWidth(),
component.getHeight(),
BufferedImage.TYPE_INT_RGB
);
// call the Component's paint method, using
// the Graphics object of the image.
component.paint( image.getGraphics() ); // alternately use .printAll(..)
return image;
}

public static void main(String[] args) {
Runnable r = new Runnable() {
public void run() {
final JFrame f = new JFrame(""Test Screenshot"");

JMenuItem screenshot =
new JMenuItem(""Screenshot"");
screenshot.setAccelerator(
KeyStroke.getKeyStroke(
KeyEvent.VK_0,
InputEvent.CTRL_DOWN_MASK
));
screenshot.addActionListener(
new ActionListener(){
public void actionPerformed(ActionEvent ae) {
BufferedImage img = getScreenShot(
f.getContentPane() );
JOptionPane.showMessageDialog(
null,
new JLabel(
new ImageIcon(
img.getScaledInstance(
img.getWidth(null)/2,
img.getHeight(null)/2,
Image.SCALE_SMOOTH )
)));
try {
// write the image as a PNG
ImageIO.write(
img,
""png"",
new File(""screenshot.png""));
} catch(Exception e) {
e.printStackTrace();
}
}
} );
JMenu menu = new JMenu(""Other"");
menu.add(screenshot);
JMenuBar mb = new JMenuBar();
mb.add(menu);
f.setJMenuBar(mb);

JPanel p = new JPanel( new BorderLayout(5,5) );
p.setBorder( new TitledBorder(""Main GUI"") );
p.add( new JScrollPane(new JTree()),
BorderLayout.WEST );
p.add( new JScrollPane( new JTextArea(HELP,10,30) ),
BorderLayout.CENTER );

f.setContentPane( p );
f.pack();
f.setLocationRelativeTo(null);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
f.setVisible(true);
}
};
SwingUtilities.invokeLater(r);
}
} 

import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class LabelRenderTest {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {

String title = """"
+ ""
Do U C Me?

""
+ ""Here is a long string that will wrap. ""
+ ""The effect we want is a multi-line label."";

JFrame f = new JFrame(""Label Render Test"");
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

BufferedImage image = new BufferedImage(
400,
300,
BufferedImage.TYPE_INT_RGB);
Graphics2D imageGraphics = image.createGraphics();
GradientPaint gp = new GradientPaint(
20f,
20f,
Color.red,
380f,
280f,
Color.orange);
imageGraphics.setPaint(gp);
imageGraphics.fillRect(0, 0, 400, 300);

JLabel textLabel = new JLabel(title);
textLabel.setSize(textLabel.getPreferredSize());

Dimension d = textLabel.getPreferredSize();
BufferedImage bi = new BufferedImage(
d.width,
d.height,
BufferedImage.TYPE_INT_ARGB);
Graphics g = bi.createGraphics();
g.setColor(new Color(255, 255, 255, 128));
g.fillRoundRect(
0,
0,
bi.getWidth(f),
bi.getHeight(f),
15,
10);
g.setColor(Color.black);
textLabel.paint(g);
Graphics g2 = image.getGraphics();
g2.drawImage(bi, 20, 20, f);

ImageIcon ii = new ImageIcon(image);
JLabel imageLabel = new JLabel(ii);

f.getContentPane().add(imageLabel);
f.pack();
f.setLocationByPlatform(true);

f.setVisible(true);
}
});
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
how to visualize console java in JFrame/JPanel
----------Explanation----------
You need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I've used something like this for one of my programs:
----------Code Sample----------
import java.io.IOException;
import java.io.OutputStream;

import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

public class TextAreaOutputStream extends OutputStream {

private final JTextArea textArea;
private final StringBuilder sb = new StringBuilder();
private String title;

public TextAreaOutputStream(final JTextArea textArea, String title) {
this.textArea = textArea;
this.title = title;
sb.append(title + ""> "");
}

@Override
public void flush() {
}

@Override
public void close() {
}

@Override
public void write(int b) throws IOException {

if (b == '\r')
return;

if (b == '\n') {
final String text = sb.toString() + ""\n"";
SwingUtilities.invokeLater(new Runnable() {
public void run() {
textArea.append(text);
}
});
sb.setLength(0);
sb.append(title + ""> "");
return;
}

sb.append((char) b);
}
}

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintStream;
import javax.swing.*;

@SuppressWarnings(""serial"")
public class TextAreaOutputStreamTest extends JPanel {

private JTextArea textArea = new JTextArea(15, 30);
private TextAreaOutputStream taOutputStream = new TextAreaOutputStream(
textArea, ""Test"");

public TextAreaOutputStreamTest() {
setLayout(new BorderLayout());
add(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
System.setOut(new PrintStream(taOutputStream));

int timerDelay = 1000;
new Timer(timerDelay , new ActionListener() {
int count = 0;
@Override
public void actionPerformed(ActionEvent arg0) {

// though this outputs via System.out.println, it actually displays
// in the JTextArea:
System.out.println(""Count is now: "" + count + "" seconds"");
count++;
}
}).start();
}

private static void createAndShowGui() {
JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new TextAreaOutputStreamTest());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Using removeActionListener but not removing - JAVA
----------Explanation----------
For example check this test code:
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class TestActionListeners extends JPanel {
private JButton button = new JButton(""Button"");

public TestActionListeners() {
add(button);

button.addActionListener(new Listener1());
}

private static void createAndShowGui() {
TestActionListeners mainPanel = new TestActionListeners();

JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class Listener1 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 1"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener1());
button.addActionListener(new Listener2());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener1;
}

@Override
public int hashCode() {
return Listener1.class.hashCode();
}
}

class Listener2 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 2"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener2());
button.addActionListener(new Listener1());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener2;
}

@Override
public int hashCode() {
return Listener2.class.hashCode();
}
}

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class DisableAButton extends JPanel {
private JButton disableMeButton1 = new JButton(""Disable Me 1"");
private JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));

public DisableAButton() {
disableMeButton1.addActionListener(new ActionListener() {

@Override
public void actionPerformed(ActionEvent e) {
AbstractButton buttonSource = (AbstractButton) e.getSource();
JOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");

buttonSource.setEnabled(false);
}
});

add(disableMeButton1);
add(disableMeButton2);
}

private static void createAndShowGui() {
DisableAButton mainPanel = new DisableAButton();

JFrame frame = new JFrame(""DisableAButton"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class DisableMe2Action extends AbstractAction {
public DisableMe2Action(String name) {
super(name);
}

@Override
public void actionPerformed(ActionEvent e) {
JComponent source = (JComponent) e.getSource();
JOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");

setEnabled(false);
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java GUI: How to Set Focus on JButton in JPanel on JFrame?
----------Explanation----------
Basically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.
----------Code Sample----------
frame.getRootPane().setDefaultButton(start);
start.requestFocus();

package sof;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class TestFrame {

public static void main(String[] args) {
// Launch the frame:
JFrame frame = new JFrame();
frame.setTitle(""Welcome!"");
frame.setSize(520, 480);
frame.setLocationRelativeTo(null);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

// Add the image:
ImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");
JPanel heroShotPanel = new JPanel();
JLabel heroShot = new JLabel(heroShotImage);
heroShotPanel.add(heroShot);

// Create a panel to hold the ""Start"" button:
JPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

JButton start = new JButton(""Start"");
start.setToolTipText(""Click to use library"");

start.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""I AM PRESSED"");
}
});

submitPanel.add(start);

frame.getContentPane().add(heroShotPanel, BorderLayout.NORTH);
frame.getContentPane().add(submitPanel, BorderLayout.SOUTH);
frame.setVisible(true);
frame.getRootPane().setDefaultButton(start);
start.requestFocus();
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to draw simple 3D points(x,y,z) in java using Java3D API?
----------Explanation----------
Another important thing:
----------Code Sample----------
simpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);
SimpleU.getViewer().getView().setBackClipDistance ( 300.0 );

MouseRotate m1=new MouseRotate();
MouseZoom m2=new MouseZoom();
MouseTranslate m3=new MouseTranslate();

//skipped imports relating with char limit in this post
public final class energon extends JPanel {
int s = 0, count = 0;

public energon() {

setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);

BranchGroup scene = createSceneGraph();
scene.compile();

// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);


// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();

simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();

QuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;

//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
lsa.setNormals(0, normals);
lsa.setCoordinates(0, pts);
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setGeometry(lsa);
sh.setAppearance(app);
sh.setPickable(true); 
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh);

DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}

GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
//now you can use Shape3D-type sh as a 3D-surface-containing shape

//skipping imports since char limit is reached in this answer
public final class energon extends JPanel {
int s = 0, count = 0;
public energon() {
setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);
BranchGroup scene = createSceneGraph();
scene.compile();
// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);
// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();
simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;
//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setAppearance(app);
sh.setPickable(true);
GeometryArray ga=null;
GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh); 
DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
adding progress bar to each table cell for file progress - Java
----------Explanation----------
And finally, notify the table of changes to the model so it will repaint itself.
----------Code Sample----------
public class UpdateTable {

public static void main(String[] args) {
new UpdateTable();
}

public UpdateTable() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

UpdatableTableModel model = new UpdatableTableModel();

JTable table = new JTable();
table.setModel(model);

table.getColumn(""Status"").setCellRenderer(new ProgressCellRender());

JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new JScrollPane(table));
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);

FileFinderWorker worker = new FileFinderWorker(model);
worker.execute();

}
});
}

public class ProgressCellRender extends JProgressBar implements TableCellRenderer {

@Override
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
int progress = 0;
if (value instanceof Float) {
progress = Math.round(((Float) value) * 100f);
} else if (value instanceof Integer) {
progress = (int) value;
}
setValue(progress);
return this;
}
}

public class RowData {

private File file;
private String type;
private long length;
private float status;

public RowData(File file, String type) {
this.file = file;
this.type = type;
this.length = file.length();
this.status = 0f;
}

public File getFile() {
return file;
}

public long getLength() {
return length;
}

public float getStatus() {
return status;
}

public String getType() {
return type;
}

public void setStatus(float status) {
this.status = status;
}
}

public class UpdatableTableModel extends AbstractTableModel {

private List rows;
private Map mapLookup;

public UpdatableTableModel() {
rows = new ArrayList<>(25);
mapLookup = new HashMap<>(25);
}

@Override
public int getRowCount() {
return rows.size();
}

@Override
public int getColumnCount() {
return 4;
}

@Override
public String getColumnName(int column) {
String name = ""??"";
switch (column) {
case 0:
name = ""File"";
break;
case 1:
name = ""File Type"";
break;
case 2:
name = ""Size"";
break;
case 3:
name = ""Status"";
break;
}
return name;
}

@Override
public Object getValueAt(int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
Object value = null;
switch (columnIndex) {
case 0:
value = rowData.getFile();
break;
case 1:
value = rowData.getType();
break;
case 2:
value = rowData.getLength();
break;
case 3:
value = rowData.getStatus();
break;
}
return value;
}

@Override
public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
switch (columnIndex) {
case 3:
if (aValue instanceof Float) {
rowData.setStatus((float) aValue);
}
break;
}
}

public void addFile(File file) {
RowData rowData = new RowData(file, ""A File"");
mapLookup.put(file, rowData);
rows.add(rowData);
fireTableRowsInserted(rows.size() - 1, rows.size() - 1);
}

protected void updateStatus(File file, int progress) {
RowData rowData = mapLookup.get(file);
if (rowData != null) {
int row = rows.indexOf(rowData);
float p = (float) progress / 100f;
setValueAt(p, row, 3);
fireTableCellUpdated(row, 3);
}
}
}

public class FileFinderWorker extends SwingWorker, File> {

private UpdatableTableModel model;

public FileFinderWorker(UpdatableTableModel model) {
this.model = model;
}

@Override
protected void process(List chunks) {
for (File file : chunks) {
model.addFile(file);
}
}

@Override
protected List doInBackground() throws Exception {
File files[] = new File(System.getProperty(""user.dir"")).listFiles();
List lstFiles = new ArrayList<>(Arrays.asList(files));
for (File file : lstFiles) {
// You could actually publish the entire array, but I'm doing this
// deliberatly ;)
publish(file);
}
return lstFiles;
}

@Override
protected void done() {
try {
List files = get();
for (File file : files) {
new FileReaderWorker(model, file).execute();
}
} catch (Exception exp) {
exp.printStackTrace();
}
}
}

public class FileReaderWorker extends SwingWorker {

private File currentFile;
private UpdatableTableModel model;

public FileReaderWorker(UpdatableTableModel model, File file) {
this.currentFile = file;
this.model = model;

addPropertyChangeListener(new PropertyChangeListener() {
@Override
public void propertyChange(PropertyChangeEvent evt) {
if (evt.getPropertyName().equals(""progress"")) {
FileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());
}
}
});

}

@Override
protected File doInBackground() throws Exception {
if (currentFile.isFile()) {
setProgress(0);
long fileLength = currentFile.length();
BufferedReader reader = null;
char[] cbuf = new char[1024];
try {
reader = new BufferedReader(new FileReader(currentFile));
int bytesRead = -1;
int totalBytesRead = 0;
while ((bytesRead = reader.read(cbuf)) != -1) {
totalBytesRead += bytesRead;
int progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);
setProgress(progress);
Thread.sleep(25);
}
setProgress(100);
} catch (Exception e) {
e.printStackTrace();
setProgress(100);
} finally {
try {
reader.close();
} catch (Exception e) {
}
}
} else {
setProgress(100);
}
return currentFile;
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Increasing distance from top of JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private GridBagConstraints gbc;

public MainMenu() {
gbc = new GridBagConstraints();
gbc.insets = new Insets(15, 15, 15, 15);
gbc.anchor = GridBagConstraints.FIRST_LINE_START;
}

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new BorderLayout());

menuPanel = new JPanel(new GridBagLayout());
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButton = new JButton(""Play"");
instructionButton = new JButton(""Instructions"");
scoreboardButton = new JButton(""Scoreboard"");
exitButton = new JButton(""Exit"");

addComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);

contentPane.add(menuPanel);

frame.setContentPane(contentPane);
frame.pack();
contentPane.setBorder(
BorderFactory.createEmptyBorder(
contentPane.getHeight() - (contentPane.getHeight() / 4),
20, 5, 20));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

private void addComp(JPanel panel, JComponent comp,
int gridx, int gridy,
int gridwidth, int gridheight,
double weightx, double weighty,
int fill) {
gbc.gridx = gridx;
gbc.gridy = gridy;
gbc.gridwidth = gridwidth;
gbc.gridheight = gridheight;
gbc.weightx = weightx;
gbc.weighty = weighty;
gbc.fill = fill;

panel.add(comp, gbc);
}

public static void main(String[] args) {
Runnable runnable = new Runnable() {
@Override
public void run() {
new MainMenu().displayGUI();
}
};
EventQueue.invokeLater(runnable);
}
}

import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new GridBagLayout());

menuPanel = new JPanel(new GridLayout(0, 1, 5, 5));
menuPanel.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButt","['""""""How can I overide this for child jpanel ? public void paintComponent(Graphics g) { Graphics2D g2d = (Graphics2D) g; Color color1 = getBackground(); Color color2 = color1.darker(); int w = getWidth(); int h = getHeight(); GradientPaint gp = new GradientPaint( 0, 0, color1, 0, h, color2); g2d.setPaint(gp); g2d.fillRect(0, 0, w, h); }\n\n5,4\n\nYou\'ll have to use that code in another separate class that extends JPanel. Afaik, there\'s no way for a parent component to change how its children are painted. So extend JPanel for your subcomponents and put the code you have here into your subpanels. @Brian, Thanks. Is it same for other JComponents(when need to overide its methods)? All JComponent classes have this paintComponent method, so yes. @AashMaharoon for some components you can set their background transparent using setOpaque(false) this way whatever the parent draws is still visible inside the child. If you are careful to invoke super.paintComponent(g), you can add the gradient directly to the panel as shown below. For usability, I would resist the temptation to try making the individual components transparent. Note also that opacity is controlled by the Look & Feel. import java.awt.Color; import java.awt.EventQueue; import java.awt.GradientPaint; import java.awt.Graphics; import java.awt.Graphics2D; import javax.swing.BorderFactory; import javax.swing.JFrame; import javax.swing.JLabel; import javax.swing.JPanel; import javax.swing.JTextField; public class GradientPanel extends JPanel { private static final int N = 32; public GradientPanel() { this.setBorder(BorderFactory.createEmptyBorder(N, N, N, N)); this.add(new JLabel(""Test:"", JLabel.CENTER)); this.add(new JTextField(""This is a test."")); } @Override public void paintComponent(Graphics g) { super.paintComponent(g); Graphics2D g2d = (Graphics2D) g; Color color1 = getBackground(); Color color2 = color1.darker(); int w = getWidth(); int h = getHeight(); GradientPaint gp = new GradientPaint( 0, 0, color1, 0, h, color2); g2d.setPaint(gp); g2d.fillRect(0, 0, w, h); } private void display() { JFrame f = new JFrame(""GradientPanel""); f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); f.add(this); f.pack(); f.setLocationRelativeTo(null); f.setVisible(true); } public static void main(String[] args) { EventQueue.invokeLater(new Runnable() { @Override public void run() { new GradientPanel().display(); } }); } }\n\n1.1k2\n\nthanks for your answer. What you have mentioned is already implemented for my parent JPanel( the codes also mentioned in my question). What I ask is, lets say, if another JPanel is required to add to your \'GradientPanel\'. and make its background gradient. Then how it can be done ? Ah, you want to alter the background of a JPanel for which you do not have source code access. You could use UIManager.put() to supply your own PanelUI with a custom implementation of paint(). I think this is what you were trying to do\n\njPanel1 = new JPanel() { @Override protected void paintComponent(Graphics g) { super.paintComponent(g); Graphics2D g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); int w = getWidth(); int h = getHeight(); Color color1 = new Color(81,80,106); Color color2 = new Color(165,164,241); GradientPaint gp = new GradientPaint(0, 0, color1, 0, h, color2); g2d.setPaint(gp); g2d.fillRect(0, 0, w, h); } };\n\n""""""', '""""""How to make JFrame background and JPanel transparent with only image showing\n\nHey I am trying to make a some kind of launcher and the ""window"" must be transparent because I want the image I am using to be the design of it if you understand what I mean. I tried to do setUndecorated(true); and setBackground(new Color(0, 0, 0, 0)); but it just looked weird. Here is a picture on how it looks: Here is my code:\n\nimport java.awt.Color; import java.awt.Dimension; import java.awt.Graphics; import java.awt.GridBagLayout; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.net.MalformedURLException; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.SwingUtilities;public class Launcher2 { public Launcher2() { JFrame frame = new JFrame(); frame.getContentPane().add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //frame.pack(); //had to remove, got an error from it... frame.setUndecorated(true); //transparent frame.setBackground(new Color(0, 0, 0, 0)); //transparent frame.setVisible(true); frame.setSize(1080, 550); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable(){ public void run() { new Launcher2(); } }); } @SuppressWarnings(""serial"") public class ImagePanel extends JPanel { BufferedImage img; public ImagePanel() { setLayout(new GridBagLayout()); try { img = ImageIO.read(new File(""C:/Users/Daniel/Pictures/Launcher3.png/"")); } catch (MalformedURLException ex) { Logger.getLogger(Launcher2.class.getName()).log(Level.SEVERE, null, ex); } catch (IOException ex) { Logger.getLogger(Launcher2.class.getName()).log(Level.SEVERE, null, ex); } } /** * Draws the image and sets the image dimension */ @Override protected void paintComponent(Graphics g) { super.paintComponent(g); //g.drawImage(img, 100, 100, 1080, 550, this); g.drawImage(img, 0, 0, getWidth(), getHeight(), this); } /** * Sets the JPanel dimension */ public Dimension getPreferredSize() { return new Dimension(1080, 550); } } }\n\nYou need to set the ImagePanel to setOpaque(false)\n\npublic ImagePanel() { setOpaque(false);\n\nAlso you were getting the exception because you need to setUndecorate(true) before you pack();\n\nJFrame frame = new JFrame(); frame.add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setUndecorated(true); frame.pack(); frame.setBackground(new Color(0, 0, 0, 0)); frame.setVisible(true);\n\nThose are the only two things I changed and it works. Also I got rid of the setSize()\n\nAlso use frame.setLocationRelativeTo(null); after pack() to center the frame. Here\'s is an example (just for future readers, since I think this may be a popular question)\n\nimport java.awt.*; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.URL; import java.util.logging.Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.*; public class CircleSplashScreen { public CircleSplashScreen() { JFrame frame = new JFrame(); frame.getContentPane().add(new ImagePanel()); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); frame.setUndecorated(true); frame.pack(); frame.setLocationRelativeTo(null); frame.setBackground(new Color(0, 0, 0, 0)); frame.setVisible(true); } public static void main(String[] args) { SwingUtilities.invokeLater(new Runnable() { public void run() { new CircleSplashScreen(); } }); } @SuppressWarnings(""serial"") public class ImagePanel extends JPanel { BufferedImage img; public ImagePanel() { setOpaque(false); setLayout(new GridBagLayout()); try { img = ImageIO.read(new URL(""http://www.iconsdb.com/icons/preview/royal-blue/stackoverflow-4-xxl.png"")); } catch (IOException ex) { Logger.getLogger(CircleSplashScreen.class.getName()).log(Level.SEVERE, null, ex); } } @Override protected void paintComponent(Graphics g) { super.paintComponent(g); g.drawImage(img, 0, 0, getWidth(), getHeight(), this); } @Override public Dimension getPreferredSize() { return new Dimension(500, 500); } } }\n\nPaul SamsothaPaul Samsotha\n\n3\n\nThank you so much again peeskillet, it finally works! :) Cant accept answer yet...""""""']",1,0.142857143,0.096153846
swing,JFrame,Swing: Obtain Image of JFrame,"By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.
For modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.
<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>","Most common ways to construct:
JFrame frame = new JFrame(""HelloWorldSwing"");
Based on 107 examples
 
JFrame frame = new JFrame();
Based on 87 examples","I believe you are looking for internal frames.

For the background image bit, sublass JPanel, override its paintComponent() method, and blit your image there. Then set an instance of that panel as your JFrame's content pane.

public class BackgroundPanel extends JPanel {
    private BufferedImage bgImg;

    public BackgroundPanel() {
        try {
            bgImg = ImageIO.read(BackgroundPanel.class.getResourceAsStream(
                    ""mybackgroundimage.png""));
        } catch (IOException ex) {
            System.err.println(""Could not load background image!"");
            ex.printStackTrace();
        }
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (bgImg != null) {
            g.drawImage(bgImg, 0, 0, null);
        }
    }
}

public class MyJFrame extends JFrame {

    public MyJFrame() {
        setContentPane(new BackgroundPanel());
    }

}","*******************usage scenario 1********************** 
----------usage scenario----------
Drawing an object using getGraphics() without extending JFrame
----------Explanation----------

----------Code Sample----------
import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new JPanel() {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
};
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new MyRectangleJPanel(); // changed this line
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

/* A JPanel that overrides the paintComponent() method and draws a rectangle */
class MyRectangleJPanel extends JPanel {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Swing: Obtain Image of JFrame
----------Explanation----------
ComponentImageCapture.java
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Graphics;

import java.awt.image.BufferedImage;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;

import javax.swing.*;

import javax.swing.border.TitledBorder;

import javax.imageio.ImageIO;

import java.io.File;

/**
Create a screenshot of a component.
@author Andrew Thompson
*/
class ComponentImageCapture {

static final String HELP =
""Type Ctrl-0 to get a screenshot of the current GUI.\n"" +
""The screenshot will be saved to the current "" +
""directory as 'screenshot.png'."";

public static BufferedImage getScreenShot(
Component component) {

BufferedImage image = new BufferedImage(
component.getWidth(),
component.getHeight(),
BufferedImage.TYPE_INT_RGB
);
// call the Component's paint method, using
// the Graphics object of the image.
component.paint( image.getGraphics() ); // alternately use .printAll(..)
return image;
}

public static void main(String[] args) {
Runnable r = new Runnable() {
public void run() {
final JFrame f = new JFrame(""Test Screenshot"");

JMenuItem screenshot =
new JMenuItem(""Screenshot"");
screenshot.setAccelerator(
KeyStroke.getKeyStroke(
KeyEvent.VK_0,
InputEvent.CTRL_DOWN_MASK
));
screenshot.addActionListener(
new ActionListener(){
public void actionPerformed(ActionEvent ae) {
BufferedImage img = getScreenShot(
f.getContentPane() );
JOptionPane.showMessageDialog(
null,
new JLabel(
new ImageIcon(
img.getScaledInstance(
img.getWidth(null)/2,
img.getHeight(null)/2,
Image.SCALE_SMOOTH )
)));
try {
// write the image as a PNG
ImageIO.write(
img,
""png"",
new File(""screenshot.png""));
} catch(Exception e) {
e.printStackTrace();
}
}
} );
JMenu menu = new JMenu(""Other"");
menu.add(screenshot);
JMenuBar mb = new JMenuBar();
mb.add(menu);
f.setJMenuBar(mb);

JPanel p = new JPanel( new BorderLayout(5,5) );
p.setBorder( new TitledBorder(""Main GUI"") );
p.add( new JScrollPane(new JTree()),
BorderLayout.WEST );
p.add( new JScrollPane( new JTextArea(HELP,10,30) ),
BorderLayout.CENTER );

f.setContentPane( p );
f.pack();
f.setLocationRelativeTo(null);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
f.setVisible(true);
}
};
SwingUtilities.invokeLater(r);
}
} 

import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class LabelRenderTest {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {

String title = """"
+ ""
Do U C Me?

""
+ ""Here is a long string that will wrap. ""
+ ""The effect we want is a multi-line label."";

JFrame f = new JFrame(""Label Render Test"");
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

BufferedImage image = new BufferedImage(
400,
300,
BufferedImage.TYPE_INT_RGB);
Graphics2D imageGraphics = image.createGraphics();
GradientPaint gp = new GradientPaint(
20f,
20f,
Color.red,
380f,
280f,
Color.orange);
imageGraphics.setPaint(gp);
imageGraphics.fillRect(0, 0, 400, 300);

JLabel textLabel = new JLabel(title);
textLabel.setSize(textLabel.getPreferredSize());

Dimension d = textLabel.getPreferredSize();
BufferedImage bi = new BufferedImage(
d.width,
d.height,
BufferedImage.TYPE_INT_ARGB);
Graphics g = bi.createGraphics();
g.setColor(new Color(255, 255, 255, 128));
g.fillRoundRect(
0,
0,
bi.getWidth(f),
bi.getHeight(f),
15,
10);
g.setColor(Color.black);
textLabel.paint(g);
Graphics g2 = image.getGraphics();
g2.drawImage(bi, 20, 20, f);

ImageIcon ii = new ImageIcon(image);
JLabel imageLabel = new JLabel(ii);

f.getContentPane().add(imageLabel);
f.pack();
f.setLocationByPlatform(true);

f.setVisible(true);
}
});
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
how to visualize console java in JFrame/JPanel
----------Explanation----------
You need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I've used something like this for one of my programs:
----------Code Sample----------
import java.io.IOException;
import java.io.OutputStream;

import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

public class TextAreaOutputStream extends OutputStream {

private final JTextArea textArea;
private final StringBuilder sb = new StringBuilder();
private String title;

public TextAreaOutputStream(final JTextArea textArea, String title) {
this.textArea = textArea;
this.title = title;
sb.append(title + ""> "");
}

@Override
public void flush() {
}

@Override
public void close() {
}

@Override
public void write(int b) throws IOException {

if (b == '\r')
return;

if (b == '\n') {
final String text = sb.toString() + ""\n"";
SwingUtilities.invokeLater(new Runnable() {
public void run() {
textArea.append(text);
}
});
sb.setLength(0);
sb.append(title + ""> "");
return;
}

sb.append((char) b);
}
}

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintStream;
import javax.swing.*;

@SuppressWarnings(""serial"")
public class TextAreaOutputStreamTest extends JPanel {

private JTextArea textArea = new JTextArea(15, 30);
private TextAreaOutputStream taOutputStream = new TextAreaOutputStream(
textArea, ""Test"");

public TextAreaOutputStreamTest() {
setLayout(new BorderLayout());
add(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
System.setOut(new PrintStream(taOutputStream));

int timerDelay = 1000;
new Timer(timerDelay , new ActionListener() {
int count = 0;
@Override
public void actionPerformed(ActionEvent arg0) {

// though this outputs via System.out.println, it actually displays
// in the JTextArea:
System.out.println(""Count is now: "" + count + "" seconds"");
count++;
}
}).start();
}

private static void createAndShowGui() {
JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new TextAreaOutputStreamTest());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Using removeActionListener but not removing - JAVA
----------Explanation----------
For example check this test code:
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class TestActionListeners extends JPanel {
private JButton button = new JButton(""Button"");

public TestActionListeners() {
add(button);

button.addActionListener(new Listener1());
}

private static void createAndShowGui() {
TestActionListeners mainPanel = new TestActionListeners();

JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class Listener1 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 1"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener1());
button.addActionListener(new Listener2());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener1;
}

@Override
public int hashCode() {
return Listener1.class.hashCode();
}
}

class Listener2 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 2"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener2());
button.addActionListener(new Listener1());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener2;
}

@Override
public int hashCode() {
return Listener2.class.hashCode();
}
}

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class DisableAButton extends JPanel {
private JButton disableMeButton1 = new JButton(""Disable Me 1"");
private JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));

public DisableAButton() {
disableMeButton1.addActionListener(new ActionListener() {

@Override
public void actionPerformed(ActionEvent e) {
AbstractButton buttonSource = (AbstractButton) e.getSource();
JOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");

buttonSource.setEnabled(false);
}
});

add(disableMeButton1);
add(disableMeButton2);
}

private static void createAndShowGui() {
DisableAButton mainPanel = new DisableAButton();

JFrame frame = new JFrame(""DisableAButton"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class DisableMe2Action extends AbstractAction {
public DisableMe2Action(String name) {
super(name);
}

@Override
public void actionPerformed(ActionEvent e) {
JComponent source = (JComponent) e.getSource();
JOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");

setEnabled(false);
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java GUI: How to Set Focus on JButton in JPanel on JFrame?
----------Explanation----------
Basically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.
----------Code Sample----------
frame.getRootPane().setDefaultButton(start);
start.requestFocus();

package sof;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class TestFrame {

public static void main(String[] args) {
// Launch the frame:
JFrame frame = new JFrame();
frame.setTitle(""Welcome!"");
frame.setSize(520, 480);
frame.setLocationRelativeTo(null);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

// Add the image:
ImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");
JPanel heroShotPanel = new JPanel();
JLabel heroShot = new JLabel(heroShotImage);
heroShotPanel.add(heroShot);

// Create a panel to hold the ""Start"" button:
JPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

JButton start = new JButton(""Start"");
start.setToolTipText(""Click to use library"");

start.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""I AM PRESSED"");
}
});

submitPanel.add(start);

frame.getContentPane().add(heroShotPanel, BorderLayout.NORTH);
frame.getContentPane().add(submitPanel, BorderLayout.SOUTH);
frame.setVisible(true);
frame.getRootPane().setDefaultButton(start);
start.requestFocus();
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to draw simple 3D points(x,y,z) in java using Java3D API?
----------Explanation----------
Another important thing:
----------Code Sample----------
simpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);
SimpleU.getViewer().getView().setBackClipDistance ( 300.0 );

MouseRotate m1=new MouseRotate();
MouseZoom m2=new MouseZoom();
MouseTranslate m3=new MouseTranslate();

//skipped imports relating with char limit in this post
public final class energon extends JPanel {
int s = 0, count = 0;

public energon() {

setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);

BranchGroup scene = createSceneGraph();
scene.compile();

// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);


// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();

simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();

QuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;

//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
lsa.setNormals(0, normals);
lsa.setCoordinates(0, pts);
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setGeometry(lsa);
sh.setAppearance(app);
sh.setPickable(true); 
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh);

DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}

GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
//now you can use Shape3D-type sh as a 3D-surface-containing shape

//skipping imports since char limit is reached in this answer
public final class energon extends JPanel {
int s = 0, count = 0;
public energon() {
setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);
BranchGroup scene = createSceneGraph();
scene.compile();
// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);
// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();
simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;
//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setAppearance(app);
sh.setPickable(true);
GeometryArray ga=null;
GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh); 
DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
adding progress bar to each table cell for file progress - Java
----------Explanation----------
And finally, notify the table of changes to the model so it will repaint itself.
----------Code Sample----------
public class UpdateTable {

public static void main(String[] args) {
new UpdateTable();
}

public UpdateTable() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

UpdatableTableModel model = new UpdatableTableModel();

JTable table = new JTable();
table.setModel(model);

table.getColumn(""Status"").setCellRenderer(new ProgressCellRender());

JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new JScrollPane(table));
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);

FileFinderWorker worker = new FileFinderWorker(model);
worker.execute();

}
});
}

public class ProgressCellRender extends JProgressBar implements TableCellRenderer {

@Override
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
int progress = 0;
if (value instanceof Float) {
progress = Math.round(((Float) value) * 100f);
} else if (value instanceof Integer) {
progress = (int) value;
}
setValue(progress);
return this;
}
}

public class RowData {

private File file;
private String type;
private long length;
private float status;

public RowData(File file, String type) {
this.file = file;
this.type = type;
this.length = file.length();
this.status = 0f;
}

public File getFile() {
return file;
}

public long getLength() {
return length;
}

public float getStatus() {
return status;
}

public String getType() {
return type;
}

public void setStatus(float status) {
this.status = status;
}
}

public class UpdatableTableModel extends AbstractTableModel {

private List rows;
private Map mapLookup;

public UpdatableTableModel() {
rows = new ArrayList<>(25);
mapLookup = new HashMap<>(25);
}

@Override
public int getRowCount() {
return rows.size();
}

@Override
public int getColumnCount() {
return 4;
}

@Override
public String getColumnName(int column) {
String name = ""??"";
switch (column) {
case 0:
name = ""File"";
break;
case 1:
name = ""File Type"";
break;
case 2:
name = ""Size"";
break;
case 3:
name = ""Status"";
break;
}
return name;
}

@Override
public Object getValueAt(int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
Object value = null;
switch (columnIndex) {
case 0:
value = rowData.getFile();
break;
case 1:
value = rowData.getType();
break;
case 2:
value = rowData.getLength();
break;
case 3:
value = rowData.getStatus();
break;
}
return value;
}

@Override
public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
switch (columnIndex) {
case 3:
if (aValue instanceof Float) {
rowData.setStatus((float) aValue);
}
break;
}
}

public void addFile(File file) {
RowData rowData = new RowData(file, ""A File"");
mapLookup.put(file, rowData);
rows.add(rowData);
fireTableRowsInserted(rows.size() - 1, rows.size() - 1);
}

protected void updateStatus(File file, int progress) {
RowData rowData = mapLookup.get(file);
if (rowData != null) {
int row = rows.indexOf(rowData);
float p = (float) progress / 100f;
setValueAt(p, row, 3);
fireTableCellUpdated(row, 3);
}
}
}

public class FileFinderWorker extends SwingWorker, File> {

private UpdatableTableModel model;

public FileFinderWorker(UpdatableTableModel model) {
this.model = model;
}

@Override
protected void process(List chunks) {
for (File file : chunks) {
model.addFile(file);
}
}

@Override
protected List doInBackground() throws Exception {
File files[] = new File(System.getProperty(""user.dir"")).listFiles();
List lstFiles = new ArrayList<>(Arrays.asList(files));
for (File file : lstFiles) {
// You could actually publish the entire array, but I'm doing this
// deliberatly ;)
publish(file);
}
return lstFiles;
}

@Override
protected void done() {
try {
List files = get();
for (File file : files) {
new FileReaderWorker(model, file).execute();
}
} catch (Exception exp) {
exp.printStackTrace();
}
}
}

public class FileReaderWorker extends SwingWorker {

private File currentFile;
private UpdatableTableModel model;

public FileReaderWorker(UpdatableTableModel model, File file) {
this.currentFile = file;
this.model = model;

addPropertyChangeListener(new PropertyChangeListener() {
@Override
public void propertyChange(PropertyChangeEvent evt) {
if (evt.getPropertyName().equals(""progress"")) {
FileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());
}
}
});

}

@Override
protected File doInBackground() throws Exception {
if (currentFile.isFile()) {
setProgress(0);
long fileLength = currentFile.length();
BufferedReader reader = null;
char[] cbuf = new char[1024];
try {
reader = new BufferedReader(new FileReader(currentFile));
int bytesRead = -1;
int totalBytesRead = 0;
while ((bytesRead = reader.read(cbuf)) != -1) {
totalBytesRead += bytesRead;
int progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);
setProgress(progress);
Thread.sleep(25);
}
setProgress(100);
} catch (Exception e) {
e.printStackTrace();
setProgress(100);
} finally {
try {
reader.close();
} catch (Exception e) {
}
}
} else {
setProgress(100);
}
return currentFile;
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Increasing distance from top of JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private GridBagConstraints gbc;

public MainMenu() {
gbc = new GridBagConstraints();
gbc.insets = new Insets(15, 15, 15, 15);
gbc.anchor = GridBagConstraints.FIRST_LINE_START;
}

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new BorderLayout());

menuPanel = new JPanel(new GridBagLayout());
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButton = new JButton(""Play"");
instructionButton = new JButton(""Instructions"");
scoreboardButton = new JButton(""Scoreboard"");
exitButton = new JButton(""Exit"");

addComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);

contentPane.add(menuPanel);

frame.setContentPane(contentPane);
frame.pack();
contentPane.setBorder(
BorderFactory.createEmptyBorder(
contentPane.getHeight() - (contentPane.getHeight() / 4),
20, 5, 20));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

private void addComp(JPanel panel, JComponent comp,
int gridx, int gridy,
int gridwidth, int gridheight,
double weightx, double weighty,
int fill) {
gbc.gridx = gridx;
gbc.gridy = gridy;
gbc.gridwidth = gridwidth;
gbc.gridheight = gridheight;
gbc.weightx = weightx;
gbc.weighty = weighty;
gbc.fill = fill;

panel.add(comp, gbc);
}

public static void main(String[] args) {
Runnable runnable = new Runnable() {
@Override
public void run() {
new MainMenu().displayGUI();
}
};
EventQueue.invokeLater(runnable);
}
}

import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new GridBagLayout());

menuPanel = new JPanel(new GridLayout(0, 1, 5, 5));
menuPanel.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButt","['""""""Adding image to JFrame\n\nSo I am using Eclipse with Windows builder. I was just wondering if there was anyway I can import an image that\'ll show up on the JFrame that I can easily move around and re-size instead of setting the location and size and drawing it. \n\nAdd the image to a JLabel\n\n\n\nThat was a good idea, thanks for that. Here is a simple example of adding an image to a JFrame:\n\nframe.add(new JLabel(new ImageIcon(""Path/To/Your/Image.png"")));\n\n\n\n\n\nThere is no specialized image component provided in Swing (which is sad in my opinion). So, there are a few options:\n\nAs @Reimeus said: Use a JLabel with an icon. Create in the window builder a JPanel, that will represent the location of the image. Then add your own custom image component to the JPanel using a few lines of code you will never have to change. They should look like this:\n\nJImageComponent ic = new JImageComponent(myImageGoesHere); imagePanel.add(ic);\n\nwhere JImageComponent is a self created class that extends JComponent that overrides the paintComponent() method to draw the image. Martijn CourteauxMartijn Courteaux\n\n 0\n\nIf you are using Netbeans to develop, use JLabel and change its icon property. 1,3\n\nTHIS WORKED FOR ME VERY WELL; I\'M A NEWBIE. Why only netbeans? Java is Java, regardless of whether you use netbeans, eclipse or anything else. @AndreaOggioni Did I mentioned that only Netbeans? There are several ways to develop Java app. Using Netbeans is just one of them. My answer is for those who are using Netbeans. But it can applied other IDEs also.""""""']'",1,1,0.777777778
swing,JFrame,Transparent JFrame background,"By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.
For modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.
<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>","Most common ways to construct:
JFrame frame = new JFrame(""HelloWorldSwing"");
Based on 107 examples
 
JFrame frame = new JFrame();
Based on 87 examples","You should make content pane transparent too.

frame.setUndecorated(true);
frame.getContentPane().setBackground(new Color(1.0f,1.0f,1.0f,0.0f));
frame.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));","*******************usage scenario 1********************** 
----------usage scenario----------
Drawing an object using getGraphics() without extending JFrame
----------Explanation----------

----------Code Sample----------
import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new JPanel() {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
};
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

import javax.swing.*;
import java.awt.*;

public class Main {
public static void main(String[] args) {
JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setVisible(true);
frame.setSize(600, 400);

JPanel panel = new MyRectangleJPanel(); // changed this line
frame.add(panel);

// Graphics g = panel.getGraphics();
// g.setColor(Color.BLUE);
// g.fillRect(0, 0, 100, 100);

frame.validate(); // because you added panel after setVisible was called
frame.repaint(); // because you added panel after setVisible was called
}
}

/* A JPanel that overrides the paintComponent() method and draws a rectangle */
class MyRectangleJPanel extends JPanel {
@Override
public void paintComponent(Graphics g) {
super.paintComponent(g);
g.setColor(Color.BLUE);
g.fillRect(0, 0, 100, 100);
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Swing: Obtain Image of JFrame
----------Explanation----------
ComponentImageCapture.java
----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Graphics;

import java.awt.image.BufferedImage;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.InputEvent;

import javax.swing.*;

import javax.swing.border.TitledBorder;

import javax.imageio.ImageIO;

import java.io.File;

/**
Create a screenshot of a component.
@author Andrew Thompson
*/
class ComponentImageCapture {

static final String HELP =
""Type Ctrl-0 to get a screenshot of the current GUI.\n"" +
""The screenshot will be saved to the current "" +
""directory as 'screenshot.png'."";

public static BufferedImage getScreenShot(
Component component) {

BufferedImage image = new BufferedImage(
component.getWidth(),
component.getHeight(),
BufferedImage.TYPE_INT_RGB
);
// call the Component's paint method, using
// the Graphics object of the image.
component.paint( image.getGraphics() ); // alternately use .printAll(..)
return image;
}

public static void main(String[] args) {
Runnable r = new Runnable() {
public void run() {
final JFrame f = new JFrame(""Test Screenshot"");

JMenuItem screenshot =
new JMenuItem(""Screenshot"");
screenshot.setAccelerator(
KeyStroke.getKeyStroke(
KeyEvent.VK_0,
InputEvent.CTRL_DOWN_MASK
));
screenshot.addActionListener(
new ActionListener(){
public void actionPerformed(ActionEvent ae) {
BufferedImage img = getScreenShot(
f.getContentPane() );
JOptionPane.showMessageDialog(
null,
new JLabel(
new ImageIcon(
img.getScaledInstance(
img.getWidth(null)/2,
img.getHeight(null)/2,
Image.SCALE_SMOOTH )
)));
try {
// write the image as a PNG
ImageIO.write(
img,
""png"",
new File(""screenshot.png""));
} catch(Exception e) {
e.printStackTrace();
}
}
} );
JMenu menu = new JMenu(""Other"");
menu.add(screenshot);
JMenuBar mb = new JMenuBar();
mb.add(menu);
f.setJMenuBar(mb);

JPanel p = new JPanel( new BorderLayout(5,5) );
p.setBorder( new TitledBorder(""Main GUI"") );
p.add( new JScrollPane(new JTree()),
BorderLayout.WEST );
p.add( new JScrollPane( new JTextArea(HELP,10,30) ),
BorderLayout.CENTER );

f.setContentPane( p );
f.pack();
f.setLocationRelativeTo(null);
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
f.setVisible(true);
}
};
SwingUtilities.invokeLater(r);
}
} 

import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;

public class LabelRenderTest {

public static void main(String[] args) {
SwingUtilities.invokeLater( new Runnable() {
public void run() {

String title = """"
+ ""
Do U C Me?

""
+ ""Here is a long string that will wrap. ""
+ ""The effect we want is a multi-line label."";

JFrame f = new JFrame(""Label Render Test"");
f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

BufferedImage image = new BufferedImage(
400,
300,
BufferedImage.TYPE_INT_RGB);
Graphics2D imageGraphics = image.createGraphics();
GradientPaint gp = new GradientPaint(
20f,
20f,
Color.red,
380f,
280f,
Color.orange);
imageGraphics.setPaint(gp);
imageGraphics.fillRect(0, 0, 400, 300);

JLabel textLabel = new JLabel(title);
textLabel.setSize(textLabel.getPreferredSize());

Dimension d = textLabel.getPreferredSize();
BufferedImage bi = new BufferedImage(
d.width,
d.height,
BufferedImage.TYPE_INT_ARGB);
Graphics g = bi.createGraphics();
g.setColor(new Color(255, 255, 255, 128));
g.fillRoundRect(
0,
0,
bi.getWidth(f),
bi.getHeight(f),
15,
10);
g.setColor(Color.black);
textLabel.paint(g);
Graphics g2 = image.getGraphics();
g2.drawImage(bi, 20, 20, f);

ImageIcon ii = new ImageIcon(image);
JLabel imageLabel = new JLabel(ii);

f.getContentPane().add(imageLabel);
f.pack();
f.setLocationByPlatform(true);

f.setVisible(true);
}
});
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
how to visualize console java in JFrame/JPanel
----------Explanation----------
You need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I've used something like this for one of my programs:
----------Code Sample----------
import java.io.IOException;
import java.io.OutputStream;

import javax.swing.JTextArea;
import javax.swing.SwingUtilities;

public class TextAreaOutputStream extends OutputStream {

private final JTextArea textArea;
private final StringBuilder sb = new StringBuilder();
private String title;

public TextAreaOutputStream(final JTextArea textArea, String title) {
this.textArea = textArea;
this.title = title;
sb.append(title + ""> "");
}

@Override
public void flush() {
}

@Override
public void close() {
}

@Override
public void write(int b) throws IOException {

if (b == '\r')
return;

if (b == '\n') {
final String text = sb.toString() + ""\n"";
SwingUtilities.invokeLater(new Runnable() {
public void run() {
textArea.append(text);
}
});
sb.setLength(0);
sb.append(title + ""> "");
return;
}

sb.append((char) b);
}
}

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.PrintStream;
import javax.swing.*;

@SuppressWarnings(""serial"")
public class TextAreaOutputStreamTest extends JPanel {

private JTextArea textArea = new JTextArea(15, 30);
private TextAreaOutputStream taOutputStream = new TextAreaOutputStream(
textArea, ""Test"");

public TextAreaOutputStreamTest() {
setLayout(new BorderLayout());
add(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
JScrollPane.HORIZONTAL_SCROLLBAR_NEVER));
System.setOut(new PrintStream(taOutputStream));

int timerDelay = 1000;
new Timer(timerDelay , new ActionListener() {
int count = 0;
@Override
public void actionPerformed(ActionEvent arg0) {

// though this outputs via System.out.println, it actually displays
// in the JTextArea:
System.out.println(""Count is now: "" + count + "" seconds"");
count++;
}
}).start();
}

private static void createAndShowGui() {
JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.getContentPane().add(new TextAreaOutputStreamTest());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Using removeActionListener but not removing - JAVA
----------Explanation----------
For example check this test code:
----------Code Sample----------
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class TestActionListeners extends JPanel {
private JButton button = new JButton(""Button"");

public TestActionListeners() {
add(button);

button.addActionListener(new Listener1());
}

private static void createAndShowGui() {
TestActionListeners mainPanel = new TestActionListeners();

JFrame frame = new JFrame(""Test"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class Listener1 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 1"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener1());
button.addActionListener(new Listener2());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener1;
}

@Override
public int hashCode() {
return Listener1.class.hashCode();
}
}

class Listener2 implements ActionListener {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""in listener 2"");

AbstractButton button = (AbstractButton) e.getSource();

button.removeActionListener(new Listener2());
button.addActionListener(new Listener1());
}

@Override
public boolean equals(Object obj) {
return obj instanceof Listener2;
}

@Override
public int hashCode() {
return Listener2.class.hashCode();
}
}

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public class DisableAButton extends JPanel {
private JButton disableMeButton1 = new JButton(""Disable Me 1"");
private JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));

public DisableAButton() {
disableMeButton1.addActionListener(new ActionListener() {

@Override
public void actionPerformed(ActionEvent e) {
AbstractButton buttonSource = (AbstractButton) e.getSource();
JOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");

buttonSource.setEnabled(false);
}
});

add(disableMeButton1);
add(disableMeButton2);
}

private static void createAndShowGui() {
DisableAButton mainPanel = new DisableAButton();

JFrame frame = new JFrame(""DisableAButton"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class DisableMe2Action extends AbstractAction {
public DisableMe2Action(String name) {
super(name);
}

@Override
public void actionPerformed(ActionEvent e) {
JComponent source = (JComponent) e.getSource();
JOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");

setEnabled(false);
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java GUI: How to Set Focus on JButton in JPanel on JFrame?
----------Explanation----------
Basically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.
----------Code Sample----------
frame.getRootPane().setDefaultButton(start);
start.requestFocus();

package sof;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class TestFrame {

public static void main(String[] args) {
// Launch the frame:
JFrame frame = new JFrame();
frame.setTitle(""Welcome!"");
frame.setSize(520, 480);
frame.setLocationRelativeTo(null);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

// Add the image:
ImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");
JPanel heroShotPanel = new JPanel();
JLabel heroShot = new JLabel(heroShotImage);
heroShotPanel.add(heroShot);

// Create a panel to hold the ""Start"" button:
JPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

JButton start = new JButton(""Start"");
start.setToolTipText(""Click to use library"");

start.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
System.out.println(""I AM PRESSED"");
}
});

submitPanel.add(start);

frame.getContentPane().add(heroShotPanel, BorderLayout.NORTH);
frame.getContentPane().add(submitPanel, BorderLayout.SOUTH);
frame.setVisible(true);
frame.getRootPane().setDefaultButton(start);
start.requestFocus();
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to draw simple 3D points(x,y,z) in java using Java3D API?
----------Explanation----------
Another important thing:
----------Code Sample----------
simpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);
SimpleU.getViewer().getView().setBackClipDistance ( 300.0 );

MouseRotate m1=new MouseRotate();
MouseZoom m2=new MouseZoom();
MouseTranslate m3=new MouseTranslate();

//skipped imports relating with char limit in this post
public final class energon extends JPanel {
int s = 0, count = 0;

public energon() {

setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);

BranchGroup scene = createSceneGraph();
scene.compile();

// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);


// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();

simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();

QuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;

//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
lsa.setNormals(0, normals);
lsa.setCoordinates(0, pts);
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setGeometry(lsa);
sh.setAppearance(app);
sh.setPickable(true); 
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh);

DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}

GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
//now you can use Shape3D-type sh as a 3D-surface-containing shape

//skipping imports since char limit is reached in this answer
public final class energon extends JPanel {
int s = 0, count = 0;
public energon() {
setLayout(new BorderLayout());
GraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();
Canvas3D canvas3D = new Canvas3D(gc);
add(""Center"", canvas3D);
BranchGroup scene = createSceneGraph();
scene.compile();
// SimpleUniverse is a Convenience Utility class
SimpleUniverse simpleU = new SimpleUniverse(canvas3D);
// This moves the ViewPlatform back a bit so the
// objects in the scene can be viewed.
simpleU.getViewingPlatform().setNominalViewingTransform();
simpleU.addBranchGraph(scene);
}
public BranchGroup createSceneGraph() {
BranchGroup lineGroup = new BranchGroup();
Appearance app = new Appearance();
Vector3f [] normals=new Vector3f[24];
for(int i=0;i<24;i++)normals[i]=new Vector3f();
Point3f [] pts=new Point3f[24];
for(int i=0;i<24;i++)pts[i]=new Point3f();
Color3f [] clrs=new Color3f[24];
for(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);
//cube=6 quads 
//first quad
pts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;
pts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;
pts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;
pts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;
normals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;
//second quad
pts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;
pts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;
pts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;
pts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;
normals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;
//third quad
pts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;
pts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;
pts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;
pts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;
normals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;
//fourth quad
pts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;
pts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;
pts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;
pts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;
normals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;
//fifth quad
pts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;
pts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;
pts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;
pts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;
normals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;
//sixth quad
pts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;
pts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;
pts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;
pts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;
normals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;
Shape3D sh=new Shape3D();
PolygonAttributes pa=new PolygonAttributes();
pa.setPolygonMode(PolygonAttributes.POLYGON_FILL);
pa.setCullFace(PolygonAttributes.CULL_NONE);
Material mat=new Material();
mat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));
mat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));
mat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));
mat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));
mat.setLightingEnable(true);
RenderingAttributes ra=new RenderingAttributes();
ra.setIgnoreVertexColors(true);
ColoringAttributes ca=new ColoringAttributes();
ca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);
ca.setColor(new Color3f(0.2f,0.5f,0.9f));
app.setColoringAttributes(ca);
app.setRenderingAttributes(ra);
app.setMaterial(mat);
app.setPolygonAttributes(pa);
sh.setAppearance(app);
sh.setPickable(true);
GeometryArray ga=null;
GeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);
Triangulator tr = new Triangulator();
NormalGenerator normalGenerator = new NormalGenerator();
Stripifier st = new Stripifier(); 
int [] iint=new int[]{4,4,4,4,4,4};
ginfo.setStripCounts(iint);
ginfo.setCoordinates(pts); 
tr.triangulate(ginfo); // ginfo contains the geometry 
normalGenerator.generateNormals( ginfo );
st.stripify(ginfo);
sh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.
TransformGroup objRotate = new TransformGroup();
objRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
objRotate.addChild(sh); 
DirectionalLight light1=new DirectionalLight();
light1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));
light1.setColor(new Color3f(1f,1f,1f));
light1.setDirection(new Vector3f(0,1,0));
objRotate.addChild(light1);
DirectionalLight light2=new DirectionalLight();
light2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));
light2.setColor(new Color3f(0.5f,1f,0.5f));
light2.setDirection(new Vector3f(0,-1,0));
objRotate.addChild(light2);
MouseRotate f1=new MouseRotate();
f1.setSchedulingBounds(new BoundingSphere());
f1.setTransformGroup(objRotate);
lineGroup.addChild(f1);
objRotate.addChild(new Sphere(0.60f,1,128));
lineGroup.addChild(objRotate);
return lineGroup;
}

public static void main(String[] args) {
JFrame frame = new JFrame();
frame.add(new JScrollPane(new energon()));
frame.setSize(300, 300);
frame.setVisible(true);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
adding progress bar to each table cell for file progress - Java
----------Explanation----------
And finally, notify the table of changes to the model so it will repaint itself.
----------Code Sample----------
public class UpdateTable {

public static void main(String[] args) {
new UpdateTable();
}

public UpdateTable() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

UpdatableTableModel model = new UpdatableTableModel();

JTable table = new JTable();
table.setModel(model);

table.getColumn(""Status"").setCellRenderer(new ProgressCellRender());

JFrame frame = new JFrame();
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new JScrollPane(table));
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);

FileFinderWorker worker = new FileFinderWorker(model);
worker.execute();

}
});
}

public class ProgressCellRender extends JProgressBar implements TableCellRenderer {

@Override
public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
int progress = 0;
if (value instanceof Float) {
progress = Math.round(((Float) value) * 100f);
} else if (value instanceof Integer) {
progress = (int) value;
}
setValue(progress);
return this;
}
}

public class RowData {

private File file;
private String type;
private long length;
private float status;

public RowData(File file, String type) {
this.file = file;
this.type = type;
this.length = file.length();
this.status = 0f;
}

public File getFile() {
return file;
}

public long getLength() {
return length;
}

public float getStatus() {
return status;
}

public String getType() {
return type;
}

public void setStatus(float status) {
this.status = status;
}
}

public class UpdatableTableModel extends AbstractTableModel {

private List rows;
private Map mapLookup;

public UpdatableTableModel() {
rows = new ArrayList<>(25);
mapLookup = new HashMap<>(25);
}

@Override
public int getRowCount() {
return rows.size();
}

@Override
public int getColumnCount() {
return 4;
}

@Override
public String getColumnName(int column) {
String name = ""??"";
switch (column) {
case 0:
name = ""File"";
break;
case 1:
name = ""File Type"";
break;
case 2:
name = ""Size"";
break;
case 3:
name = ""Status"";
break;
}
return name;
}

@Override
public Object getValueAt(int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
Object value = null;
switch (columnIndex) {
case 0:
value = rowData.getFile();
break;
case 1:
value = rowData.getType();
break;
case 2:
value = rowData.getLength();
break;
case 3:
value = rowData.getStatus();
break;
}
return value;
}

@Override
public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
RowData rowData = rows.get(rowIndex);
switch (columnIndex) {
case 3:
if (aValue instanceof Float) {
rowData.setStatus((float) aValue);
}
break;
}
}

public void addFile(File file) {
RowData rowData = new RowData(file, ""A File"");
mapLookup.put(file, rowData);
rows.add(rowData);
fireTableRowsInserted(rows.size() - 1, rows.size() - 1);
}

protected void updateStatus(File file, int progress) {
RowData rowData = mapLookup.get(file);
if (rowData != null) {
int row = rows.indexOf(rowData);
float p = (float) progress / 100f;
setValueAt(p, row, 3);
fireTableCellUpdated(row, 3);
}
}
}

public class FileFinderWorker extends SwingWorker, File> {

private UpdatableTableModel model;

public FileFinderWorker(UpdatableTableModel model) {
this.model = model;
}

@Override
protected void process(List chunks) {
for (File file : chunks) {
model.addFile(file);
}
}

@Override
protected List doInBackground() throws Exception {
File files[] = new File(System.getProperty(""user.dir"")).listFiles();
List lstFiles = new ArrayList<>(Arrays.asList(files));
for (File file : lstFiles) {
// You could actually publish the entire array, but I'm doing this
// deliberatly ;)
publish(file);
}
return lstFiles;
}

@Override
protected void done() {
try {
List files = get();
for (File file : files) {
new FileReaderWorker(model, file).execute();
}
} catch (Exception exp) {
exp.printStackTrace();
}
}
}

public class FileReaderWorker extends SwingWorker {

private File currentFile;
private UpdatableTableModel model;

public FileReaderWorker(UpdatableTableModel model, File file) {
this.currentFile = file;
this.model = model;

addPropertyChangeListener(new PropertyChangeListener() {
@Override
public void propertyChange(PropertyChangeEvent evt) {
if (evt.getPropertyName().equals(""progress"")) {
FileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());
}
}
});

}

@Override
protected File doInBackground() throws Exception {
if (currentFile.isFile()) {
setProgress(0);
long fileLength = currentFile.length();
BufferedReader reader = null;
char[] cbuf = new char[1024];
try {
reader = new BufferedReader(new FileReader(currentFile));
int bytesRead = -1;
int totalBytesRead = 0;
while ((bytesRead = reader.read(cbuf)) != -1) {
totalBytesRead += bytesRead;
int progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);
setProgress(progress);
Thread.sleep(25);
}
setProgress(100);
} catch (Exception e) {
e.printStackTrace();
setProgress(100);
} finally {
try {
reader.close();
} catch (Exception e) {
}
}
} else {
setProgress(100);
}
return currentFile;
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Increasing distance from top of JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private GridBagConstraints gbc;

public MainMenu() {
gbc = new GridBagConstraints();
gbc.insets = new Insets(15, 15, 15, 15);
gbc.anchor = GridBagConstraints.FIRST_LINE_START;
}

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new BorderLayout());

menuPanel = new JPanel(new GridBagLayout());
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButton = new JButton(""Play"");
instructionButton = new JButton(""Instructions"");
scoreboardButton = new JButton(""Scoreboard"");
exitButton = new JButton(""Exit"");

addComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);
addComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,
GridBagConstraints.HORIZONTAL);

contentPane.add(menuPanel);

frame.setContentPane(contentPane);
frame.pack();
contentPane.setBorder(
BorderFactory.createEmptyBorder(
contentPane.getHeight() - (contentPane.getHeight() / 4),
20, 5, 20));
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

private void addComp(JPanel panel, JComponent comp,
int gridx, int gridy,
int gridwidth, int gridheight,
double weightx, double weighty,
int fill) {
gbc.gridx = gridx;
gbc.gridy = gridy;
gbc.gridwidth = gridwidth;
gbc.gridheight = gridheight;
gbc.weightx = weightx;
gbc.weighty = weighty;
gbc.fill = fill;

panel.add(comp, gbc);
}

public static void main(String[] args) {
Runnable runnable = new Runnable() {
@Override
public void run() {
new MainMenu().displayGUI();
}
};
EventQueue.invokeLater(runnable);
}
}

import java.awt.*;
import javax.swing.*;

public class MainMenu {

private JButton playButton;
private JButton instructionButton;
private JButton scoreboardButton;
private JButton exitButton;

private JPanel menuPanel;

private void displayGUI() {
JFrame frame = new JFrame(""Main Menu"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

JPanel contentPane = new JPanel(new GridBagLayout());

menuPanel = new JPanel(new GridLayout(0, 1, 5, 5));
menuPanel.setBorder(
BorderFactory.createEmptyBorder(5, 5, 5, 5));
menuPanel.setOpaque(true);
menuPanel.setBackground(Color.BLACK);

playButt","['""""""Transparent JFrame background\n\nIs it possible to make a JFrame that has a transparent background and draw an image on it, so only the image will be visible with no border or background? 6,Yes, it\'s possible in many ways. This is one of them:\n\nsetUndecorated(true); setBackground(new Color(1.0f,1.0f,1.0f,0.5f));\n\n4th float (which I set to 0.5f) in Color\'s constructor is alpha channel. It can be 0.0f - 1.0f depend on transparency you want. 1\n\nThis is worked for me once I replaced 0.5f with 0.0f. Nice Answer.\n\nSee Translucent and Shaped Swing Windows by Kirill Grouchnikov. 1\n\nLink is now dead. Google suggests this blog post: pushing-pixels.org/2008/02/27/\n\nYou should make content pane transparent too. frame.setUndecorated(true); frame.getContentPane().setBackground(new Color(1.0f,1.0f,1.0f,0.0f)); frame.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));\n\nIf your JFrame is a local variable or field:\n\nmyJFrame.setUndecorated(true);\n\nIf your class extends JFrame:\n\nsetUndecorated(true);\n\n1,Taylor GoldenTaylor Golden\n\n1\n\ntrue that since jdk7, transparency is only supported for undecorated frames. How to call methods should be basic knowledge, though :-)\n\nFor a Mac OS X example, see Re-paint problem on translucent frame/panel/component.""""""']",1,1,1
io,Serializable,Java Serializable Object to Byte Array,"<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.
The Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>
<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.
<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.
<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>
<p>Serialization provides default functionality to store and later recreate the object.
In default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>
But if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.
The Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().
While working with Externalizable we should remember that the default constructer should be public else the code will throw exception.
Here if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.
We can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).
We can observe as we are not setting the value of passWord so it s null.</p> <p>
<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>
Incompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >
You can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.
<p>Serialization uses certain default behaviors to store and later recreate the object.
<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.
A Java object is only serializable.
Most of the java class are serializable</em>.</p>
<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.
For serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.
The Serializable interface is defined to identify classes which implement the serializable protocol:</p>
The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.
For serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>
The values of the non-transient and non-static fields of the class get serialized.</li> </ul>
<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.
The Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>
Programmer has to take care of which objects to be serialized.
As a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>
When an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.
<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>
<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).
This is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>
<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.
For (a contrived) example  you may wish to record boolean true as  Y  and false as  N .
<p>The Externalizable interface was not actually provided to optimize the serialization process performance!
but to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>
<p>When considering options for improving performance  don t forget custom serialization.
You can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.
<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>
We can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.
We can define custom validation or business rules inside read/write methods.
please check in/out object case of Externalizable.
Where as Outstream/Instream are tightly bind to classes.
We can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>
<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.
allows the implementer to decide how an object is serialized  where as <code>Serializable</code>
<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.
<p>Serialization can also lead to security problems.
By being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>
<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>
Net people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>
<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.
I have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.
<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>
<p>Not everything is genuinely serializable.
You could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>
<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.
Serialization is a very dangerous mechanism  especially in its default implementation.
Hence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>
<p>Serialization adds constraints and potential problems since structure compatibility is not insured.
So the effort you d spend making the class serializble properly dwarves the cost of adding the interface.
<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.
For many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>
<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.
<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>
<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.
For simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>
<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>
<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>
Other languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.
An Object should default to be serializable.
<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.","All Known Implementing Classes:
AbstractAction, BasicDesktopPaneUI.CloseAction, BasicDesktopPaneUI.MaximizeAction, BasicDesktopPaneUI.MinimizeAction, BasicDesktopPaneUI.NavigateAction, BasicDesktopPaneUI.OpenAction, BasicFileChooserUI.ApproveSelectionAction, BasicFileChooserUI.CancelSelectionAction, BasicFileChooserUI.ChangeToParentDirectoryAction, BasicFileChooserUI.GoHomeAction, BasicFileChooserUI.NewFolderAction, BasicFileChooserUI.UpdateAction, BasicInternalFrameTitlePane.CloseAction, BasicInternalFrameTitlePane.IconifyAction, BasicInternalFrameTitlePane.MaximizeAction, BasicInternalFrameTitlePane.MoveAction, BasicInternalFrameTitlePane.RestoreAction, BasicInternalFrameTitlePane.SizeAction, BasicSliderUI.ActionScroller, BasicTreeUI.TreeCancelEditingAction, BasicTreeUI.TreeHomeAction, BasicTreeUI.TreeIncrementAction, BasicTreeUI.TreePageAction, BasicTreeUI.TreeToggleAction, BasicTreeUI.TreeTraverseAction, MetalFileChooserUI.DirectoryComboBoxAction, TextAction, DefaultEditorKit.BeepAction, DefaultEditorKit.CopyAction, DefaultEditorKit.CutAction, DefaultEditorKit.DefaultKeyTypedAction, DefaultEditorKit.InsertBreakAction, DefaultEditorKit.InsertContentAction, DefaultEditorKit.InsertTabAction, DefaultEditorKit.PasteAction, StyledEditorKit.StyledTextAction, HTMLEditorKit.HTMLTextAction, StyledEditorKit.AlignmentAction, StyledEditorKit.BoldAction, StyledEditorKit.FontFamilyAction, StyledEditorKit.FontSizeAction, StyledEditorKit.ForegroundAction, StyledEditorKit.ItalicAction, StyledEditorKit.UnderlineAction, HTMLEditorKit.InsertHTMLTextAction, AbstractBorder, BasicBorders.ButtonBorder, BasicBorders.FieldBorder, BasicBorders.MarginBorder, BasicBorders.MenuBarBorder, BevelBorder, CompoundBorder, EmptyBorder, EtchedBorder, LineBorder, MetalBorders.ButtonBorder, MetalBorders.Flush3DBorder, MetalBorders.InternalFrameBorder, MetalBorders.MenuBarBorder, MetalBorders.MenuItemBorder, MetalBorders.OptionDialogBorder, MetalBorders.PaletteBorder, MetalBorders.PopupMenuBorder, MetalBorders.ScrollPaneBorder, MetalBorders.TableHeaderBorder, MetalBorders.ToolBarBorder, TitledBorder, BasicBorders.RadioButtonBorder, BasicBorders.RolloverButtonBorder, BasicBorders.ToggleButtonBorder, BorderUIResource.BevelBorderUIResource, SoftBevelBorder, BorderUIResource.CompoundBorderUIResource, BorderUIResource.EmptyBorderUIResource, MatteBorder, BorderUIResource.EtchedBorderUIResource, BorderUIResource.LineBorderUIResource, MetalBorders.RolloverButtonBorder, MetalBorders.ToggleButtonBorder, MetalBorders.TextFieldBorder, BorderUIResource.TitledBorderUIResource, BorderUIResource.MatteBorderUIResource, AbstractButton.ButtonChangeListener, AbstractCellEditor, DefaultCellEditor, AbstractDocument, DefaultStyledDocument, PlainDocument, HTMLDocument, AbstractDocument.AbstractElement, AbstractDocument.BranchElement, AbstractDocument.LeafElement, DefaultStyledDocument.SectionElement, HTMLDocument.BlockElement, HTMLDocument.RunElement, AbstractListModel, BasicDirectoryModel, DefaultComboBoxModel, DefaultListModel, MetalFileChooserUI.DirectoryComboBoxModel, MetalFileChooserUI.FilterComboBoxModel, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractOwnableSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer, AbstractQueuedSynchronizer.ConditionObject, AbstractTableModel, DefaultTableModel, AbstractUndoableEdit, AbstractDocument.ElementEdit, CompoundEdit, DefaultStyledDocument.AttributeUndoableEdit, StateEdit, AbstractDocument.DefaultDocumentEvent, UndoManager, ActionMap, ActionMapUIResource, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AffineTransform, Arc2D.Double, Arc2D.Float, ArrayBlockingQueue, ArrayDeque, ArrayList, AttributeList, RoleList, RoleUnresolvedList, AtomicBoolean, AtomicInteger, AtomicIntegerArray, AtomicLong, AtomicLongArray, AtomicReference, AtomicReferenceArray, Attribute, AttributedCharacterIterator.Attribute, Format.Field, TextAttribute, DateFormat.Field, MessageFormat.Field, NumberFormat.Field, AttributeList, AuthorizeCallback, AWTKeyStroke, KeyStroke, BaseRowSet, BasicComboBoxRenderer, BasicComboBoxRenderer.UIResource, BasicIconFactory, BasicLookAndFeel, MetalLookAndFeel, SynthLookAndFeel, BasicPermission, AudioPermission, AuthPermission, AWTPermission, DelegationPermission, LoggingPermission, ManagementPermission, MBeanServerPermission, MBeanTrustPermission, NetPermission, PropertyPermission, ReflectPermission, RuntimePermission, SecurityPermission, SerializablePermission, SQLPermission, SSLPermission, SubjectDelegationPermission, WebServicePermission, BeanContextChildSupport, BeanContextSupport, BeanContextServicesSupport, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport, BeanContextSupport.BCSChild, BeanContextServicesSupport.BCSSChild, BitSet, Boolean, BorderLayout, BorderUIResource, BoxLayout, DefaultMenuLayout, ButtonGroup, Calendar, GregorianCalendar, CardLayout, Certificate, X509Certificate, Certificate.CertificateRep, CertPath, CertPath.CertPathRep, Character, CheckboxGroup, ChoiceCallback, RealmChoiceCallback, Class, ClassDesc, CodeSigner, CodeSource, Color, ColorUIResource, SystemColor, ColorSpace, ICC_ColorSpace, Component, Button, Canvas, Checkbox, Choice, Container, Label, List, Scrollbar, TextComponent, BasicSplitPaneDivider, CellRendererPane, DefaultTreeCellEditor.EditorContainer, JComponent, Panel, ScrollPane, Window, TextArea, TextField, AbstractButton, BasicInternalFrameTitlePane, Box, Box.Filler, JColorChooser, JComboBox, JFileChooser, JInternalFrame, JInternalFrame.JDesktopIcon, JLabel, JLayeredPane, JList, JMenuBar, JOptionPane, JPanel, JPopupMenu, JProgressBar, JRootPane, JScrollBar, JScrollPane, JSeparator, JSlider, JSpinner, JSplitPane, JTabbedPane, JTable, JTableHeader, JTextComponent, JToolBar, JToolTip, JTree, JViewport, Applet, BasicToolBarUI.DragWindow, Dialog, Frame, JWindow, JButton, JMenuItem, JToggleButton, MetalInternalFrameTitlePane, DefaultListCellRenderer, DefaultTableCellRenderer, DefaultTreeCellRenderer, JDesktopPane, BasicInternalFrameTitlePane.SystemMenuBar, AbstractColorChooserPanel, JSpinner.DefaultEditor, BasicComboPopup, JScrollPane.ScrollBar, JPopupMenu.Separator, JToolBar.Separator, JEditorPane, JTextArea, JTextField, JApplet, FileDialog, JDialog, JFrame, BasicArrowButton, MetalComboBoxButton, JCheckBoxMenuItem, JMenu, JRadioButtonMenuItem, JCheckBox, JRadioButton, DefaultListCellRenderer.UIResource, MetalFileChooserUI.FileRenderer, MetalFileChooserUI.FilterComboBoxRenderer, DefaultTableCellRenderer.UIResource, JSpinner.DateEditor, JSpinner.ListEditor, JSpinner.NumberEditor, MetalComboBoxUI.MetalComboPopup, JTextPane, DefaultTreeCellEditor.DefaultTextField, JFormattedTextField, JPasswordField, MetalScrollButton, Component.AccessibleAWTComponent, Box.Filler.AccessibleBoxFiller, Button.AccessibleAWTButton, Canvas.AccessibleAWTCanvas, Checkbox.AccessibleAWTCheckbox, Choice.AccessibleAWTChoice, Container.AccessibleAWTContainer, Label.AccessibleAWTLabel, List.AccessibleAWTList, List.AccessibleAWTList.AccessibleAWTListChild, Scrollbar.AccessibleAWTScrollBar, TextComponent.AccessibleAWTTextComponent, Box.AccessibleBox, CellRendererPane.AccessibleCellRendererPane, JComponent.AccessibleJComponent, Panel.AccessibleAWTPanel, ScrollPane.AccessibleAWTScrollPane, Window.AccessibleAWTWindow, TextArea.AccessibleAWTTextArea, TextField.AccessibleAWTTextField, AbstractButton.AccessibleAbstractButton, JColorChooser.AccessibleJColorChooser, JComboBox.AccessibleJComboBox, JDesktopPane.AccessibleJDesktopPane, JFileChooser.AccessibleJFileChooser, JInternalFrame.AccessibleJInternalFrame, JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon, JLabel.AccessibleJLabel, JLayeredPane.AccessibleJLayeredPane, JList.AccessibleJList, JMenuBar.AccessibleJMenuBar, JOptionPane.AccessibleJOptionPane, JPanel.AccessibleJPanel, JPopupMenu.AccessibleJPopupMenu, JProgressBar.AccessibleJProgressBar, JRootPane.AccessibleJRootPane, JScrollBar.AccessibleJScrollBar, JScrollPane.AccessibleJScrollPane, JSeparator.AccessibleJSeparator, JSlider.AccessibleJSlider, JSpinner.AccessibleJSpinner, JSplitPane.AccessibleJSplitPane, JTabbedPane.AccessibleJTabbedPane, JTable.AccessibleJTable, JTableHeader.AccessibleJTableHeader, JTextComponent.AccessibleJTextComponent, JToolBar.AccessibleJToolBar, JToolTip.AccessibleJToolTip, JTree.AccessibleJTree, JViewport.AccessibleJViewport, Applet.AccessibleApplet, Dialog.AccessibleAWTDialog, Frame.AccessibleAWTFrame, JWindow.AccessibleJWindow, JButton.AccessibleJButton, JMenuItem.AccessibleJMenuItem, JToggleButton.AccessibleJToggleButton, JEditorPane.AccessibleJEditorPane, JTextArea.AccessibleJTextArea, JTextField.AccessibleJTextField, JApplet.AccessibleJApplet, JDialog.AccessibleJDialog, JFrame.AccessibleJFrame, JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem, JMenu.AccessibleJMenu, JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem, JCheckBox.AccessibleJCheckBox, JRadioButton.AccessibleJRadioButton, JEditorPane.AccessibleJEditorPaneHTML, JEditorPane.JEditorPaneAccessibleHypertextSupport, JPasswordField.AccessibleJPasswordField, ComponentOrientation, CompositeDataSupport, ConcurrentHashMap, ConcurrentLinkedQueue, ConcurrentSkipListMap, ConcurrentSkipListSet, ConfirmationCallback, ContainerOrderFocusTraversalPolicy, DefaultFocusTraversalPolicy, ContentModel, CopyOnWriteArrayList, CopyOnWriteArraySet, CSS, CubicCurve2D.Double, CubicCurve2D.Float, Currency, Cursor, Date, Date, Time, Timestamp, DateFormatSymbols, DateTimeSyntax, DateTimeAtCompleted, DateTimeAtCreation, DateTimeAtProcessing, JobHoldUntil, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, JToggleButton.ToggleButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultComboBoxModel, DefaultDesktopManager, DefaultFormatter, InternationalFormatter, MaskFormatter, DateFormatter, NumberFormatter, DefaultFormatterFactory, DefaultListCellRenderer, DefaultListSelectionModel, DefaultMutableTreeNode, JTree.DynamicUtilTreeNode, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultTableCellRenderer, DefaultTableColumnModel, DefaultTableModel, DefaultTreeModel, DefaultTreeSelectionModel, JTree.EmptySelectionModel, DelegationPermission, Dimension, DimensionUIResource, DocFlavor, DocFlavor.BYTE_ARRAY, DocFlavor.CHAR_ARRAY, DocFlavor.INPUT_STREAM, DocFlavor.READER, DocFlavor.SERVICE_FORMATTED, DocFlavor.STRING, DocFlavor.URL, DragGestureRecognizer, MouseDragGestureRecognizer, DragSource, DragSourceContext, DropTarget, DropTargetContext, EditorKit, DefaultEditorKit, StyledEditorKit, HTMLEditorKit, RTFEditorKit, Element, Ellipse2D.Double, Ellipse2D.Float, EmptyBorder, Enum, Authenticator.RequestorType, ClientInfoStatus, Component.BaselineResizeBehavior, Desktop.Action, Diagnostic.Kind, Dialog.ModalExclusionType, Dialog.ModalityType, DropMode, ElementKind, ElementType, Formatter.BigDecimalLayoutForm, FormSubmitEvent.MethodType, GroupLayout.Alignment, JavaFileObject.Kind, JTable.PrintMode, KeyRep.Type, LayoutStyle.ComponentPlacement, MemoryType, MessageContext.Scope, Modifier, MultipleGradientPaint.ColorSpaceType, MultipleGradientPaint.CycleMethod, NestingKind, Normalizer.Form, Proxy.Type, Resource.AuthenticationType, RetentionPolicy, RoundingMode, RowFilter.ComparisonType, RowIdLifetime, RowSorterEvent.Type, Service.Mode, SortOrder, SourceVersion, SSLEngineResult.HandshakeStatus, SSLEngineResult.Status, StandardLocation, SwingWorker.StateValue, Thread.State, TimeUnit, TrayIcon.MessageType, TypeKind, XmlAccessOrder, XmlAccessType, XmlNsForm, EnumMap, EnumSet, EnumSyntax, Chromaticity, ColorSupported, Compression, Fidelity, Finishings, JobSheets, JobState, JobStateReason, Media, MultipleDocumentHandling, OrientationRequested, PDLOverrideSupported, PresentationDirection, PrinterIsAcceptingJobs, PrinterState, PrinterStateReason, PrintQuality, ReferenceUriSchemesSupported, Severity, SheetCollate, Sides, MediaName, MediaSizeName, MediaTray, Event, EventListenerList, EventObject, AWTEvent, BeanContextEvent, CaretEvent, ChangeEvent, ConnectionEvent, DragGestureEvent, DragSourceEvent, DropTargetEvent, FlavorEvent, HandshakeCompletedEvent, HyperlinkEvent, LineEvent, ListDataEvent, ListSelectionEvent, MenuEvent, NamingEvent, NamingExceptionEvent, NodeChangeEvent, Notification, PopupMenuEvent, PreferenceChangeEvent, PrintEvent, PropertyChangeEvent, RowSetEvent, RowSorterEvent, SSLSessionBindingEvent, StatementEvent, TableColumnModelEvent, TableModelEvent, TreeExpansionEvent, TreeModelEvent, TreeSelectionEvent, UndoableEditEvent, UnsolicitedNotificationEvent, ActionEvent, AdjustmentEvent, AncestorEvent, ComponentEvent, HierarchyEvent, InputMethodEvent, InternalFrameEvent, InvocationEvent, ItemEvent, TextEvent, BeanContextMembershipEvent, BeanContextServiceAvailableEvent, BeanContextServiceRevokedEvent, DragSourceDragEvent, DragSourceDropEvent, DropTargetDragEvent, DropTargetDropEvent, HTMLFrameHyperlinkEvent, AttributeChangeNotification, JMXConnectionNotification, MBeanServerNotification, MonitorNotification, RelationNotification, TimerNotification, PrintJobAttributeEvent, PrintJobEvent, PrintServiceAttributeEvent, IndexedPropertyChangeEvent, ContainerEvent, FocusEvent, InputEvent, PaintEvent, WindowEvent, FormSubmitEvent, KeyEvent, MouseEvent, MenuKeyEvent, MenuDragMouseEvent, MouseWheelEvent, File, FilePermission, FlowLayout, Font, FontUIResource, FontMetrics, Format, DateFormat, MessageFormat, NumberFormat, SimpleDateFormat, ChoiceFormat, DecimalFormat, GapContent, GraphicsConfigTemplate, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GuardedObject, HashAttributeSet, HashDocAttributeSet, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashDocAttributeSet, HashMap, LinkedHashMap, PrinterStateReasons, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashSet, JobStateReasons, LinkedHashSet, Hashtable, Properties, UIDefaults, Provider, AuthProvider, HTML.UnknownTag, HTMLEditorKit.LinkController, ICC_Profile, ICC_ProfileGray, ICC_ProfileRGB, IconUIResource, Identity, IdentityScope, Signer, IdentityHashMap, ImageIcon, ImageIcon.AccessibleImageIcon, InetAddress, Inet4Address, Inet6Address, InputMap, ComponentInputMap, InputMapUIResource, ComponentInputMapUIResource, Insets, InsetsUIResource, IntegerSyntax, Copies, JobImpressions, JobImpressionsCompleted, JobKOctets, JobKOctetsProcessed, JobMediaSheets, JobMediaSheetsCompleted, JobPriority, JobPrioritySupported, NumberOfDocuments, NumberOfInterveningJobs, NumberUp, PagesPerMinute, PagesPerMinuteColor, QueuedJobCount, JAXBElement, JComponent, JFormattedTextField.AbstractFormatter, JMenu.WinListener, JMXPrincipal, JMXServiceURL, JRootPane.RootLayout, JTabbedPane, JTabbedPane.ModelListener, JTree.TreeSelectionRedirector, JViewport.ViewListener, KerberosPrincipal, KerberosTicket, KeyPair, KeyRep, LanguageCallback, LayoutFocusTraversalPolicy, Lease, Level, Line2D.Double, Line2D.Float, LinkedBlockingDeque, LinkedBlockingQueue, LinkedHashSet, LinkedList, Locale, LogRecord, MarshalledObject, MathContext, MBeanFeatureInfo, MBeanAttributeInfo, MBeanConstructorInfo, MBeanNotificationInfo, MBeanOperationInfo, MBeanParameterInfo, ModelMBeanAttributeInfo, OpenMBeanAttributeInfoSupport, ModelMBeanConstructorInfo, OpenMBeanConstructorInfoSupport, ModelMBeanNotificationInfo, ModelMBeanOperationInfo, OpenMBeanOperationInfoSupport, OpenMBeanParameterInfoSupport, MBeanInfo, ModelMBeanInfoSupport, OpenMBeanInfoSupport, MediaTracker, MenuComponent, MenuBar, MenuItem, CheckboxMenuItem, Menu, PopupMenu, MenuComponent.AccessibleAWTMenuComponent, MenuBar.AccessibleAWTMenuBar, MenuItem.AccessibleAWTMenuItem, CheckboxMenuItem.AccessibleAWTCheckboxMenuItem, Menu.AccessibleAWTMenu, PopupMenu.AccessibleAWTPopupMenu, MenuShortcut, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.TreeLeafIcon, MetalIconFactory.FolderIcon16, MetalIconFactory.TreeFolderIcon, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, ModificationItem, NameCallback, NameClassPair, Binding, SearchResult, NotificationResult, Number, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, NumericShaper, ObjectInstance, ObjectStreamClass, ObjID, OpenType, ArrayType, CompositeType, SimpleType, TabularType, Option, OverlayLayout, ParameterBlock, ParserDelegator, PasswordCallback, Path2D.Double, Path2D.Float, GeneralPath, Pattern, Permission, AllPermission, MBeanPermission, PrivateCredentialPermission, ServicePermission, SocketPermission, UnresolvedPermission, PermissionCollection, Permissions, Permissions, Point, Point2D.Double, Point2D.Float, Polygon, PriorityBlockingQueue, PriorityQueue, PropertyChangeSupport, SwingPropertyChangeSupport, Proxy, QName, QuadCurve2D.Double, QuadCurve2D.Float, QueryEval, Random, SecureRandom, Rdn, Rectangle, DefaultCaret, BasicTextUI.BasicCaret, Rectangle2D.Double, Rectangle2D.Float, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, BinaryRefAddr, StringRefAddr, Reference, LinkRef, RemoteObject, RemoteObjectInvocationHandler, RemoteServer, RemoteStub, Activatable, UnicastRemoteObject, ActivationGroup_Stub, RMIConnectionImpl_Stub, RMIServerImpl_Stub, ActivationGroup, ResolutionSyntax, PrinterResolution, ResolveResult, RMIConnector, Role, RoleInfo, RoleResult, RoleUnresolved, RoundRectangle2D.Double, RoundRectangle2D.Float, RowSetMetaDataImpl, ScrollPaneAdjustable, ScrollPaneLayout, ScrollPaneLayout.UIResource, SealedObject, SearchControls, SecureRandomSpi, Semaphore, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, ServicePermission, SetOfIntegerSyntax, CopiesSupported, JobImpressionsSupported, JobKOctetsSupported, JobMediaSheetsSupported, NumberUpSupported, PageRanges, SignedObject, SimpleAttributeSet, Size2DSyntax, MediaSize, SizeRequirements, SocketAddress, InetSocketAddress, SocketPermission, SpinnerDateModel, SpinnerListModel, SpinnerNumberModel, SslRMIClientSocketFactory, StackTraceElement, String, StringBuffer, StringBuilder, StringContent, Stub, _Remote_Stub, StyleContext, StyleSheet, StyleContext.NamedStyle, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SynchronousQueue, SystemColor, TableColumn, TabSet, TabStop, TabularDataSupport, TargetedNotification, TextInputCallback, RealmCallback, TextOutputCallback, TextSyntax, DocumentName, JobMessageFromOperator, JobName, JobOriginatingUserName, OutputDeviceAssigned, PrinterInfo, PrinterLocation, PrinterMakeAndModel, PrinterMessageFromOperator, PrinterName, RequestingUserName, Throwable, Error, Exception, AnnotationFormatError, AssertionError, AWTError, CoderMalfunctionError, FactoryConfigurationError, FactoryConfigurationError, IOError, LinkageError, ServiceConfigurationError, ThreadDeath, TransformerFactoryConfigurationError, VirtualMachineError, AclNotFoundException, ActivationException, AlreadyBoundException, ApplicationException, AWTException, BackingStoreException, BadAttributeValueExpException, BadBinaryOpValueExpException, BadLocationException, BadStringOperationException, BrokenBarrierException, CertificateException, ClassNotFoundException, CloneNotSupportedException, DataFormatException, DatatypeConfigurationException, DestroyFailedException, ExecutionException, ExpandVetoException, FontFormatException, GeneralSecurityException, GSSException, IllegalAccessException, IllegalClassFormatException, InstantiationException, InterruptedException, IntrospectionException, InvalidApplicationException, InvalidMidiDataException, InvalidPreferencesFormatException, InvalidTargetObjectTypeException, InvocationTargetException, IOException, JAXBException, JMException, KeySelectorException, LastOwnerException, LineUnavailableException, MarshalException, MidiUnavailableException, MimeTypeParseException, NamingException, NoninvertibleTransformException, NoSuchFieldException, NoSuchMethodException, NotBoundException, NotOwnerException, ParseException, ParserConfigurationException, PrinterException, PrintException, PrivilegedActionException, PropertyVetoException, RefreshFailedException, RemarshalException, RuntimeException, SAXException, ScriptException, ServerNotActiveException, SOAPException, SQLException, TimeoutException, TooManyListenersException, TransformerException, TransformException, UnmodifiableClassException, UnsupportedAudioFileException, UnsupportedCallbackException, UnsupportedFlavorException, UnsupportedLookAndFeelException, URIReferenceException, URISyntaxException, UserException, XMLParseException, XMLSignatureException, XMLStreamException, XPathException, ClassCircularityError, ClassFormatError, ExceptionInInitializerError, IncompatibleClassChangeError, NoClassDefFoundError, UnsatisfiedLinkError, VerifyError, InternalError, OutOfMemoryError, StackOverflowError, UnknownError, UnknownGroupException, UnknownObjectException, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, ServerCloneException, BadPaddingException, CertificateException, CertPathBuilderException, CertPathValidatorException, CertStoreException, CRLException, DigestException, ExemptionMechanismException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException, InvalidParameterSpecException, KeyException, KeyStoreException, LoginException, NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, ShortBufferException, SignatureException, UnrecoverableEntryException, ChangedCharSetException, CharacterCodingException, CharConversionException, ClosedChannelException, EOFException, FileLockInterruptionException, FileNotFoundException, FilerException, HttpRetryException, IIOException, InterruptedIOException, InvalidPropertiesFormatException, JMXProviderException, JMXServerErrorException, MalformedURLException, ObjectStreamException, ProtocolException, RemoteException, SaslException, SocketException, SSLException, SyncFailedException, UnknownHostException, UnknownServiceException, UnsupportedEncodingException, UTFDataFormatException, ZipException, MarshalException, PropertyException, UnmarshalException, ValidationException, MBeanException, OpenDataException, OperationsException, ReflectionException, RelationException, AttributeInUseException, AttributeModificationException, CannotProceedException, CommunicationException, ConfigurationException, ContextNotEmptyException, InsufficientResourcesException, InterruptedNamingException, InvalidAttributeIdentifierException, InvalidAttributesException, InvalidAttributeValueException, InvalidNameException, InvalidSearchControlsException, InvalidSearchFilterException, LimitExceededException, LinkException, NameAlreadyBoundException, NameNotFoundException, NamingSecurityException, NoInitialContextException, NoSuchAttributeException, NotContextException, OperationNotSupportedException, PartialResultException, ReferralException, SchemaViolationException, ServiceUnavailableException, PrinterAbortException, PrinterIOException, AnnotationTypeMismatchException, ArithmeticException, ArrayStoreException, BufferOverflowException, BufferUnderflowException, CannotRedoException, CannotUndoException, ClassCastException, CMMException, ConcurrentModificationException, DataBindingException, DOMException, EmptyStackException, EnumConstantNotPresentException, EventException, IllegalArgumentException, IllegalMonitorStateException, IllegalPathStateException, IllegalStateException, ImagingOpException, IncompleteAnnotationException, IndexOutOfBoundsException, JMRuntimeException, LSException, MalformedParameterizedTypeException, MirroredTypeException, MirroredTypesException, MissingResourceException, NegativeArraySizeException, NoSuchElementException, NoSuchMechanismException, NullPointerException, ProfileDataException, ProviderException, RangeException, RasterFormatException, RejectedExecutionException, SecurityException, SystemException, TypeConstraintException, TypeNotPresentException, UndeclaredThrowableException, UnknownAnnotationValueException, UnknownElementException, UnknownTypeException, UnmodifiableSetException, UnsupportedOperationException, WebServiceException, XPathException, SAXNotRecognizedException, SAXNotSupportedException, SAXParseException, BatchUpdateException, RowSetWarning, SerialException, SQLClientInfoException, SQLNonTransientException, SQLRecoverableException, SQLTransientException, SQLWarning, SyncFactoryException, SyncProviderException, TransformerConfigurationException, AdapterAlreadyExists, AdapterInactive, AdapterNonExistent, AlreadyBound, BadKind, Bounds, Bounds, CannotProceed, DuplicateName, FormatMismatch, ForwardRequest, ForwardRequest, InconsistentTypeCode, InconsistentTypeCode, Invalid, InvalidAddress, InvalidName, InvalidName, InvalidName, InvalidPolicy, InvalidSeq, InvalidSlot, InvalidTypeForEncoding, InvalidValue, InvalidValue, NoContext, NoServant, NotEmpty, NotFound, ObjectAlreadyActive, ObjectNotActive, PolicyError, ServantAlreadyActive, ServantNotActive, TypeMismatch, TypeMismatch, TypeMismatch, UnknownEncoding, UnknownUserException, WrongAdapter, WrongPolicy, WrongTransaction, XPathExpressionException, XPathFactoryConfigurationException, GenericSignatureFormatError, UnsupportedClassVersionError, AbstractMethodError, IllegalAccessError, InstantiationError, NoSuchFieldError, NoSuchMethodError, ZipError, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, InvalidKeyException, KeyManagementException, AccountException, CredentialException, FailedLoginException, UnrecoverableKeyException, MalformedInputException, UnmappableCharacterException, AsynchronousCloseException, IIOInvalidTreeException, SocketTimeoutException, InvalidClassException, InvalidObjectException, NotActiveException, NotSerializableException, OptionalDataException, StreamCorruptedException, WriteAbortedException, AccessException, ActivateFailedException, ConnectException, ConnectIOException, ExportException, MarshalException, NoSuchObjectException, ServerError, ServerException, ServerRuntimeException, SkeletonMismatchException, SkeletonNotFoundException, StubNotFoundException, UnexpectedException, UnknownHostException, UnmarshalException, AuthenticationException, BindException, ConnectException, NoRouteToHostException, PortUnreachableException, SSLHandshakeException, SSLKeyException, SSLPeerUnverifiedException, SSLProtocolException, JarException, MBeanRegistrationException, AttributeNotFoundException, InstanceAlreadyExistsException, InstanceNotFoundException, IntrospectionException, InvalidAttributeValueException, ListenerNotFoundException, MalformedObjectNameException, NotCompliantMBeanException, ServiceNotFoundException, InvalidRelationIdException, InvalidRelationServiceException, InvalidRelationTypeException, InvalidRoleInfoException, InvalidRoleValueException, RelationNotFoundException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RoleInfoNotFoundException, RoleNotFoundException, SizeLimitExceededException, TimeLimitExceededException, LinkLoopException, MalformedLinkException, AuthenticationException, AuthenticationNotSupportedException, NoPermissionException, LdapReferralException, IllegalCharsetNameException, IllegalFormatException, IllegalSelectorException, IllegalThreadStateException, InvalidKeyException, InvalidOpenTypeException, InvalidParameterException, KeyAlreadyExistsException, NumberFormatException, PatternSyntaxException, UnresolvedAddressException, UnsupportedAddressTypeException, UnsupportedCharsetException, AlreadyConnectedException, CancellationException, CancelledKeyException, ClosedSelectorException, ConnectionPendingException, FormatterClosedException, IllegalBlockingModeException, IllegalComponentStateException, InvalidDnDOperationException, InvalidMarkException, NoConnectionPendingException, NonReadableChannelException, NonWritableChannelException, NotYetBoundException, NotYetConnectedException, OverlappingFileLockException, ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException, MonitorSettingException, RuntimeErrorException, RuntimeMBeanException, RuntimeOperationsException, InputMismatchException, AccessControlException, RMISecurityException, ACTIVITY_COMPLETED, ACTIVITY_REQUIRED, BAD_CONTEXT, BAD_INV_ORDER, BAD_OPERATION, BAD_PARAM, BAD_QOS, BAD_TYPECODE, CODESET_INCOMPATIBLE, COMM_FAILURE, DATA_CONVERSION, FREE_MEM, IMP_LIMIT, IndirectionException, INITIALIZE, INTERNAL, INTF_REPOS, INVALID_ACTIVITY, INVALID_TRANSACTION, INV_FLAG, INV_IDENT, INV_OBJREF, INV_POLICY, MARSHAL, NO_IMPLEMENT, NO_MEMORY, NO_PERMISSION, NO_RESOURCES, NO_RESPONSE, OBJECT_NOT_EXIST, OBJ_ADAPTER, PERSIST_STORE, REBIND, TIMEOUT, TRANSACTION_MODE, TRANSACTION_REQUIRED, TRANSACTION_ROLLEDBACK, TRANSACTION_UNAVAILABLE, TRANSIENT, UNKNOWN, UnknownException, HeadlessException, ReadOnlyBufferException, ProtocolException, SQLDataException, SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException, SQLSyntaxErrorException, SQLTimeoutException, SQLTransactionRollbackException, SQLTransientConnectionException, DataTruncation, XPathFunctionException, AccountExpiredException, AccountLockedException, AccountNotFoundException, CredentialExpiredException, CredentialNotFoundException, ClosedByInterruptException, SocketSecurityException, DuplicateFormatFlagsException, FormatFlagsConversionMismatchException, IllegalFormatCodePointException, IllegalFormatConversionException, IllegalFormatFlagsException, IllegalFormatPrecisionException, IllegalFormatWidthException, MissingFormatArgumentException, MissingFormatWidthException, UnknownFormatConversionException, UnknownFormatFlagsException, HTTPException, SOAPFaultException, Timer, Timestamp, TimeZone, SimpleTimeZone, TransferHandler, TransformAttribute, TreeMap, TreePath, TreeSet, UID, UIManager, UnresolvedPermission, URI, URISyntax, Destination, PrinterMoreInfo, PrinterMoreInfoManufacturer, PrinterURI, URL, UUID, Vector, Stack, VetoableChangeSupport, ViewportLayout, VMID, X500Principal","If the object array contains Serializable objects then you can use java.io.ObjectOutputStream

ObjectOutputStream out = new ObjectOutputStream(anyOutputStream);
out.writeObject(objectArray);
âÃÂ¶",None,"['""""""Java Serializable Object to Byte Array\n\nLet\'s say I have a serializable class AppMessage. I would like to transmit it as byte[] over sockets to another machine where it is rebuilt from the bytes received. How could I achieve this? 3,8,3\n\nWhy as byte[]? Why not just write it directly to the socket with ObjectOutputStream, and read it with ObjectInputStream? new ObjectMapper().writeValueAsBytes(JAVA_OBJECT_HERE)\n\n\n\nPrepare the byte array to send:\n\nstatic byte[] serialize(final Object obj) { ByteArrayOutputStream bos = new ByteArrayOutputStream(); try (ObjectOutputStream out = new ObjectOutputStream(bos)) { out.writeObject(obj); out.flush(); return bos.toByteArray(); } catch (Exception ex) { throw new RuntimeException(ex); } }\n\nCreate an object from a byte array:\n\nstatic Object deserialize(byte[] bytes) { ByteArrayInputStream bis = new ByteArrayInputStream(bytes); try (ObjectInput in = new ObjectInputStream(bis)) { return in.readObject(); } catch (Exception ex) { throw new RuntimeException(ex); } }\n\nThat\'s not how I read the question. To me it sounds like his problem is how to convert the object to a byte[] -- not how to send it. Taylor: yes you got it right. i want to turn the object into a byte[] and transmit it. can you please also provide the code regarding how to turn this byte[] into an object please? Please close always any stream to release the system resources. (Edited in code)\n\n\n\ncan this work with objects that I can\'t implement serializable? ObjectInput, ObjectOuput, ByteArrayOutputStream and ByteArrayInputStream all implement the AutoCloseable interface, wouldn\'t it be good practice to use it to avoid missing closing them by mistake? (I\'m not entirely sure if this is the best practice, that\'s why I\'m wondering.) Example: try(ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutput out = new ObjectOutputStream(bos)){ /*Do stuff*/ }catch(IOException e){/*suppress exception*/}. It also removes the need for the final clause and its additional try-catch. | Show 7 more comments\n\nThe best way to do it is to use SerializationUtils from Apache Commons Lang. byte[] data = SerializationUtils.serialize(yourObject);\n\nYourObject yourObject = SerializationUtils.deserialize(data)\n\nAs mentioned, this requires Commons Lang library. It can be imported using Gradle:\n\ncompile \'org.apache.commons:commons-lang3:3.5\'\n\n<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 --> <dependency> <groupId>org.apache.commons</groupId> <artifactId>commons-lang3</artifactId> <version>3.5</version> </dependency>\n\nAnd more ways mentioned here\n\nAlternatively, the whole collection can be imported. Refer this link\n\n2,6,9\n\nAdded overhead?""""""']",0.158415842,0.25,0.9
io,Serializable,JSONObject Not Serializable?,"<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.
The Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>
<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.
<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.
<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>
<p>Serialization provides default functionality to store and later recreate the object.
In default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>
But if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.
The Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().
While working with Externalizable we should remember that the default constructer should be public else the code will throw exception.
Here if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.
We can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).
We can observe as we are not setting the value of passWord so it s null.</p> <p>
<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>
Incompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >
You can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.
<p>Serialization uses certain default behaviors to store and later recreate the object.
<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.
A Java object is only serializable.
Most of the java class are serializable</em>.</p>
<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.
For serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.
The Serializable interface is defined to identify classes which implement the serializable protocol:</p>
The serialization interface has no methods or fields and serves only to identify the semantics of being serializable.
For serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>
The values of the non-transient and non-static fields of the class get serialized.</li> </ul>
<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.
The Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>
Programmer has to take care of which objects to be serialized.
As a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>
When an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.
<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>
<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).
This is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>
<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.
For (a contrived) example  you may wish to record boolean true as  Y  and false as  N .
<p>The Externalizable interface was not actually provided to optimize the serialization process performance!
but to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>
<p>When considering options for improving performance  don t forget custom serialization.
You can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.
<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>
We can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.
We can define custom validation or business rules inside read/write methods.
please check in/out object case of Externalizable.
Where as Outstream/Instream are tightly bind to classes.
We can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>
<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.
allows the implementer to decide how an object is serialized  where as <code>Serializable</code>
<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.
<p>Serialization can also lead to security problems.
By being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>
<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>
Net people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>
<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.
I have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.
<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>
<p>Not everything is genuinely serializable.
You could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>
<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.
Serialization is a very dangerous mechanism  especially in its default implementation.
Hence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>
<p>Serialization adds constraints and potential problems since structure compatibility is not insured.
So the effort you d spend making the class serializble properly dwarves the cost of adding the interface.
<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.
For many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>
<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.
<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>
<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.
For simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>
<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>
<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>
Other languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.
An Object should default to be serializable.
<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.","All Known Implementing Classes:
AbstractAction, BasicDesktopPaneUI.CloseAction, BasicDesktopPaneUI.MaximizeAction, BasicDesktopPaneUI.MinimizeAction, BasicDesktopPaneUI.NavigateAction, BasicDesktopPaneUI.OpenAction, BasicFileChooserUI.ApproveSelectionAction, BasicFileChooserUI.CancelSelectionAction, BasicFileChooserUI.ChangeToParentDirectoryAction, BasicFileChooserUI.GoHomeAction, BasicFileChooserUI.NewFolderAction, BasicFileChooserUI.UpdateAction, BasicInternalFrameTitlePane.CloseAction, BasicInternalFrameTitlePane.IconifyAction, BasicInternalFrameTitlePane.MaximizeAction, BasicInternalFrameTitlePane.MoveAction, BasicInternalFrameTitlePane.RestoreAction, BasicInternalFrameTitlePane.SizeAction, BasicSliderUI.ActionScroller, BasicTreeUI.TreeCancelEditingAction, BasicTreeUI.TreeHomeAction, BasicTreeUI.TreeIncrementAction, BasicTreeUI.TreePageAction, BasicTreeUI.TreeToggleAction, BasicTreeUI.TreeTraverseAction, MetalFileChooserUI.DirectoryComboBoxAction, TextAction, DefaultEditorKit.BeepAction, DefaultEditorKit.CopyAction, DefaultEditorKit.CutAction, DefaultEditorKit.DefaultKeyTypedAction, DefaultEditorKit.InsertBreakAction, DefaultEditorKit.InsertContentAction, DefaultEditorKit.InsertTabAction, DefaultEditorKit.PasteAction, StyledEditorKit.StyledTextAction, HTMLEditorKit.HTMLTextAction, StyledEditorKit.AlignmentAction, StyledEditorKit.BoldAction, StyledEditorKit.FontFamilyAction, StyledEditorKit.FontSizeAction, StyledEditorKit.ForegroundAction, StyledEditorKit.ItalicAction, StyledEditorKit.UnderlineAction, HTMLEditorKit.InsertHTMLTextAction, AbstractBorder, BasicBorders.ButtonBorder, BasicBorders.FieldBorder, BasicBorders.MarginBorder, BasicBorders.MenuBarBorder, BevelBorder, CompoundBorder, EmptyBorder, EtchedBorder, LineBorder, MetalBorders.ButtonBorder, MetalBorders.Flush3DBorder, MetalBorders.InternalFrameBorder, MetalBorders.MenuBarBorder, MetalBorders.MenuItemBorder, MetalBorders.OptionDialogBorder, MetalBorders.PaletteBorder, MetalBorders.PopupMenuBorder, MetalBorders.ScrollPaneBorder, MetalBorders.TableHeaderBorder, MetalBorders.ToolBarBorder, TitledBorder, BasicBorders.RadioButtonBorder, BasicBorders.RolloverButtonBorder, BasicBorders.ToggleButtonBorder, BorderUIResource.BevelBorderUIResource, SoftBevelBorder, BorderUIResource.CompoundBorderUIResource, BorderUIResource.EmptyBorderUIResource, MatteBorder, BorderUIResource.EtchedBorderUIResource, BorderUIResource.LineBorderUIResource, MetalBorders.RolloverButtonBorder, MetalBorders.ToggleButtonBorder, MetalBorders.TextFieldBorder, BorderUIResource.TitledBorderUIResource, BorderUIResource.MatteBorderUIResource, AbstractButton.ButtonChangeListener, AbstractCellEditor, DefaultCellEditor, AbstractDocument, DefaultStyledDocument, PlainDocument, HTMLDocument, AbstractDocument.AbstractElement, AbstractDocument.BranchElement, AbstractDocument.LeafElement, DefaultStyledDocument.SectionElement, HTMLDocument.BlockElement, HTMLDocument.RunElement, AbstractListModel, BasicDirectoryModel, DefaultComboBoxModel, DefaultListModel, MetalFileChooserUI.DirectoryComboBoxModel, MetalFileChooserUI.FilterComboBoxModel, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractOwnableSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer, AbstractQueuedSynchronizer.ConditionObject, AbstractTableModel, DefaultTableModel, AbstractUndoableEdit, AbstractDocument.ElementEdit, CompoundEdit, DefaultStyledDocument.AttributeUndoableEdit, StateEdit, AbstractDocument.DefaultDocumentEvent, UndoManager, ActionMap, ActionMapUIResource, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AffineTransform, Arc2D.Double, Arc2D.Float, ArrayBlockingQueue, ArrayDeque, ArrayList, AttributeList, RoleList, RoleUnresolvedList, AtomicBoolean, AtomicInteger, AtomicIntegerArray, AtomicLong, AtomicLongArray, AtomicReference, AtomicReferenceArray, Attribute, AttributedCharacterIterator.Attribute, Format.Field, TextAttribute, DateFormat.Field, MessageFormat.Field, NumberFormat.Field, AttributeList, AuthorizeCallback, AWTKeyStroke, KeyStroke, BaseRowSet, BasicComboBoxRenderer, BasicComboBoxRenderer.UIResource, BasicIconFactory, BasicLookAndFeel, MetalLookAndFeel, SynthLookAndFeel, BasicPermission, AudioPermission, AuthPermission, AWTPermission, DelegationPermission, LoggingPermission, ManagementPermission, MBeanServerPermission, MBeanTrustPermission, NetPermission, PropertyPermission, ReflectPermission, RuntimePermission, SecurityPermission, SerializablePermission, SQLPermission, SSLPermission, SubjectDelegationPermission, WebServicePermission, BeanContextChildSupport, BeanContextSupport, BeanContextServicesSupport, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport, BeanContextSupport.BCSChild, BeanContextServicesSupport.BCSSChild, BitSet, Boolean, BorderLayout, BorderUIResource, BoxLayout, DefaultMenuLayout, ButtonGroup, Calendar, GregorianCalendar, CardLayout, Certificate, X509Certificate, Certificate.CertificateRep, CertPath, CertPath.CertPathRep, Character, CheckboxGroup, ChoiceCallback, RealmChoiceCallback, Class, ClassDesc, CodeSigner, CodeSource, Color, ColorUIResource, SystemColor, ColorSpace, ICC_ColorSpace, Component, Button, Canvas, Checkbox, Choice, Container, Label, List, Scrollbar, TextComponent, BasicSplitPaneDivider, CellRendererPane, DefaultTreeCellEditor.EditorContainer, JComponent, Panel, ScrollPane, Window, TextArea, TextField, AbstractButton, BasicInternalFrameTitlePane, Box, Box.Filler, JColorChooser, JComboBox, JFileChooser, JInternalFrame, JInternalFrame.JDesktopIcon, JLabel, JLayeredPane, JList, JMenuBar, JOptionPane, JPanel, JPopupMenu, JProgressBar, JRootPane, JScrollBar, JScrollPane, JSeparator, JSlider, JSpinner, JSplitPane, JTabbedPane, JTable, JTableHeader, JTextComponent, JToolBar, JToolTip, JTree, JViewport, Applet, BasicToolBarUI.DragWindow, Dialog, Frame, JWindow, JButton, JMenuItem, JToggleButton, MetalInternalFrameTitlePane, DefaultListCellRenderer, DefaultTableCellRenderer, DefaultTreeCellRenderer, JDesktopPane, BasicInternalFrameTitlePane.SystemMenuBar, AbstractColorChooserPanel, JSpinner.DefaultEditor, BasicComboPopup, JScrollPane.ScrollBar, JPopupMenu.Separator, JToolBar.Separator, JEditorPane, JTextArea, JTextField, JApplet, FileDialog, JDialog, JFrame, BasicArrowButton, MetalComboBoxButton, JCheckBoxMenuItem, JMenu, JRadioButtonMenuItem, JCheckBox, JRadioButton, DefaultListCellRenderer.UIResource, MetalFileChooserUI.FileRenderer, MetalFileChooserUI.FilterComboBoxRenderer, DefaultTableCellRenderer.UIResource, JSpinner.DateEditor, JSpinner.ListEditor, JSpinner.NumberEditor, MetalComboBoxUI.MetalComboPopup, JTextPane, DefaultTreeCellEditor.DefaultTextField, JFormattedTextField, JPasswordField, MetalScrollButton, Component.AccessibleAWTComponent, Box.Filler.AccessibleBoxFiller, Button.AccessibleAWTButton, Canvas.AccessibleAWTCanvas, Checkbox.AccessibleAWTCheckbox, Choice.AccessibleAWTChoice, Container.AccessibleAWTContainer, Label.AccessibleAWTLabel, List.AccessibleAWTList, List.AccessibleAWTList.AccessibleAWTListChild, Scrollbar.AccessibleAWTScrollBar, TextComponent.AccessibleAWTTextComponent, Box.AccessibleBox, CellRendererPane.AccessibleCellRendererPane, JComponent.AccessibleJComponent, Panel.AccessibleAWTPanel, ScrollPane.AccessibleAWTScrollPane, Window.AccessibleAWTWindow, TextArea.AccessibleAWTTextArea, TextField.AccessibleAWTTextField, AbstractButton.AccessibleAbstractButton, JColorChooser.AccessibleJColorChooser, JComboBox.AccessibleJComboBox, JDesktopPane.AccessibleJDesktopPane, JFileChooser.AccessibleJFileChooser, JInternalFrame.AccessibleJInternalFrame, JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon, JLabel.AccessibleJLabel, JLayeredPane.AccessibleJLayeredPane, JList.AccessibleJList, JMenuBar.AccessibleJMenuBar, JOptionPane.AccessibleJOptionPane, JPanel.AccessibleJPanel, JPopupMenu.AccessibleJPopupMenu, JProgressBar.AccessibleJProgressBar, JRootPane.AccessibleJRootPane, JScrollBar.AccessibleJScrollBar, JScrollPane.AccessibleJScrollPane, JSeparator.AccessibleJSeparator, JSlider.AccessibleJSlider, JSpinner.AccessibleJSpinner, JSplitPane.AccessibleJSplitPane, JTabbedPane.AccessibleJTabbedPane, JTable.AccessibleJTable, JTableHeader.AccessibleJTableHeader, JTextComponent.AccessibleJTextComponent, JToolBar.AccessibleJToolBar, JToolTip.AccessibleJToolTip, JTree.AccessibleJTree, JViewport.AccessibleJViewport, Applet.AccessibleApplet, Dialog.AccessibleAWTDialog, Frame.AccessibleAWTFrame, JWindow.AccessibleJWindow, JButton.AccessibleJButton, JMenuItem.AccessibleJMenuItem, JToggleButton.AccessibleJToggleButton, JEditorPane.AccessibleJEditorPane, JTextArea.AccessibleJTextArea, JTextField.AccessibleJTextField, JApplet.AccessibleJApplet, JDialog.AccessibleJDialog, JFrame.AccessibleJFrame, JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem, JMenu.AccessibleJMenu, JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem, JCheckBox.AccessibleJCheckBox, JRadioButton.AccessibleJRadioButton, JEditorPane.AccessibleJEditorPaneHTML, JEditorPane.JEditorPaneAccessibleHypertextSupport, JPasswordField.AccessibleJPasswordField, ComponentOrientation, CompositeDataSupport, ConcurrentHashMap, ConcurrentLinkedQueue, ConcurrentSkipListMap, ConcurrentSkipListSet, ConfirmationCallback, ContainerOrderFocusTraversalPolicy, DefaultFocusTraversalPolicy, ContentModel, CopyOnWriteArrayList, CopyOnWriteArraySet, CSS, CubicCurve2D.Double, CubicCurve2D.Float, Currency, Cursor, Date, Date, Time, Timestamp, DateFormatSymbols, DateTimeSyntax, DateTimeAtCompleted, DateTimeAtCreation, DateTimeAtProcessing, JobHoldUntil, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, JToggleButton.ToggleButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultComboBoxModel, DefaultDesktopManager, DefaultFormatter, InternationalFormatter, MaskFormatter, DateFormatter, NumberFormatter, DefaultFormatterFactory, DefaultListCellRenderer, DefaultListSelectionModel, DefaultMutableTreeNode, JTree.DynamicUtilTreeNode, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultTableCellRenderer, DefaultTableColumnModel, DefaultTableModel, DefaultTreeModel, DefaultTreeSelectionModel, JTree.EmptySelectionModel, DelegationPermission, Dimension, DimensionUIResource, DocFlavor, DocFlavor.BYTE_ARRAY, DocFlavor.CHAR_ARRAY, DocFlavor.INPUT_STREAM, DocFlavor.READER, DocFlavor.SERVICE_FORMATTED, DocFlavor.STRING, DocFlavor.URL, DragGestureRecognizer, MouseDragGestureRecognizer, DragSource, DragSourceContext, DropTarget, DropTargetContext, EditorKit, DefaultEditorKit, StyledEditorKit, HTMLEditorKit, RTFEditorKit, Element, Ellipse2D.Double, Ellipse2D.Float, EmptyBorder, Enum, Authenticator.RequestorType, ClientInfoStatus, Component.BaselineResizeBehavior, Desktop.Action, Diagnostic.Kind, Dialog.ModalExclusionType, Dialog.ModalityType, DropMode, ElementKind, ElementType, Formatter.BigDecimalLayoutForm, FormSubmitEvent.MethodType, GroupLayout.Alignment, JavaFileObject.Kind, JTable.PrintMode, KeyRep.Type, LayoutStyle.ComponentPlacement, MemoryType, MessageContext.Scope, Modifier, MultipleGradientPaint.ColorSpaceType, MultipleGradientPaint.CycleMethod, NestingKind, Normalizer.Form, Proxy.Type, Resource.AuthenticationType, RetentionPolicy, RoundingMode, RowFilter.ComparisonType, RowIdLifetime, RowSorterEvent.Type, Service.Mode, SortOrder, SourceVersion, SSLEngineResult.HandshakeStatus, SSLEngineResult.Status, StandardLocation, SwingWorker.StateValue, Thread.State, TimeUnit, TrayIcon.MessageType, TypeKind, XmlAccessOrder, XmlAccessType, XmlNsForm, EnumMap, EnumSet, EnumSyntax, Chromaticity, ColorSupported, Compression, Fidelity, Finishings, JobSheets, JobState, JobStateReason, Media, MultipleDocumentHandling, OrientationRequested, PDLOverrideSupported, PresentationDirection, PrinterIsAcceptingJobs, PrinterState, PrinterStateReason, PrintQuality, ReferenceUriSchemesSupported, Severity, SheetCollate, Sides, MediaName, MediaSizeName, MediaTray, Event, EventListenerList, EventObject, AWTEvent, BeanContextEvent, CaretEvent, ChangeEvent, ConnectionEvent, DragGestureEvent, DragSourceEvent, DropTargetEvent, FlavorEvent, HandshakeCompletedEvent, HyperlinkEvent, LineEvent, ListDataEvent, ListSelectionEvent, MenuEvent, NamingEvent, NamingExceptionEvent, NodeChangeEvent, Notification, PopupMenuEvent, PreferenceChangeEvent, PrintEvent, PropertyChangeEvent, RowSetEvent, RowSorterEvent, SSLSessionBindingEvent, StatementEvent, TableColumnModelEvent, TableModelEvent, TreeExpansionEvent, TreeModelEvent, TreeSelectionEvent, UndoableEditEvent, UnsolicitedNotificationEvent, ActionEvent, AdjustmentEvent, AncestorEvent, ComponentEvent, HierarchyEvent, InputMethodEvent, InternalFrameEvent, InvocationEvent, ItemEvent, TextEvent, BeanContextMembershipEvent, BeanContextServiceAvailableEvent, BeanContextServiceRevokedEvent, DragSourceDragEvent, DragSourceDropEvent, DropTargetDragEvent, DropTargetDropEvent, HTMLFrameHyperlinkEvent, AttributeChangeNotification, JMXConnectionNotification, MBeanServerNotification, MonitorNotification, RelationNotification, TimerNotification, PrintJobAttributeEvent, PrintJobEvent, PrintServiceAttributeEvent, IndexedPropertyChangeEvent, ContainerEvent, FocusEvent, InputEvent, PaintEvent, WindowEvent, FormSubmitEvent, KeyEvent, MouseEvent, MenuKeyEvent, MenuDragMouseEvent, MouseWheelEvent, File, FilePermission, FlowLayout, Font, FontUIResource, FontMetrics, Format, DateFormat, MessageFormat, NumberFormat, SimpleDateFormat, ChoiceFormat, DecimalFormat, GapContent, GraphicsConfigTemplate, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GuardedObject, HashAttributeSet, HashDocAttributeSet, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashDocAttributeSet, HashMap, LinkedHashMap, PrinterStateReasons, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashSet, JobStateReasons, LinkedHashSet, Hashtable, Properties, UIDefaults, Provider, AuthProvider, HTML.UnknownTag, HTMLEditorKit.LinkController, ICC_Profile, ICC_ProfileGray, ICC_ProfileRGB, IconUIResource, Identity, IdentityScope, Signer, IdentityHashMap, ImageIcon, ImageIcon.AccessibleImageIcon, InetAddress, Inet4Address, Inet6Address, InputMap, ComponentInputMap, InputMapUIResource, ComponentInputMapUIResource, Insets, InsetsUIResource, IntegerSyntax, Copies, JobImpressions, JobImpressionsCompleted, JobKOctets, JobKOctetsProcessed, JobMediaSheets, JobMediaSheetsCompleted, JobPriority, JobPrioritySupported, NumberOfDocuments, NumberOfInterveningJobs, NumberUp, PagesPerMinute, PagesPerMinuteColor, QueuedJobCount, JAXBElement, JComponent, JFormattedTextField.AbstractFormatter, JMenu.WinListener, JMXPrincipal, JMXServiceURL, JRootPane.RootLayout, JTabbedPane, JTabbedPane.ModelListener, JTree.TreeSelectionRedirector, JViewport.ViewListener, KerberosPrincipal, KerberosTicket, KeyPair, KeyRep, LanguageCallback, LayoutFocusTraversalPolicy, Lease, Level, Line2D.Double, Line2D.Float, LinkedBlockingDeque, LinkedBlockingQueue, LinkedHashSet, LinkedList, Locale, LogRecord, MarshalledObject, MathContext, MBeanFeatureInfo, MBeanAttributeInfo, MBeanConstructorInfo, MBeanNotificationInfo, MBeanOperationInfo, MBeanParameterInfo, ModelMBeanAttributeInfo, OpenMBeanAttributeInfoSupport, ModelMBeanConstructorInfo, OpenMBeanConstructorInfoSupport, ModelMBeanNotificationInfo, ModelMBeanOperationInfo, OpenMBeanOperationInfoSupport, OpenMBeanParameterInfoSupport, MBeanInfo, ModelMBeanInfoSupport, OpenMBeanInfoSupport, MediaTracker, MenuComponent, MenuBar, MenuItem, CheckboxMenuItem, Menu, PopupMenu, MenuComponent.AccessibleAWTMenuComponent, MenuBar.AccessibleAWTMenuBar, MenuItem.AccessibleAWTMenuItem, CheckboxMenuItem.AccessibleAWTCheckboxMenuItem, Menu.AccessibleAWTMenu, PopupMenu.AccessibleAWTPopupMenu, MenuShortcut, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.TreeLeafIcon, MetalIconFactory.FolderIcon16, MetalIconFactory.TreeFolderIcon, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, ModificationItem, NameCallback, NameClassPair, Binding, SearchResult, NotificationResult, Number, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, NumericShaper, ObjectInstance, ObjectStreamClass, ObjID, OpenType, ArrayType, CompositeType, SimpleType, TabularType, Option, OverlayLayout, ParameterBlock, ParserDelegator, PasswordCallback, Path2D.Double, Path2D.Float, GeneralPath, Pattern, Permission, AllPermission, MBeanPermission, PrivateCredentialPermission, ServicePermission, SocketPermission, UnresolvedPermission, PermissionCollection, Permissions, Permissions, Point, Point2D.Double, Point2D.Float, Polygon, PriorityBlockingQueue, PriorityQueue, PropertyChangeSupport, SwingPropertyChangeSupport, Proxy, QName, QuadCurve2D.Double, QuadCurve2D.Float, QueryEval, Random, SecureRandom, Rdn, Rectangle, DefaultCaret, BasicTextUI.BasicCaret, Rectangle2D.Double, Rectangle2D.Float, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, BinaryRefAddr, StringRefAddr, Reference, LinkRef, RemoteObject, RemoteObjectInvocationHandler, RemoteServer, RemoteStub, Activatable, UnicastRemoteObject, ActivationGroup_Stub, RMIConnectionImpl_Stub, RMIServerImpl_Stub, ActivationGroup, ResolutionSyntax, PrinterResolution, ResolveResult, RMIConnector, Role, RoleInfo, RoleResult, RoleUnresolved, RoundRectangle2D.Double, RoundRectangle2D.Float, RowSetMetaDataImpl, ScrollPaneAdjustable, ScrollPaneLayout, ScrollPaneLayout.UIResource, SealedObject, SearchControls, SecureRandomSpi, Semaphore, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, ServicePermission, SetOfIntegerSyntax, CopiesSupported, JobImpressionsSupported, JobKOctetsSupported, JobMediaSheetsSupported, NumberUpSupported, PageRanges, SignedObject, SimpleAttributeSet, Size2DSyntax, MediaSize, SizeRequirements, SocketAddress, InetSocketAddress, SocketPermission, SpinnerDateModel, SpinnerListModel, SpinnerNumberModel, SslRMIClientSocketFactory, StackTraceElement, String, StringBuffer, StringBuilder, StringContent, Stub, _Remote_Stub, StyleContext, StyleSheet, StyleContext.NamedStyle, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SynchronousQueue, SystemColor, TableColumn, TabSet, TabStop, TabularDataSupport, TargetedNotification, TextInputCallback, RealmCallback, TextOutputCallback, TextSyntax, DocumentName, JobMessageFromOperator, JobName, JobOriginatingUserName, OutputDeviceAssigned, PrinterInfo, PrinterLocation, PrinterMakeAndModel, PrinterMessageFromOperator, PrinterName, RequestingUserName, Throwable, Error, Exception, AnnotationFormatError, AssertionError, AWTError, CoderMalfunctionError, FactoryConfigurationError, FactoryConfigurationError, IOError, LinkageError, ServiceConfigurationError, ThreadDeath, TransformerFactoryConfigurationError, VirtualMachineError, AclNotFoundException, ActivationException, AlreadyBoundException, ApplicationException, AWTException, BackingStoreException, BadAttributeValueExpException, BadBinaryOpValueExpException, BadLocationException, BadStringOperationException, BrokenBarrierException, CertificateException, ClassNotFoundException, CloneNotSupportedException, DataFormatException, DatatypeConfigurationException, DestroyFailedException, ExecutionException, ExpandVetoException, FontFormatException, GeneralSecurityException, GSSException, IllegalAccessException, IllegalClassFormatException, InstantiationException, InterruptedException, IntrospectionException, InvalidApplicationException, InvalidMidiDataException, InvalidPreferencesFormatException, InvalidTargetObjectTypeException, InvocationTargetException, IOException, JAXBException, JMException, KeySelectorException, LastOwnerException, LineUnavailableException, MarshalException, MidiUnavailableException, MimeTypeParseException, NamingException, NoninvertibleTransformException, NoSuchFieldException, NoSuchMethodException, NotBoundException, NotOwnerException, ParseException, ParserConfigurationException, PrinterException, PrintException, PrivilegedActionException, PropertyVetoException, RefreshFailedException, RemarshalException, RuntimeException, SAXException, ScriptException, ServerNotActiveException, SOAPException, SQLException, TimeoutException, TooManyListenersException, TransformerException, TransformException, UnmodifiableClassException, UnsupportedAudioFileException, UnsupportedCallbackException, UnsupportedFlavorException, UnsupportedLookAndFeelException, URIReferenceException, URISyntaxException, UserException, XMLParseException, XMLSignatureException, XMLStreamException, XPathException, ClassCircularityError, ClassFormatError, ExceptionInInitializerError, IncompatibleClassChangeError, NoClassDefFoundError, UnsatisfiedLinkError, VerifyError, InternalError, OutOfMemoryError, StackOverflowError, UnknownError, UnknownGroupException, UnknownObjectException, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, ServerCloneException, BadPaddingException, CertificateException, CertPathBuilderException, CertPathValidatorException, CertStoreException, CRLException, DigestException, ExemptionMechanismException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException, InvalidParameterSpecException, KeyException, KeyStoreException, LoginException, NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, ShortBufferException, SignatureException, UnrecoverableEntryException, ChangedCharSetException, CharacterCodingException, CharConversionException, ClosedChannelException, EOFException, FileLockInterruptionException, FileNotFoundException, FilerException, HttpRetryException, IIOException, InterruptedIOException, InvalidPropertiesFormatException, JMXProviderException, JMXServerErrorException, MalformedURLException, ObjectStreamException, ProtocolException, RemoteException, SaslException, SocketException, SSLException, SyncFailedException, UnknownHostException, UnknownServiceException, UnsupportedEncodingException, UTFDataFormatException, ZipException, MarshalException, PropertyException, UnmarshalException, ValidationException, MBeanException, OpenDataException, OperationsException, ReflectionException, RelationException, AttributeInUseException, AttributeModificationException, CannotProceedException, CommunicationException, ConfigurationException, ContextNotEmptyException, InsufficientResourcesException, InterruptedNamingException, InvalidAttributeIdentifierException, InvalidAttributesException, InvalidAttributeValueException, InvalidNameException, InvalidSearchControlsException, InvalidSearchFilterException, LimitExceededException, LinkException, NameAlreadyBoundException, NameNotFoundException, NamingSecurityException, NoInitialContextException, NoSuchAttributeException, NotContextException, OperationNotSupportedException, PartialResultException, ReferralException, SchemaViolationException, ServiceUnavailableException, PrinterAbortException, PrinterIOException, AnnotationTypeMismatchException, ArithmeticException, ArrayStoreException, BufferOverflowException, BufferUnderflowException, CannotRedoException, CannotUndoException, ClassCastException, CMMException, ConcurrentModificationException, DataBindingException, DOMException, EmptyStackException, EnumConstantNotPresentException, EventException, IllegalArgumentException, IllegalMonitorStateException, IllegalPathStateException, IllegalStateException, ImagingOpException, IncompleteAnnotationException, IndexOutOfBoundsException, JMRuntimeException, LSException, MalformedParameterizedTypeException, MirroredTypeException, MirroredTypesException, MissingResourceException, NegativeArraySizeException, NoSuchElementException, NoSuchMechanismException, NullPointerException, ProfileDataException, ProviderException, RangeException, RasterFormatException, RejectedExecutionException, SecurityException, SystemException, TypeConstraintException, TypeNotPresentException, UndeclaredThrowableException, UnknownAnnotationValueException, UnknownElementException, UnknownTypeException, UnmodifiableSetException, UnsupportedOperationException, WebServiceException, XPathException, SAXNotRecognizedException, SAXNotSupportedException, SAXParseException, BatchUpdateException, RowSetWarning, SerialException, SQLClientInfoException, SQLNonTransientException, SQLRecoverableException, SQLTransientException, SQLWarning, SyncFactoryException, SyncProviderException, TransformerConfigurationException, AdapterAlreadyExists, AdapterInactive, AdapterNonExistent, AlreadyBound, BadKind, Bounds, Bounds, CannotProceed, DuplicateName, FormatMismatch, ForwardRequest, ForwardRequest, InconsistentTypeCode, InconsistentTypeCode, Invalid, InvalidAddress, InvalidName, InvalidName, InvalidName, InvalidPolicy, InvalidSeq, InvalidSlot, InvalidTypeForEncoding, InvalidValue, InvalidValue, NoContext, NoServant, NotEmpty, NotFound, ObjectAlreadyActive, ObjectNotActive, PolicyError, ServantAlreadyActive, ServantNotActive, TypeMismatch, TypeMismatch, TypeMismatch, UnknownEncoding, UnknownUserException, WrongAdapter, WrongPolicy, WrongTransaction, XPathExpressionException, XPathFactoryConfigurationException, GenericSignatureFormatError, UnsupportedClassVersionError, AbstractMethodError, IllegalAccessError, InstantiationError, NoSuchFieldError, NoSuchMethodError, ZipError, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, InvalidKeyException, KeyManagementException, AccountException, CredentialException, FailedLoginException, UnrecoverableKeyException, MalformedInputException, UnmappableCharacterException, AsynchronousCloseException, IIOInvalidTreeException, SocketTimeoutException, InvalidClassException, InvalidObjectException, NotActiveException, NotSerializableException, OptionalDataException, StreamCorruptedException, WriteAbortedException, AccessException, ActivateFailedException, ConnectException, ConnectIOException, ExportException, MarshalException, NoSuchObjectException, ServerError, ServerException, ServerRuntimeException, SkeletonMismatchException, SkeletonNotFoundException, StubNotFoundException, UnexpectedException, UnknownHostException, UnmarshalException, AuthenticationException, BindException, ConnectException, NoRouteToHostException, PortUnreachableException, SSLHandshakeException, SSLKeyException, SSLPeerUnverifiedException, SSLProtocolException, JarException, MBeanRegistrationException, AttributeNotFoundException, InstanceAlreadyExistsException, InstanceNotFoundException, IntrospectionException, InvalidAttributeValueException, ListenerNotFoundException, MalformedObjectNameException, NotCompliantMBeanException, ServiceNotFoundException, InvalidRelationIdException, InvalidRelationServiceException, InvalidRelationTypeException, InvalidRoleInfoException, InvalidRoleValueException, RelationNotFoundException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RoleInfoNotFoundException, RoleNotFoundException, SizeLimitExceededException, TimeLimitExceededException, LinkLoopException, MalformedLinkException, AuthenticationException, AuthenticationNotSupportedException, NoPermissionException, LdapReferralException, IllegalCharsetNameException, IllegalFormatException, IllegalSelectorException, IllegalThreadStateException, InvalidKeyException, InvalidOpenTypeException, InvalidParameterException, KeyAlreadyExistsException, NumberFormatException, PatternSyntaxException, UnresolvedAddressException, UnsupportedAddressTypeException, UnsupportedCharsetException, AlreadyConnectedException, CancellationException, CancelledKeyException, ClosedSelectorException, ConnectionPendingException, FormatterClosedException, IllegalBlockingModeException, IllegalComponentStateException, InvalidDnDOperationException, InvalidMarkException, NoConnectionPendingException, NonReadableChannelException, NonWritableChannelException, NotYetBoundException, NotYetConnectedException, OverlappingFileLockException, ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException, MonitorSettingException, RuntimeErrorException, RuntimeMBeanException, RuntimeOperationsException, InputMismatchException, AccessControlException, RMISecurityException, ACTIVITY_COMPLETED, ACTIVITY_REQUIRED, BAD_CONTEXT, BAD_INV_ORDER, BAD_OPERATION, BAD_PARAM, BAD_QOS, BAD_TYPECODE, CODESET_INCOMPATIBLE, COMM_FAILURE, DATA_CONVERSION, FREE_MEM, IMP_LIMIT, IndirectionException, INITIALIZE, INTERNAL, INTF_REPOS, INVALID_ACTIVITY, INVALID_TRANSACTION, INV_FLAG, INV_IDENT, INV_OBJREF, INV_POLICY, MARSHAL, NO_IMPLEMENT, NO_MEMORY, NO_PERMISSION, NO_RESOURCES, NO_RESPONSE, OBJECT_NOT_EXIST, OBJ_ADAPTER, PERSIST_STORE, REBIND, TIMEOUT, TRANSACTION_MODE, TRANSACTION_REQUIRED, TRANSACTION_ROLLEDBACK, TRANSACTION_UNAVAILABLE, TRANSIENT, UNKNOWN, UnknownException, HeadlessException, ReadOnlyBufferException, ProtocolException, SQLDataException, SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException, SQLSyntaxErrorException, SQLTimeoutException, SQLTransactionRollbackException, SQLTransientConnectionException, DataTruncation, XPathFunctionException, AccountExpiredException, AccountLockedException, AccountNotFoundException, CredentialExpiredException, CredentialNotFoundException, ClosedByInterruptException, SocketSecurityException, DuplicateFormatFlagsException, FormatFlagsConversionMismatchException, IllegalFormatCodePointException, IllegalFormatConversionException, IllegalFormatFlagsException, IllegalFormatPrecisionException, IllegalFormatWidthException, MissingFormatArgumentException, MissingFormatWidthException, UnknownFormatConversionException, UnknownFormatFlagsException, HTTPException, SOAPFaultException, Timer, Timestamp, TimeZone, SimpleTimeZone, TransferHandler, TransformAttribute, TreeMap, TreePath, TreeSet, UID, UIManager, UnresolvedPermission, URI, URISyntax, Destination, PrinterMoreInfo, PrinterMoreInfoManufacturer, PrinterURI, URL, UUID, Vector, Stack, VetoableChangeSupport, ViewportLayout, VMID, X500Principal","Call toString on the JSONObject, and then serialize the string. JSONObject itself is not serializable.

String jsonString = jsonObject.toString();",None,"['""""""JSONObject Not Serializable? \n\nI am trying to serialize an ArrayList of JSONObjects. But I get the error at dalvik.system.NativeStart.main(Native Method)\n\nHere is my serialize & deserialize code:\n\nprivate void serializeQuotes() { FileOutputStream fos; try { fos = openFileOutput(Constants.FILENAME, Context.MODE_PRIVATE); ObjectOutputStream oos = new ObjectOutputStream(fos); oos.writeObject(quotes); oos.close(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } } @SuppressWarnings(""unchecked"") private void deserializeQuotes() { try { FileInputStream fis = openFileInput(Constants.FILENAME); ObjectInputStream ois = new ObjectInputStream(fis); quotes = (ArrayList<JSONObject>) ois.readObject(); } catch (FileNotFoundException e) { e.printStackTrace(); } catch (IOException e) { e.printStackTrace(); } catch (ClassNotFoundException e) { e.printStackTrace(); } }\n\nSheehan AlamSheehan Alam\n\nDude, it\'s JSON. Why not just serialize it as JSON, instead of as a Java object of type JSONObject?""""""', '""""""It\'s not like it would break anything at all or am I missing something here? | Show 3 more comments\n\nIn the case you\'d still want Java built-in serialization without having to resort to marshal your JSON object into string notation, one thing you could do is extend JSONObject and JSONArray from org.json and just implement Serializable. Then you can use your own versions of JSONObject and JSONArray across the board instead of the originals. Make sure you define all constructors on your subclasses and call their super() counterparts as well as implement specific methods that return the parent types such as getJSONObject() and getJSONArray() from properties. Roberto AndradeRoberto Andrade\n\n1,3\n\nvoting up, since this is the right approach. I do the same since I am caching a comples JSONObject on MemCache, rather than get it created all the time or stringified. This does seem to work, but is it ""safe"" to do? Something about extending a 3rd party class that isn\'t serializable, and then marking it as so, seems a little risky. This is a better approach than the accepted one! Another way is to swap org.json library with json-simple. The JSONObject class from json-simple extends HashMap which is java Serializable as well as more java-ish API. http://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple/1.1.1\n\nhttps://www.mkyong.com/java/json-simple-example-read-and-write-json/\n\nThamme GowdaThamme Gowda\n\nIf you have JSONArray inside Serializable object class try to initialize JSONArray in this way. private transient JSONArray jsonArray;\n\npublic class Person implements Serializable { private String name; private transient JSONArray jsonArray; public String getName() { return name; } public void setName(String name) { this.name = name; } public JSONArray getJsonArray() { return jsonArray; } public void setJsonArray(JSONArray jsonArray) { this.jsonArray = jsonArray; } }\n\n3,1\n\nBecause it\'ll change functionality, you might not want to lose your JSONArray on deserialize.""""""']",0.04950495,0.333333333,0.97777777
io,InputStream,Convert InputStream to byte array in Java,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
if we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
isn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>
<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>
But if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.
<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.
<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>
<p>Edit 1: That is  if the other method also needs to read the same data.
<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.
FilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.
It should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>
Fetches entire contents of an InputStream and represent same data as result InputStream.
<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.
A workaround for this is to create a new input stream that reads from the same source again.</p>
And there is no need to maintain a second code path for the cloning of the stream.</p>
<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.
Just create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>
Important: you must consume all cloned streams simultaneously in separate threads.</strong></p>",None,"I use this.

public static byte[] toByteArray(InputStream is) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        try {
            byte[] b = new byte[4096];
            int n = 0;
            while ((n = is.read(b)) != -1) {
                output.write(b, 0, n);
            }
            return output.toByteArray();
        } finally {
            output.close();
        }
    }",None,"['""""""Convert InputStream to byte array in Java\n\nHow do I read an entire InputStream into a byte array? 1\n\nSee the reverse: byte[] to InputStream. You can use Apache Commons IO to handle this and similar tasks. The IOUtils type has a static method to read an InputStream and return a byte[]. InputStream is; byte[] bytes = IOUtils.toByteArray(is);\n\nInternally this creates a ByteArrayOutputStream and copies the bytes to the output, then calls toByteArray(). It handles large files by copying the bytes in blocks of 4KiB. Rich SellerRich Seller\n\n24\n\nFor the want of writing 4 lines of code, you think that importing a 3rd-party dependency is worthwhile? If there is a library that handles the requirement, and deals with processing for large files, and is well tested, surely the question is why would I write it myself? The jar is only 107KB and if you have need for one method from it, you are likely to use others too\n\n: considering the staggering amount of wrong implementations of this feature I\'ve seen in my developer life, I feel that yes it\'s very much worth the external dependency to get it right. Why not go and have a look at Apache commons stuff like FastArrayList or their soft & weak reference Maps and come back to tell me how ""well-tested"" this library is. It\'s a pile of rubbish\n\n\n\nIn addition to Apache commons-io, check out the ByteStreams class from Google Guava. InputStream is; byte[] filedata=ByteStreams.toByteArray(is);\n\nYou need to read each byte from your InputStream and write it to a ByteArrayOutputStream. You can then retrieve the underlying byte array by calling toByteArray():\n\nInputStream is = ... ByteArrayOutputStream buffer = new ByteArrayOutputStream(); int nRead; byte[] data = new byte[16384]; while ((nRead = is.read(data, 0, data.length)) != -1) { buffer.write(data, 0, nRead); } return buffer.toByteArray();\n\n8,16\n\nWhat about the size of newly created byte[]. Why it is 16384?""""""', '""""""OP is asking for byte[]. It\'s not just \\r that could be a problem. This method converts the bytes to characters and back again (using the default character set for InputStreamReader). Any bytes which aren\'t valid in the default character encoding (say, -1 for UTF-8 on Linux) will be corrupted, potentially even changing the number of bytes. Seems like this is good answer, but text-oriented.""""""']",0.242424242,0.366666667,0.761904762
io,InputStream,Java: InputStream too slow to read huge files,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
if we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
isn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>
<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>
But if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.
<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.
<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>
<p>Edit 1: That is  if the other method also needs to read the same data.
<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.
FilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.
It should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>
Fetches entire contents of an InputStream and represent same data as result InputStream.
<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.
A workaround for this is to create a new input stream that reads from the same source again.</p>
And there is no need to maintain a second code path for the cloning of the stream.</p>
<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.
Just create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>
Important: you must consume all cloned streams simultaneously in separate threads.</strong></p>",None,"I would try this

// create the file so we have something to read.
final String fileName = ""1.2.fasta"";
FileOutputStream fos = new FileOutputStream(fileName);
fos.write(new byte[54 * 1024 * 1024]);
fos.close();

// read the file in one hit.
long start = System.nanoTime();
FileChannel fc = new FileInputStream(fileName).getChannel();
ByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
while (bb.remaining() > 0)
    bb.getLong();
long time = System.nanoTime() - start;
System.out.printf(""Took %.3f seconds to read %.1f MB%n"", time / 1e9, fc.size() / 1e6);
fc.close();
((DirectBuffer) bb).cleaner().clean();
prints

Took 0.016 seconds to read 56.6 MB",None,"['"""""" Java: InputStream too slow to read huge files\n\nI have to read a 53 MB file character by character. When I do it in C++ using ifstream, it is completed in milliseconds but using Java InputStream it takes several minutes. Is it normal for Java to be this slow or am I missing something? Also, I need to complete the program in Java (it uses servlets from which I have to call the functions which process these characters). I was thinking maybe writing the file processing part in C or C++ and then using Java Native Interface to interface these functions with my Java programs... How is this idea?""""""']",0.151515152,0.147619048,0.98
io,InputStream,Loading images using an InputStream,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
if we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
isn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>
<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>
But if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.
<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.
<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>
<p>Edit 1: That is  if the other method also needs to read the same data.
<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.
FilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.
It should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>
Fetches entire contents of an InputStream and represent same data as result InputStream.
<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.
A workaround for this is to create a new input stream that reads from the same source again.</p>
And there is no need to maintain a second code path for the cloning of the stream.</p>
<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.
Just create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>
Important: you must consume all cloned streams simultaneously in separate threads.</strong></p>",None,"If you are using PDFBox 2.0.0 or above

PDDocument document = PDDocument.load(new File(""filePath"")); //filePath is the path to your .pdf
PDFRenderer pdfRenderer = new PDFRenderer(document);

for(int i=0; i<document.getPages().getCount(); i++){
    BufferedImage bim = pdfRenderer.renderImage(i, 1.0f, ImageType.RGB); //Get bufferedImage for page ""i"" with scale 1
    ByteArrayOutputStream os = new ByteArrayOutputStream();
    ImageIO.write(bim, ""jpg"", os);
    InputStream is = new ByteArrayInputStream(os.toByteArray());
    //Do whatever you need with the inputstream
}
document.close()",None,"['""""""Loading images using an InputStream\n\nIn my IDE I\'m able to get the path of an image that is in my resource folder and make that path a new file object by doing this:\n\nURL imagePath = getClass().getResource(""/image.png""); try { //Convert the URLs into URIs and make a file object with that path File image = new File(imagePath.toURI()); } catch (URISyntaxException e) { e.printStackTrace(); }\n\nBut when I make a jar file of my program I get the error URI is not hierarchical. And I have done some research and found out that I have to create an InputStream using the getResourceAsStream() method. But I do not know how to make that work for an image. I just need to be able to get the path of the image from my resource folder. How would I make this work even if its a jar. Don\'t convert the URL to a File reference, this defeats the point of having the embedded resource and embedded resources are simply entries inside a zip file, so they can\'t be treated as a File. Instead, use something like ImageIO.read(imagePath)\n\nSee Reading/Loading an Image for more details\n\nMadProgrammerMadProgrammer\n\nI think the best solution in this case would be to ask the ClassLoader directly for an InputStream (using ClassLoader.getResourceAsStream) and pass that to ImageIO.read. Here is a complete example. import java.awt.image.BufferedImage; import java.io.IOException; import java.io.InputStream; import javax.imageio.ImageIO; public final class Main { public static void main(final String[] args) { final ClassLoader clsldr = Main.class.getClassLoader(); for (final String path : args) { try { InputStream is = null; BufferedImage image = null; try { is = clsldr.getResourceAsStream(path); if (is != null) { image = ImageIO.read(is); if (image != null) { // Do something with the image. System.out.printf(""%s: %d x %d%n"", path, image.getWidth(), image.getHeight()); } else { System.err.printf(""error: %s: %s%n"", path, ""not a valid image file""); } } else { System.err.printf(""error: %s: %s%n"", path, ""no such resource""); } } finally { if (is != null) { is.close(); } } } catch (final IOException e) { System.err.printf(""error: %s: %s%n"", path, e.getMessage()); } } } }\n\nSay I have a picture file photo.jpg and then compile above file and create a JAR file like this\n\n$ javac *.java $ jar -cfe example.jar Main *.class photo.jpg\n\nthen I can run the program like this and get the following output. $ java -jar example NoSuchThing Main.class photo.jpg error: NoSuchThing: no such resource error: Main.class: not a valid image file photo.jpg: 328 x 328\n\n5gon12eder5gon12eder\n\n1\n\nYour answer is a great one if I use an InputStream. But MadProgrammer pointed out that I don\'t have to use an InputStream, I was getting an error because I was converting a URL into a URI then into a File. So in my case his answer is just simpler.""""""']",0.151515152,0.5,1
io,InputStream,How do I read bytes from InputStream?,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
if we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
isn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>
<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>
But if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.
<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.
<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>
<p>Edit 1: That is  if the other method also needs to read the same data.
<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.
FilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.
It should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>
Fetches entire contents of an InputStream and represent same data as result InputStream.
<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.
A workaround for this is to create a new input stream that reads from the same source again.</p>
And there is no need to maintain a second code path for the cloning of the stream.</p>
<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.
Just create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>
Important: you must consume all cloned streams simultaneously in separate threads.</strong></p>",None,"Try this( IOUtils is commons-io)

byte[] bytes = IOUtils.toByteArray(instream);",None,"['"""""" Unfortunately it doesn\'t work for me because I don\'t know the length of the stream upfront. @janus it is a ""File"". this way only works if u know the length of the file or the count of bytes to read. Interesting thing, but you must know the exact length of the (part of the) stream to read. Moreover, the class DataInputStream is primary used to read primary types (Longs, Shorts, Chars...) from a stream, so we can see this usage as a misuse of the class. If you already know the length of the data to read from the stream, this is no better than InputStream.read. @LoganPickup InputStream.read does not guarantee to return all the bytes you request! | Show 7 more comments\n\nIf you happen to use Google Guava, it\'ll be as simple as using ByteStreams:\n\nbyte[] bytes = ByteStreams.toByteArray(inputStream);\n\n0\n\nSafe solution (close streams correctly):\n\nfinal byte[] bytes; try (inputStream) { bytes = inputStream.readAllBytes(); }\n\npublic static byte[] readAllBytes(InputStream inputStream) throws IOException { final int bufLen = 4 * 0x400; // 4KB byte[] buf = new byte[bufLen]; int readLen; IOException exception = null; try { try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) { while ((readLen = inputStream.read(buf, 0, bufLen)) != -1) outputStream.write(buf, 0, readLen); return outputStream.toByteArray(); } } catch (IOException e) { exception = e; throw e; } finally { if (exception == null) inputStream.close(); else try { inputStream.close(); } catch (IOException e) { exception.addSuppressed(e); } } }\n\nKotlin (when Java 9+ isn\'t accessible):\n\n@Throws(IOException::class) fun InputStream.readAllBytes(): ByteArray { val bufLen = 4 * 0x400 // 4KB val buf = ByteArray(bufLen) var readLen: Int = 0 ByteArrayOutputStream().use { o -> this.use { i -> while (i.read(buf, 0, bufLen).also { readLen = it } != -1) o.write(buf, 0, readLen) } return o.toByteArray() } }\n\nTo avoid nested use see here. Scala (when Java 9+ isn\'t accessible) (By @Joan. Thx):\n\ndef readAllBytes(inputStream: InputStream): Array[Byte] = Stream.continually(inputStream.read).takeWhile(_ != -1).map(_.toByte).toArray\n\nMir-IsmailiMir-Ismaili\n\n6\n\nDoesn\'t it mean that at some point you\'d have double the memory used, because you have both the buffer and the byte array? Isn\'t there a way to send the bytes directly to the output byte array? @androiddeveloper; I\'m sorry.""""""', '""""""OP is asking for byte[]. It\'s not just \\r that could be a problem. This method converts the bytes to characters and back again (using the default character set for InputStreamReader). Any bytes which aren\'t valid in the default character encoding (say, -1 for UTF-8 on Linux) will be corrupted, potentially even changing the number of bytes. Seems like this is good answer, but text-oriented.""""""']",0.151515152,0.833333333,0.708333333
io,FileInputStream,FileInputStream read until last 128 bytes of file,"Don t use FileInputStream</strong> as a parameter or variable type.
Use the abstract base class  in this case InputStream instead.</p>
<p>But it will work only within your IDE  not in runnable JAR.
<p>Don t make the mistake of relying upon or needlessly converting/losing endline characters.
Don t forget to use the proper character encoding to interpres the stream.</p>
<p>If you want to make this a little more efficient  you can use arrays of characters instead  but to be honest  looping over the characters can be still quite fast.</p>","Most common ways to construct:
FileInputStream fis = new FileInputStream(""mybinaryfile"");
Based on 106 examples
 
File file = É;
FileInputStream fis = new FileInputStream(file);
Based on 94 examples","This should work.

InputStream is = Context.openFileInput(someFileName);
ByteArrayOutputStream bos = new ByteArrayOutputStream();
byte[] b = new byte[1024];
while ((int bytesRead = is.read(b)) != -1) {
   bos.write(b, 0, bytesRead);
}
byte[] bytes = bos.toByteArray();",None,"['""""""FileInputStream read until last 128 bytes of file\n\nI\'m trying to read the last 128 bytes from a file (the signature) and then trying to read until those bytes but the first part (reading the last 128 bytes) is returning an ArrayIndexOutOfBoundsException:\n\nbyte[] signature = new byte[128]; FileInputStream sigFis = new FileInputStream(f); sigFis.read(signature, (int)f.length()-128, 128); sigFis.close();\n\nAnd then the last part doesn\'t seem to be working either, I\'m using an offset that i increase gradually:\n\nCipherInputStream cis = new CipherInputStream(fis, c); FileOutputStream fos = new FileOutputStream(destFile); int i = cis.read(data); int offset = 0, maxsize = (int)f.length()-128; while((i != -1) && offset<maxsize){ fos.write(data, 0, i); sig.update(data); fos.flush(); i = cis.read(data); offset+=1024; }\n\nI get an EOFExcpetion with the RAF I used to do my ops... byte[] signature = new byte[128]; int offset = (int)f.length()-128; raf.seek(offset); raf.readFully(signature, 0, 128);\n\n2\n\nI\'m still having trouble with the damn randomAccessFile I use, I do a seek(file.length()-128) and then read(data, 0, 128) and it just sends an EOFException... I was making a dumb mistake, i was reading an empty file... I would use File or FileChannel to get the file size. This is how to read until the last 128 bytes\n\nFileInputStream is = new FileInputStream(""1.txt""); FileChannel ch = is.getChannel(); long len = ch.size() - 128; BufferedInputStream bis = new BufferedInputStream(is); for(long i = 0; i < len; i++) { int b = bis.read(); ... }\n\nif we continue reading we will get the last 128 bytes\n\nByteArrayOutputStream bout128 = new ByteArrayOutputStream(); for(int b; (b=bis.read() != -1);) { bout128.write(b); } byte[] last128 = bout128.toByteArray();\n\nEvgeniy DorofeevEvgeniy Dorofeev\n\n6\n\nThanks, that makes a lot of sense, I\'ll try that out but I think I\'m gonna use a RandomAccessFile and the skip the bytes, read the last 128\n\n\n\nSorry, but this thing is quite particular, won\'t this use of the stream change the pointer of my FileInputStream (or are you saying I should create a new stream?) and hence screw up the writing of the data? If you want only to read from file it\'s more logical to use FileInputStream. As for RandomAccessFile, if you change file position and then write, it will write from the new position. what do you mean ""more logical to use FileInputStream""? Because that is exactly what I\'m trying to find out, reading the file but stoping it when there are 128 bytes left on the stream/file\n\n\n\nCould you please help on reading until the last 128 bytes but using a fileinputstream? | Show 1 more comment\n\nI think you got confused with the read method parameters.. FileInputStream sigFis = new FileInputStream(f); sigFis.read(signature, (int)f.length()-128, 128); //This doesn\'t give you last 128 bits. // The offset is offset of the byte array \'signature // Thats the reason you see ArrayIndexOutOfBoundsException sigFis.close();\n\nreplace your read() method with\n\nsigFis.read(signature); //But now signature cannot be just 128 array but length of file. And read the last 128 bytes\n\nInputStream read method signature looks as below:\n\nint java.io.FileInputStream.read(byte[] b, int off, int len) Parameters: b the buffer into which the data is read. off the start offset in the destination array b len the maximum number of bytes read. prashantsunkariprashantsunkari\n\n1\n\nIt helps and a lot, what a stupid mistake I was making, that\'s what you get for not reading the method properties with propper attention.""""""']",0.555555556,0.111111111,0.294117647
lang,Object,Converting json from a file to a java Object,"<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>Both of these interfaces allow for different behavior.
Comparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).
The second  Comparator  allows you to do what you are asking to do.
If the objects in the ArrayList implement comparable  you can instead do something like this:</p>
<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>
<p>With Java 8 you can use a method reference for your comparator:</p>
<p>Since technologies appear everyday  the answer will change in the time.
<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>
Fortunately  the actual code is much simpler and shorter than this description.</p>
<p>If you want to sort for alphabet that contains non English characters you can use Locale...","Direct Known Subclasses:
AbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile","This simple example works like a charm:
DTOs

public class SampleDTO 
{
   private String name;
   private InnerDTO inner;
   // getters/setters
}

public class InnerDTO 
{
   private int number;
   private String str; 
   // getters/setters  
}  
Gson

  BufferedReader br = new BufferedReader(new FileReader(""/tmp/test.json""));
  SampleDTO sample = new Gson().fromJson(br, SampleDTO.class);  
Jackson

  InputStream inJson = SampleDTO.class.getResourceAsStream(""/test.json"");
  SampleDTO sample = new ObjectMapper().readValue(inJson, SampleDTO.class);
JSON (test.json)

{
   ""name"" : ""Mike"",
   ""inner"": {
      ""number"" : 5,
      ""str"" : ""Simple!""
   }
}","*******************usage scenario 1********************** 
----------usage scenario----------
Converting Java objects to JSON with Jackson
----------Explanation----------
To convert your object in JSON with Jackson:
----------Code Sample----------
ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
String json = ow.writeValueAsString(object);
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
How to create a jQuery plugin with methods?
----------Explanation----------
According to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method
----------Code Sample----------
(function( $ ){

var methods = {
init : function(options) {

},
show : function( ) { },// IS
hide : function( ) { },// GOOD
update : function( content ) { }// !!!
};

$.fn.tooltip = function(methodOrOptions) {
if ( methods[methodOrOptions] ) {
return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
// Default to ""init""
return methods.init.apply( this, arguments );
} else {
$.error( 'Method ' + methodOrOptions + ' does not exist on jQuery.tooltip' );
} 
};


})( jQuery );

$('div').tooltip(); // calls the init method
$('div').tooltip({ // calls the init method
foo : 'bar'
});
$('div').tooltip('hide'); // calls the hide method
$('div').tooltip('update', 'This is the new tooltip content!'); // calls the update method
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Checking if a key exists in a JavaScript object?
----------Explanation----------
Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?
----------Code Sample----------
var obj = { key: undefined };
obj[""key""] != undefined // false, but the key exists!

""key"" in obj // true, regardless of the actual value

!(""key"" in obj) // true if ""key"" doesn't exist in object
!""key"" in obj // ERROR! Equivalent to ""false in obj""

obj.hasOwnProperty(""key"") // true
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to ""properly"" create a custom object in JavaScript?
----------Explanation----------
Let's start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.
----------Code Sample----------
function Shape(x, y) {
this.x= x;
this.y= y;
}

Shape.prototype.toString= function() {
return 'Shape at '+this.x+', '+this.y;
};

function Circle(x, y, r) {
Shape.call(this, x, y); // invoke the base class's constructor function to take co-ords
this.r= r;
}
Circle.prototype= new Shape();

Circle.prototype.toString= function() {
return 'Circular '+Shape.prototype.toString.call(this)+' with radius '+this.r;
}

function subclassOf(base) {
_subclassOf.prototype= base.prototype;
return new _subclassOf();
}
function _subclassOf() {};

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.prototype= subclassOf(Shape);

Function.prototype.subclass= function(base) {
var c= Function.prototype.subclass.nonconstructor;
c.prototype= base.prototype;
this.prototype= new c();
};
Function.prototype.subclass.nonconstructor= function() {};

...

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.subclass(Shape);

function Point() {
Shape.apply(this, arguments);
}
Point.subclass(Shape);

function Shape() { this._init.apply(this, arguments); }
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

function Point() { this._init.apply(this, arguments); }
Point.subclass(Shape);
// no need to write new initialiser for Point!

Function.prototype.makeSubclass= function() {
function Class() {
if ('_init' in this)
this._init.apply(this, arguments);
}
Function.prototype.makeSubclass.nonconstructor.prototype= this.prototype;
Class.prototype= new Function.prototype.makeSubclass.nonconstructor();
return Class;
};
Function.prototype.makeSubclass.nonconstructor= function() {};

...

Shape= Object.makeSubclass();
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

Point= Shape.makeSubclass();

Circle= Shape.makeSubclass();
Circle.prototype._init= function(x, y, r) {
Shape.prototype._init.call(this, x, y);
this.r= r;
};

Function.prototype.makeSubclass= function() {
function Class() {
if (!(this instanceof Class))
throw('Constructor called without ""new""');
...

Circle= Shape.makeSubclass({
_init: function(x, y, z) {
Shape.prototype._init.call(this, x, y);
this.r= r;
},
...
});

function Shape(x, y) {
var that= this;

this.x= x;
this.y= y;

this.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};
}

function Circle(x, y, r) {
var that= this;

Shape.call(this, x, y);
this.r= r;

var _baseToString= this.toString;
this.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+that.r;
};
};

var mycircle= new Circle();

var ts= mycircle.toString;
alert(ts());

setTimeout(function() {
mycircle.move(1, 1);
}, 1000);

setTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);

function Shape(x, y) {
var that= {};

that.x= x;
that.y= y;

that.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};

return that;
}

function Circle(x, y, r) {
var that= Shape(x, y);

that.r= r;

var _baseToString= that.toString;
that.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+r;
};

return that;
};

var mycircle= Circle(); // you can include `new` if you want but it won't do anything
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Avoiding != null statements
----------Explanation----------
(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:
----------Code Sample----------
assert 

assert : 

public interface Action {
void doSomething();
}

public interface Parser {
Action findAction(String userInput);
}

public class MyParser implements Parser {
private static Action DO_NOTHING = new Action() {
public void doSomething() { /* do nothing */ }
};

public Action findAction(String userInput) {
// ...
if ( /* we can't find any actions */ ) {
return DO_NOTHING;
}
}
}

Parser parser = ParserFactory.getParser();
if (parser == null) {
// now what?
// this would be an example of where null isn't (or shouldn't be) a valid response
}
Action action = parser.findAction(someInput);
if (action == null) {
// do nothing
} else {
action.doSomething();
}

ParserFactory.getParser().findAction(someInput).doSomething();

try {
ParserFactory.getParser().findAction(someInput).doSomething();
} catch(ActionNotFoundException anfe) {
userConsole.err(anfe.getMessage());
}

public Action findAction(final String userInput) {
/* Code to return requested Action if found */
return new Action() {
public void doSomething() {
userConsole.err(""Action not found: "" + userInput);
}
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Java Generics Wildcarding With Multiple Classes
----------Explanation----------
Actually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:
----------Code Sample----------


public static > T
max(Collection coll)

class classB { }
interface interfaceC { }

public class MyClass {
Class variable;
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Cloning an Object in Node.js
----------Explanation----------

----------Code Sample----------
var obj2 = JSON.parse(JSON.stringify(obj1));

var extend = require('util')._extend;

var obj1 = {x: 5, y:5};
var obj2 = extend({}, obj1);
obj2.x = 6;
console.log(obj1.x); // still logs 5

exports._extend = function(origin, add) {
// Don't do anything if add isn't an object
if (!add || typeof add !== 'object') return origin;

var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Null check in an enhanced for loop
----------Explanation----------
If you get this list from somewhere else and don't know if it is ok or not you could create a utility method and use it like this:
----------Code Sample----------
for( Object o : safe( list ) ) {
// do whatever 
}

public static List safe( List other ) {
return other == null ? Collections.EMPTY_LIST : other;
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Shallow copy for arrays, why can't simply do newArr = oldArr?
----------Explanation----------
""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:
----------Code Sample----------
Original Array

[0]
[1]
[2]
[3]

After copying:

[0] <--- Original [0]
[1] [1]
[3] [2]
[4] Copy ---> [3]

Original Array:

[0:]----> [object 0]
[1:]----> [object 1]
[2:]----> [object 2]
[3:]----> [object 3]

Original -> [0:]----> [object 0] <----[:0] <- Copy
[1:]----> [object 1] <----[:1]
[2:]----> [object 2] <----[:2]
[3:]----> [object 3] <----[:3]

Original -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]
[1:]----> [object 1] [1:]----> [copy of object 1]
[2:]----> [object 2] [2:]----> [copy of object 2]
[3:]----> [object 3] [3:]----> [copy of object 3]

arr1 -> [0, 1, 2, 3, 4]

arr1 -> [0, 1, 2, 3, 4] <- arr2
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Iterate through object properties
----------Explanation----------
Iterating over properties requires this additional hasOwnProperty check:
----------Code Sample----------
for (var property in object) {
if (object.hasOwnProperty(property)) {
// do stuff
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How do I test for an empty JavaScript object?
----------Explanation----------

----------Code Sample----------
// because Object.keys(new Date()).length === 0;
// we have to do some additional check
Object.keys(obj).length === 0 && obj.constructor === Object

function isEmpty(obj) {
for(var prop in obj) {
if(obj.hasOwnProperty(prop))
return false;
}

return true && JSON.stringify(obj) === JSON.stringify({});
}

jQuery.isEmptyObject({}); // true

_.isEmpty({}); // true

_.isEmpty({}); // true

Hoek.deepEqual({}, {}); // true
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
dynamic object construction in javascript?
----------Explanation----------

----------Code Sample----------
function applyConstruct(ctor, params) {
var obj, newobj;

// Use a fake constructor function with the target constructor's
// `prototype` property to create the object with the right prototype
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
obj = new fakeCtor();

// Set the object's `constructor`
obj.constructor = ctor;

// Call the constructor function
newobj = ctor.apply(obj, params);

// Use the returned object if there is one.
// Note that we handle the funky edge case of the `Function` constructor,
// thanks to Mike's comment below. Double-checked the spec, that should be
// the lot.
if (newobj !== null
&& (typeof newobj === ""object"" || typeof newobj === ""function"")
) {
obj = newobj;
}

// Done
return obj;
}

function applyConstruct(ctor, params) {
var obj, newobj;

// Create the object with the desired prototype
if (typeof Object.create === ""function"") {
// ECMAScript 5 
obj = Object.create(ctor.prototype);
}
else if ({}.__proto__) {
// Non-standard __proto__, supported by some browsers
obj = {};
obj.__proto__ = ctor.prototype;
if (obj.__proto__ !== ctor.prototype) {
// Setting it didn't work
obj = makeObjectWithFakeCtor();
}
}
else {
// Fallback
obj = makeObjectWithFakeCtor();
}

// Set the object's constructor
obj.constructor = ctor;

// Apply the constructor function
newobj = ctor.apply(obj, params);

// If a constructor function returns an object, that
// becomes the return value of `new`, so we handle
// that here.
if (typeof newobj === ""object"") {
obj = newobj;
}

// Done!
return obj;

// Subroutine for building objects with specific prototypes
function makeObjectWithFakeCtor() {
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
return new fakeCtor();
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How to pass json POST data to Web API method as object
----------Explanation----------

----------Code Sample----------
contentType:""application/json""

$(function () {
var customer = {contact_name :""Scott"",company_name:""HP""};
$.ajax({
type: ""POST"",
data :JSON.stringify(customer),
url: ""api/Customer"",
contentType: ""application/json""
});
});

public class CreateUserViewModel
{
public int Id {set;get;}
public string Name {set;get;} 
public List Tags {set;get;}
}
public class TagViewModel
{
public int Id {set;get;}
public string Code {set;get;}
}

public class ProductController : Controller
{
[HttpPost]
public CreateUserViewMode Save([FromBody] CreateUserViewModel m)
{
// I am just returning the posted model as it is. 
// You may do other stuff and return different response.
// Ex : missileService.LaunchMissile(m);
return m;
}
}

//Build an object which matches the structure of our view model class
var model = {
Name: ""Shyju"",
Id: 123,
Tags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]
};

$.ajax({
type: ""POST"",
data: JSON.stringify(model),
url: ""../product/save"",
contentType: ""application/json""
}).done(function(res) { 
console.log('res', res);
// Do something with the result :)
});

[HttpPost]
public CreateUserViewModel Save(CreateUserViewModel m)
{
return m;
}

$.ajax({
type: ""POST"",
data: model,
url: ""../product/save""
}).done(function (res) {
console.log('res', res);
});

$.post(""../product/save"", model, function (res) {
//res contains the markup returned by the partial view
console.log('res', res);
});
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How to create a simple map using JavaScript/JQuery
----------Explanation----------
Edit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
----------Code Sample----------
var map = new Object(); // or var map = {};
map[myKey1] = myObj1;
map[myKey2] = myObj2;

function get(k) {
return map[k];
}

//map[myKey1] == get(myKey1);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
How to efficiently count the number of keys/properties of an object in JavaScript?
----------Explanation----------

----------Code Sample----------
class=""lang-js prettyprint-override"">Object.keys(obj).length
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Overriding the java equals() method quirk
----------Explanation----------
In Java, the equals() method that is inherited from Object is:
----------Code Sample----------
public boolean equals(Object other);

@Override
public boolean equals(Object other){
if (other == null) return false;
if (other == this) return true;
if (!(other instanceof MyClass))return false;
MyClass otherMyClass = (MyClass)other;
...test other properties here...
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
How can I access a private constructor of a class?
----------Explanation----------
One way to bypass the restriction is to use reflections:
----------Code Sample----------
import java.lang.reflect.Constructor;

public class Example {
public static void main(final String[] args) throws Exception {
Constructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);
constructor.setAccessible(true);
Foo foo = constructor.newInstance(new Object[0]);
System.out.println(foo);
}
}

class Foo {
private Foo() {
// private!
}

@Override
public String toString() {
return ""I'm a Foo and I'm alright!"";
}
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Why is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?
----------Explanation----------

----------Code Sample----------
public Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}

// calls the varargs method.
Foo(new Object[]{new Object(), new Object()});

public static void main(String... args) {

public Foo(Object o, Object... os){} 

public Foo(Object[] os) {}

Foo(new Object(), new Object()); // calls the first.

Foo(new Object[]{new Object(), new Object()}); // calls the second.

public Foo(Object... os){} 

public Bar(Object[] os) {}

Foo(new Object[]{new Object(), new Object()}); // compiles fine.

Bar(new Object(), new Object()); // Fails to compile.

public Foo(Object... os, int i){} // fails to compile.

public Bar(Object[] os, int i) {} // compiles ok.
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
What does enumerable mean?
----------Explanation----------
If a property isn't identified as enumerable, the loop will ignore that it's within the object.
----------Code Sample----------
var obj = { key: 'val' };

console.log('toString' in obj); // true
console.log(typeof obj.toString); // ""function""

for (var key in obj)
console.log(key); // ""key""

var descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, 'bar');

console.log(descriptor.enumerable); // true
console.log(descriptor.value); // 1

console.log(descriptor);
// { value: 1, writable: true, enumerable: true, configurable: true }

var foo = { bar: 1, baz: 2};

for (var prop in foo)
console.log(prop); // outputs 'bar' and 'baz'

console.log(Object.getOwnPropertyNames(Object.prototype));
// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]

console.log('constructor' in foo); // true
console.log('toString' in foo); // true
// etc.

var descriptor = Object.getOwnPropertyDescriptor(Object.prototype, 'constructor');

console.log(descriptor.enumerable); // false
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Each for object?
----------Explanation----------
A javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work
----------Code Sample----------
$.each(object, function(index, value) {
console.log(value);
}); 

for(var index in object) { 
var attr = object[index]; 
}

for(var index in object) { 
if (object.hasOwnProperty(index)) {
var attr = object[index];
}
}

click
click
click

var object = [""first"", ""middle"", ""last""];
for(var index in object) { 
if (object.hasOwnProperty(index)) {
$('.index'+index).click(function() {
console.log(object[index]);
});
}
}
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Loading Java Builder Object from Yaml file
----------Explanation----------
SnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.
----------Code Sample----------
/**
* create JavaBean
*/
public void testGetBeanAssumeClass() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person\nfirstName: Andrey\nage: 99"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertNull(person.getLastName());
assertEquals(99, person.getAge().intValue());
}

/**
* create instance using constructor arguments
*/
public void testGetConstructorBean() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertEquals(""Somov"", person.getLastName());
assertEquals(99, person.getAge().intValue());
}
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
PriorityQueue/Heap Update
----------Explanation----------
Some years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java's Comparator and Comparable interfaces, and also would make the class use generics.)
----------Code Sample----------
import java.util.*;

public abstract class Heap {

private List heap;

public Heap() {
heap = new ArrayList();
}

public void push(Object obj) {
heap.add(obj);
pushUp(heap.size()-1);
}

public Object pop() {
if (heap.size() > 0) {
swap(0, heap.size()-1);
Object result = heap.remove(heap.size()-1);
pushDown(0);
return result;
} else {
return null;
}
}

public Object getFirst() {
return heap.get(0);
}

public Object get(int index) {
return heap.get(index);
}

public int size() {
return heap.size();
}

protected abstract boolean isGreaterOrEqual(int first, int last);

protected int parent(int i) {
return (i - 1) / 2;
}

protected int left(int i) {
return 2 * i + 1;
}

protected int right(int i) {
return 2 * i + 2;
}

protected void swap(int i, int j) {
Object tmp = heap.get(i);
heap.set(i, heap.get(j));
heap.set(j, tmp);
}

public void pushDown(int i) {
int left = left(i);
int right = right(i);
int largest = i;

if (left < heap.size() && !isGreaterOrEqual(largest, left)) {
largest = left;
}
if (right < heap.size() && !isGreaterOrEqual(largest, right)) {
largest = right;
}

if (largest != i) {
swap(largest, i);
pushDown(largest);
}
}

public void pushUp(int i) {
while (i > 0 && !isGreaterOrEqual(parent(i), i)) {
swap(parent(i), i);
i = parent(i);
}
}

public String toString() {
StringBuffer s = new StringBuffer(""Heap:\n"");
int rowStart = 0;
int rowSize = 1;
for (int i = 0; i < heap.size(); i++) {
if (i == rowStart+rowSize) {
s.append('\n');
rowStart = i;
rowSize *= 2;
}
s.append(get(i));
s.append("" "");
}
return s.toString();
}

public static void main(String[] args){
Heap h = new Heap() {
protected boolean isGreaterOrEqual(int first, int last) {
return ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();
}
};

for (int i = 0; i < 100; i++) {
h.push(new Integer((int)(100 * Math.random())));
}

System.out.println(h+""\n"");

while (h.size() > 0) {
System.out.println(h.pop());
}
}
}
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Convert Java Object to JsonNode in Jackson
----------Explanation----------

----------Code Sample----------
JsonNode node = objectMapper.valueToTree(map);

JsonNode node = mapper.convertValue(object, JsonNode.class);
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Change key in js associative array
----------Explanation----------
In JavaScript there is no such thing as associative Array. Objects can be used instead:
----------Code Sample----------
var myHash = new Object();

var myHash = {};

myHash[""from""] = ""value"";
myHash[""to""] = myHash[""from""];
delete myHash[""from""];

myHash.from = ""value"";
myHash.to = myHash.from;
delete myHash.from;
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
Understanding the difference between Object.create() and new SomeFunction()
----------Explanation----------
With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:
----------Code Sample----------
var o = new SomeConstructor();

var o = Object.create({inherited: 1}, {
foo: {
get: (function () { // a closure
var closured = 'foo';
return function () {
return closured+'bar';
};
})()
}
});

o.foo; // ""foobar""
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How do I correctly clone a JavaScript object?
----------Explanation----------
Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is Object , then simply creating a new general object with {} will work, but if the source's prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:
----------Code Sample----------
function clone(obj) {
if (null == obj || ""object"" != typeof obj) return obj;
var copy = obj.constructor();
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
}
return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());

function clone(obj) {
var copy;

// Handle the 3 simple types, and null or undefined
if (null == obj || ""object"" != typeof obj) return obj;

// Handle Date
if (obj instanceof Date) {
copy = new Date();
copy.setTime(obj.getTime());
return copy;
}

// Handle Array
if (obj instanceof Array) {
copy = [];
for (var i = 0, len = obj.length; i < len; i++) {
copy[i] = clone(obj[i]);
}
return copy;
}

// Handle Object
if (obj instanceof Object) {
copy = {};
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
}
return copy;
}

throw new Error(""Unable to copy obj! Its type isn't supported."");
}

// This would be cloneable:
var tree = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""right"" : null,
""data"" : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
cylicGraph[""right""] = cylicGraph;
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How do I access properties of a javascript object if I don't know the names?
----------Explanation----------
You can loop through keys like this:
----------Code Sample----------
for (var key in data) {
console.log(key);
}

for (var key in data) {
if (data.hasOwnProperty(key)) {
console.log(key);
}
}

for each (var value in data) {
console.log(value);
}

var data = { Name: 'Property Name', Value: '0' };
console.log(Object.keys(data)); // => [""Name"", ""Value""]

Object.keys(data).forEach(function (key) {
console.log(data[key]);
});
// => Logs ""Property Name"", 0
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
C# version of java's synchronized keyword?
----------Explanation----------
For the method-level stuff, there is [MethodImpl] :
----------Code Sample----------
[MethodImpl(MethodImplOptions.Synchronized)]
public void SomeMethod() {/* code */}

private int i;
public int SomeProperty
{
[MethodImpl(MethodImplOptions.Synchronized)]
get { return i; }
[MethodImpl(MethodImplOptions.Synchronized)]
set { i = value; }
}

public int SomeProperty {get;set;} // not synchronized
public event EventHandler SomeEvent; // synchronized

private readonly object syncLock = new object();
public void SomeMethod() {
lock(syncLock) { /* code */ }
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
Is it possible to implement properties in languages other than C#?
----------Explanation----------
Python definitely supports properties:
----------Code Sample----------
class Foo(object):

def get_length_inches(self):
return self.length_meters * 39.0

def set_length_inches(self, val):
self.length_meters = val/39.0

length_inches = property(get_length_inches, set_length_inches)

class Foo(object):

# 2.5 or later
@property
def length_inches(self):
return self.length_meters * 39.0

# 2.6 or later
@length_inches.setter
def length_inches(self, val):
self.length_meters = val/39.0
*******************end of usage scenario 29***************** 

*******************usage scenario 30********************** 
----------usage scenario----------
Json deserialization into another class hierarchy using Jackson
----------Explanation----------
Here is a code which creates ObjectMapper for deserialization:
----------Code Sample----------
protected ObjectMapper getObjectMapperForDeserialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {
private HashMap classes = new HashMap() {
{
put(ConcreteA.class, ConcreteAAdapter.class);
put(ConcreteB.class, ConcreteBAdapter.class);
put(ConcreteC.class, ConcreteCAdapter.class);
}
};

@Override
public String idFromValue(Object value) {
return (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;
}

@Override
public JavaType typeFromId(String id) {
try {
return classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));
} catch (ClassNotFoundException e) {
// todo catch the e
}
return super.typeFromId(id);
}
});
mapper.setDefaultTyping(typeResolverBuilder);
return mapper;
}

protected ObjectMapper getObjectMapperForSerialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes","['""""""You are also likely to have positive feedback from users in the form of upvotes, when the code is explained. A common way of getting both array of json in file or simply json would be\n\nInputStream inputStream= Employee.class.getResourceAsStream(""/file.json""); CollectionType collectionType = mapper.getTypeFactory().constructCollectionType(List.class, Employee.class); List<Employee> lstEmployees = mapper.readValue(inputStream, collectionType);\n\nThe file.json needs to be placed in the resources folder. If your file only has a json block without json array square brackets [] , you can skip the CollectionType\n\nInputStream inputStream= Employee.class.getResourceAsStream(""/file.json""); Employee employee = mapper.readValue(inputStream, Employee.class);\n\nAlso refer here for original question from where I have drawn. Another simple way to convert json from a file to a java object is to use Filelize\n\nFilelizer filelizer = new Filelizer(""/tmp/""); var sample = filelizer.find(""test"", SampleDTO.class); System.out.println(sample);\n\nanswered Apr 19 at 7:57\n\nJan-Terje SÃ¸rensenJan-Terje SÃ¸rensen\n\n""""""', '""""""3) Because Dan said so. 4) I\'m just kidding regarding to 3 :-)\n\n\n\nUnfortunately, the method restricts the output size to 1024. If one needs to convert a file to a byte stream, better not use this. to use SerializationUtils.serialize(o), your object need this implements Serializable\n\n\n\nBe careful of certain versions of Apache Commons\'s (de)serialization library if you are trying to sandbox the application! There are known vulnerabilities regarding custom deserialization methods. Use a SecurityManager or update to the newest Apache Commons version\n\n\n\n | Show 4 more comments\n\nIf you use Java >= 7, you could improve the accepted solution using try with resources:\n\nprivate byte[] convertToBytes(Object object) throws IOException { try (ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream out = new ObjectOutputStream(bos)) { out.writeObject(object); return bos.toByteArray(); } }\n\nAnd the other way around:\n\nprivate Object convertFromBytes(byte[] bytes) throws IOException, ClassNotFoundException { try (ByteArrayInputStream bis = new ByteArrayInputStream(bytes); ObjectInputStream in = new ObjectInputStream(bis)) { return in.readObject(); } }\n\nVÃ­ctor RomeroVÃ­ctor Romero\n\n5,1\n\nIt is not quite the same than the accepted solution as the written data is not flushed before method toByteArray() is invoked, i.e. it could happen that some data remains in internal buffers and that not all data is transferred to the returned byte[] array. I have not found a specification of the ObjectOutputStream which describe buffer behavior. Can be done by SerializationUtils, by serialize & deserialize method by ApacheUtils to convert object to byte[] and vice-versa , as stated in @uris answer. To convert an object to byte[] by serializing:\n\nbyte[] data = SerializationUtils.serialize(object);\n\nTo convert byte[] to object by deserializing::\n\nObject object = (Object) SerializationUtils.deserialize(byte[] data)\n\nClick on the link to Download org-apache-commons-lang.jar\n\nIntegrate .jar file by clicking:\n\nFileName -> Open Medule Settings -> Select your module -> Dependencies -> Add Jar file and you are done. Pankaj LilanPankaj Lilan\n\n4,1\n\nnever add a dependency like this, use maven/gradle to download dependency and add it to the build path\n\n\n\nAnother interesting method is from com.fasterxml.jackson.databind.ObjectMapper\n\nbyte[] data = new ObjectMapper().writeValueAsBytes(JAVA_OBJECT_HERE)\n\n<dependency> <groupId>com.fasterxml.jackson.core</groupId> <artifactId>jackson-databind</artifactId> </dependency>\n\nAsad ShakeelAsad Shakeel\n\n2,I also recommend to use SerializationUtils tool. I want to make a ajust on a wrong comment by @Abilash. The SerializationUtils.serialize() method is not restricted to 1024 bytes, contrary to another answer here. public static byte[] serialize(Object object) { if (object == null) { return null; } ByteArrayOutputStream baos = new ByteArrayOutputStream(1024); try { ObjectOutputStream oos = new ObjectOutputStream(baos); oos.writeObject(object); oos.flush(); } catch (IOException ex) { throw new IllegalArgumentException(""Failed to serialize object of type: "" + object.getClass(), ex); } return baos.toByteArray(); }\n\nAt first sightï¼ you may think that new ByteArrayOutputStream(1024) will only allow a fixed size. But if you take a close look at the ByteArrayOutputStream, you will figure out the the stream will grow if necessary:\n\nThis class implements an output stream in which the data is written into a byte array. The buffer automatically grows as data is written to it. The data can be retrieved using toByteArray() and toString(). 2\n\ncan you add how to do the reverse? so byte[] to object? I know others have this, but I like your answer a lot more and I can\'t get the deserialisation to work. I want to avoid returning null in any case. I was also skeptical about this code after reading @Abilash answer. But you cleared me.""""""']",0.333333333,0.266666667,0.24137931
lang,Object,Java/JAXB: Unmarshall XML attributes to specific Java Object attributes,"<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>Both of these interfaces allow for different behavior.
Comparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).
The second  Comparator  allows you to do what you are asking to do.
If the objects in the ArrayList implement comparable  you can instead do something like this:</p>
<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>
<p>With Java 8 you can use a method reference for your comparator:</p>
<p>Since technologies appear everyday  the answer will change in the time.
<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>
Fortunately  the actual code is much simpler and shorter than this description.</p>
<p>If you want to sort for alphabet that contains non English characters you can use Locale...","Direct Known Subclasses:
AbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile","You may create a separate classes to represent structure of your XML:

public class Section {
    @XmlAttribute
    public String name;
    @XmlElement(name = ""value"")
    public List<Value> values;
}

public class Value {
    @XmlAttribute
    public String name;
    @XmlValue
    public String value;
}
and then use an XmlAdapter to perform conversion:

public class OptionsAdapter extends XmlAdapter<Section, Options> {
    public Options unmarshal(Section s) {
        if (""default_options"".equals(s.name)) {
            ...
        } else if (...) {
            ...
        }
        ...
    }
    ...
}

@XmlElement
public class Configuration {
    @XmlElement(name = ""section"")
    @XmlJavaTypeAdapter(OptionsAdapter.class)
    public List<Options> options;
}

public class DefaultOptions extends Options { ... }
public class CustomOptions extends Options { ... }","*******************usage scenario 1********************** 
----------usage scenario----------
Converting Java objects to JSON with Jackson
----------Explanation----------
To convert your object in JSON with Jackson:
----------Code Sample----------
ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
String json = ow.writeValueAsString(object);
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
How to create a jQuery plugin with methods?
----------Explanation----------
According to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method
----------Code Sample----------
(function( $ ){

var methods = {
init : function(options) {

},
show : function( ) { },// IS
hide : function( ) { },// GOOD
update : function( content ) { }// !!!
};

$.fn.tooltip = function(methodOrOptions) {
if ( methods[methodOrOptions] ) {
return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
// Default to ""init""
return methods.init.apply( this, arguments );
} else {
$.error( 'Method ' + methodOrOptions + ' does not exist on jQuery.tooltip' );
} 
};


})( jQuery );

$('div').tooltip(); // calls the init method
$('div').tooltip({ // calls the init method
foo : 'bar'
});
$('div').tooltip('hide'); // calls the hide method
$('div').tooltip('update', 'This is the new tooltip content!'); // calls the update method
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Checking if a key exists in a JavaScript object?
----------Explanation----------
Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?
----------Code Sample----------
var obj = { key: undefined };
obj[""key""] != undefined // false, but the key exists!

""key"" in obj // true, regardless of the actual value

!(""key"" in obj) // true if ""key"" doesn't exist in object
!""key"" in obj // ERROR! Equivalent to ""false in obj""

obj.hasOwnProperty(""key"") // true
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to ""properly"" create a custom object in JavaScript?
----------Explanation----------
Let's start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.
----------Code Sample----------
function Shape(x, y) {
this.x= x;
this.y= y;
}

Shape.prototype.toString= function() {
return 'Shape at '+this.x+', '+this.y;
};

function Circle(x, y, r) {
Shape.call(this, x, y); // invoke the base class's constructor function to take co-ords
this.r= r;
}
Circle.prototype= new Shape();

Circle.prototype.toString= function() {
return 'Circular '+Shape.prototype.toString.call(this)+' with radius '+this.r;
}

function subclassOf(base) {
_subclassOf.prototype= base.prototype;
return new _subclassOf();
}
function _subclassOf() {};

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.prototype= subclassOf(Shape);

Function.prototype.subclass= function(base) {
var c= Function.prototype.subclass.nonconstructor;
c.prototype= base.prototype;
this.prototype= new c();
};
Function.prototype.subclass.nonconstructor= function() {};

...

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.subclass(Shape);

function Point() {
Shape.apply(this, arguments);
}
Point.subclass(Shape);

function Shape() { this._init.apply(this, arguments); }
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

function Point() { this._init.apply(this, arguments); }
Point.subclass(Shape);
// no need to write new initialiser for Point!

Function.prototype.makeSubclass= function() {
function Class() {
if ('_init' in this)
this._init.apply(this, arguments);
}
Function.prototype.makeSubclass.nonconstructor.prototype= this.prototype;
Class.prototype= new Function.prototype.makeSubclass.nonconstructor();
return Class;
};
Function.prototype.makeSubclass.nonconstructor= function() {};

...

Shape= Object.makeSubclass();
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

Point= Shape.makeSubclass();

Circle= Shape.makeSubclass();
Circle.prototype._init= function(x, y, r) {
Shape.prototype._init.call(this, x, y);
this.r= r;
};

Function.prototype.makeSubclass= function() {
function Class() {
if (!(this instanceof Class))
throw('Constructor called without ""new""');
...

Circle= Shape.makeSubclass({
_init: function(x, y, z) {
Shape.prototype._init.call(this, x, y);
this.r= r;
},
...
});

function Shape(x, y) {
var that= this;

this.x= x;
this.y= y;

this.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};
}

function Circle(x, y, r) {
var that= this;

Shape.call(this, x, y);
this.r= r;

var _baseToString= this.toString;
this.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+that.r;
};
};

var mycircle= new Circle();

var ts= mycircle.toString;
alert(ts());

setTimeout(function() {
mycircle.move(1, 1);
}, 1000);

setTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);

function Shape(x, y) {
var that= {};

that.x= x;
that.y= y;

that.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};

return that;
}

function Circle(x, y, r) {
var that= Shape(x, y);

that.r= r;

var _baseToString= that.toString;
that.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+r;
};

return that;
};

var mycircle= Circle(); // you can include `new` if you want but it won't do anything
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Avoiding != null statements
----------Explanation----------
(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:
----------Code Sample----------
assert 

assert : 

public interface Action {
void doSomething();
}

public interface Parser {
Action findAction(String userInput);
}

public class MyParser implements Parser {
private static Action DO_NOTHING = new Action() {
public void doSomething() { /* do nothing */ }
};

public Action findAction(String userInput) {
// ...
if ( /* we can't find any actions */ ) {
return DO_NOTHING;
}
}
}

Parser parser = ParserFactory.getParser();
if (parser == null) {
// now what?
// this would be an example of where null isn't (or shouldn't be) a valid response
}
Action action = parser.findAction(someInput);
if (action == null) {
// do nothing
} else {
action.doSomething();
}

ParserFactory.getParser().findAction(someInput).doSomething();

try {
ParserFactory.getParser().findAction(someInput).doSomething();
} catch(ActionNotFoundException anfe) {
userConsole.err(anfe.getMessage());
}

public Action findAction(final String userInput) {
/* Code to return requested Action if found */
return new Action() {
public void doSomething() {
userConsole.err(""Action not found: "" + userInput);
}
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Java Generics Wildcarding With Multiple Classes
----------Explanation----------
Actually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:
----------Code Sample----------


public static > T
max(Collection coll)

class classB { }
interface interfaceC { }

public class MyClass {
Class variable;
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Cloning an Object in Node.js
----------Explanation----------

----------Code Sample----------
var obj2 = JSON.parse(JSON.stringify(obj1));

var extend = require('util')._extend;

var obj1 = {x: 5, y:5};
var obj2 = extend({}, obj1);
obj2.x = 6;
console.log(obj1.x); // still logs 5

exports._extend = function(origin, add) {
// Don't do anything if add isn't an object
if (!add || typeof add !== 'object') return origin;

var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Null check in an enhanced for loop
----------Explanation----------
If you get this list from somewhere else and don't know if it is ok or not you could create a utility method and use it like this:
----------Code Sample----------
for( Object o : safe( list ) ) {
// do whatever 
}

public static List safe( List other ) {
return other == null ? Collections.EMPTY_LIST : other;
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Shallow copy for arrays, why can't simply do newArr = oldArr?
----------Explanation----------
""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:
----------Code Sample----------
Original Array

[0]
[1]
[2]
[3]

After copying:

[0] <--- Original [0]
[1] [1]
[3] [2]
[4] Copy ---> [3]

Original Array:

[0:]----> [object 0]
[1:]----> [object 1]
[2:]----> [object 2]
[3:]----> [object 3]

Original -> [0:]----> [object 0] <----[:0] <- Copy
[1:]----> [object 1] <----[:1]
[2:]----> [object 2] <----[:2]
[3:]----> [object 3] <----[:3]

Original -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]
[1:]----> [object 1] [1:]----> [copy of object 1]
[2:]----> [object 2] [2:]----> [copy of object 2]
[3:]----> [object 3] [3:]----> [copy of object 3]

arr1 -> [0, 1, 2, 3, 4]

arr1 -> [0, 1, 2, 3, 4] <- arr2
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Iterate through object properties
----------Explanation----------
Iterating over properties requires this additional hasOwnProperty check:
----------Code Sample----------
for (var property in object) {
if (object.hasOwnProperty(property)) {
// do stuff
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How do I test for an empty JavaScript object?
----------Explanation----------

----------Code Sample----------
// because Object.keys(new Date()).length === 0;
// we have to do some additional check
Object.keys(obj).length === 0 && obj.constructor === Object

function isEmpty(obj) {
for(var prop in obj) {
if(obj.hasOwnProperty(prop))
return false;
}

return true && JSON.stringify(obj) === JSON.stringify({});
}

jQuery.isEmptyObject({}); // true

_.isEmpty({}); // true

_.isEmpty({}); // true

Hoek.deepEqual({}, {}); // true
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
dynamic object construction in javascript?
----------Explanation----------

----------Code Sample----------
function applyConstruct(ctor, params) {
var obj, newobj;

// Use a fake constructor function with the target constructor's
// `prototype` property to create the object with the right prototype
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
obj = new fakeCtor();

// Set the object's `constructor`
obj.constructor = ctor;

// Call the constructor function
newobj = ctor.apply(obj, params);

// Use the returned object if there is one.
// Note that we handle the funky edge case of the `Function` constructor,
// thanks to Mike's comment below. Double-checked the spec, that should be
// the lot.
if (newobj !== null
&& (typeof newobj === ""object"" || typeof newobj === ""function"")
) {
obj = newobj;
}

// Done
return obj;
}

function applyConstruct(ctor, params) {
var obj, newobj;

// Create the object with the desired prototype
if (typeof Object.create === ""function"") {
// ECMAScript 5 
obj = Object.create(ctor.prototype);
}
else if ({}.__proto__) {
// Non-standard __proto__, supported by some browsers
obj = {};
obj.__proto__ = ctor.prototype;
if (obj.__proto__ !== ctor.prototype) {
// Setting it didn't work
obj = makeObjectWithFakeCtor();
}
}
else {
// Fallback
obj = makeObjectWithFakeCtor();
}

// Set the object's constructor
obj.constructor = ctor;

// Apply the constructor function
newobj = ctor.apply(obj, params);

// If a constructor function returns an object, that
// becomes the return value of `new`, so we handle
// that here.
if (typeof newobj === ""object"") {
obj = newobj;
}

// Done!
return obj;

// Subroutine for building objects with specific prototypes
function makeObjectWithFakeCtor() {
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
return new fakeCtor();
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How to pass json POST data to Web API method as object
----------Explanation----------

----------Code Sample----------
contentType:""application/json""

$(function () {
var customer = {contact_name :""Scott"",company_name:""HP""};
$.ajax({
type: ""POST"",
data :JSON.stringify(customer),
url: ""api/Customer"",
contentType: ""application/json""
});
});

public class CreateUserViewModel
{
public int Id {set;get;}
public string Name {set;get;} 
public List Tags {set;get;}
}
public class TagViewModel
{
public int Id {set;get;}
public string Code {set;get;}
}

public class ProductController : Controller
{
[HttpPost]
public CreateUserViewMode Save([FromBody] CreateUserViewModel m)
{
// I am just returning the posted model as it is. 
// You may do other stuff and return different response.
// Ex : missileService.LaunchMissile(m);
return m;
}
}

//Build an object which matches the structure of our view model class
var model = {
Name: ""Shyju"",
Id: 123,
Tags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]
};

$.ajax({
type: ""POST"",
data: JSON.stringify(model),
url: ""../product/save"",
contentType: ""application/json""
}).done(function(res) { 
console.log('res', res);
// Do something with the result :)
});

[HttpPost]
public CreateUserViewModel Save(CreateUserViewModel m)
{
return m;
}

$.ajax({
type: ""POST"",
data: model,
url: ""../product/save""
}).done(function (res) {
console.log('res', res);
});

$.post(""../product/save"", model, function (res) {
//res contains the markup returned by the partial view
console.log('res', res);
});
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How to create a simple map using JavaScript/JQuery
----------Explanation----------
Edit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
----------Code Sample----------
var map = new Object(); // or var map = {};
map[myKey1] = myObj1;
map[myKey2] = myObj2;

function get(k) {
return map[k];
}

//map[myKey1] == get(myKey1);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
How to efficiently count the number of keys/properties of an object in JavaScript?
----------Explanation----------

----------Code Sample----------
class=""lang-js prettyprint-override"">Object.keys(obj).length
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Overriding the java equals() method quirk
----------Explanation----------
In Java, the equals() method that is inherited from Object is:
----------Code Sample----------
public boolean equals(Object other);

@Override
public boolean equals(Object other){
if (other == null) return false;
if (other == this) return true;
if (!(other instanceof MyClass))return false;
MyClass otherMyClass = (MyClass)other;
...test other properties here...
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
How can I access a private constructor of a class?
----------Explanation----------
One way to bypass the restriction is to use reflections:
----------Code Sample----------
import java.lang.reflect.Constructor;

public class Example {
public static void main(final String[] args) throws Exception {
Constructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);
constructor.setAccessible(true);
Foo foo = constructor.newInstance(new Object[0]);
System.out.println(foo);
}
}

class Foo {
private Foo() {
// private!
}

@Override
public String toString() {
return ""I'm a Foo and I'm alright!"";
}
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Why is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?
----------Explanation----------

----------Code Sample----------
public Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}

// calls the varargs method.
Foo(new Object[]{new Object(), new Object()});

public static void main(String... args) {

public Foo(Object o, Object... os){} 

public Foo(Object[] os) {}

Foo(new Object(), new Object()); // calls the first.

Foo(new Object[]{new Object(), new Object()}); // calls the second.

public Foo(Object... os){} 

public Bar(Object[] os) {}

Foo(new Object[]{new Object(), new Object()}); // compiles fine.

Bar(new Object(), new Object()); // Fails to compile.

public Foo(Object... os, int i){} // fails to compile.

public Bar(Object[] os, int i) {} // compiles ok.
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
What does enumerable mean?
----------Explanation----------
If a property isn't identified as enumerable, the loop will ignore that it's within the object.
----------Code Sample----------
var obj = { key: 'val' };

console.log('toString' in obj); // true
console.log(typeof obj.toString); // ""function""

for (var key in obj)
console.log(key); // ""key""

var descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, 'bar');

console.log(descriptor.enumerable); // true
console.log(descriptor.value); // 1

console.log(descriptor);
// { value: 1, writable: true, enumerable: true, configurable: true }

var foo = { bar: 1, baz: 2};

for (var prop in foo)
console.log(prop); // outputs 'bar' and 'baz'

console.log(Object.getOwnPropertyNames(Object.prototype));
// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]

console.log('constructor' in foo); // true
console.log('toString' in foo); // true
// etc.

var descriptor = Object.getOwnPropertyDescriptor(Object.prototype, 'constructor');

console.log(descriptor.enumerable); // false
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Each for object?
----------Explanation----------
A javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work
----------Code Sample----------
$.each(object, function(index, value) {
console.log(value);
}); 

for(var index in object) { 
var attr = object[index]; 
}

for(var index in object) { 
if (object.hasOwnProperty(index)) {
var attr = object[index];
}
}

click
click
click

var object = [""first"", ""middle"", ""last""];
for(var index in object) { 
if (object.hasOwnProperty(index)) {
$('.index'+index).click(function() {
console.log(object[index]);
});
}
}
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Loading Java Builder Object from Yaml file
----------Explanation----------
SnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.
----------Code Sample----------
/**
* create JavaBean
*/
public void testGetBeanAssumeClass() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person\nfirstName: Andrey\nage: 99"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertNull(person.getLastName());
assertEquals(99, person.getAge().intValue());
}

/**
* create instance using constructor arguments
*/
public void testGetConstructorBean() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertEquals(""Somov"", person.getLastName());
assertEquals(99, person.getAge().intValue());
}
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
PriorityQueue/Heap Update
----------Explanation----------
Some years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java's Comparator and Comparable interfaces, and also would make the class use generics.)
----------Code Sample----------
import java.util.*;

public abstract class Heap {

private List heap;

public Heap() {
heap = new ArrayList();
}

public void push(Object obj) {
heap.add(obj);
pushUp(heap.size()-1);
}

public Object pop() {
if (heap.size() > 0) {
swap(0, heap.size()-1);
Object result = heap.remove(heap.size()-1);
pushDown(0);
return result;
} else {
return null;
}
}

public Object getFirst() {
return heap.get(0);
}

public Object get(int index) {
return heap.get(index);
}

public int size() {
return heap.size();
}

protected abstract boolean isGreaterOrEqual(int first, int last);

protected int parent(int i) {
return (i - 1) / 2;
}

protected int left(int i) {
return 2 * i + 1;
}

protected int right(int i) {
return 2 * i + 2;
}

protected void swap(int i, int j) {
Object tmp = heap.get(i);
heap.set(i, heap.get(j));
heap.set(j, tmp);
}

public void pushDown(int i) {
int left = left(i);
int right = right(i);
int largest = i;

if (left < heap.size() && !isGreaterOrEqual(largest, left)) {
largest = left;
}
if (right < heap.size() && !isGreaterOrEqual(largest, right)) {
largest = right;
}

if (largest != i) {
swap(largest, i);
pushDown(largest);
}
}

public void pushUp(int i) {
while (i > 0 && !isGreaterOrEqual(parent(i), i)) {
swap(parent(i), i);
i = parent(i);
}
}

public String toString() {
StringBuffer s = new StringBuffer(""Heap:\n"");
int rowStart = 0;
int rowSize = 1;
for (int i = 0; i < heap.size(); i++) {
if (i == rowStart+rowSize) {
s.append('\n');
rowStart = i;
rowSize *= 2;
}
s.append(get(i));
s.append("" "");
}
return s.toString();
}

public static void main(String[] args){
Heap h = new Heap() {
protected boolean isGreaterOrEqual(int first, int last) {
return ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();
}
};

for (int i = 0; i < 100; i++) {
h.push(new Integer((int)(100 * Math.random())));
}

System.out.println(h+""\n"");

while (h.size() > 0) {
System.out.println(h.pop());
}
}
}
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Convert Java Object to JsonNode in Jackson
----------Explanation----------

----------Code Sample----------
JsonNode node = objectMapper.valueToTree(map);

JsonNode node = mapper.convertValue(object, JsonNode.class);
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Change key in js associative array
----------Explanation----------
In JavaScript there is no such thing as associative Array. Objects can be used instead:
----------Code Sample----------
var myHash = new Object();

var myHash = {};

myHash[""from""] = ""value"";
myHash[""to""] = myHash[""from""];
delete myHash[""from""];

myHash.from = ""value"";
myHash.to = myHash.from;
delete myHash.from;
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
Understanding the difference between Object.create() and new SomeFunction()
----------Explanation----------
With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:
----------Code Sample----------
var o = new SomeConstructor();

var o = Object.create({inherited: 1}, {
foo: {
get: (function () { // a closure
var closured = 'foo';
return function () {
return closured+'bar';
};
})()
}
});

o.foo; // ""foobar""
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How do I correctly clone a JavaScript object?
----------Explanation----------
Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is Object , then simply creating a new general object with {} will work, but if the source's prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:
----------Code Sample----------
function clone(obj) {
if (null == obj || ""object"" != typeof obj) return obj;
var copy = obj.constructor();
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
}
return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());

function clone(obj) {
var copy;

// Handle the 3 simple types, and null or undefined
if (null == obj || ""object"" != typeof obj) return obj;

// Handle Date
if (obj instanceof Date) {
copy = new Date();
copy.setTime(obj.getTime());
return copy;
}

// Handle Array
if (obj instanceof Array) {
copy = [];
for (var i = 0, len = obj.length; i < len; i++) {
copy[i] = clone(obj[i]);
}
return copy;
}

// Handle Object
if (obj instanceof Object) {
copy = {};
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
}
return copy;
}

throw new Error(""Unable to copy obj! Its type isn't supported."");
}

// This would be cloneable:
var tree = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""right"" : null,
""data"" : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
cylicGraph[""right""] = cylicGraph;
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How do I access properties of a javascript object if I don't know the names?
----------Explanation----------
You can loop through keys like this:
----------Code Sample----------
for (var key in data) {
console.log(key);
}

for (var key in data) {
if (data.hasOwnProperty(key)) {
console.log(key);
}
}

for each (var value in data) {
console.log(value);
}

var data = { Name: 'Property Name', Value: '0' };
console.log(Object.keys(data)); // => [""Name"", ""Value""]

Object.keys(data).forEach(function (key) {
console.log(data[key]);
});
// => Logs ""Property Name"", 0
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
C# version of java's synchronized keyword?
----------Explanation----------
For the method-level stuff, there is [MethodImpl] :
----------Code Sample----------
[MethodImpl(MethodImplOptions.Synchronized)]
public void SomeMethod() {/* code */}

private int i;
public int SomeProperty
{
[MethodImpl(MethodImplOptions.Synchronized)]
get { return i; }
[MethodImpl(MethodImplOptions.Synchronized)]
set { i = value; }
}

public int SomeProperty {get;set;} // not synchronized
public event EventHandler SomeEvent; // synchronized

private readonly object syncLock = new object();
public void SomeMethod() {
lock(syncLock) { /* code */ }
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
Is it possible to implement properties in languages other than C#?
----------Explanation----------
Python definitely supports properties:
----------Code Sample----------
class Foo(object):

def get_length_inches(self):
return self.length_meters * 39.0

def set_length_inches(self, val):
self.length_meters = val/39.0

length_inches = property(get_length_inches, set_length_inches)

class Foo(object):

# 2.5 or later
@property
def length_inches(self):
return self.length_meters * 39.0

# 2.6 or later
@length_inches.setter
def length_inches(self, val):
self.length_meters = val/39.0
*******************end of usage scenario 29***************** 

*******************usage scenario 30********************** 
----------usage scenario----------
Json deserialization into another class hierarchy using Jackson
----------Explanation----------
Here is a code which creates ObjectMapper for deserialization:
----------Code Sample----------
protected ObjectMapper getObjectMapperForDeserialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {
private HashMap classes = new HashMap() {
{
put(ConcreteA.class, ConcreteAAdapter.class);
put(ConcreteB.class, ConcreteBAdapter.class);
put(ConcreteC.class, ConcreteCAdapter.class);
}
};

@Override
public String idFromValue(Object value) {
return (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;
}

@Override
public JavaType typeFromId(String id) {
try {
return classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));
} catch (ClassNotFoundException e) {
// todo catch the e
}
return super.typeFromId(id);
}
});
mapper.setDefaultTyping(typeResolverBuilder);
return mapper;
}

protected ObjectMapper getObjectMapperForSerialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes","['""""""Java/JAXB: Unmarshall XML attributes to specific Java object attributes\n\nModified 5 years, 2 months ago\n\nThere\'s ugly XML file that has to be unmarshalled:\n\n<?xml version=""1.0"" ?> <configuration> <section name=""default_options""> <value name=""default_port"">8081</value> <value name=""log_level"">WARNING</value> </section> <section name=""custom_options""> <value name=""memory"">64M</value> <value name=""compatibility"">yes</value> </section> </configuration>\n\nResulting Java Objects should be:\n\npublic class DefaultOptions { private int defaultPort; private String logLevel; // etc... } public class CustomOptions { private String memory; private String compatibility; // etc... }\n\nThis question\'s answer is very close but I can\'t figure out the final solution. Artyom SokolovArtyom Sokolov\n\n2,3\n\nCan\'t you change the resulting java objects? IMHO it would be much easier and cleaner if you just followed the xml structure (or change it to follow the structure u want)\n\nâ Diego Dias Jul 19, 2010 at 20:42\n\n@Diego Dias, actually no. There have to be POJOs like these. â Artyom Sokolov Jul 19, 2010 at 20:53\n\nCan a common super class be added to DefaultOptions & CustomOptions? Introduce a common super class called Options:\n\nimport javax.xml.bind.annotation.XmlAttribute; public abstract class Options { private String name; @XmlAttribute public String getName() { return name; } public void setName(String name) { this.name = name; } }\n\nThen on your class with the list of options (Configuration in this example), specify an @XmlJavaTypeAdapter on that property:\n\nimport java.util.ArrayList; import java.util.List; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; @XmlRootElement public class Configuration { private List<Options> section = new ArrayList<Options>(); @XmlJavaTypeAdapter(OptionsAdapter.class) public List<Options> getSection() { return section; } public void setSection(List<Options> section) { this.section = section; } }\n\nThe XmlAdapter will look something like this:\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter; public class OptionsAdapter extends XmlAdapter<AdaptedOptions, Options> { @Override public Options unmarshal(AdaptedOptions v) throws Exception { if(""default_options"".equals(v.name)) { DefaultOptions options = new DefaultOptions(); options.setName(v.getName()); options.setDefaultPort(Integer.valueOf(v.map.get(""default_port""))); options.setLogLevel(v.map.get(""log_level"")); return options; } else { CustomOptions options = new CustomOptions(); options.setName(v.getName()); options.setCompatibility(v.map.get(""compatibility"")); options.setMemory(v.map.get(""memory"")); return options; } } @Override public AdaptedOptions marshal(Options v) throws Exception { AdaptedOptions adaptedOptions = new AdaptedOptions(); adaptedOptions.setName(v.getName()); if(DefaultOptions.class == v.getClass()) { DefaultOptions options = (DefaultOptions) v; adaptedOptions.map.put(""default_port"", String.valueOf(options.getDefaultPort())); adaptedOptions.map.put(""log_level"", options.getLogLevel()); } else { CustomOptions options = (CustomOptions) v; adaptedOptions.map.put(""compatibility"", options.getCompatibility()); adaptedOptions.map.put(""memory"", options.getMemory()); } return adaptedOptions; } }\n\nAdaptedOptions looks like:\n\nimport java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import java.util.Map.Entry; import javax.xml.bind.Marshaller; import javax.xml.bind.Unmarshaller; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlValue; public class AdaptedOptions extends Options { @XmlAttribute String name; @XmlElement List<Value> value = new ArrayList<Value>(); Map<String, String> map = new HashMap<String, String>(); public void beforeMarshal(Marshaller marshaller) { for(Entry<String, String> entry : map.entrySet()) { Value aValue = new Value(); aValue.name = entry.getKey(); aValue.value = entry.getValue(); value.add(aValue); } } public void afterUnmarshal(Unmarshaller unmarshaller, Object parent) { for(Value aValue : value) { map.put(aValue.name, aValue.value); } } private static class Value { @XmlAttribute String name; @XmlValue String value; } }\n\nYou may create a separate classes to represent structure of your XML:\n\npublic class Section { @XmlAttribute public String name; @XmlElement(name = ""value"") public List<Value> values; } public class Value { @XmlAttribute public String name; @XmlValue public String value; }\n\nand then use an XmlAdapter to perform conversion:\n\npublic class OptionsAdapter extends XmlAdapter<Section, Options> { public Options unmarshal(Section s) { if (""default_options"".equals(s.name)) { ... } else if (...) { ...""""""']",0.333333333,0.264705882,1
lang,Object,Inserting Java Object to MongoDB Collection Using Java,"<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>Both of these interfaces allow for different behavior.
Comparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).
The second  Comparator  allows you to do what you are asking to do.
If the objects in the ArrayList implement comparable  you can instead do something like this:</p>
<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>
<p>With Java 8 you can use a method reference for your comparator:</p>
<p>Since technologies appear everyday  the answer will change in the time.
<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>
Fortunately  the actual code is much simpler and shorter than this description.</p>
<p>If you want to sort for alphabet that contains non English characters you can use Locale...","Direct Known Subclasses:
AbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile","You can convert your java object into json string using the gson library and then insert it in mongodb.

Eg:

Gson gson = new Gson();
String json = gson.toJson(Employee);    
BasicDBObject basicDBObject = new BasicDBObject(""Name"", json );          
DBCollection dbCollection = db.getCollection(""NameColl"");          
dbCollection.save(basicDBObject);    ","*******************usage scenario 1********************** 
----------usage scenario----------
Converting Java objects to JSON with Jackson
----------Explanation----------
To convert your object in JSON with Jackson:
----------Code Sample----------
ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
String json = ow.writeValueAsString(object);
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
How to create a jQuery plugin with methods?
----------Explanation----------
According to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method
----------Code Sample----------
(function( $ ){

var methods = {
init : function(options) {

},
show : function( ) { },// IS
hide : function( ) { },// GOOD
update : function( content ) { }// !!!
};

$.fn.tooltip = function(methodOrOptions) {
if ( methods[methodOrOptions] ) {
return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
// Default to ""init""
return methods.init.apply( this, arguments );
} else {
$.error( 'Method ' + methodOrOptions + ' does not exist on jQuery.tooltip' );
} 
};


})( jQuery );

$('div').tooltip(); // calls the init method
$('div').tooltip({ // calls the init method
foo : 'bar'
});
$('div').tooltip('hide'); // calls the hide method
$('div').tooltip('update', 'This is the new tooltip content!'); // calls the update method
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Checking if a key exists in a JavaScript object?
----------Explanation----------
Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?
----------Code Sample----------
var obj = { key: undefined };
obj[""key""] != undefined // false, but the key exists!

""key"" in obj // true, regardless of the actual value

!(""key"" in obj) // true if ""key"" doesn't exist in object
!""key"" in obj // ERROR! Equivalent to ""false in obj""

obj.hasOwnProperty(""key"") // true
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to ""properly"" create a custom object in JavaScript?
----------Explanation----------
Let's start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.
----------Code Sample----------
function Shape(x, y) {
this.x= x;
this.y= y;
}

Shape.prototype.toString= function() {
return 'Shape at '+this.x+', '+this.y;
};

function Circle(x, y, r) {
Shape.call(this, x, y); // invoke the base class's constructor function to take co-ords
this.r= r;
}
Circle.prototype= new Shape();

Circle.prototype.toString= function() {
return 'Circular '+Shape.prototype.toString.call(this)+' with radius '+this.r;
}

function subclassOf(base) {
_subclassOf.prototype= base.prototype;
return new _subclassOf();
}
function _subclassOf() {};

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.prototype= subclassOf(Shape);

Function.prototype.subclass= function(base) {
var c= Function.prototype.subclass.nonconstructor;
c.prototype= base.prototype;
this.prototype= new c();
};
Function.prototype.subclass.nonconstructor= function() {};

...

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.subclass(Shape);

function Point() {
Shape.apply(this, arguments);
}
Point.subclass(Shape);

function Shape() { this._init.apply(this, arguments); }
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

function Point() { this._init.apply(this, arguments); }
Point.subclass(Shape);
// no need to write new initialiser for Point!

Function.prototype.makeSubclass= function() {
function Class() {
if ('_init' in this)
this._init.apply(this, arguments);
}
Function.prototype.makeSubclass.nonconstructor.prototype= this.prototype;
Class.prototype= new Function.prototype.makeSubclass.nonconstructor();
return Class;
};
Function.prototype.makeSubclass.nonconstructor= function() {};

...

Shape= Object.makeSubclass();
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

Point= Shape.makeSubclass();

Circle= Shape.makeSubclass();
Circle.prototype._init= function(x, y, r) {
Shape.prototype._init.call(this, x, y);
this.r= r;
};

Function.prototype.makeSubclass= function() {
function Class() {
if (!(this instanceof Class))
throw('Constructor called without ""new""');
...

Circle= Shape.makeSubclass({
_init: function(x, y, z) {
Shape.prototype._init.call(this, x, y);
this.r= r;
},
...
});

function Shape(x, y) {
var that= this;

this.x= x;
this.y= y;

this.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};
}

function Circle(x, y, r) {
var that= this;

Shape.call(this, x, y);
this.r= r;

var _baseToString= this.toString;
this.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+that.r;
};
};

var mycircle= new Circle();

var ts= mycircle.toString;
alert(ts());

setTimeout(function() {
mycircle.move(1, 1);
}, 1000);

setTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);

function Shape(x, y) {
var that= {};

that.x= x;
that.y= y;

that.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};

return that;
}

function Circle(x, y, r) {
var that= Shape(x, y);

that.r= r;

var _baseToString= that.toString;
that.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+r;
};

return that;
};

var mycircle= Circle(); // you can include `new` if you want but it won't do anything
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Avoiding != null statements
----------Explanation----------
(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:
----------Code Sample----------
assert 

assert : 

public interface Action {
void doSomething();
}

public interface Parser {
Action findAction(String userInput);
}

public class MyParser implements Parser {
private static Action DO_NOTHING = new Action() {
public void doSomething() { /* do nothing */ }
};

public Action findAction(String userInput) {
// ...
if ( /* we can't find any actions */ ) {
return DO_NOTHING;
}
}
}

Parser parser = ParserFactory.getParser();
if (parser == null) {
// now what?
// this would be an example of where null isn't (or shouldn't be) a valid response
}
Action action = parser.findAction(someInput);
if (action == null) {
// do nothing
} else {
action.doSomething();
}

ParserFactory.getParser().findAction(someInput).doSomething();

try {
ParserFactory.getParser().findAction(someInput).doSomething();
} catch(ActionNotFoundException anfe) {
userConsole.err(anfe.getMessage());
}

public Action findAction(final String userInput) {
/* Code to return requested Action if found */
return new Action() {
public void doSomething() {
userConsole.err(""Action not found: "" + userInput);
}
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Java Generics Wildcarding With Multiple Classes
----------Explanation----------
Actually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:
----------Code Sample----------


public static > T
max(Collection coll)

class classB { }
interface interfaceC { }

public class MyClass {
Class variable;
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Cloning an Object in Node.js
----------Explanation----------

----------Code Sample----------
var obj2 = JSON.parse(JSON.stringify(obj1));

var extend = require('util')._extend;

var obj1 = {x: 5, y:5};
var obj2 = extend({}, obj1);
obj2.x = 6;
console.log(obj1.x); // still logs 5

exports._extend = function(origin, add) {
// Don't do anything if add isn't an object
if (!add || typeof add !== 'object') return origin;

var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Null check in an enhanced for loop
----------Explanation----------
If you get this list from somewhere else and don't know if it is ok or not you could create a utility method and use it like this:
----------Code Sample----------
for( Object o : safe( list ) ) {
// do whatever 
}

public static List safe( List other ) {
return other == null ? Collections.EMPTY_LIST : other;
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Shallow copy for arrays, why can't simply do newArr = oldArr?
----------Explanation----------
""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:
----------Code Sample----------
Original Array

[0]
[1]
[2]
[3]

After copying:

[0] <--- Original [0]
[1] [1]
[3] [2]
[4] Copy ---> [3]

Original Array:

[0:]----> [object 0]
[1:]----> [object 1]
[2:]----> [object 2]
[3:]----> [object 3]

Original -> [0:]----> [object 0] <----[:0] <- Copy
[1:]----> [object 1] <----[:1]
[2:]----> [object 2] <----[:2]
[3:]----> [object 3] <----[:3]

Original -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]
[1:]----> [object 1] [1:]----> [copy of object 1]
[2:]----> [object 2] [2:]----> [copy of object 2]
[3:]----> [object 3] [3:]----> [copy of object 3]

arr1 -> [0, 1, 2, 3, 4]

arr1 -> [0, 1, 2, 3, 4] <- arr2
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Iterate through object properties
----------Explanation----------
Iterating over properties requires this additional hasOwnProperty check:
----------Code Sample----------
for (var property in object) {
if (object.hasOwnProperty(property)) {
// do stuff
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How do I test for an empty JavaScript object?
----------Explanation----------

----------Code Sample----------
// because Object.keys(new Date()).length === 0;
// we have to do some additional check
Object.keys(obj).length === 0 && obj.constructor === Object

function isEmpty(obj) {
for(var prop in obj) {
if(obj.hasOwnProperty(prop))
return false;
}

return true && JSON.stringify(obj) === JSON.stringify({});
}

jQuery.isEmptyObject({}); // true

_.isEmpty({}); // true

_.isEmpty({}); // true

Hoek.deepEqual({}, {}); // true
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
dynamic object construction in javascript?
----------Explanation----------

----------Code Sample----------
function applyConstruct(ctor, params) {
var obj, newobj;

// Use a fake constructor function with the target constructor's
// `prototype` property to create the object with the right prototype
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
obj = new fakeCtor();

// Set the object's `constructor`
obj.constructor = ctor;

// Call the constructor function
newobj = ctor.apply(obj, params);

// Use the returned object if there is one.
// Note that we handle the funky edge case of the `Function` constructor,
// thanks to Mike's comment below. Double-checked the spec, that should be
// the lot.
if (newobj !== null
&& (typeof newobj === ""object"" || typeof newobj === ""function"")
) {
obj = newobj;
}

// Done
return obj;
}

function applyConstruct(ctor, params) {
var obj, newobj;

// Create the object with the desired prototype
if (typeof Object.create === ""function"") {
// ECMAScript 5 
obj = Object.create(ctor.prototype);
}
else if ({}.__proto__) {
// Non-standard __proto__, supported by some browsers
obj = {};
obj.__proto__ = ctor.prototype;
if (obj.__proto__ !== ctor.prototype) {
// Setting it didn't work
obj = makeObjectWithFakeCtor();
}
}
else {
// Fallback
obj = makeObjectWithFakeCtor();
}

// Set the object's constructor
obj.constructor = ctor;

// Apply the constructor function
newobj = ctor.apply(obj, params);

// If a constructor function returns an object, that
// becomes the return value of `new`, so we handle
// that here.
if (typeof newobj === ""object"") {
obj = newobj;
}

// Done!
return obj;

// Subroutine for building objects with specific prototypes
function makeObjectWithFakeCtor() {
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
return new fakeCtor();
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How to pass json POST data to Web API method as object
----------Explanation----------

----------Code Sample----------
contentType:""application/json""

$(function () {
var customer = {contact_name :""Scott"",company_name:""HP""};
$.ajax({
type: ""POST"",
data :JSON.stringify(customer),
url: ""api/Customer"",
contentType: ""application/json""
});
});

public class CreateUserViewModel
{
public int Id {set;get;}
public string Name {set;get;} 
public List Tags {set;get;}
}
public class TagViewModel
{
public int Id {set;get;}
public string Code {set;get;}
}

public class ProductController : Controller
{
[HttpPost]
public CreateUserViewMode Save([FromBody] CreateUserViewModel m)
{
// I am just returning the posted model as it is. 
// You may do other stuff and return different response.
// Ex : missileService.LaunchMissile(m);
return m;
}
}

//Build an object which matches the structure of our view model class
var model = {
Name: ""Shyju"",
Id: 123,
Tags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]
};

$.ajax({
type: ""POST"",
data: JSON.stringify(model),
url: ""../product/save"",
contentType: ""application/json""
}).done(function(res) { 
console.log('res', res);
// Do something with the result :)
});

[HttpPost]
public CreateUserViewModel Save(CreateUserViewModel m)
{
return m;
}

$.ajax({
type: ""POST"",
data: model,
url: ""../product/save""
}).done(function (res) {
console.log('res', res);
});

$.post(""../product/save"", model, function (res) {
//res contains the markup returned by the partial view
console.log('res', res);
});
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How to create a simple map using JavaScript/JQuery
----------Explanation----------
Edit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
----------Code Sample----------
var map = new Object(); // or var map = {};
map[myKey1] = myObj1;
map[myKey2] = myObj2;

function get(k) {
return map[k];
}

//map[myKey1] == get(myKey1);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
How to efficiently count the number of keys/properties of an object in JavaScript?
----------Explanation----------

----------Code Sample----------
class=""lang-js prettyprint-override"">Object.keys(obj).length
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Overriding the java equals() method quirk
----------Explanation----------
In Java, the equals() method that is inherited from Object is:
----------Code Sample----------
public boolean equals(Object other);

@Override
public boolean equals(Object other){
if (other == null) return false;
if (other == this) return true;
if (!(other instanceof MyClass))return false;
MyClass otherMyClass = (MyClass)other;
...test other properties here...
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
How can I access a private constructor of a class?
----------Explanation----------
One way to bypass the restriction is to use reflections:
----------Code Sample----------
import java.lang.reflect.Constructor;

public class Example {
public static void main(final String[] args) throws Exception {
Constructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);
constructor.setAccessible(true);
Foo foo = constructor.newInstance(new Object[0]);
System.out.println(foo);
}
}

class Foo {
private Foo() {
// private!
}

@Override
public String toString() {
return ""I'm a Foo and I'm alright!"";
}
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Why is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?
----------Explanation----------

----------Code Sample----------
public Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}

// calls the varargs method.
Foo(new Object[]{new Object(), new Object()});

public static void main(String... args) {

public Foo(Object o, Object... os){} 

public Foo(Object[] os) {}

Foo(new Object(), new Object()); // calls the first.

Foo(new Object[]{new Object(), new Object()}); // calls the second.

public Foo(Object... os){} 

public Bar(Object[] os) {}

Foo(new Object[]{new Object(), new Object()}); // compiles fine.

Bar(new Object(), new Object()); // Fails to compile.

public Foo(Object... os, int i){} // fails to compile.

public Bar(Object[] os, int i) {} // compiles ok.
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
What does enumerable mean?
----------Explanation----------
If a property isn't identified as enumerable, the loop will ignore that it's within the object.
----------Code Sample----------
var obj = { key: 'val' };

console.log('toString' in obj); // true
console.log(typeof obj.toString); // ""function""

for (var key in obj)
console.log(key); // ""key""

var descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, 'bar');

console.log(descriptor.enumerable); // true
console.log(descriptor.value); // 1

console.log(descriptor);
// { value: 1, writable: true, enumerable: true, configurable: true }

var foo = { bar: 1, baz: 2};

for (var prop in foo)
console.log(prop); // outputs 'bar' and 'baz'

console.log(Object.getOwnPropertyNames(Object.prototype));
// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]

console.log('constructor' in foo); // true
console.log('toString' in foo); // true
// etc.

var descriptor = Object.getOwnPropertyDescriptor(Object.prototype, 'constructor');

console.log(descriptor.enumerable); // false
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Each for object?
----------Explanation----------
A javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work
----------Code Sample----------
$.each(object, function(index, value) {
console.log(value);
}); 

for(var index in object) { 
var attr = object[index]; 
}

for(var index in object) { 
if (object.hasOwnProperty(index)) {
var attr = object[index];
}
}

click
click
click

var object = [""first"", ""middle"", ""last""];
for(var index in object) { 
if (object.hasOwnProperty(index)) {
$('.index'+index).click(function() {
console.log(object[index]);
});
}
}
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Loading Java Builder Object from Yaml file
----------Explanation----------
SnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.
----------Code Sample----------
/**
* create JavaBean
*/
public void testGetBeanAssumeClass() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person\nfirstName: Andrey\nage: 99"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertNull(person.getLastName());
assertEquals(99, person.getAge().intValue());
}

/**
* create instance using constructor arguments
*/
public void testGetConstructorBean() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertEquals(""Somov"", person.getLastName());
assertEquals(99, person.getAge().intValue());
}
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
PriorityQueue/Heap Update
----------Explanation----------
Some years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java's Comparator and Comparable interfaces, and also would make the class use generics.)
----------Code Sample----------
import java.util.*;

public abstract class Heap {

private List heap;

public Heap() {
heap = new ArrayList();
}

public void push(Object obj) {
heap.add(obj);
pushUp(heap.size()-1);
}

public Object pop() {
if (heap.size() > 0) {
swap(0, heap.size()-1);
Object result = heap.remove(heap.size()-1);
pushDown(0);
return result;
} else {
return null;
}
}

public Object getFirst() {
return heap.get(0);
}

public Object get(int index) {
return heap.get(index);
}

public int size() {
return heap.size();
}

protected abstract boolean isGreaterOrEqual(int first, int last);

protected int parent(int i) {
return (i - 1) / 2;
}

protected int left(int i) {
return 2 * i + 1;
}

protected int right(int i) {
return 2 * i + 2;
}

protected void swap(int i, int j) {
Object tmp = heap.get(i);
heap.set(i, heap.get(j));
heap.set(j, tmp);
}

public void pushDown(int i) {
int left = left(i);
int right = right(i);
int largest = i;

if (left < heap.size() && !isGreaterOrEqual(largest, left)) {
largest = left;
}
if (right < heap.size() && !isGreaterOrEqual(largest, right)) {
largest = right;
}

if (largest != i) {
swap(largest, i);
pushDown(largest);
}
}

public void pushUp(int i) {
while (i > 0 && !isGreaterOrEqual(parent(i), i)) {
swap(parent(i), i);
i = parent(i);
}
}

public String toString() {
StringBuffer s = new StringBuffer(""Heap:\n"");
int rowStart = 0;
int rowSize = 1;
for (int i = 0; i < heap.size(); i++) {
if (i == rowStart+rowSize) {
s.append('\n');
rowStart = i;
rowSize *= 2;
}
s.append(get(i));
s.append("" "");
}
return s.toString();
}

public static void main(String[] args){
Heap h = new Heap() {
protected boolean isGreaterOrEqual(int first, int last) {
return ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();
}
};

for (int i = 0; i < 100; i++) {
h.push(new Integer((int)(100 * Math.random())));
}

System.out.println(h+""\n"");

while (h.size() > 0) {
System.out.println(h.pop());
}
}
}
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Convert Java Object to JsonNode in Jackson
----------Explanation----------

----------Code Sample----------
JsonNode node = objectMapper.valueToTree(map);

JsonNode node = mapper.convertValue(object, JsonNode.class);
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Change key in js associative array
----------Explanation----------
In JavaScript there is no such thing as associative Array. Objects can be used instead:
----------Code Sample----------
var myHash = new Object();

var myHash = {};

myHash[""from""] = ""value"";
myHash[""to""] = myHash[""from""];
delete myHash[""from""];

myHash.from = ""value"";
myHash.to = myHash.from;
delete myHash.from;
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
Understanding the difference between Object.create() and new SomeFunction()
----------Explanation----------
With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:
----------Code Sample----------
var o = new SomeConstructor();

var o = Object.create({inherited: 1}, {
foo: {
get: (function () { // a closure
var closured = 'foo';
return function () {
return closured+'bar';
};
})()
}
});

o.foo; // ""foobar""
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How do I correctly clone a JavaScript object?
----------Explanation----------
Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is Object , then simply creating a new general object with {} will work, but if the source's prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:
----------Code Sample----------
function clone(obj) {
if (null == obj || ""object"" != typeof obj) return obj;
var copy = obj.constructor();
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
}
return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());

function clone(obj) {
var copy;

// Handle the 3 simple types, and null or undefined
if (null == obj || ""object"" != typeof obj) return obj;

// Handle Date
if (obj instanceof Date) {
copy = new Date();
copy.setTime(obj.getTime());
return copy;
}

// Handle Array
if (obj instanceof Array) {
copy = [];
for (var i = 0, len = obj.length; i < len; i++) {
copy[i] = clone(obj[i]);
}
return copy;
}

// Handle Object
if (obj instanceof Object) {
copy = {};
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
}
return copy;
}

throw new Error(""Unable to copy obj! Its type isn't supported."");
}

// This would be cloneable:
var tree = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""right"" : null,
""data"" : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
cylicGraph[""right""] = cylicGraph;
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How do I access properties of a javascript object if I don't know the names?
----------Explanation----------
You can loop through keys like this:
----------Code Sample----------
for (var key in data) {
console.log(key);
}

for (var key in data) {
if (data.hasOwnProperty(key)) {
console.log(key);
}
}

for each (var value in data) {
console.log(value);
}

var data = { Name: 'Property Name', Value: '0' };
console.log(Object.keys(data)); // => [""Name"", ""Value""]

Object.keys(data).forEach(function (key) {
console.log(data[key]);
});
// => Logs ""Property Name"", 0
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
C# version of java's synchronized keyword?
----------Explanation----------
For the method-level stuff, there is [MethodImpl] :
----------Code Sample----------
[MethodImpl(MethodImplOptions.Synchronized)]
public void SomeMethod() {/* code */}

private int i;
public int SomeProperty
{
[MethodImpl(MethodImplOptions.Synchronized)]
get { return i; }
[MethodImpl(MethodImplOptions.Synchronized)]
set { i = value; }
}

public int SomeProperty {get;set;} // not synchronized
public event EventHandler SomeEvent; // synchronized

private readonly object syncLock = new object();
public void SomeMethod() {
lock(syncLock) { /* code */ }
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
Is it possible to implement properties in languages other than C#?
----------Explanation----------
Python definitely supports properties:
----------Code Sample----------
class Foo(object):

def get_length_inches(self):
return self.length_meters * 39.0

def set_length_inches(self, val):
self.length_meters = val/39.0

length_inches = property(get_length_inches, set_length_inches)

class Foo(object):

# 2.5 or later
@property
def length_inches(self):
return self.length_meters * 39.0

# 2.6 or later
@length_inches.setter
def length_inches(self, val):
self.length_meters = val/39.0
*******************end of usage scenario 29***************** 

*******************usage scenario 30********************** 
----------usage scenario----------
Json deserialization into another class hierarchy using Jackson
----------Explanation----------
Here is a code which creates ObjectMapper for deserialization:
----------Code Sample----------
protected ObjectMapper getObjectMapperForDeserialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {
private HashMap classes = new HashMap() {
{
put(ConcreteA.class, ConcreteAAdapter.class);
put(ConcreteB.class, ConcreteBAdapter.class);
put(ConcreteC.class, ConcreteCAdapter.class);
}
};

@Override
public String idFromValue(Object value) {
return (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;
}

@Override
public JavaType typeFromId(String id) {
try {
return classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));
} catch (ClassNotFoundException e) {
// todo catch the e
}
return super.typeFromId(id);
}
});
mapper.setDefaultTyping(typeResolverBuilder);
return mapper;
}

protected ObjectMapper getObjectMapperForSerialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes","['""""""Inserting Java Object to MongoDB Collection Using Java\n\nI am trying to insert a whole Java object into a MongoDB Collection using Java. I am getting following error:\n\nException in thread ""main"" java.lang.IllegalArgumentException: can\'t serialize class net.yogesh.test.Employee at org.bson.BSONEncoder._putObjectField(BSONEncoder.java:185) at org.bson.BSONEncoder.putObject(BSONEncoder.java:119) at org.bson.BSONEncoder.putObject(BSONEncoder.java:65) at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:176) at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:134) at com.mongodb.DBApiLayer$MyCollection.insert(DBApiLayer.java:129) at com.mongodb.DBCollection.save(DBCollection.java:418) at net.yogesh.test.test.main(test.java:31)\n\nEmplyoee.java (POJO)\n\npackage net.yogesh.test; import java.io.Serializable; public class Employee implements Serializable { private static final long serialVersionUID = 1L; private long no; private String name; public Employee() { } public long getNo() { return no; } public void setNo(long no) { this.no = no; } public String getName() { return name; } public void setName(String name) { this.name = name; } }\n\nMain Method Class (test.java)\n\npackage net.yogesh.test; import java.net.UnknownHostException; import com.mongodb.BasicDBObject; import com.mongodb.DB; import com.mongodb.DBCollection; import com.mongodb.Mongo; import com.mongodb.MongoException; public class test { public static void main(String[] args) throws UnknownHostException, MongoException { Mongo mongo = new Mongo(""localhost"", 27017); DB db = mongo.getDB(""test""); Employee employee = new Employee(); employee.setNo(1L); employee.setName(""yogesh""); BasicDBObject basicDBObject = new BasicDBObject(""Name"", employee); DBCollection dbCollection = db.getCollection(""NameColl""); dbCollection.save(basicDBObject); } }\n\nCan anybody explain why I am getting this error? Yogesh PrajapatiYogesh Prajapati\n\n4,3\n\nMay be you can use some specialized Object Document Mapping framework API like Moprphia\n\n\n\nextands ReflectionDBObject like suggested by this stackoverflow.com/questions/12250969/\n\nIn order to map it to DBObject, do NOT extend at all! It\'s against Object Oriented principles and is considered to be a bad smell. Instead, use a method in POJO to map it as I described: stackoverflow.com/a/46088053/387048\n\n\n\nI\'m a little confused as to know why you\'d think this would work in the first place. The first thing you need to know is how to map your POJO to a MongoDB document. Currently, you\'re not telling the system(your code) how to do that. You can either use a mapping library for this (Morphia comes to mind) or use ReflectionDBObject. Either solution allows you to map POJO to MongoDB document or MongoDB document to POJO(the former way is a lot more nicely than the latter). 1,Remon van VlietRemon van Vliet\n\n1\n\nWhy would you chose to use a third party library when mongo drivers support POJO\'s natively? mongodb.github.io/mongo-java-driver/3.5/driver/getting-started/\n\nDB db = mongoClient.getDB( ""mydb"" ); coll = db.getCollection(""testCollection""); Employee emp = new Employee(); emp.setId(""1001""); emp.setName(""John Doe""); //Converting a custom Class(Employee) to BasicDBObject Gson gson = new Gson(); BasicDBObject obj = (BasicDBObject)JSON.parse(gson.toJson(emp)); coll.insert(obj); findEmployee(new BasicDBObject(""id"",""1001"")); public static void findEmployee(BasicDBObject query){ DBCursor cursor = coll.find(query); try { while(cursor.hasNext()) { DBObject dbobj = cursor.next(); //Converting BasicDBObject to a custom Class(Employee) Employee emp = (new Gson()).fromJson(dbobj.toString(), Employee.class); System.out.println(emp.getName()); } } finally { cursor.close(); } }\n\nI thought that it would be useful to post code that did conversions both ways. Storing an Employee Object Finding and re-creating an employee Object Hope this is useful.. user1456599user1456599\n\n2\n\nThis is perfect. Only this solution worked for me without any library! Thanks!!""""""']",0.333333333,1,0.89
lang,Object,Java - getting max value from an arraylist of Objects?,"<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>Both of these interfaces allow for different behavior.
Comparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).
The second  Comparator  allows you to do what you are asking to do.
If the objects in the ArrayList implement comparable  you can instead do something like this:</p>
<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>
<p>With Java 8 you can use a method reference for your comparator:</p>
<p>Since technologies appear everyday  the answer will change in the time.
<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>
Fortunately  the actual code is much simpler and shorter than this description.</p>
<p>If you want to sort for alphabet that contains non English characters you can use Locale...","Direct Known Subclasses:
AbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile","You can use Java 8 Streams :

ArrayList<ArrayList<String>> allChains = new ArrayList<>();
allChains.add (new ArrayList<String>(Arrays.asList (""apple"", ""b"", ""c"")));
allChains.add (new ArrayList<String>(Arrays.asList (""a"")));
allChains.add (new ArrayList<String>(Arrays.asList (""a"",""b"",""c"",""d"")));

ArrayList<String> longest = allChains.stream()
                                     .max(Comparator.comparingInt(ArrayList::size))
                                     .get();

System.out.println (longest);
Output:

[a, b, c, d]","*******************usage scenario 1********************** 
----------usage scenario----------
Converting Java objects to JSON with Jackson
----------Explanation----------
To convert your object in JSON with Jackson:
----------Code Sample----------
ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
String json = ow.writeValueAsString(object);
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
How to create a jQuery plugin with methods?
----------Explanation----------
According to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method
----------Code Sample----------
(function( $ ){

var methods = {
init : function(options) {

},
show : function( ) { },// IS
hide : function( ) { },// GOOD
update : function( content ) { }// !!!
};

$.fn.tooltip = function(methodOrOptions) {
if ( methods[methodOrOptions] ) {
return methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));
} else if ( typeof methodOrOptions === 'object' || ! methodOrOptions ) {
// Default to ""init""
return methods.init.apply( this, arguments );
} else {
$.error( 'Method ' + methodOrOptions + ' does not exist on jQuery.tooltip' );
} 
};


})( jQuery );

$('div').tooltip(); // calls the init method
$('div').tooltip({ // calls the init method
foo : 'bar'
});
$('div').tooltip('hide'); // calls the hide method
$('div').tooltip('update', 'This is the new tooltip content!'); // calls the update method
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Checking if a key exists in a JavaScript object?
----------Explanation----------
Checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?
----------Code Sample----------
var obj = { key: undefined };
obj[""key""] != undefined // false, but the key exists!

""key"" in obj // true, regardless of the actual value

!(""key"" in obj) // true if ""key"" doesn't exist in object
!""key"" in obj // ERROR! Equivalent to ""false in obj""

obj.hasOwnProperty(""key"") // true
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to ""properly"" create a custom object in JavaScript?
----------Explanation----------
Let's start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.
----------Code Sample----------
function Shape(x, y) {
this.x= x;
this.y= y;
}

Shape.prototype.toString= function() {
return 'Shape at '+this.x+', '+this.y;
};

function Circle(x, y, r) {
Shape.call(this, x, y); // invoke the base class's constructor function to take co-ords
this.r= r;
}
Circle.prototype= new Shape();

Circle.prototype.toString= function() {
return 'Circular '+Shape.prototype.toString.call(this)+' with radius '+this.r;
}

function subclassOf(base) {
_subclassOf.prototype= base.prototype;
return new _subclassOf();
}
function _subclassOf() {};

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.prototype= subclassOf(Shape);

Function.prototype.subclass= function(base) {
var c= Function.prototype.subclass.nonconstructor;
c.prototype= base.prototype;
this.prototype= new c();
};
Function.prototype.subclass.nonconstructor= function() {};

...

function Circle(x, y, r) {
Shape.call(this, x, y);
this.r= r;
}
Circle.subclass(Shape);

function Point() {
Shape.apply(this, arguments);
}
Point.subclass(Shape);

function Shape() { this._init.apply(this, arguments); }
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

function Point() { this._init.apply(this, arguments); }
Point.subclass(Shape);
// no need to write new initialiser for Point!

Function.prototype.makeSubclass= function() {
function Class() {
if ('_init' in this)
this._init.apply(this, arguments);
}
Function.prototype.makeSubclass.nonconstructor.prototype= this.prototype;
Class.prototype= new Function.prototype.makeSubclass.nonconstructor();
return Class;
};
Function.prototype.makeSubclass.nonconstructor= function() {};

...

Shape= Object.makeSubclass();
Shape.prototype._init= function(x, y) {
this.x= x;
this.y= y;
};

Point= Shape.makeSubclass();

Circle= Shape.makeSubclass();
Circle.prototype._init= function(x, y, r) {
Shape.prototype._init.call(this, x, y);
this.r= r;
};

Function.prototype.makeSubclass= function() {
function Class() {
if (!(this instanceof Class))
throw('Constructor called without ""new""');
...

Circle= Shape.makeSubclass({
_init: function(x, y, z) {
Shape.prototype._init.call(this, x, y);
this.r= r;
},
...
});

function Shape(x, y) {
var that= this;

this.x= x;
this.y= y;

this.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};
}

function Circle(x, y, r) {
var that= this;

Shape.call(this, x, y);
this.r= r;

var _baseToString= this.toString;
this.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+that.r;
};
};

var mycircle= new Circle();

var ts= mycircle.toString;
alert(ts());

setTimeout(function() {
mycircle.move(1, 1);
}, 1000);

setTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);

function Shape(x, y) {
var that= {};

that.x= x;
that.y= y;

that.toString= function() {
return 'Shape at '+that.x+', '+that.y;
};

return that;
}

function Circle(x, y, r) {
var that= Shape(x, y);

that.r= r;

var _baseToString= that.toString;
that.toString= function() {
return 'Circular '+_baseToString(that)+' with radius '+r;
};

return that;
};

var mycircle= Circle(); // you can include `new` if you want but it won't do anything
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Avoiding != null statements
----------Explanation----------
(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:
----------Code Sample----------
assert 

assert : 

public interface Action {
void doSomething();
}

public interface Parser {
Action findAction(String userInput);
}

public class MyParser implements Parser {
private static Action DO_NOTHING = new Action() {
public void doSomething() { /* do nothing */ }
};

public Action findAction(String userInput) {
// ...
if ( /* we can't find any actions */ ) {
return DO_NOTHING;
}
}
}

Parser parser = ParserFactory.getParser();
if (parser == null) {
// now what?
// this would be an example of where null isn't (or shouldn't be) a valid response
}
Action action = parser.findAction(someInput);
if (action == null) {
// do nothing
} else {
action.doSomething();
}

ParserFactory.getParser().findAction(someInput).doSomething();

try {
ParserFactory.getParser().findAction(someInput).doSomething();
} catch(ActionNotFoundException anfe) {
userConsole.err(anfe.getMessage());
}

public Action findAction(final String userInput) {
/* Code to return requested Action if found */
return new Action() {
public void doSomething() {
userConsole.err(""Action not found: "" + userInput);
}
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Java Generics Wildcarding With Multiple Classes
----------Explanation----------
Actually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:
----------Code Sample----------


public static > T
max(Collection coll)

class classB { }
interface interfaceC { }

public class MyClass {
Class variable;
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Cloning an Object in Node.js
----------Explanation----------

----------Code Sample----------
var obj2 = JSON.parse(JSON.stringify(obj1));

var extend = require('util')._extend;

var obj1 = {x: 5, y:5};
var obj2 = extend({}, obj1);
obj2.x = 6;
console.log(obj1.x); // still logs 5

exports._extend = function(origin, add) {
// Don't do anything if add isn't an object
if (!add || typeof add !== 'object') return origin;

var keys = Object.keys(add);
var i = keys.length;
while (i--) {
origin[keys[i]] = add[keys[i]];
}
return origin;
};
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Null check in an enhanced for loop
----------Explanation----------
If you get this list from somewhere else and don't know if it is ok or not you could create a utility method and use it like this:
----------Code Sample----------
for( Object o : safe( list ) ) {
// do whatever 
}

public static List safe( List other ) {
return other == null ? Collections.EMPTY_LIST : other;
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Shallow copy for arrays, why can't simply do newArr = oldArr?
----------Explanation----------
""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:
----------Code Sample----------
Original Array

[0]
[1]
[2]
[3]

After copying:

[0] <--- Original [0]
[1] [1]
[3] [2]
[4] Copy ---> [3]

Original Array:

[0:]----> [object 0]
[1:]----> [object 1]
[2:]----> [object 2]
[3:]----> [object 3]

Original -> [0:]----> [object 0] <----[:0] <- Copy
[1:]----> [object 1] <----[:1]
[2:]----> [object 2] <----[:2]
[3:]----> [object 3] <----[:3]

Original -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]
[1:]----> [object 1] [1:]----> [copy of object 1]
[2:]----> [object 2] [2:]----> [copy of object 2]
[3:]----> [object 3] [3:]----> [copy of object 3]

arr1 -> [0, 1, 2, 3, 4]

arr1 -> [0, 1, 2, 3, 4] <- arr2
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Iterate through object properties
----------Explanation----------
Iterating over properties requires this additional hasOwnProperty check:
----------Code Sample----------
for (var property in object) {
if (object.hasOwnProperty(property)) {
// do stuff
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How do I test for an empty JavaScript object?
----------Explanation----------

----------Code Sample----------
// because Object.keys(new Date()).length === 0;
// we have to do some additional check
Object.keys(obj).length === 0 && obj.constructor === Object

function isEmpty(obj) {
for(var prop in obj) {
if(obj.hasOwnProperty(prop))
return false;
}

return true && JSON.stringify(obj) === JSON.stringify({});
}

jQuery.isEmptyObject({}); // true

_.isEmpty({}); // true

_.isEmpty({}); // true

Hoek.deepEqual({}, {}); // true
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
dynamic object construction in javascript?
----------Explanation----------

----------Code Sample----------
function applyConstruct(ctor, params) {
var obj, newobj;

// Use a fake constructor function with the target constructor's
// `prototype` property to create the object with the right prototype
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
obj = new fakeCtor();

// Set the object's `constructor`
obj.constructor = ctor;

// Call the constructor function
newobj = ctor.apply(obj, params);

// Use the returned object if there is one.
// Note that we handle the funky edge case of the `Function` constructor,
// thanks to Mike's comment below. Double-checked the spec, that should be
// the lot.
if (newobj !== null
&& (typeof newobj === ""object"" || typeof newobj === ""function"")
) {
obj = newobj;
}

// Done
return obj;
}

function applyConstruct(ctor, params) {
var obj, newobj;

// Create the object with the desired prototype
if (typeof Object.create === ""function"") {
// ECMAScript 5 
obj = Object.create(ctor.prototype);
}
else if ({}.__proto__) {
// Non-standard __proto__, supported by some browsers
obj = {};
obj.__proto__ = ctor.prototype;
if (obj.__proto__ !== ctor.prototype) {
// Setting it didn't work
obj = makeObjectWithFakeCtor();
}
}
else {
// Fallback
obj = makeObjectWithFakeCtor();
}

// Set the object's constructor
obj.constructor = ctor;

// Apply the constructor function
newobj = ctor.apply(obj, params);

// If a constructor function returns an object, that
// becomes the return value of `new`, so we handle
// that here.
if (typeof newobj === ""object"") {
obj = newobj;
}

// Done!
return obj;

// Subroutine for building objects with specific prototypes
function makeObjectWithFakeCtor() {
function fakeCtor() {
}
fakeCtor.prototype = ctor.prototype;
return new fakeCtor();
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How to pass json POST data to Web API method as object
----------Explanation----------

----------Code Sample----------
contentType:""application/json""

$(function () {
var customer = {contact_name :""Scott"",company_name:""HP""};
$.ajax({
type: ""POST"",
data :JSON.stringify(customer),
url: ""api/Customer"",
contentType: ""application/json""
});
});

public class CreateUserViewModel
{
public int Id {set;get;}
public string Name {set;get;} 
public List Tags {set;get;}
}
public class TagViewModel
{
public int Id {set;get;}
public string Code {set;get;}
}

public class ProductController : Controller
{
[HttpPost]
public CreateUserViewMode Save([FromBody] CreateUserViewModel m)
{
// I am just returning the posted model as it is. 
// You may do other stuff and return different response.
// Ex : missileService.LaunchMissile(m);
return m;
}
}

//Build an object which matches the structure of our view model class
var model = {
Name: ""Shyju"",
Id: 123,
Tags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]
};

$.ajax({
type: ""POST"",
data: JSON.stringify(model),
url: ""../product/save"",
contentType: ""application/json""
}).done(function(res) { 
console.log('res', res);
// Do something with the result :)
});

[HttpPost]
public CreateUserViewModel Save(CreateUserViewModel m)
{
return m;
}

$.ajax({
type: ""POST"",
data: model,
url: ""../product/save""
}).done(function (res) {
console.log('res', res);
});

$.post(""../product/save"", model, function (res) {
//res contains the markup returned by the partial view
console.log('res', res);
});
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How to create a simple map using JavaScript/JQuery
----------Explanation----------
Edit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
----------Code Sample----------
var map = new Object(); // or var map = {};
map[myKey1] = myObj1;
map[myKey2] = myObj2;

function get(k) {
return map[k];
}

//map[myKey1] == get(myKey1);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
How to efficiently count the number of keys/properties of an object in JavaScript?
----------Explanation----------

----------Code Sample----------
class=""lang-js prettyprint-override"">Object.keys(obj).length
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Overriding the java equals() method quirk
----------Explanation----------
In Java, the equals() method that is inherited from Object is:
----------Code Sample----------
public boolean equals(Object other);

@Override
public boolean equals(Object other){
if (other == null) return false;
if (other == this) return true;
if (!(other instanceof MyClass))return false;
MyClass otherMyClass = (MyClass)other;
...test other properties here...
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
How can I access a private constructor of a class?
----------Explanation----------
One way to bypass the restriction is to use reflections:
----------Code Sample----------
import java.lang.reflect.Constructor;

public class Example {
public static void main(final String[] args) throws Exception {
Constructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);
constructor.setAccessible(true);
Foo foo = constructor.newInstance(new Object[0]);
System.out.println(foo);
}
}

class Foo {
private Foo() {
// private!
}

@Override
public String toString() {
return ""I'm a Foo and I'm alright!"";
}
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Why is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?
----------Explanation----------

----------Code Sample----------
public Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}

// calls the varargs method.
Foo(new Object[]{new Object(), new Object()});

public static void main(String... args) {

public Foo(Object o, Object... os){} 

public Foo(Object[] os) {}

Foo(new Object(), new Object()); // calls the first.

Foo(new Object[]{new Object(), new Object()}); // calls the second.

public Foo(Object... os){} 

public Bar(Object[] os) {}

Foo(new Object[]{new Object(), new Object()}); // compiles fine.

Bar(new Object(), new Object()); // Fails to compile.

public Foo(Object... os, int i){} // fails to compile.

public Bar(Object[] os, int i) {} // compiles ok.
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
What does enumerable mean?
----------Explanation----------
If a property isn't identified as enumerable, the loop will ignore that it's within the object.
----------Code Sample----------
var obj = { key: 'val' };

console.log('toString' in obj); // true
console.log(typeof obj.toString); // ""function""

for (var key in obj)
console.log(key); // ""key""

var descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, 'bar');

console.log(descriptor.enumerable); // true
console.log(descriptor.value); // 1

console.log(descriptor);
// { value: 1, writable: true, enumerable: true, configurable: true }

var foo = { bar: 1, baz: 2};

for (var prop in foo)
console.log(prop); // outputs 'bar' and 'baz'

console.log(Object.getOwnPropertyNames(Object.prototype));
// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]

console.log('constructor' in foo); // true
console.log('toString' in foo); // true
// etc.

var descriptor = Object.getOwnPropertyDescriptor(Object.prototype, 'constructor');

console.log(descriptor.enumerable); // false
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Each for object?
----------Explanation----------
A javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work
----------Code Sample----------
$.each(object, function(index, value) {
console.log(value);
}); 

for(var index in object) { 
var attr = object[index]; 
}

for(var index in object) { 
if (object.hasOwnProperty(index)) {
var attr = object[index];
}
}

click
click
click

var object = [""first"", ""middle"", ""last""];
for(var index in object) { 
if (object.hasOwnProperty(index)) {
$('.index'+index).click(function() {
console.log(object[index]);
});
}
}
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
Loading Java Builder Object from Yaml file
----------Explanation----------
SnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.
----------Code Sample----------
/**
* create JavaBean
*/
public void testGetBeanAssumeClass() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person\nfirstName: Andrey\nage: 99"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertNull(person.getLastName());
assertEquals(99, person.getAge().intValue());
}

/**
* create instance using constructor arguments
*/
public void testGetConstructorBean() {
String data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";
Object obj = construct(data);
assertNotNull(obj);
assertTrue(obj.getClass().toString(), obj instanceof Person);
Person person = (Person) obj;
assertEquals(""Andrey"", person.getFirstName());
assertEquals(""Somov"", person.getLastName());
assertEquals(99, person.getAge().intValue());
}
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
PriorityQueue/Heap Update
----------Explanation----------
Some years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java's Comparator and Comparable interfaces, and also would make the class use generics.)
----------Code Sample----------
import java.util.*;

public abstract class Heap {

private List heap;

public Heap() {
heap = new ArrayList();
}

public void push(Object obj) {
heap.add(obj);
pushUp(heap.size()-1);
}

public Object pop() {
if (heap.size() > 0) {
swap(0, heap.size()-1);
Object result = heap.remove(heap.size()-1);
pushDown(0);
return result;
} else {
return null;
}
}

public Object getFirst() {
return heap.get(0);
}

public Object get(int index) {
return heap.get(index);
}

public int size() {
return heap.size();
}

protected abstract boolean isGreaterOrEqual(int first, int last);

protected int parent(int i) {
return (i - 1) / 2;
}

protected int left(int i) {
return 2 * i + 1;
}

protected int right(int i) {
return 2 * i + 2;
}

protected void swap(int i, int j) {
Object tmp = heap.get(i);
heap.set(i, heap.get(j));
heap.set(j, tmp);
}

public void pushDown(int i) {
int left = left(i);
int right = right(i);
int largest = i;

if (left < heap.size() && !isGreaterOrEqual(largest, left)) {
largest = left;
}
if (right < heap.size() && !isGreaterOrEqual(largest, right)) {
largest = right;
}

if (largest != i) {
swap(largest, i);
pushDown(largest);
}
}

public void pushUp(int i) {
while (i > 0 && !isGreaterOrEqual(parent(i), i)) {
swap(parent(i), i);
i = parent(i);
}
}

public String toString() {
StringBuffer s = new StringBuffer(""Heap:\n"");
int rowStart = 0;
int rowSize = 1;
for (int i = 0; i < heap.size(); i++) {
if (i == rowStart+rowSize) {
s.append('\n');
rowStart = i;
rowSize *= 2;
}
s.append(get(i));
s.append("" "");
}
return s.toString();
}

public static void main(String[] args){
Heap h = new Heap() {
protected boolean isGreaterOrEqual(int first, int last) {
return ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();
}
};

for (int i = 0; i < 100; i++) {
h.push(new Integer((int)(100 * Math.random())));
}

System.out.println(h+""\n"");

while (h.size() > 0) {
System.out.println(h.pop());
}
}
}
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Convert Java Object to JsonNode in Jackson
----------Explanation----------

----------Code Sample----------
JsonNode node = objectMapper.valueToTree(map);

JsonNode node = mapper.convertValue(object, JsonNode.class);
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
Change key in js associative array
----------Explanation----------
In JavaScript there is no such thing as associative Array. Objects can be used instead:
----------Code Sample----------
var myHash = new Object();

var myHash = {};

myHash[""from""] = ""value"";
myHash[""to""] = myHash[""from""];
delete myHash[""from""];

myHash.from = ""value"";
myHash.to = myHash.from;
delete myHash.from;
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
Understanding the difference between Object.create() and new SomeFunction()
----------Explanation----------
With constructor functions, the newly created object inherits from the constructor's prototype, e.g.:
----------Code Sample----------
var o = new SomeConstructor();

var o = Object.create({inherited: 1}, {
foo: {
get: (function () { // a closure
var closured = 'foo';
return function () {
return closured+'bar';
};
})()
}
});

o.foo; // ""foobar""
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How do I correctly clone a JavaScript object?
----------Explanation----------
Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is Object , then simply creating a new general object with {} will work, but if the source's prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:
----------Code Sample----------
function clone(obj) {
if (null == obj || ""object"" != typeof obj) return obj;
var copy = obj.constructor();
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
}
return copy;
}

var d1 = new Date();

/* Wait for 5 seconds. */
var start = (new Date()).getTime();
while ((new Date()).getTime() - start < 5000);


var d2 = clone(d1);
alert(""d1 = "" + d1.toString() + ""\nd2 = "" + d2.toString());

function clone(obj) {
var copy;

// Handle the 3 simple types, and null or undefined
if (null == obj || ""object"" != typeof obj) return obj;

// Handle Date
if (obj instanceof Date) {
copy = new Date();
copy.setTime(obj.getTime());
return copy;
}

// Handle Array
if (obj instanceof Array) {
copy = [];
for (var i = 0, len = obj.length; i < len; i++) {
copy[i] = clone(obj[i]);
}
return copy;
}

// Handle Object
if (obj instanceof Object) {
copy = {};
for (var attr in obj) {
if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
}
return copy;
}

throw new Error(""Unable to copy obj! Its type isn't supported."");
}

// This would be cloneable:
var tree = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""right"" : null,
""data"" : 8
};

// This would kind-of work, but you would get 2 copies of the 
// inner node instead of 2 references to the same copy
var directedAcylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
directedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];

// Cloning this would cause a stack overflow due to infinite recursion:
var cylicGraph = {
""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },
""data"" : 8
};
cylicGraph[""right""] = cylicGraph;
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How do I access properties of a javascript object if I don't know the names?
----------Explanation----------
You can loop through keys like this:
----------Code Sample----------
for (var key in data) {
console.log(key);
}

for (var key in data) {
if (data.hasOwnProperty(key)) {
console.log(key);
}
}

for each (var value in data) {
console.log(value);
}

var data = { Name: 'Property Name', Value: '0' };
console.log(Object.keys(data)); // => [""Name"", ""Value""]

Object.keys(data).forEach(function (key) {
console.log(data[key]);
});
// => Logs ""Property Name"", 0
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
C# version of java's synchronized keyword?
----------Explanation----------
For the method-level stuff, there is [MethodImpl] :
----------Code Sample----------
[MethodImpl(MethodImplOptions.Synchronized)]
public void SomeMethod() {/* code */}

private int i;
public int SomeProperty
{
[MethodImpl(MethodImplOptions.Synchronized)]
get { return i; }
[MethodImpl(MethodImplOptions.Synchronized)]
set { i = value; }
}

public int SomeProperty {get;set;} // not synchronized
public event EventHandler SomeEvent; // synchronized

private readonly object syncLock = new object();
public void SomeMethod() {
lock(syncLock) { /* code */ }
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
Is it possible to implement properties in languages other than C#?
----------Explanation----------
Python definitely supports properties:
----------Code Sample----------
class Foo(object):

def get_length_inches(self):
return self.length_meters * 39.0

def set_length_inches(self, val):
self.length_meters = val/39.0

length_inches = property(get_length_inches, set_length_inches)

class Foo(object):

# 2.5 or later
@property
def length_inches(self):
return self.length_meters * 39.0

# 2.6 or later
@length_inches.setter
def length_inches(self, val):
self.length_meters = val/39.0
*******************end of usage scenario 29***************** 

*******************usage scenario 30********************** 
----------usage scenario----------
Json deserialization into another class hierarchy using Jackson
----------Explanation----------
Here is a code which creates ObjectMapper for deserialization:
----------Code Sample----------
protected ObjectMapper getObjectMapperForDeserialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {
private HashMap classes = new HashMap() {
{
put(ConcreteA.class, ConcreteAAdapter.class);
put(ConcreteB.class, ConcreteBAdapter.class);
put(ConcreteC.class, ConcreteCAdapter.class);
}
};

@Override
public String idFromValue(Object value) {
return (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;
}

@Override
public JavaType typeFromId(String id) {
try {
return classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));
} catch (ClassNotFoundException e) {
// todo catch the e
}
return super.typeFromId(id);
}
});
mapper.setDefaultTyping(typeResolverBuilder);
return mapper;
}

protected ObjectMapper getObjectMapperForSerialization() {
ObjectMapper mapper = new ObjectMapper();

StdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
typeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);
typeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes","['"""""" How to get maximum value from the Collection (for example ArrayList)?There is an ArrayList which stores integer values. I need to find the maximum value in this list. E.g. suppose the arrayList stored values are : 10, 20, 30, 40, 50 and the max value would be 50. What is the efficient way to find the maximum value? @Edit : I just found one solution for which I am not very sure\n\nArrayList<Integer> arrayList = new ArrayList<Integer>(); arrayList.add(100); /* add(200), add(250) add(350) add(150) add(450)*/ Integer i = Collections.max(arrayList)\n\nand this returns the highest value. Another way to compare the each value e.g. selection sort or binary sort algorithm \n\n1,user1010399user1010399\n\n2,5\n\nHave you attempted to find the value? Where did you get stuck?""""""']",0.6,0.730769231,1
lang,String,Finding Largest String in ArrayList,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>âÃÃ¶âÂ§âÃÂ¢</code> to yield an extended alphabet <code>âÃ­Â¬Â£  := âÃ­Â¬Â£ âÃÃ¶ââ âÃÂ¢ {âÃÃ¶âÂ§âÃÂ¢}</code>.</p> <p>Let <code>âÃ­Â¬Â±</code> be a symbol and X a uniformly distributed random variable over <code>âÃ­Â¬Â£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>âÃ­Â¬â¢ = floor[32/logâÃÃ¶âÃ¡âÃ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Most common ways to construct:
String name = new String(""Alex"");
Based on 8 examples
 
StringBuffer sb = É;
String s = sb.toString();
Based on 6 examples



String	
truncate(int maxLength)

          Returns a new string with a length no longer than maxLength characters.


truncate

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public String truncate(int maxLength)
Returns a new string with a length no longer than maxLength characters.

UPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.
Parameters:
maxLength
Returns:
a new string with a length no longer than maxLength characters","Please try these code . Here i am trying with get() to access the ArrayList elements, which is working correctly.

import java.util.Scanner;                  
import java.util.ArrayList;

class ArraylistString
{
    public static void main(String args[])
    {
        ArrayList<String> Str = new ArrayList<String>();
        Str.add(""Jim Bob"");
        Str.add(""Bobby Jones"");
        Str.add(""Rob Stiles"");
        int largestString = Str.get(0).length();
        int index = 0;

        for(int i = 0; i < Str.size(); i++)
        {
            if(Str.get(i).length() > largestString)
            {
                largestString = Str.get(i).length();
                                index = i;
            }
        }
        System.out.println(""Index "" + index + "" ""+ Str.get(index) + "" "" + ""is the largest and is size "" + largestString);  

    }

}","*******************usage scenario 1********************** 
----------usage scenario----------
How can I make a method return an argument that was passed to it?
----------Explanation----------
You can create an Answer in Mockito. Let's assume, we have an interface named Application with a method myFunction.
----------Code Sample----------
public interface Application {
public String myFunction(String abc);
}

public void testMyFunction() throws Exception {
Application mock = mock(Application.class);
when(mock.myFunction(anyString())).thenAnswer(new Answer() {
@Override
public String answer(InvocationOnMock invocation) throws Throwable {
Object[] args = invocation.getArguments();
return (String) args[0];
}
});

assertEquals(""someString"",mock.myFunction(""someString""));
assertEquals(""anotherString"",mock.myFunction(""anotherString""));
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Trim string in JavaScript?
----------Explanation----------
For those browsers who does not support trim() , you can use this polyfill from MDN :
----------Code Sample----------
if (!String.prototype.trim) {
(function() {
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
String.prototype.trim = function() {
return this.replace(rtrim, '');
};
})();
}

String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g, '');};

String.prototype.ltrim=function(){return this.replace(/^\s+/,'');};

String.prototype.rtrim=function(){return this.replace(/\s+$/,'');};

String.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');};
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?
----------Explanation----------
change your return type to ResponseEntity<String> , then you can use below for 400
----------Code Sample----------
return new ResponseEntity(HttpStatus.BAD_REQUEST);

return new ResponseEntity(json,HttpStatus.OK);
return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
return ResponseEntity.ok(json);
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Java Byte Array to String to Byte Array
----------Explanation----------
You can't just take the returned string and construct a string from it... it's not a byte[] data type anymore, it's already a string; you need to parse it. For example :
----------Code Sample----------
String response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script

String[] byteValues = response.substring(1, response.length() - 1).split("","");
byte[] bytes = new byte[byteValues.length];

for (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); 
}

String str = new String(bytes);

byte[] b1 = new byte[] {97, 98, 99};

String s1 = Arrays.toString(b1);
String s2 = new String(b1);

System.out.println(s1); // -> ""[97, 98, 99]""
System.out.println(s2); // -> ""abc"";
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Sprintf equivalent in Java
----------Explanation----------

----------Code Sample----------
// Store the formatted string in 'result'
String result = String.format(""%4d"", i * j);

// Write the result to standard output
System.out.println( result );
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to replace special characters in a string?
----------Explanation----------
That depends on what you mean. If you just want to get rid of them, do this: 
(Update: Apparently you want to keep digits as well, use the second lines in that case)
----------Code Sample----------
String alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");
String alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");

String alphaOnly = input.replaceAll(""[^\\p{Alpha}]+"","""");
String alphaAndDigits = input.replaceAll(""[^\\p{Alpha}\\p{Digit}]+"","""");

private static final CharMatcher ALNUM =
CharMatcher.inRange('a', 'z').or(CharMatcher.inRange('A', 'Z'))
.or(CharMatcher.inRange('0', '9')).precomputed();
// ...
String alphaAndDigits = ALNUM.retainFrom(input);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Get words around a position in a string
----------Explanation----------
You can achiveve that using String 's split() method . This solution is O(n) .
----------Code Sample----------
public static void main(String[] args) {
String str = ""Hello my name is John and I like to go fishing and ""+
""hiking I have two sisters and one brother."";
String find = ""I"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
if (sp[i].equals(find)) {
// have to check for ArrayIndexOutOfBoundsException
String surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +
(i-1 > 0 ? sp[i-1]+"" "" : """") +
sp[i] +
(i+1 < sp.length ? "" ""+sp[i+1] : """") +
(i+2 < sp.length ? "" ""+sp[i+2] : """");
System.out.println(surr);
}
}
}

public static void main(String[] args) {
String str = ""Hello my name is John and John and I like to go..."";
String find = ""John and"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces

String[] spMulti = find.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
int j = 0;
while (j < spMulti.length && i+j < sp.length 
&& sp[i+j].equals(spMulti[j])) {
j++;
} 
if (j == spMulti.length) { // found spMulti entirely
StringBuilder surr = new StringBuilder();
if (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }
if (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }
for (int k = 0; k < spMulti.length; k++) {
if (k > 0){ surr.append("" ""); }
surr.append(sp[i+k]);
}
if (i+spMulti.length < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length]);
}
if (i+spMulti.length+1 < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length+1]);
}
System.out.println(surr.toString());
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
JsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object
----------Explanation----------
Actually the problem was in ApplesDO Class:
----------Code Sample----------
public class ApplesDO {

private String apple;
public String getApple() {
return apple;
}
public void setApple(String apple) {
this.apple = apple;
public ApplesDO(CustomType custom) {
//constructor Code
//Introducing the dummy constructor
public ApplesDO() {
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Repeat String - Javascript
----------Explanation----------
I'd put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!
----------Code Sample----------
String.prototype.repeat = function( num )
{
return new Array( num + 1 ).join( this );
}

alert( ""string to repeat\n"".repeat( 4 ) );
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Is this valid Java?
----------Explanation----------
However, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:
----------Code Sample----------
.class public CallAmbiguousMethod
.super java/lang/Object

.method public static main([Ljava/lang/String;)V
.limit stack 3
.limit locals 1

; Call the method that returns String
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;

; Call the method that returns Integer
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;

return

.end method


java -jar jasmin.jar CallAmbiguousMethod.j


java CallAmbiguousMethod


> java CallAmbiguousMethod
strings
numbers

import java.util.Arrays;
import java.util.List;

class RealyCompilesAndRunsFine {

public static String f(List list) {
return list.get(0);
}

public static Integer f(List list) {
return list.get(0);
}

public static void main(String[] args) {
final String string = f(Arrays.asList(""asdf""));
final Integer integer = f(Arrays.asList(123));
System.out.println(string);
System.out.println(integer);
}

}


>javap -c RealyCompilesAndRunsFine
Compiled from ""RealyCompilesAndRunsFine.java""
class RealyCompilesAndRunsFine extends java.lang.Object{
RealyCompilesAndRunsFine();
Code:
0: aload_0
1: invokespecial #1; //Method java/lang/Object."""":()V
4: return

public static java.lang.String f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #3; //class java/lang/String
10: areturn

public static java.lang.Integer f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #4; //class java/lang/Integer
10: areturn

public static void main(java.lang.String[]);
Code:
0: iconst_1
1: anewarray #3; //class java/lang/String
4: dup
5: iconst_0
6: ldc #5; //String asdf
8: aastore
9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;
15: astore_1
16: iconst_1
17: anewarray #4; //class java/lang/Integer
20: dup
21: iconst_0
22: bipush 123
24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
27: aastore
28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;
34: astore_2
35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
38: aload_1
39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
45: aload_2
46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
49: return
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How to unescape a Java string literal in Java?
----------Explanation----------
Like many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:
----------Code Sample----------
/ 47 002F SOLIDUS
= slash, virgule
x (latin letter dental click - 01C0)
x (combining long solidus overlay - 0338)
x (fraction slash - 2044)
x (division slash - 2215)
\ 92 005C REVERSE SOLIDUS
= backslash
x (combining reverse solidus overlay - 20E5)
x (set minus - 2216)

/*
*
* unescape_perl_string()
*
* Tom Christiansen 
* Sun Nov 28 12:55:24 MST 2010
*
* It's completely ridiculous that there's no standard
* unescape_java_string function. Since I have to do the
* damn thing myself, I might as well make it halfway useful
* by supporting things Java was too stupid to consider in
* strings:
* 
* => ""?"" items are additions to Java string escapes
* but normal in Java regexes
*
* => ""!"" items are also additions to Java regex escapes
* 
* Standard singletons: ?\a ?\e \f \n \r \t
* 
* NB: \b is unsupported as backspace so it can pass-through
* to the regex translator untouched; I refuse to make anyone
* doublebackslash it as doublebackslashing is a Java idiocy
* I desperately wish would die out. There are plenty of
* other ways to write it:
*
* \cH, \12, \012, \x08 \x{8}, \u0008, \U00000008
*
* Octal escapes: \0 \0N \0NN \N \NN \NNN
* Can range up to !\777 not \377
* 
* TODO: add !\o{NNNNN}
* last Unicode is 4177777
* maxint is 37777777777
*
* Control chars: ?\cX
* Means: ord(X) ^ ord('@')
*
* Old hex escapes: \xXX
* unbraced must be 2 xdigits
*
* Perl hex escapes: !\x{XXX} braced may be 1-8 xdigits
* NB: proper Unicode never needs more than 6, as highest
* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF
*
* Lame Java escape: \[IDIOT JAVA PREPROCESSOR]uXXXX must be
* exactly 4 xdigits;
*
* I can't write XXXX in this comment where it belongs
* because the damned Java Preprocessor can't mind its
* own business. Idiots!
*
* Lame Python escape: !\UXXXXXXXX must be exactly 8 xdigits
* 
* TODO: Perl translation escapes: \Q \U \L \E \[IDIOT JAVA PREPROCESSOR]u \l
* These are not so important to cover if you're passing the
* result to Pattern.compile(), since it handles them for you
* further downstream. Hm, what about \[IDIOT JAVA PREPROCESSOR]u?
*
*/

public final static
String unescape_perl_string(String oldstr) {

/*
* In contrast to fixing Java's broken regex charclasses,
* this one need be no bigger, as unescaping shrinks the string
* here, where in the other one, it grows it.
*/

StringBuffer newstr = new StringBuffer(oldstr.length());

boolean saw_backslash = false;

for (int i = 0; i < oldstr.length(); i++) {
int cp = oldstr.codePointAt(i);
if (oldstr.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}

if (!saw_backslash) {
if (cp == '\\') {
saw_backslash = true;
} else {
newstr.append(Character.toChars(cp));
}
continue; /* switch */
}

if (cp == '\\') {
saw_backslash = false;
newstr.append('\\');
newstr.append('\\');
continue; /* switch */
}

switch (cp) {

case 'r': newstr.append('\r');
break; /* switch */

case 'n': newstr.append('\n');
break; /* switch */

case 'f': newstr.append('\f');
break; /* switch */

/* PASS a \b THROUGH!! */
case 'b': newstr.append(""\\b"");
break; /* switch */

case 't': newstr.append('\t');
break; /* switch */

case 'a': newstr.append('\007');
break; /* switch */

case 'e': newstr.append('\033');
break; /* switch */

/*
* A ""control"" character is what you get when you xor its
* codepoint with '@'==64. This only makes sense for ASCII,
* and may not yield a ""control"" character after all.
*
* Strange but true: ""\c{"" is "";"", ""\c}"" is ""="", etc.
*/
case 'c': {
if (++i == oldstr.length()) { die(""trailing \\c""); }
cp = oldstr.codePointAt(i);
/*
* don't need to grok surrogates, as next line blows them up
*/
if (cp > 0x7f) { die(""expected ASCII after \\c""); }
newstr.append(Character.toChars(cp ^ 64));
break; /* switch */
}

case '8':
case '9': die(""illegal octal digit"");
/* NOTREACHED */

/*
* may be 0 to 2 octal digits following this one
* so back up one for fallthrough to next case;
* unread this digit and fall through to next case.
*/
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7': --i;
/* FALLTHROUGH */

/*
* Can have 0, 1, or 2 octal digits following a 0
* this permits larger values than octal 377, up to
* octal 777.
*/
case '0': {
if (i+1 == oldstr.length()) {
/* found \0 at end of string */
newstr.append(Character.toChars(0));
break; /* switch */
}
i++;
int digits = 0;
int j;
for (j = 0; j <= 2; j++) {
if (i+j == oldstr.length()) {
break; /* for */
}
/* safe because will unread surrogate */
int ch = oldstr.charAt(i+j);
if (ch < '0' || ch > '7') {
break; /* for */
}
digits++;
}
if (digits == 0) {
--i;
newstr.append('\0');
break; /* switch */
}
int value = 0;
try {
value = Integer.parseInt(
oldstr.substring(i, i+digits), 8);
} catch (NumberFormatException nfe) {
die(""invalid octal value for \\0 escape"");
}
newstr.append(Character.toChars(value));
i += digits-1;
break; /* switch */
} /* end case '0' */

case 'x': {
if (i+2 > oldstr.length()) {
die(""string too short for \\x escape"");
}
i++;
boolean saw_brace = false;
if (oldstr.charAt(i) == '{') {
/* ^^^^^^ ok to ignore surrogates here */
i++;
saw_brace = true;
}
int j;
for (j = 0; j < 8; j++) {

if (!saw_brace && j == 2) {
break; /* for */
}

/*
* ASCII test also catches surrogates
*/
int ch = oldstr.charAt(i+j);
if (ch > 127) {
die(""illegal non-ASCII hex digit in \\x escape"");
}

if (saw_brace && ch == '}') { break; /* for */ }

if (! ( (ch >= '0' && ch <= '9')
||
(ch >= 'a' && ch <= 'f')
||
(ch >= 'A' && ch <= 'F')
)
)
{
die(String.format(
""illegal hex digit #%d '%c' in \\x"", ch, ch));
}

}
if (j == 0) { die(""empty braces in \\x{} escape""); }
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\x escape"");
}
newstr.append(Character.toChars(value));
if (saw_brace) { j++; }
i += j-1;
break; /* switch */
}

case 'u': {
if (i+4 > oldstr.length()) {
die(""string too short for \\u escape"");
}
i++;
int j;
for (j = 0; j < 4; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\u escape"");
}
}
int value = 0;
try {
value = Integer.parseInt( oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\u escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

case 'U': {
if (i+8 > oldstr.length()) {
die(""string too short for \\U escape"");
}
i++;
int j;
for (j = 0; j < 8; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\U escape"");
}
}
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\U escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

default: newstr.append('\\');
newstr.append(Character.toChars(cp));
/*
* say(String.format(
* ""DEFAULT unrecognized escape %c passed through"",
* cp));
*/
break; /* switch */

}
saw_backslash = false;
}

/* weird to leave one at the end */
if (saw_backslash) {
newstr.append('\\');
}

return newstr.toString();
}

/*
* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the
* xdigits of the logical Unicode code point. No bloody brain-damaged
* UTF-16 surrogate crap, just true logical characters.
*/
public final static
String uniplus(String s) {
if (s.length() == 0) {
return """";
}
/* This is just the minimum; sb will grow as needed. */
StringBuffer sb = new StringBuffer(2 + 3 * s.length());
sb.append(""U+"");
for (int i = 0; i < s.length(); i++) {
sb.append(String.format(""%X"", s.codePointAt(i)));
if (s.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}
if (i+1 < s.length()) {
sb.append(""."");
}
}
return sb.toString();
}

private static final
void die(String foa) {
throw new IllegalArgumentException(foa);
}

private static final
void say(String what) {
System.out.println(what);
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Review an answer - Decode Ways
----------Explanation----------
Now we have done all the necessary work for a simple (but working) recursive implementation:
----------Code Sample----------
static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail);
}

return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
return numDecodings(encodedText, new Integer[1 + encodedText.length()]);
}

static int numDecodings(String encodedText, Integer[] cache) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// check if this tail is already known in the cache
if (cache[encodedText.length()] != null) {
return cache[encodedText.length()];
}

// cache miss -- sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail, cache); // pass the cache through
}

// update the cache
cache[encodedText.length()] = sum;
return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
int[] cache = new int[encodedText.length() + 1];

// base case: the empty string at encodedText.length() is 1:
cache[encodedText.length()] = 1;

for (int position = encodedText.length() - 1; position >= 0; position--) {
// sum directly into the cache
for (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {
String head = encodedText.substring(position, position + headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
cache[position] += cache[position + headSize];
}
}

return cache[0];
}

static int numDecodings(String encodedText) {
// initialize the cache
int[] cache = {1, 0, 0};

for (int position = encodedText.length() - 1; position >= 0; position--) {
// rotate the cache
cache[2] = cache[1];
cache[1] = cache[0];
cache[0] = 0;

// headSize == 1
if (position + 0 < encodedText.length()) {
char c = encodedText.charAt(position + 0);

// 1 .. 9
if ('1' <= c && c <= '9') {
cache[0] += cache[1];
}
}

// headSize == 2
if (position + 1 < encodedText.length()) {
char c1 = encodedText.charAt(position + 0);
char c2 = encodedText.charAt(position + 1);

// 10 .. 19
if ('1' == c1) {
cache[0] += cache[2];
}
// 20 .. 26
else if ('2' == c1 && '0' <= c2 && c2 <= '6') {
cache[0] += cache[2];
}
}
}

return cache[0];
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Fastest way to iterate over all the chars in a String
----------Explanation----------

----------Code Sample----------
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final Field field = String.class.getDeclaredField(""value"");
field.setAccessible(true);

try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}

int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// avoid this at all costs
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0
2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5
4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6
8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4
16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5
32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2
64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0
128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6
256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8
512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4
1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2
2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1
4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0
8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0
16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0
32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0
65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0
131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0
262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5
2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8
4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0
8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8
16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6
32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7
64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1
128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7
256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3
512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1
1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0
2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0
4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9
8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9
16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9
32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9
65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9
131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9
262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.IntPredicate;

/**
* @author Saint Hill 
*/
public final class TestStrings {

// we will not test strings longer than 512KM
final int MAX_STRING_SIZE = 1024 * 256;

// for each string size, we will do all the tests
// this many times
final int TRIES_PER_STRING_SIZE = 1000;

public static void main(String[] args) throws Exception {
new TestStrings().run();
}

void run() throws Exception {

// double the length of the data until it reaches MAX chars long
// 0,1,2,4,8,16,32,64,128,256 ... 
final List sizes = new ArrayList<>();
for (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {
sizes.add(n);
}

// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)
final Random random = new Random();

System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== FORWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));
}

// reverse order or string sizes
Collections.reverse(sizes);

System.out.println("""");
System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== BACKWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));

}
}

///
///
/// METHODS OF CHECKING THE CONTENTS
/// OF A STRING. ALWAYS CHECKING FOR
/// WHITESPACE (CHAR <=' ')
/// 
///
// CHECK THE STRING CONTENTS
int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

// SAME AS ABOVE BUT USE String.length()
// instead of making a new final local int 
int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

// USE new Java-8 String's IntStream
// pass it a PREDICATE to do the checking
int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// OH LA LA - GO PARALLEL!!!
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// Re-fill a resuable char[] with the contents
// of the String's char[]
int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
// but use FOR-EACH
int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

// FANCY!
// OBTAIN FIELD FOR ACCESS TO THE STRING'S
// INTERNAL CHAR[]
int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

// same as above but use FOR-EACH
int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

/**
*
* Make a list of tests. We will shuffle a copy of this list repeatedly
* while we repeat this test.
*
* @param data
* @return
*/
List makeTests(String data) throws Exception {
// make a list of tests
final List tests = new ArrayList();

tests.add(new Jobber(""charAt1"") {
int check() {
return charAtMethod1(data);
}
});

tests.add(new Jobber(""charAt2"") {
int check() {
return charAtMethod2(data);
}
});

tests.add(new Jobber(""stream"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamMethod(data, predicate);
}
});

tests.add(new Jobber(""streamPar"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamParallelMethod(data, predicate);
}
});

// Reusable char[] method
tests.add(new Jobber(""reuse"") {
final char[] cbuff = new char[MAX_STRING_SIZE];

int check() {
return reuseBuffMethod(cbuff, data);
}
});

// New char[] from String
tests.add(new Jobber(""new1"") {
int check() {
return newMethod1(data);
}
});

// New char[] from String
tests.add(new Jobber(""new2"") {
int check() {
return newMethod2(data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field1"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod1(field, data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field2"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod2(field, data);
}
});

return tests;
}

/**
* We use this class to keep trac","['""""""Finding Largest String in ArrayList\n\n Im trying to find the largest String in my ArrayList and print it out and also to include what index the largest element resides at and to print that to screen too. Im just wondering where Im going wrong. import java.util.Scanner; import java.util.ArrayList; public class ArraylistString { public static void main(String [] args) { // Instance of Scanner class Scanner keyboardIn = new Scanner(System.in); // Declare an array list of Strings ArrayList<String> Str = new ArrayList<>(); // Add names to ArrayList Str.add(""Jim Bob""); Str.add(""Bobby Jones""); Str.add(""Rob Stiles""); int largestString = Str.size(); int index = 0; // Use for loop to print out elements from ArrayList for(int i = 0; i < Str.size(); i++) { // Test which String is the largest if(Str[i].size() > largestString) { largestString = Str[i].size(); index = i; } } // Output largest String and index it was found at System.out.println(""Index "" + index + "" ""+ Str[index] + "" "" + ""is the largest and is size "" + largestString); } }\n\nuser4536519user4536519\n\nYou could start by identifying how your program is misbehaving. â Scott Hunter Sep 15, 2015 at 19:17\n\nthink what initial value should largestString have if you are trying to maximize it. What do you mean by ""largest string""? â Scott Hunter Sep 15, 2015 at 19:19\n\nThis wouldn\'t compile at all. Str[i] is not a proper way to access a List. You can also use java.util.Collections.max or the Stream version:\n\nString max = Collections.max(strings, Comparator.comparing(String::length)); // or s -> s.length()\n\nString max = strings.stream().max(comparing(String::length)).get();\n\nString max = Collections.max(Str, new Comparator<String>() { @Override public int compare(String o1, String o2) { return o1.length() - o2.length(); } });\n\nSystem.out.println(""Index "" + arr.indexOf(max) + "" "" + max + "" "" + ""is the largest and is size "" + max.length());\n\nJohnny WillerJohnny Willer\n\n3,1\n\nThanks! Worked like a charm. Only one limitation with the logic is if there is more than one string having max length for example ""abcd"" and ""abca"" then too it will return only one result. Please try these code . Here i am trying with get() to access the ArrayList elements, which is working correctly. import java.util.Scanner; import java.util.ArrayList; class ArraylistString { public static void main(String args[]) { ArrayList<String> Str = new ArrayList<String>(); Str.add(""Jim Bob""); Str.add(""Bobby Jones""); Str.add(""Rob Stiles""); int largestString = Str.get(0).length(); int index = 0; for(int i = 0; i < Str.size(); i++) { if(Str.get(i).length() > largestString) { largestString = Str.get(i).length(); index = i; } } System.out.println(""Index "" + index + "" ""+ Str.get(index) + "" "" + ""is the largest and is size "" + largestString); } }\n\n\n\nYou have the correct idea, but wrong syntax. In Java, only arrays support the [] syntax. An ArrayList isn\'t an array, it\'s a class that implements the List interface, and you should use the get method to access its members. Similarly, a String doesn\'t have a size() method, it has a length() method. I would set your largestString variable to your first String that you add:\n\nint largestString = Str.get(0).length();\n\nThen you should use the following to check for the largest String:\n\nif(Str.get(i).length() > largestString) { largestString = Str.get(i).length(); index = i; }\n\nYou cannot index into an ArrayList with [] as you were trying to do. I would also suggest better variable names.""""""', '""""""If I saw Str as a variable I would think it was a String. Maybe try strList or something like that. Evan LaHurdEvan LaHurd\n\nFrom Java-8 and onwards:\n\nList<Integer> numList = Arrays.stream(Str).map(String::length).collect(Collectors.toList()); Integer m = numList.stream().mapToInt(i->i).max().orElse(4000); //get strings with their length int k = numList.indexOf(m); //index of String with Maximum Length System.out.println(Str.get(k)); //get your longest string\n\nVishwa RatnaVishwa Ratna\n\n5,Optional<String> op = Str.stream().sorted((e1,e2)-> e1.length() > e2.length() ? -1 :1).findFirst();\n\nWhile this code may solve the question, including an explanation of how and why this solves the problem would really help to improve the quality of your post, and probably result in more up-votes.""""""']",0.208333333,0.607142857,0.125
lang,String,Strings written to file do not preserve line breaks,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>âÃÃ¶âÂ§âÃÂ¢</code> to yield an extended alphabet <code>âÃ­Â¬Â£  := âÃ­Â¬Â£ âÃÃ¶ââ âÃÂ¢ {âÃÃ¶âÂ§âÃÂ¢}</code>.</p> <p>Let <code>âÃ­Â¬Â±</code> be a symbol and X a uniformly distributed random variable over <code>âÃ­Â¬Â£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>âÃ­Â¬â¢ = floor[32/logâÃÃ¶âÃ¡âÃ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Most common ways to construct:
String name = new String(""Alex"");
Based on 8 examples
 
StringBuffer sb = É;
String s = sb.toString();
Based on 6 examples



String	
truncate(int maxLength)

          Returns a new string with a length no longer than maxLength characters.


truncate

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public String truncate(int maxLength)
Returns a new string with a length no longer than maxLength characters.

UPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.
Parameters:
maxLength
Returns:
a new string with a length no longer than maxLength characters","When you use readline() the line breaks are removed. You have to re-insert them with

sb = sb.append(line).append(""\n"");","*******************usage scenario 1********************** 
----------usage scenario----------
How can I make a method return an argument that was passed to it?
----------Explanation----------
You can create an Answer in Mockito. Let's assume, we have an interface named Application with a method myFunction.
----------Code Sample----------
public interface Application {
public String myFunction(String abc);
}

public void testMyFunction() throws Exception {
Application mock = mock(Application.class);
when(mock.myFunction(anyString())).thenAnswer(new Answer() {
@Override
public String answer(InvocationOnMock invocation) throws Throwable {
Object[] args = invocation.getArguments();
return (String) args[0];
}
});

assertEquals(""someString"",mock.myFunction(""someString""));
assertEquals(""anotherString"",mock.myFunction(""anotherString""));
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Trim string in JavaScript?
----------Explanation----------
For those browsers who does not support trim() , you can use this polyfill from MDN :
----------Code Sample----------
if (!String.prototype.trim) {
(function() {
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
String.prototype.trim = function() {
return this.replace(rtrim, '');
};
})();
}

String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g, '');};

String.prototype.ltrim=function(){return this.replace(/^\s+/,'');};

String.prototype.rtrim=function(){return this.replace(/\s+$/,'');};

String.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');};
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?
----------Explanation----------
change your return type to ResponseEntity<String> , then you can use below for 400
----------Code Sample----------
return new ResponseEntity(HttpStatus.BAD_REQUEST);

return new ResponseEntity(json,HttpStatus.OK);
return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
return ResponseEntity.ok(json);
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Java Byte Array to String to Byte Array
----------Explanation----------
You can't just take the returned string and construct a string from it... it's not a byte[] data type anymore, it's already a string; you need to parse it. For example :
----------Code Sample----------
String response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script

String[] byteValues = response.substring(1, response.length() - 1).split("","");
byte[] bytes = new byte[byteValues.length];

for (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); 
}

String str = new String(bytes);

byte[] b1 = new byte[] {97, 98, 99};

String s1 = Arrays.toString(b1);
String s2 = new String(b1);

System.out.println(s1); // -> ""[97, 98, 99]""
System.out.println(s2); // -> ""abc"";
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Sprintf equivalent in Java
----------Explanation----------

----------Code Sample----------
// Store the formatted string in 'result'
String result = String.format(""%4d"", i * j);

// Write the result to standard output
System.out.println( result );
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to replace special characters in a string?
----------Explanation----------
That depends on what you mean. If you just want to get rid of them, do this: 
(Update: Apparently you want to keep digits as well, use the second lines in that case)
----------Code Sample----------
String alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");
String alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");

String alphaOnly = input.replaceAll(""[^\\p{Alpha}]+"","""");
String alphaAndDigits = input.replaceAll(""[^\\p{Alpha}\\p{Digit}]+"","""");

private static final CharMatcher ALNUM =
CharMatcher.inRange('a', 'z').or(CharMatcher.inRange('A', 'Z'))
.or(CharMatcher.inRange('0', '9')).precomputed();
// ...
String alphaAndDigits = ALNUM.retainFrom(input);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Get words around a position in a string
----------Explanation----------
You can achiveve that using String 's split() method . This solution is O(n) .
----------Code Sample----------
public static void main(String[] args) {
String str = ""Hello my name is John and I like to go fishing and ""+
""hiking I have two sisters and one brother."";
String find = ""I"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
if (sp[i].equals(find)) {
// have to check for ArrayIndexOutOfBoundsException
String surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +
(i-1 > 0 ? sp[i-1]+"" "" : """") +
sp[i] +
(i+1 < sp.length ? "" ""+sp[i+1] : """") +
(i+2 < sp.length ? "" ""+sp[i+2] : """");
System.out.println(surr);
}
}
}

public static void main(String[] args) {
String str = ""Hello my name is John and John and I like to go..."";
String find = ""John and"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces

String[] spMulti = find.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
int j = 0;
while (j < spMulti.length && i+j < sp.length 
&& sp[i+j].equals(spMulti[j])) {
j++;
} 
if (j == spMulti.length) { // found spMulti entirely
StringBuilder surr = new StringBuilder();
if (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }
if (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }
for (int k = 0; k < spMulti.length; k++) {
if (k > 0){ surr.append("" ""); }
surr.append(sp[i+k]);
}
if (i+spMulti.length < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length]);
}
if (i+spMulti.length+1 < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length+1]);
}
System.out.println(surr.toString());
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
JsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object
----------Explanation----------
Actually the problem was in ApplesDO Class:
----------Code Sample----------
public class ApplesDO {

private String apple;
public String getApple() {
return apple;
}
public void setApple(String apple) {
this.apple = apple;
public ApplesDO(CustomType custom) {
//constructor Code
//Introducing the dummy constructor
public ApplesDO() {
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Repeat String - Javascript
----------Explanation----------
I'd put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!
----------Code Sample----------
String.prototype.repeat = function( num )
{
return new Array( num + 1 ).join( this );
}

alert( ""string to repeat\n"".repeat( 4 ) );
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Is this valid Java?
----------Explanation----------
However, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:
----------Code Sample----------
.class public CallAmbiguousMethod
.super java/lang/Object

.method public static main([Ljava/lang/String;)V
.limit stack 3
.limit locals 1

; Call the method that returns String
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;

; Call the method that returns Integer
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;

return

.end method


java -jar jasmin.jar CallAmbiguousMethod.j


java CallAmbiguousMethod


> java CallAmbiguousMethod
strings
numbers

import java.util.Arrays;
import java.util.List;

class RealyCompilesAndRunsFine {

public static String f(List list) {
return list.get(0);
}

public static Integer f(List list) {
return list.get(0);
}

public static void main(String[] args) {
final String string = f(Arrays.asList(""asdf""));
final Integer integer = f(Arrays.asList(123));
System.out.println(string);
System.out.println(integer);
}

}


>javap -c RealyCompilesAndRunsFine
Compiled from ""RealyCompilesAndRunsFine.java""
class RealyCompilesAndRunsFine extends java.lang.Object{
RealyCompilesAndRunsFine();
Code:
0: aload_0
1: invokespecial #1; //Method java/lang/Object."""":()V
4: return

public static java.lang.String f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #3; //class java/lang/String
10: areturn

public static java.lang.Integer f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #4; //class java/lang/Integer
10: areturn

public static void main(java.lang.String[]);
Code:
0: iconst_1
1: anewarray #3; //class java/lang/String
4: dup
5: iconst_0
6: ldc #5; //String asdf
8: aastore
9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;
15: astore_1
16: iconst_1
17: anewarray #4; //class java/lang/Integer
20: dup
21: iconst_0
22: bipush 123
24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
27: aastore
28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;
34: astore_2
35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
38: aload_1
39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
45: aload_2
46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
49: return
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How to unescape a Java string literal in Java?
----------Explanation----------
Like many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:
----------Code Sample----------
/ 47 002F SOLIDUS
= slash, virgule
x (latin letter dental click - 01C0)
x (combining long solidus overlay - 0338)
x (fraction slash - 2044)
x (division slash - 2215)
\ 92 005C REVERSE SOLIDUS
= backslash
x (combining reverse solidus overlay - 20E5)
x (set minus - 2216)

/*
*
* unescape_perl_string()
*
* Tom Christiansen 
* Sun Nov 28 12:55:24 MST 2010
*
* It's completely ridiculous that there's no standard
* unescape_java_string function. Since I have to do the
* damn thing myself, I might as well make it halfway useful
* by supporting things Java was too stupid to consider in
* strings:
* 
* => ""?"" items are additions to Java string escapes
* but normal in Java regexes
*
* => ""!"" items are also additions to Java regex escapes
* 
* Standard singletons: ?\a ?\e \f \n \r \t
* 
* NB: \b is unsupported as backspace so it can pass-through
* to the regex translator untouched; I refuse to make anyone
* doublebackslash it as doublebackslashing is a Java idiocy
* I desperately wish would die out. There are plenty of
* other ways to write it:
*
* \cH, \12, \012, \x08 \x{8}, \u0008, \U00000008
*
* Octal escapes: \0 \0N \0NN \N \NN \NNN
* Can range up to !\777 not \377
* 
* TODO: add !\o{NNNNN}
* last Unicode is 4177777
* maxint is 37777777777
*
* Control chars: ?\cX
* Means: ord(X) ^ ord('@')
*
* Old hex escapes: \xXX
* unbraced must be 2 xdigits
*
* Perl hex escapes: !\x{XXX} braced may be 1-8 xdigits
* NB: proper Unicode never needs more than 6, as highest
* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF
*
* Lame Java escape: \[IDIOT JAVA PREPROCESSOR]uXXXX must be
* exactly 4 xdigits;
*
* I can't write XXXX in this comment where it belongs
* because the damned Java Preprocessor can't mind its
* own business. Idiots!
*
* Lame Python escape: !\UXXXXXXXX must be exactly 8 xdigits
* 
* TODO: Perl translation escapes: \Q \U \L \E \[IDIOT JAVA PREPROCESSOR]u \l
* These are not so important to cover if you're passing the
* result to Pattern.compile(), since it handles them for you
* further downstream. Hm, what about \[IDIOT JAVA PREPROCESSOR]u?
*
*/

public final static
String unescape_perl_string(String oldstr) {

/*
* In contrast to fixing Java's broken regex charclasses,
* this one need be no bigger, as unescaping shrinks the string
* here, where in the other one, it grows it.
*/

StringBuffer newstr = new StringBuffer(oldstr.length());

boolean saw_backslash = false;

for (int i = 0; i < oldstr.length(); i++) {
int cp = oldstr.codePointAt(i);
if (oldstr.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}

if (!saw_backslash) {
if (cp == '\\') {
saw_backslash = true;
} else {
newstr.append(Character.toChars(cp));
}
continue; /* switch */
}

if (cp == '\\') {
saw_backslash = false;
newstr.append('\\');
newstr.append('\\');
continue; /* switch */
}

switch (cp) {

case 'r': newstr.append('\r');
break; /* switch */

case 'n': newstr.append('\n');
break; /* switch */

case 'f': newstr.append('\f');
break; /* switch */

/* PASS a \b THROUGH!! */
case 'b': newstr.append(""\\b"");
break; /* switch */

case 't': newstr.append('\t');
break; /* switch */

case 'a': newstr.append('\007');
break; /* switch */

case 'e': newstr.append('\033');
break; /* switch */

/*
* A ""control"" character is what you get when you xor its
* codepoint with '@'==64. This only makes sense for ASCII,
* and may not yield a ""control"" character after all.
*
* Strange but true: ""\c{"" is "";"", ""\c}"" is ""="", etc.
*/
case 'c': {
if (++i == oldstr.length()) { die(""trailing \\c""); }
cp = oldstr.codePointAt(i);
/*
* don't need to grok surrogates, as next line blows them up
*/
if (cp > 0x7f) { die(""expected ASCII after \\c""); }
newstr.append(Character.toChars(cp ^ 64));
break; /* switch */
}

case '8':
case '9': die(""illegal octal digit"");
/* NOTREACHED */

/*
* may be 0 to 2 octal digits following this one
* so back up one for fallthrough to next case;
* unread this digit and fall through to next case.
*/
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7': --i;
/* FALLTHROUGH */

/*
* Can have 0, 1, or 2 octal digits following a 0
* this permits larger values than octal 377, up to
* octal 777.
*/
case '0': {
if (i+1 == oldstr.length()) {
/* found \0 at end of string */
newstr.append(Character.toChars(0));
break; /* switch */
}
i++;
int digits = 0;
int j;
for (j = 0; j <= 2; j++) {
if (i+j == oldstr.length()) {
break; /* for */
}
/* safe because will unread surrogate */
int ch = oldstr.charAt(i+j);
if (ch < '0' || ch > '7') {
break; /* for */
}
digits++;
}
if (digits == 0) {
--i;
newstr.append('\0');
break; /* switch */
}
int value = 0;
try {
value = Integer.parseInt(
oldstr.substring(i, i+digits), 8);
} catch (NumberFormatException nfe) {
die(""invalid octal value for \\0 escape"");
}
newstr.append(Character.toChars(value));
i += digits-1;
break; /* switch */
} /* end case '0' */

case 'x': {
if (i+2 > oldstr.length()) {
die(""string too short for \\x escape"");
}
i++;
boolean saw_brace = false;
if (oldstr.charAt(i) == '{') {
/* ^^^^^^ ok to ignore surrogates here */
i++;
saw_brace = true;
}
int j;
for (j = 0; j < 8; j++) {

if (!saw_brace && j == 2) {
break; /* for */
}

/*
* ASCII test also catches surrogates
*/
int ch = oldstr.charAt(i+j);
if (ch > 127) {
die(""illegal non-ASCII hex digit in \\x escape"");
}

if (saw_brace && ch == '}') { break; /* for */ }

if (! ( (ch >= '0' && ch <= '9')
||
(ch >= 'a' && ch <= 'f')
||
(ch >= 'A' && ch <= 'F')
)
)
{
die(String.format(
""illegal hex digit #%d '%c' in \\x"", ch, ch));
}

}
if (j == 0) { die(""empty braces in \\x{} escape""); }
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\x escape"");
}
newstr.append(Character.toChars(value));
if (saw_brace) { j++; }
i += j-1;
break; /* switch */
}

case 'u': {
if (i+4 > oldstr.length()) {
die(""string too short for \\u escape"");
}
i++;
int j;
for (j = 0; j < 4; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\u escape"");
}
}
int value = 0;
try {
value = Integer.parseInt( oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\u escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

case 'U': {
if (i+8 > oldstr.length()) {
die(""string too short for \\U escape"");
}
i++;
int j;
for (j = 0; j < 8; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\U escape"");
}
}
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\U escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

default: newstr.append('\\');
newstr.append(Character.toChars(cp));
/*
* say(String.format(
* ""DEFAULT unrecognized escape %c passed through"",
* cp));
*/
break; /* switch */

}
saw_backslash = false;
}

/* weird to leave one at the end */
if (saw_backslash) {
newstr.append('\\');
}

return newstr.toString();
}

/*
* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the
* xdigits of the logical Unicode code point. No bloody brain-damaged
* UTF-16 surrogate crap, just true logical characters.
*/
public final static
String uniplus(String s) {
if (s.length() == 0) {
return """";
}
/* This is just the minimum; sb will grow as needed. */
StringBuffer sb = new StringBuffer(2 + 3 * s.length());
sb.append(""U+"");
for (int i = 0; i < s.length(); i++) {
sb.append(String.format(""%X"", s.codePointAt(i)));
if (s.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}
if (i+1 < s.length()) {
sb.append(""."");
}
}
return sb.toString();
}

private static final
void die(String foa) {
throw new IllegalArgumentException(foa);
}

private static final
void say(String what) {
System.out.println(what);
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Review an answer - Decode Ways
----------Explanation----------
Now we have done all the necessary work for a simple (but working) recursive implementation:
----------Code Sample----------
static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail);
}

return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
return numDecodings(encodedText, new Integer[1 + encodedText.length()]);
}

static int numDecodings(String encodedText, Integer[] cache) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// check if this tail is already known in the cache
if (cache[encodedText.length()] != null) {
return cache[encodedText.length()];
}

// cache miss -- sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail, cache); // pass the cache through
}

// update the cache
cache[encodedText.length()] = sum;
return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
int[] cache = new int[encodedText.length() + 1];

// base case: the empty string at encodedText.length() is 1:
cache[encodedText.length()] = 1;

for (int position = encodedText.length() - 1; position >= 0; position--) {
// sum directly into the cache
for (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {
String head = encodedText.substring(position, position + headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
cache[position] += cache[position + headSize];
}
}

return cache[0];
}

static int numDecodings(String encodedText) {
// initialize the cache
int[] cache = {1, 0, 0};

for (int position = encodedText.length() - 1; position >= 0; position--) {
// rotate the cache
cache[2] = cache[1];
cache[1] = cache[0];
cache[0] = 0;

// headSize == 1
if (position + 0 < encodedText.length()) {
char c = encodedText.charAt(position + 0);

// 1 .. 9
if ('1' <= c && c <= '9') {
cache[0] += cache[1];
}
}

// headSize == 2
if (position + 1 < encodedText.length()) {
char c1 = encodedText.charAt(position + 0);
char c2 = encodedText.charAt(position + 1);

// 10 .. 19
if ('1' == c1) {
cache[0] += cache[2];
}
// 20 .. 26
else if ('2' == c1 && '0' <= c2 && c2 <= '6') {
cache[0] += cache[2];
}
}
}

return cache[0];
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Fastest way to iterate over all the chars in a String
----------Explanation----------

----------Code Sample----------
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final Field field = String.class.getDeclaredField(""value"");
field.setAccessible(true);

try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}

int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// avoid this at all costs
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0
2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5
4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6
8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4
16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5
32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2
64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0
128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6
256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8
512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4
1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2
2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1
4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0
8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0
16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0
32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0
65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0
131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0
262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5
2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8
4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0
8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8
16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6
32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7
64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1
128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7
256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3
512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1
1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0
2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0
4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9
8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9
16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9
32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9
65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9
131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9
262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.IntPredicate;

/**
* @author Saint Hill 
*/
public final class TestStrings {

// we will not test strings longer than 512KM
final int MAX_STRING_SIZE = 1024 * 256;

// for each string size, we will do all the tests
// this many times
final int TRIES_PER_STRING_SIZE = 1000;

public static void main(String[] args) throws Exception {
new TestStrings().run();
}

void run() throws Exception {

// double the length of the data until it reaches MAX chars long
// 0,1,2,4,8,16,32,64,128,256 ... 
final List sizes = new ArrayList<>();
for (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {
sizes.add(n);
}

// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)
final Random random = new Random();

System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== FORWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));
}

// reverse order or string sizes
Collections.reverse(sizes);

System.out.println("""");
System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== BACKWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));

}
}

///
///
/// METHODS OF CHECKING THE CONTENTS
/// OF A STRING. ALWAYS CHECKING FOR
/// WHITESPACE (CHAR <=' ')
/// 
///
// CHECK THE STRING CONTENTS
int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

// SAME AS ABOVE BUT USE String.length()
// instead of making a new final local int 
int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

// USE new Java-8 String's IntStream
// pass it a PREDICATE to do the checking
int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// OH LA LA - GO PARALLEL!!!
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// Re-fill a resuable char[] with the contents
// of the String's char[]
int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
// but use FOR-EACH
int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

// FANCY!
// OBTAIN FIELD FOR ACCESS TO THE STRING'S
// INTERNAL CHAR[]
int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

// same as above but use FOR-EACH
int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

/**
*
* Make a list of tests. We will shuffle a copy of this list repeatedly
* while we repeat this test.
*
* @param data
* @return
*/
List makeTests(String data) throws Exception {
// make a list of tests
final List tests = new ArrayList();

tests.add(new Jobber(""charAt1"") {
int check() {
return charAtMethod1(data);
}
});

tests.add(new Jobber(""charAt2"") {
int check() {
return charAtMethod2(data);
}
});

tests.add(new Jobber(""stream"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamMethod(data, predicate);
}
});

tests.add(new Jobber(""streamPar"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamParallelMethod(data, predicate);
}
});

// Reusable char[] method
tests.add(new Jobber(""reuse"") {
final char[] cbuff = new char[MAX_STRING_SIZE];

int check() {
return reuseBuffMethod(cbuff, data);
}
});

// New char[] from String
tests.add(new Jobber(""new1"") {
int check() {
return newMethod1(data);
}
});

// New char[] from String
tests.add(new Jobber(""new2"") {
int check() {
return newMethod2(data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field1"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod1(field, data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field2"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod2(field, data);
}
});

return tests;
}

/**
* We use this class to keep trac","['""""""Strings written to file do not preserve line breaks\n\nI am trying to write a String(lengthy but wrapped), which is from JTextArea. When the string printed to console, formatting is same as it was in Text Area, but when I write them to file using BufferedWriter, it is writing that String in single line. Following snippet can reproduce it:\n\npublic class BufferedWriterTest { public static void main(String[] args) throws IOException { String string = ""This is lengthy string that contains many words. So\\nI am wrapping it.""; System.out.println(string); File file = new File(""C:/Users/User/Desktop/text.txt""); FileWriter fileWriter = new FileWriter(file); BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); bufferedWriter.write(string); bufferedWriter.close(); } }\n\nWhat went wrong? How to resolve this?""""""', '"""""":(\n\nThere may be better ways that than, but it sounds like that solution would work for you.\n\nIf you wish to keep the carriage return characters from a Java string into a file. Just replace each break line character (which is recognized in java as: \\n) as per the following statement:\n\nTempHtml = TempHtml.replaceAll(""\\n"", ""\\r\\n"");\n\nHere is an code example,\n\n// When Execute button is pressed String TempHtml = textArea.getText(); TempHtml = TempHtml.replaceAll(""\\n"", ""\\r\\n""); try (PrintStream out = new PrintStream(new FileOutputStream(""C:/Temp/temp.html""))) { out.print(TempHtml); } catch (FileNotFoundException e) { // TODO Auto-generated catch block e.printStackTrace(); } System.out.println(TempHtml);\n\nSupercoderSupercoder\n\n1,If you are using a BufferedWriter, you could also use the .newline() method to re-add the newline based on your platform. See this related question: Strings written to file do not preserve line breaks\n\nChristian VielmaChristian Vielma\n\n""""""']",0.208333333,0.5,1
lang,String,Converting an int to a binary string representation in Java?,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>âÃÃ¶âÂ§âÃÂ¢</code> to yield an extended alphabet <code>âÃ­Â¬Â£  := âÃ­Â¬Â£ âÃÃ¶ââ âÃÂ¢ {âÃÃ¶âÂ§âÃÂ¢}</code>.</p> <p>Let <code>âÃ­Â¬Â±</code> be a symbol and X a uniformly distributed random variable over <code>âÃ­Â¬Â£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>âÃ­Â¬â¢ = floor[32/logâÃÃ¶âÃ¡âÃ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Most common ways to construct:
String name = new String(""Alex"");
Based on 8 examples
 
StringBuffer sb = É;
String s = sb.toString();
Based on 6 examples



String	
truncate(int maxLength)

          Returns a new string with a length no longer than maxLength characters.


truncate

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public String truncate(int maxLength)
Returns a new string with a length no longer than maxLength characters.

UPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.
Parameters:
maxLength
Returns:
a new string with a length no longer than maxLength characters","Convert Integer to Binary:

import java.util.Scanner;

public class IntegerToBinary {

    public static void main(String[] args) {

        Scanner input = new Scanner( System.in );

        System.out.println(""Enter Integer: "");
        String integerString =input.nextLine();

        System.out.println(""Binary Number: ""+Integer.toBinaryString(Integer.parseInt(integerString)));
    }

}
Output:

Enter Integer:

10

Binary Number: 1010","*******************usage scenario 1********************** 
----------usage scenario----------
How can I make a method return an argument that was passed to it?
----------Explanation----------
You can create an Answer in Mockito. Let's assume, we have an interface named Application with a method myFunction.
----------Code Sample----------
public interface Application {
public String myFunction(String abc);
}

public void testMyFunction() throws Exception {
Application mock = mock(Application.class);
when(mock.myFunction(anyString())).thenAnswer(new Answer() {
@Override
public String answer(InvocationOnMock invocation) throws Throwable {
Object[] args = invocation.getArguments();
return (String) args[0];
}
});

assertEquals(""someString"",mock.myFunction(""someString""));
assertEquals(""anotherString"",mock.myFunction(""anotherString""));
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Trim string in JavaScript?
----------Explanation----------
For those browsers who does not support trim() , you can use this polyfill from MDN :
----------Code Sample----------
if (!String.prototype.trim) {
(function() {
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
String.prototype.trim = function() {
return this.replace(rtrim, '');
};
})();
}

String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g, '');};

String.prototype.ltrim=function(){return this.replace(/^\s+/,'');};

String.prototype.rtrim=function(){return this.replace(/\s+$/,'');};

String.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');};
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?
----------Explanation----------
change your return type to ResponseEntity<String> , then you can use below for 400
----------Code Sample----------
return new ResponseEntity(HttpStatus.BAD_REQUEST);

return new ResponseEntity(json,HttpStatus.OK);
return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
return ResponseEntity.ok(json);
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Java Byte Array to String to Byte Array
----------Explanation----------
You can't just take the returned string and construct a string from it... it's not a byte[] data type anymore, it's already a string; you need to parse it. For example :
----------Code Sample----------
String response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script

String[] byteValues = response.substring(1, response.length() - 1).split("","");
byte[] bytes = new byte[byteValues.length];

for (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); 
}

String str = new String(bytes);

byte[] b1 = new byte[] {97, 98, 99};

String s1 = Arrays.toString(b1);
String s2 = new String(b1);

System.out.println(s1); // -> ""[97, 98, 99]""
System.out.println(s2); // -> ""abc"";
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Sprintf equivalent in Java
----------Explanation----------

----------Code Sample----------
// Store the formatted string in 'result'
String result = String.format(""%4d"", i * j);

// Write the result to standard output
System.out.println( result );
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to replace special characters in a string?
----------Explanation----------
That depends on what you mean. If you just want to get rid of them, do this: 
(Update: Apparently you want to keep digits as well, use the second lines in that case)
----------Code Sample----------
String alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");
String alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");

String alphaOnly = input.replaceAll(""[^\\p{Alpha}]+"","""");
String alphaAndDigits = input.replaceAll(""[^\\p{Alpha}\\p{Digit}]+"","""");

private static final CharMatcher ALNUM =
CharMatcher.inRange('a', 'z').or(CharMatcher.inRange('A', 'Z'))
.or(CharMatcher.inRange('0', '9')).precomputed();
// ...
String alphaAndDigits = ALNUM.retainFrom(input);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Get words around a position in a string
----------Explanation----------
You can achiveve that using String 's split() method . This solution is O(n) .
----------Code Sample----------
public static void main(String[] args) {
String str = ""Hello my name is John and I like to go fishing and ""+
""hiking I have two sisters and one brother."";
String find = ""I"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
if (sp[i].equals(find)) {
// have to check for ArrayIndexOutOfBoundsException
String surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +
(i-1 > 0 ? sp[i-1]+"" "" : """") +
sp[i] +
(i+1 < sp.length ? "" ""+sp[i+1] : """") +
(i+2 < sp.length ? "" ""+sp[i+2] : """");
System.out.println(surr);
}
}
}

public static void main(String[] args) {
String str = ""Hello my name is John and John and I like to go..."";
String find = ""John and"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces

String[] spMulti = find.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
int j = 0;
while (j < spMulti.length && i+j < sp.length 
&& sp[i+j].equals(spMulti[j])) {
j++;
} 
if (j == spMulti.length) { // found spMulti entirely
StringBuilder surr = new StringBuilder();
if (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }
if (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }
for (int k = 0; k < spMulti.length; k++) {
if (k > 0){ surr.append("" ""); }
surr.append(sp[i+k]);
}
if (i+spMulti.length < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length]);
}
if (i+spMulti.length+1 < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length+1]);
}
System.out.println(surr.toString());
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
JsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object
----------Explanation----------
Actually the problem was in ApplesDO Class:
----------Code Sample----------
public class ApplesDO {

private String apple;
public String getApple() {
return apple;
}
public void setApple(String apple) {
this.apple = apple;
public ApplesDO(CustomType custom) {
//constructor Code
//Introducing the dummy constructor
public ApplesDO() {
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Repeat String - Javascript
----------Explanation----------
I'd put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!
----------Code Sample----------
String.prototype.repeat = function( num )
{
return new Array( num + 1 ).join( this );
}

alert( ""string to repeat\n"".repeat( 4 ) );
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Is this valid Java?
----------Explanation----------
However, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:
----------Code Sample----------
.class public CallAmbiguousMethod
.super java/lang/Object

.method public static main([Ljava/lang/String;)V
.limit stack 3
.limit locals 1

; Call the method that returns String
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;

; Call the method that returns Integer
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;

return

.end method


java -jar jasmin.jar CallAmbiguousMethod.j


java CallAmbiguousMethod


> java CallAmbiguousMethod
strings
numbers

import java.util.Arrays;
import java.util.List;

class RealyCompilesAndRunsFine {

public static String f(List list) {
return list.get(0);
}

public static Integer f(List list) {
return list.get(0);
}

public static void main(String[] args) {
final String string = f(Arrays.asList(""asdf""));
final Integer integer = f(Arrays.asList(123));
System.out.println(string);
System.out.println(integer);
}

}


>javap -c RealyCompilesAndRunsFine
Compiled from ""RealyCompilesAndRunsFine.java""
class RealyCompilesAndRunsFine extends java.lang.Object{
RealyCompilesAndRunsFine();
Code:
0: aload_0
1: invokespecial #1; //Method java/lang/Object."""":()V
4: return

public static java.lang.String f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #3; //class java/lang/String
10: areturn

public static java.lang.Integer f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #4; //class java/lang/Integer
10: areturn

public static void main(java.lang.String[]);
Code:
0: iconst_1
1: anewarray #3; //class java/lang/String
4: dup
5: iconst_0
6: ldc #5; //String asdf
8: aastore
9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;
15: astore_1
16: iconst_1
17: anewarray #4; //class java/lang/Integer
20: dup
21: iconst_0
22: bipush 123
24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
27: aastore
28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;
34: astore_2
35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
38: aload_1
39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
45: aload_2
46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
49: return
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How to unescape a Java string literal in Java?
----------Explanation----------
Like many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:
----------Code Sample----------
/ 47 002F SOLIDUS
= slash, virgule
x (latin letter dental click - 01C0)
x (combining long solidus overlay - 0338)
x (fraction slash - 2044)
x (division slash - 2215)
\ 92 005C REVERSE SOLIDUS
= backslash
x (combining reverse solidus overlay - 20E5)
x (set minus - 2216)

/*
*
* unescape_perl_string()
*
* Tom Christiansen 
* Sun Nov 28 12:55:24 MST 2010
*
* It's completely ridiculous that there's no standard
* unescape_java_string function. Since I have to do the
* damn thing myself, I might as well make it halfway useful
* by supporting things Java was too stupid to consider in
* strings:
* 
* => ""?"" items are additions to Java string escapes
* but normal in Java regexes
*
* => ""!"" items are also additions to Java regex escapes
* 
* Standard singletons: ?\a ?\e \f \n \r \t
* 
* NB: \b is unsupported as backspace so it can pass-through
* to the regex translator untouched; I refuse to make anyone
* doublebackslash it as doublebackslashing is a Java idiocy
* I desperately wish would die out. There are plenty of
* other ways to write it:
*
* \cH, \12, \012, \x08 \x{8}, \u0008, \U00000008
*
* Octal escapes: \0 \0N \0NN \N \NN \NNN
* Can range up to !\777 not \377
* 
* TODO: add !\o{NNNNN}
* last Unicode is 4177777
* maxint is 37777777777
*
* Control chars: ?\cX
* Means: ord(X) ^ ord('@')
*
* Old hex escapes: \xXX
* unbraced must be 2 xdigits
*
* Perl hex escapes: !\x{XXX} braced may be 1-8 xdigits
* NB: proper Unicode never needs more than 6, as highest
* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF
*
* Lame Java escape: \[IDIOT JAVA PREPROCESSOR]uXXXX must be
* exactly 4 xdigits;
*
* I can't write XXXX in this comment where it belongs
* because the damned Java Preprocessor can't mind its
* own business. Idiots!
*
* Lame Python escape: !\UXXXXXXXX must be exactly 8 xdigits
* 
* TODO: Perl translation escapes: \Q \U \L \E \[IDIOT JAVA PREPROCESSOR]u \l
* These are not so important to cover if you're passing the
* result to Pattern.compile(), since it handles them for you
* further downstream. Hm, what about \[IDIOT JAVA PREPROCESSOR]u?
*
*/

public final static
String unescape_perl_string(String oldstr) {

/*
* In contrast to fixing Java's broken regex charclasses,
* this one need be no bigger, as unescaping shrinks the string
* here, where in the other one, it grows it.
*/

StringBuffer newstr = new StringBuffer(oldstr.length());

boolean saw_backslash = false;

for (int i = 0; i < oldstr.length(); i++) {
int cp = oldstr.codePointAt(i);
if (oldstr.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}

if (!saw_backslash) {
if (cp == '\\') {
saw_backslash = true;
} else {
newstr.append(Character.toChars(cp));
}
continue; /* switch */
}

if (cp == '\\') {
saw_backslash = false;
newstr.append('\\');
newstr.append('\\');
continue; /* switch */
}

switch (cp) {

case 'r': newstr.append('\r');
break; /* switch */

case 'n': newstr.append('\n');
break; /* switch */

case 'f': newstr.append('\f');
break; /* switch */

/* PASS a \b THROUGH!! */
case 'b': newstr.append(""\\b"");
break; /* switch */

case 't': newstr.append('\t');
break; /* switch */

case 'a': newstr.append('\007');
break; /* switch */

case 'e': newstr.append('\033');
break; /* switch */

/*
* A ""control"" character is what you get when you xor its
* codepoint with '@'==64. This only makes sense for ASCII,
* and may not yield a ""control"" character after all.
*
* Strange but true: ""\c{"" is "";"", ""\c}"" is ""="", etc.
*/
case 'c': {
if (++i == oldstr.length()) { die(""trailing \\c""); }
cp = oldstr.codePointAt(i);
/*
* don't need to grok surrogates, as next line blows them up
*/
if (cp > 0x7f) { die(""expected ASCII after \\c""); }
newstr.append(Character.toChars(cp ^ 64));
break; /* switch */
}

case '8':
case '9': die(""illegal octal digit"");
/* NOTREACHED */

/*
* may be 0 to 2 octal digits following this one
* so back up one for fallthrough to next case;
* unread this digit and fall through to next case.
*/
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7': --i;
/* FALLTHROUGH */

/*
* Can have 0, 1, or 2 octal digits following a 0
* this permits larger values than octal 377, up to
* octal 777.
*/
case '0': {
if (i+1 == oldstr.length()) {
/* found \0 at end of string */
newstr.append(Character.toChars(0));
break; /* switch */
}
i++;
int digits = 0;
int j;
for (j = 0; j <= 2; j++) {
if (i+j == oldstr.length()) {
break; /* for */
}
/* safe because will unread surrogate */
int ch = oldstr.charAt(i+j);
if (ch < '0' || ch > '7') {
break; /* for */
}
digits++;
}
if (digits == 0) {
--i;
newstr.append('\0');
break; /* switch */
}
int value = 0;
try {
value = Integer.parseInt(
oldstr.substring(i, i+digits), 8);
} catch (NumberFormatException nfe) {
die(""invalid octal value for \\0 escape"");
}
newstr.append(Character.toChars(value));
i += digits-1;
break; /* switch */
} /* end case '0' */

case 'x': {
if (i+2 > oldstr.length()) {
die(""string too short for \\x escape"");
}
i++;
boolean saw_brace = false;
if (oldstr.charAt(i) == '{') {
/* ^^^^^^ ok to ignore surrogates here */
i++;
saw_brace = true;
}
int j;
for (j = 0; j < 8; j++) {

if (!saw_brace && j == 2) {
break; /* for */
}

/*
* ASCII test also catches surrogates
*/
int ch = oldstr.charAt(i+j);
if (ch > 127) {
die(""illegal non-ASCII hex digit in \\x escape"");
}

if (saw_brace && ch == '}') { break; /* for */ }

if (! ( (ch >= '0' && ch <= '9')
||
(ch >= 'a' && ch <= 'f')
||
(ch >= 'A' && ch <= 'F')
)
)
{
die(String.format(
""illegal hex digit #%d '%c' in \\x"", ch, ch));
}

}
if (j == 0) { die(""empty braces in \\x{} escape""); }
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\x escape"");
}
newstr.append(Character.toChars(value));
if (saw_brace) { j++; }
i += j-1;
break; /* switch */
}

case 'u': {
if (i+4 > oldstr.length()) {
die(""string too short for \\u escape"");
}
i++;
int j;
for (j = 0; j < 4; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\u escape"");
}
}
int value = 0;
try {
value = Integer.parseInt( oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\u escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

case 'U': {
if (i+8 > oldstr.length()) {
die(""string too short for \\U escape"");
}
i++;
int j;
for (j = 0; j < 8; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\U escape"");
}
}
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\U escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

default: newstr.append('\\');
newstr.append(Character.toChars(cp));
/*
* say(String.format(
* ""DEFAULT unrecognized escape %c passed through"",
* cp));
*/
break; /* switch */

}
saw_backslash = false;
}

/* weird to leave one at the end */
if (saw_backslash) {
newstr.append('\\');
}

return newstr.toString();
}

/*
* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the
* xdigits of the logical Unicode code point. No bloody brain-damaged
* UTF-16 surrogate crap, just true logical characters.
*/
public final static
String uniplus(String s) {
if (s.length() == 0) {
return """";
}
/* This is just the minimum; sb will grow as needed. */
StringBuffer sb = new StringBuffer(2 + 3 * s.length());
sb.append(""U+"");
for (int i = 0; i < s.length(); i++) {
sb.append(String.format(""%X"", s.codePointAt(i)));
if (s.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}
if (i+1 < s.length()) {
sb.append(""."");
}
}
return sb.toString();
}

private static final
void die(String foa) {
throw new IllegalArgumentException(foa);
}

private static final
void say(String what) {
System.out.println(what);
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Review an answer - Decode Ways
----------Explanation----------
Now we have done all the necessary work for a simple (but working) recursive implementation:
----------Code Sample----------
static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail);
}

return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
return numDecodings(encodedText, new Integer[1 + encodedText.length()]);
}

static int numDecodings(String encodedText, Integer[] cache) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// check if this tail is already known in the cache
if (cache[encodedText.length()] != null) {
return cache[encodedText.length()];
}

// cache miss -- sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail, cache); // pass the cache through
}

// update the cache
cache[encodedText.length()] = sum;
return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
int[] cache = new int[encodedText.length() + 1];

// base case: the empty string at encodedText.length() is 1:
cache[encodedText.length()] = 1;

for (int position = encodedText.length() - 1; position >= 0; position--) {
// sum directly into the cache
for (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {
String head = encodedText.substring(position, position + headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
cache[position] += cache[position + headSize];
}
}

return cache[0];
}

static int numDecodings(String encodedText) {
// initialize the cache
int[] cache = {1, 0, 0};

for (int position = encodedText.length() - 1; position >= 0; position--) {
// rotate the cache
cache[2] = cache[1];
cache[1] = cache[0];
cache[0] = 0;

// headSize == 1
if (position + 0 < encodedText.length()) {
char c = encodedText.charAt(position + 0);

// 1 .. 9
if ('1' <= c && c <= '9') {
cache[0] += cache[1];
}
}

// headSize == 2
if (position + 1 < encodedText.length()) {
char c1 = encodedText.charAt(position + 0);
char c2 = encodedText.charAt(position + 1);

// 10 .. 19
if ('1' == c1) {
cache[0] += cache[2];
}
// 20 .. 26
else if ('2' == c1 && '0' <= c2 && c2 <= '6') {
cache[0] += cache[2];
}
}
}

return cache[0];
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Fastest way to iterate over all the chars in a String
----------Explanation----------

----------Code Sample----------
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final Field field = String.class.getDeclaredField(""value"");
field.setAccessible(true);

try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}

int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// avoid this at all costs
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0
2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5
4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6
8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4
16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5
32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2
64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0
128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6
256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8
512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4
1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2
2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1
4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0
8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0
16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0
32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0
65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0
131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0
262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5
2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8
4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0
8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8
16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6
32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7
64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1
128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7
256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3
512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1
1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0
2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0
4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9
8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9
16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9
32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9
65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9
131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9
262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.IntPredicate;

/**
* @author Saint Hill 
*/
public final class TestStrings {

// we will not test strings longer than 512KM
final int MAX_STRING_SIZE = 1024 * 256;

// for each string size, we will do all the tests
// this many times
final int TRIES_PER_STRING_SIZE = 1000;

public static void main(String[] args) throws Exception {
new TestStrings().run();
}

void run() throws Exception {

// double the length of the data until it reaches MAX chars long
// 0,1,2,4,8,16,32,64,128,256 ... 
final List sizes = new ArrayList<>();
for (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {
sizes.add(n);
}

// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)
final Random random = new Random();

System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== FORWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));
}

// reverse order or string sizes
Collections.reverse(sizes);

System.out.println("""");
System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== BACKWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));

}
}

///
///
/// METHODS OF CHECKING THE CONTENTS
/// OF A STRING. ALWAYS CHECKING FOR
/// WHITESPACE (CHAR <=' ')
/// 
///
// CHECK THE STRING CONTENTS
int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

// SAME AS ABOVE BUT USE String.length()
// instead of making a new final local int 
int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

// USE new Java-8 String's IntStream
// pass it a PREDICATE to do the checking
int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// OH LA LA - GO PARALLEL!!!
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// Re-fill a resuable char[] with the contents
// of the String's char[]
int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
// but use FOR-EACH
int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

// FANCY!
// OBTAIN FIELD FOR ACCESS TO THE STRING'S
// INTERNAL CHAR[]
int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

// same as above but use FOR-EACH
int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

/**
*
* Make a list of tests. We will shuffle a copy of this list repeatedly
* while we repeat this test.
*
* @param data
* @return
*/
List makeTests(String data) throws Exception {
// make a list of tests
final List tests = new ArrayList();

tests.add(new Jobber(""charAt1"") {
int check() {
return charAtMethod1(data);
}
});

tests.add(new Jobber(""charAt2"") {
int check() {
return charAtMethod2(data);
}
});

tests.add(new Jobber(""stream"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamMethod(data, predicate);
}
});

tests.add(new Jobber(""streamPar"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamParallelMethod(data, predicate);
}
});

// Reusable char[] method
tests.add(new Jobber(""reuse"") {
final char[] cbuff = new char[MAX_STRING_SIZE];

int check() {
return reuseBuffMethod(cbuff, data);
}
});

// New char[] from String
tests.add(new Jobber(""new1"") {
int check() {
return newMethod1(data);
}
});

// New char[] from String
tests.add(new Jobber(""new2"") {
int check() {
return newMethod2(data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field1"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod1(field, data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field2"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod2(field, data);
}
});

return tests;
}

/**
* We use this class to keep trac","['""""""Converting an int to a binary string representation in Java? What would be the best way (ideally, simplest) to convert an int to a binary string representation in Java? For example, say the int is 156. The binary string representation of this would be ""10011100"". 7,Tyler TreatTyler Treat\n\nInteger.toBinaryString(int i)\n\n3\n\n@Jack is there a way to get the binary string in a fixed number of bits like, decimal 8 in 8bit binary which 00001000\n\n\n\n@KasunSiyambalapitiya you could use StringUtils.leftPad from apache commons. Or you could do something like this to get the preceding zeroes: String.format(""%8s"", Integer.toBinaryString(i)).replace(\' \', \'0\')\n\n\n\nThere is also the java.lang.Integer.toString(int i, int base) method, which would be more appropriate if your code might one day handle bases other than 2 (binary). Keep in mind that this method only gives you an unsigned representation of the integer i, and if it is negative, it will tack on a negative sign at the front. It won\'t use two\'s complement. 4,0\n\npublic static string intToBinary(int n) { String s = """"; while (n > 0) { s = ( (n % 2 ) == 0 ? ""0"" : ""1"") +s; n = n / 2; } return s; }\n\nAriel BadillaAriel Badilla\n\n1\n\nThis code will not work with negative integers\n\n\n\nOne more way- By using java.lang.Integer you can get string representation of the first argument i in the radix (Octal - 8, Hex - 16, Binary - 2) specified by the second argument. Integer.toString(i, radix)\n\nprivate void getStrtingRadix() { // TODO Auto-generated method stub /* returns the string representation of the unsigned integer in concern radix*/ System.out.println(""Binary eqivalent of 100 = "" + Integer.toString(100, 2)); System.out.println(""Octal eqivalent of 100 = "" + Integer.toString(100, 8)); System.out.println(""Decimal eqivalent of 100 = "" + Integer.toString(100, 10)); System.out.println(""Hexadecimal eqivalent of 100 = "" + Integer.toString(100, 16)); }\n\nBinary eqivalent of 100 = 1100100 Octal eqivalent of 100 = 144 Decimal eqivalent of 100 = 100 Hexadecimal eqivalent of 100 = 64\n\nRupesh YadavRupesh Yadav\n\npublic class Main { public static String toBinary(int n, int l ) throws Exception { double pow = Math.pow(2, l); StringBuilder binary = new StringBuilder(); if ( pow < n ) { throw new Exception(""The length must be big from number ""); } int shift = l- 1; for (; shift >= 0 ; shift--) { int bit = (n >> shift) & 1; if (bit == 1) { binary.append(""1""); } else { binary.append(""0""); } } return binary.toString(); } public static void main(String[] args) throws Exception { System.out.println("" binary = "" + toBinary(7, 4)); System.out.println("" binary = "" + Integer.toString(7,2)); } }\n\nArtavazd ManukyanArtavazd Manukyan\n\n2\n\nResults binary = 0111 binary = 111\n\n\n\nString hexString = String.format(""%2s"", Integer.toHexString(h)).replace(\' \', \'0\');\n\n\n\nThis is something I wrote a few minutes ago just messing around. Hope it helps! public class Main { public static void main(String[] args) { ArrayList<Integer> powers = new ArrayList<Integer>(); ArrayList<Integer> binaryStore = new ArrayList<Integer>(); powers.add(128); powers.add(64); powers.add(32); powers.add(16); powers.add(8); powers.add(4); powers.add(2); powers.add(1); Scanner sc = new Scanner(System.in); System.out.println(""Welcome to Paden9000 binary converter. Please enter an integer you wish to convert: ""); int input = sc.nextInt(); int printableInput = input; for (int i : powers) { if (input < i) { binaryStore.add(0); } else { input = input - i; binaryStore.add(1); } } String newString= binaryStore.toString(); String finalOutput = newString.replace(""["", """") .replace("" "", """") .replace(""]"", """") .replace("","", """"); System.out.println(""Integer value: "" + printableInput + ""\\nBinary value: "" + finalOutput); sc.close(); }\n\nConvert Integer to Binary:\n\nimport java.util.Scanner; public class IntegerToBinary { public static void main(String[] args) { Scanner input = new Scanner( System.in ); System.out.println(""Enter Integer: ""); String integerString =input.nextLine(); System.out.println(""Binary Number: ""+Integer.toBinaryString(Integer.parseInt(integerString))); } }\n\n1\n\nExcessive promotion of a specific product/resource (that I removed here) may be perceived by the community as spam. Take a look at the help center, specially What kind of behavior is expected of users?\'s last section: Avoid overt self-promotion.""""""']",0.208333333,0.357142857,0.764705882
lang,String,How to convert binary string value to decimal,"Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>
Apache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...
http://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\A)  thus giving us only one token for the entire contents of the stream.</p>
The trick here is that we work in blocks  and as such don t need other buffering streams.
The block size is parameterized for run-time performance optimization.</p>
<p>Then just add those numbers to the integer representation of the character <code>`</code>
<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>
<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>
To allow generating words of different lengths  we further add a terminator symbol <code>âÃÃ¶âÂ§âÃÂ¢</code> to yield an extended alphabet <code>âÃ­Â¬Â£  := âÃ­Â¬Â£ âÃÃ¶ââ âÃÂ¢ {âÃÃ¶âÂ§âÃÂ¢}</code>.</p> <p>Let <code>âÃ­Â¬Â±</code> be a symbol and X a uniformly distributed random variable over <code>âÃ­Â¬Â£ </code>.
Since the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>âÃ­Â¬â¢ = floor[32/logâÃÃ¶âÃ¡âÃ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.
Even if we were to search for a 6-character word  we would still be successful about 41.06% of the time.
<p>Most random number generators are  in fact   pseudo random. 
<p>LCGs are quite predictable given a fixed seed.
Basically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.
<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>
<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>
<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.
<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>","Most common ways to construct:
String name = new String(""Alex"");
Based on 8 examples
 
StringBuffer sb = É;
String s = sb.toString();
Based on 6 examples



String	
truncate(int maxLength)

          Returns a new string with a length no longer than maxLength characters.


truncate

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public String truncate(int maxLength)
Returns a new string with a length no longer than maxLength characters.

UPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.
Parameters:
maxLength
Returns:
a new string with a length no longer than maxLength characters","Use Integer.parseInt (see javadoc), that converts your String to int using base two:

int decimalValue = Integer.parseInt(c, 2);","*******************usage scenario 1********************** 
----------usage scenario----------
How can I make a method return an argument that was passed to it?
----------Explanation----------
You can create an Answer in Mockito. Let's assume, we have an interface named Application with a method myFunction.
----------Code Sample----------
public interface Application {
public String myFunction(String abc);
}

public void testMyFunction() throws Exception {
Application mock = mock(Application.class);
when(mock.myFunction(anyString())).thenAnswer(new Answer() {
@Override
public String answer(InvocationOnMock invocation) throws Throwable {
Object[] args = invocation.getArguments();
return (String) args[0];
}
});

assertEquals(""someString"",mock.myFunction(""someString""));
assertEquals(""anotherString"",mock.myFunction(""anotherString""));
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Trim string in JavaScript?
----------Explanation----------
For those browsers who does not support trim() , you can use this polyfill from MDN :
----------Code Sample----------
if (!String.prototype.trim) {
(function() {
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
String.prototype.trim = function() {
return this.replace(rtrim, '');
};
})();
}

String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g, '');};

String.prototype.ltrim=function(){return this.replace(/^\s+/,'');};

String.prototype.rtrim=function(){return this.replace(/\s+$/,'');};

String.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');};
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
How to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?
----------Explanation----------
change your return type to ResponseEntity<String> , then you can use below for 400
----------Code Sample----------
return new ResponseEntity(HttpStatus.BAD_REQUEST);

return new ResponseEntity(json,HttpStatus.OK);
return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);
return ResponseEntity.ok(json);
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Java Byte Array to String to Byte Array
----------Explanation----------
You can't just take the returned string and construct a string from it... it's not a byte[] data type anymore, it's already a string; you need to parse it. For example :
----------Code Sample----------
String response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script

String[] byteValues = response.substring(1, response.length() - 1).split("","");
byte[] bytes = new byte[byteValues.length];

for (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); 
}

String str = new String(bytes);

byte[] b1 = new byte[] {97, 98, 99};

String s1 = Arrays.toString(b1);
String s2 = new String(b1);

System.out.println(s1); // -> ""[97, 98, 99]""
System.out.println(s2); // -> ""abc"";
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Sprintf equivalent in Java
----------Explanation----------

----------Code Sample----------
// Store the formatted string in 'result'
String result = String.format(""%4d"", i * j);

// Write the result to standard output
System.out.println( result );
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How to replace special characters in a string?
----------Explanation----------
That depends on what you mean. If you just want to get rid of them, do this: 
(Update: Apparently you want to keep digits as well, use the second lines in that case)
----------Code Sample----------
String alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");
String alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");

String alphaOnly = input.replaceAll(""[^\\p{Alpha}]+"","""");
String alphaAndDigits = input.replaceAll(""[^\\p{Alpha}\\p{Digit}]+"","""");

private static final CharMatcher ALNUM =
CharMatcher.inRange('a', 'z').or(CharMatcher.inRange('A', 'Z'))
.or(CharMatcher.inRange('0', '9')).precomputed();
// ...
String alphaAndDigits = ALNUM.retainFrom(input);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Get words around a position in a string
----------Explanation----------
You can achiveve that using String 's split() method . This solution is O(n) .
----------Code Sample----------
public static void main(String[] args) {
String str = ""Hello my name is John and I like to go fishing and ""+
""hiking I have two sisters and one brother."";
String find = ""I"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
if (sp[i].equals(find)) {
// have to check for ArrayIndexOutOfBoundsException
String surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +
(i-1 > 0 ? sp[i-1]+"" "" : """") +
sp[i] +
(i+1 < sp.length ? "" ""+sp[i+1] : """") +
(i+2 < sp.length ? "" ""+sp[i+2] : """");
System.out.println(surr);
}
}
}

public static void main(String[] args) {
String str = ""Hello my name is John and John and I like to go..."";
String find = ""John and"";

String[] sp = str.split("" +""); // ""+"" for multiple spaces

String[] spMulti = find.split("" +""); // ""+"" for multiple spaces
for (int i = 2; i < sp.length; i++) {
int j = 0;
while (j < spMulti.length && i+j < sp.length 
&& sp[i+j].equals(spMulti[j])) {
j++;
} 
if (j == spMulti.length) { // found spMulti entirely
StringBuilder surr = new StringBuilder();
if (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }
if (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }
for (int k = 0; k < spMulti.length; k++) {
if (k > 0){ surr.append("" ""); }
surr.append(sp[i+k]);
}
if (i+spMulti.length < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length]);
}
if (i+spMulti.length+1 < sp.length) {
surr.append("" "");
surr.append(sp[i+spMulti.length+1]);
}
System.out.println(surr.toString());
}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
JsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object
----------Explanation----------
Actually the problem was in ApplesDO Class:
----------Code Sample----------
public class ApplesDO {

private String apple;
public String getApple() {
return apple;
}
public void setApple(String apple) {
this.apple = apple;
public ApplesDO(CustomType custom) {
//constructor Code
//Introducing the dummy constructor
public ApplesDO() {
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Repeat String - Javascript
----------Explanation----------
I'd put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!
----------Code Sample----------
String.prototype.repeat = function( num )
{
return new Array( num + 1 ).join( this );
}

alert( ""string to repeat\n"".repeat( 4 ) );
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Is this valid Java?
----------Explanation----------
However, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:
----------Code Sample----------
.class public CallAmbiguousMethod
.super java/lang/Object

.method public static main([Ljava/lang/String;)V
.limit stack 3
.limit locals 1

; Call the method that returns String
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;

; Call the method that returns Integer
aconst_null
invokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;

return

.end method


java -jar jasmin.jar CallAmbiguousMethod.j


java CallAmbiguousMethod


> java CallAmbiguousMethod
strings
numbers

import java.util.Arrays;
import java.util.List;

class RealyCompilesAndRunsFine {

public static String f(List list) {
return list.get(0);
}

public static Integer f(List list) {
return list.get(0);
}

public static void main(String[] args) {
final String string = f(Arrays.asList(""asdf""));
final Integer integer = f(Arrays.asList(123));
System.out.println(string);
System.out.println(integer);
}

}


>javap -c RealyCompilesAndRunsFine
Compiled from ""RealyCompilesAndRunsFine.java""
class RealyCompilesAndRunsFine extends java.lang.Object{
RealyCompilesAndRunsFine();
Code:
0: aload_0
1: invokespecial #1; //Method java/lang/Object."""":()V
4: return

public static java.lang.String f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #3; //class java/lang/String
10: areturn

public static java.lang.Integer f(java.util.List);
Code:
0: aload_0
1: iconst_0
2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;
7: checkcast #4; //class java/lang/Integer
10: areturn

public static void main(java.lang.String[]);
Code:
0: iconst_1
1: anewarray #3; //class java/lang/String
4: dup
5: iconst_0
6: ldc #5; //String asdf
8: aastore
9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;
15: astore_1
16: iconst_1
17: anewarray #4; //class java/lang/Integer
20: dup
21: iconst_0
22: bipush 123
24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;
27: aastore
28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;
31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;
34: astore_2
35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
38: aload_1
39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V
42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;
45: aload_2
46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
49: return
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
How to unescape a Java string literal in Java?
----------Explanation----------
Like many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:
----------Code Sample----------
/ 47 002F SOLIDUS
= slash, virgule
x (latin letter dental click - 01C0)
x (combining long solidus overlay - 0338)
x (fraction slash - 2044)
x (division slash - 2215)
\ 92 005C REVERSE SOLIDUS
= backslash
x (combining reverse solidus overlay - 20E5)
x (set minus - 2216)

/*
*
* unescape_perl_string()
*
* Tom Christiansen 
* Sun Nov 28 12:55:24 MST 2010
*
* It's completely ridiculous that there's no standard
* unescape_java_string function. Since I have to do the
* damn thing myself, I might as well make it halfway useful
* by supporting things Java was too stupid to consider in
* strings:
* 
* => ""?"" items are additions to Java string escapes
* but normal in Java regexes
*
* => ""!"" items are also additions to Java regex escapes
* 
* Standard singletons: ?\a ?\e \f \n \r \t
* 
* NB: \b is unsupported as backspace so it can pass-through
* to the regex translator untouched; I refuse to make anyone
* doublebackslash it as doublebackslashing is a Java idiocy
* I desperately wish would die out. There are plenty of
* other ways to write it:
*
* \cH, \12, \012, \x08 \x{8}, \u0008, \U00000008
*
* Octal escapes: \0 \0N \0NN \N \NN \NNN
* Can range up to !\777 not \377
* 
* TODO: add !\o{NNNNN}
* last Unicode is 4177777
* maxint is 37777777777
*
* Control chars: ?\cX
* Means: ord(X) ^ ord('@')
*
* Old hex escapes: \xXX
* unbraced must be 2 xdigits
*
* Perl hex escapes: !\x{XXX} braced may be 1-8 xdigits
* NB: proper Unicode never needs more than 6, as highest
* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF
*
* Lame Java escape: \[IDIOT JAVA PREPROCESSOR]uXXXX must be
* exactly 4 xdigits;
*
* I can't write XXXX in this comment where it belongs
* because the damned Java Preprocessor can't mind its
* own business. Idiots!
*
* Lame Python escape: !\UXXXXXXXX must be exactly 8 xdigits
* 
* TODO: Perl translation escapes: \Q \U \L \E \[IDIOT JAVA PREPROCESSOR]u \l
* These are not so important to cover if you're passing the
* result to Pattern.compile(), since it handles them for you
* further downstream. Hm, what about \[IDIOT JAVA PREPROCESSOR]u?
*
*/

public final static
String unescape_perl_string(String oldstr) {

/*
* In contrast to fixing Java's broken regex charclasses,
* this one need be no bigger, as unescaping shrinks the string
* here, where in the other one, it grows it.
*/

StringBuffer newstr = new StringBuffer(oldstr.length());

boolean saw_backslash = false;

for (int i = 0; i < oldstr.length(); i++) {
int cp = oldstr.codePointAt(i);
if (oldstr.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}

if (!saw_backslash) {
if (cp == '\\') {
saw_backslash = true;
} else {
newstr.append(Character.toChars(cp));
}
continue; /* switch */
}

if (cp == '\\') {
saw_backslash = false;
newstr.append('\\');
newstr.append('\\');
continue; /* switch */
}

switch (cp) {

case 'r': newstr.append('\r');
break; /* switch */

case 'n': newstr.append('\n');
break; /* switch */

case 'f': newstr.append('\f');
break; /* switch */

/* PASS a \b THROUGH!! */
case 'b': newstr.append(""\\b"");
break; /* switch */

case 't': newstr.append('\t');
break; /* switch */

case 'a': newstr.append('\007');
break; /* switch */

case 'e': newstr.append('\033');
break; /* switch */

/*
* A ""control"" character is what you get when you xor its
* codepoint with '@'==64. This only makes sense for ASCII,
* and may not yield a ""control"" character after all.
*
* Strange but true: ""\c{"" is "";"", ""\c}"" is ""="", etc.
*/
case 'c': {
if (++i == oldstr.length()) { die(""trailing \\c""); }
cp = oldstr.codePointAt(i);
/*
* don't need to grok surrogates, as next line blows them up
*/
if (cp > 0x7f) { die(""expected ASCII after \\c""); }
newstr.append(Character.toChars(cp ^ 64));
break; /* switch */
}

case '8':
case '9': die(""illegal octal digit"");
/* NOTREACHED */

/*
* may be 0 to 2 octal digits following this one
* so back up one for fallthrough to next case;
* unread this digit and fall through to next case.
*/
case '1':
case '2':
case '3':
case '4':
case '5':
case '6':
case '7': --i;
/* FALLTHROUGH */

/*
* Can have 0, 1, or 2 octal digits following a 0
* this permits larger values than octal 377, up to
* octal 777.
*/
case '0': {
if (i+1 == oldstr.length()) {
/* found \0 at end of string */
newstr.append(Character.toChars(0));
break; /* switch */
}
i++;
int digits = 0;
int j;
for (j = 0; j <= 2; j++) {
if (i+j == oldstr.length()) {
break; /* for */
}
/* safe because will unread surrogate */
int ch = oldstr.charAt(i+j);
if (ch < '0' || ch > '7') {
break; /* for */
}
digits++;
}
if (digits == 0) {
--i;
newstr.append('\0');
break; /* switch */
}
int value = 0;
try {
value = Integer.parseInt(
oldstr.substring(i, i+digits), 8);
} catch (NumberFormatException nfe) {
die(""invalid octal value for \\0 escape"");
}
newstr.append(Character.toChars(value));
i += digits-1;
break; /* switch */
} /* end case '0' */

case 'x': {
if (i+2 > oldstr.length()) {
die(""string too short for \\x escape"");
}
i++;
boolean saw_brace = false;
if (oldstr.charAt(i) == '{') {
/* ^^^^^^ ok to ignore surrogates here */
i++;
saw_brace = true;
}
int j;
for (j = 0; j < 8; j++) {

if (!saw_brace && j == 2) {
break; /* for */
}

/*
* ASCII test also catches surrogates
*/
int ch = oldstr.charAt(i+j);
if (ch > 127) {
die(""illegal non-ASCII hex digit in \\x escape"");
}

if (saw_brace && ch == '}') { break; /* for */ }

if (! ( (ch >= '0' && ch <= '9')
||
(ch >= 'a' && ch <= 'f')
||
(ch >= 'A' && ch <= 'F')
)
)
{
die(String.format(
""illegal hex digit #%d '%c' in \\x"", ch, ch));
}

}
if (j == 0) { die(""empty braces in \\x{} escape""); }
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\x escape"");
}
newstr.append(Character.toChars(value));
if (saw_brace) { j++; }
i += j-1;
break; /* switch */
}

case 'u': {
if (i+4 > oldstr.length()) {
die(""string too short for \\u escape"");
}
i++;
int j;
for (j = 0; j < 4; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\u escape"");
}
}
int value = 0;
try {
value = Integer.parseInt( oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\u escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

case 'U': {
if (i+8 > oldstr.length()) {
die(""string too short for \\U escape"");
}
i++;
int j;
for (j = 0; j < 8; j++) {
/* this also handles the surrogate issue */
if (oldstr.charAt(i+j) > 127) {
die(""illegal non-ASCII hex digit in \\U escape"");
}
}
int value = 0;
try {
value = Integer.parseInt(oldstr.substring(i, i+j), 16);
} catch (NumberFormatException nfe) {
die(""invalid hex value for \\U escape"");
}
newstr.append(Character.toChars(value));
i += j-1;
break; /* switch */
}

default: newstr.append('\\');
newstr.append(Character.toChars(cp));
/*
* say(String.format(
* ""DEFAULT unrecognized escape %c passed through"",
* cp));
*/
break; /* switch */

}
saw_backslash = false;
}

/* weird to leave one at the end */
if (saw_backslash) {
newstr.append('\\');
}

return newstr.toString();
}

/*
* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the
* xdigits of the logical Unicode code point. No bloody brain-damaged
* UTF-16 surrogate crap, just true logical characters.
*/
public final static
String uniplus(String s) {
if (s.length() == 0) {
return """";
}
/* This is just the minimum; sb will grow as needed. */
StringBuffer sb = new StringBuffer(2 + 3 * s.length());
sb.append(""U+"");
for (int i = 0; i < s.length(); i++) {
sb.append(String.format(""%X"", s.codePointAt(i)));
if (s.codePointAt(i) > Character.MAX_VALUE) {
i++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/
}
if (i+1 < s.length()) {
sb.append(""."");
}
}
return sb.toString();
}

private static final
void die(String foa) {
throw new IllegalArgumentException(foa);
}

private static final
void say(String what) {
System.out.println(what);
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Review an answer - Decode Ways
----------Explanation----------
Now we have done all the necessary work for a simple (but working) recursive implementation:
----------Code Sample----------
static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail);
}

return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
return numDecodings(encodedText, new Integer[1 + encodedText.length()]);
}

static int numDecodings(String encodedText, Integer[] cache) {
// check base case for the recursion
if (encodedText.length() == 0) {
return 1;
}

// check if this tail is already known in the cache
if (cache[encodedText.length()] != null) {
return cache[encodedText.length()];
}

// cache miss -- sum all tails
int sum = 0;
for (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {
String head = encodedText.substring(0, headSize);
String tail = encodedText.substring(headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
sum += numDecodings(tail, cache); // pass the cache through
}

// update the cache
cache[encodedText.length()] = sum;
return sum;
}

static final int upperLimit = 26;
static final int maxHeadSize = ("""" + upperLimit).length();

static int numDecodings(String encodedText) {
int[] cache = new int[encodedText.length() + 1];

// base case: the empty string at encodedText.length() is 1:
cache[encodedText.length()] = 1;

for (int position = encodedText.length() - 1; position >= 0; position--) {
// sum directly into the cache
for (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {
String head = encodedText.substring(position, position + headSize);
if (Integer.parseInt(head) > upperLimit) {
break;
}
cache[position] += cache[position + headSize];
}
}

return cache[0];
}

static int numDecodings(String encodedText) {
// initialize the cache
int[] cache = {1, 0, 0};

for (int position = encodedText.length() - 1; position >= 0; position--) {
// rotate the cache
cache[2] = cache[1];
cache[1] = cache[0];
cache[0] = 0;

// headSize == 1
if (position + 0 < encodedText.length()) {
char c = encodedText.charAt(position + 0);

// 1 .. 9
if ('1' <= c && c <= '9') {
cache[0] += cache[1];
}
}

// headSize == 2
if (position + 1 < encodedText.length()) {
char c1 = encodedText.charAt(position + 0);
char c2 = encodedText.charAt(position + 1);

// 10 .. 19
if ('1' == c1) {
cache[0] += cache[2];
}
// 20 .. 26
else if ('2' == c1 && '0' <= c2 && c2 <= '6') {
cache[0] += cache[2];
}
}
}

return cache[0];
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Fastest way to iterate over all the chars in a String
----------Explanation----------

----------Code Sample----------
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}

final Field field = String.class.getDeclaredField(""value"");
field.setAccessible(true);

try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}

int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// avoid this at all costs
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0
2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5
4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6
8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4
16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5
32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2
64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0
128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6
256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8
512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4
1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2
2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1
4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0
8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0
16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0
32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0
65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0
131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0
262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0

Size WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2
1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5
2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8
4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0
8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8
16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6
32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7
64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1
128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7
256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3
512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1
1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0
2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0
4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9
8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9
16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9
32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9
65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9
131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9
262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.function.IntPredicate;

/**
* @author Saint Hill 
*/
public final class TestStrings {

// we will not test strings longer than 512KM
final int MAX_STRING_SIZE = 1024 * 256;

// for each string size, we will do all the tests
// this many times
final int TRIES_PER_STRING_SIZE = 1000;

public static void main(String[] args) throws Exception {
new TestStrings().run();
}

void run() throws Exception {

// double the length of the data until it reaches MAX chars long
// 0,1,2,4,8,16,32,64,128,256 ... 
final List sizes = new ArrayList<>();
for (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {
sizes.add(n);
}

// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)
final Random random = new Random();

System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== FORWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));
}

// reverse order or string sizes
Collections.reverse(sizes);

System.out.println("""");
System.out.println(""Rate in nanoseconds per character inspected."");
System.out.printf(""==== BACKWARDS (tries per size: %s) ==== \n"", TRIES_PER_STRING_SIZE);

printHeadings(TRIES_PER_STRING_SIZE, random);

for (int size : sizes) {
reportResults(size, test(size, TRIES_PER_STRING_SIZE, random));

}
}

///
///
/// METHODS OF CHECKING THE CONTENTS
/// OF A STRING. ALWAYS CHECKING FOR
/// WHITESPACE (CHAR <=' ')
/// 
///
// CHECK THE STRING CONTENTS
int charAtMethod1(final String data) {
final int len = data.length();
for (int i = 0; i < len; i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return len;
}

// SAME AS ABOVE BUT USE String.length()
// instead of making a new final local int 
int charAtMethod2(final String data) {
for (int i = 0; i < data.length(); i++) {
if (data.charAt(i) <= ' ') {
doThrow();
}
}
return data.length();
}

// USE new Java-8 String's IntStream
// pass it a PREDICATE to do the checking
int streamMethod(final String data, final IntPredicate predicate) {
if (data.chars().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// OH LA LA - GO PARALLEL!!!
int streamParallelMethod(final String data, IntPredicate predicate) {
if (data.chars().parallel().anyMatch(predicate)) {
doThrow();
}
return data.length();
}

// Re-fill a resuable char[] with the contents
// of the String's char[]
int reuseBuffMethod(final char[] reusable, final String data) {
final int len = data.length();
data.getChars(0, len, reusable, 0);
for (int i = 0; i < len; i++) {
if (reusable[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
int newMethod1(final String data) {
final int len = data.length();
final char[] copy = data.toCharArray();
for (int i = 0; i < len; i++) {
if (copy[i] <= ' ') {
doThrow();
}
}
return len;
}

// Obtain a new copy of char[] from String
// but use FOR-EACH
int newMethod2(final String data) {
for (final char c : data.toCharArray()) {
if (c <= ' ') {
doThrow();
}
}
return data.length();
}

// FANCY!
// OBTAIN FIELD FOR ACCESS TO THE STRING'S
// INTERNAL CHAR[]
int fieldMethod1(final Field field, final String data) {
try {
final char[] chars = (char[]) field.get(data);
final int len = chars.length;
for (int i = 0; i < len; i++) {
if (chars[i] <= ' ') {
doThrow();
}
}
return len;
} catch (Exception ex) {
throw new RuntimeException(ex);
}
}

// same as above but use FOR-EACH
int fieldMethod2(final Field field, final String data) {
final char[] chars;
try {
chars = (char[]) field.get(data);
} catch (Exception ex) {
throw new RuntimeException(ex);
}
for (final char c : chars) {
if (c <= ' ') {
doThrow();
}
}
return chars.length;
}

/**
*
* Make a list of tests. We will shuffle a copy of this list repeatedly
* while we repeat this test.
*
* @param data
* @return
*/
List makeTests(String data) throws Exception {
// make a list of tests
final List tests = new ArrayList();

tests.add(new Jobber(""charAt1"") {
int check() {
return charAtMethod1(data);
}
});

tests.add(new Jobber(""charAt2"") {
int check() {
return charAtMethod2(data);
}
});

tests.add(new Jobber(""stream"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamMethod(data, predicate);
}
});

tests.add(new Jobber(""streamPar"") {
final IntPredicate predicate = new IntPredicate() {
public boolean test(int value) {
return value <= ' ';
}
};

int check() {
return streamParallelMethod(data, predicate);
}
});

// Reusable char[] method
tests.add(new Jobber(""reuse"") {
final char[] cbuff = new char[MAX_STRING_SIZE];

int check() {
return reuseBuffMethod(cbuff, data);
}
});

// New char[] from String
tests.add(new Jobber(""new1"") {
int check() {
return newMethod1(data);
}
});

// New char[] from String
tests.add(new Jobber(""new2"") {
int check() {
return newMethod2(data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field1"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod1(field, data);
}
});

// Use reflection for field access
tests.add(new Jobber(""field2"") {
final Field field;

{
field = String.class.getDeclaredField(""value"");
field.setAccessible(true);
}

int check() {
return fieldMethod2(field, data);
}
});

return tests;
}

/**
* We use this class to keep trac","['""""""How to convert binary string value to decimal\n\nHow to convert a binary String such as\n\nString c = ""110010""; // as binary\n\nto the value in decimal in Java? (expected result in the example is 50)\n\n1\n\nplease refrain from posting questions that you have not tried to solve yourself. How to Ask\n\nUse Integer.parseInt (see javadoc), that converts your String to int using base two:\n\nint decimalValue = Integer.parseInt(c, 2);\n\n1\n\nwhat if the value of c is too long ? public static int integerfrmbinary(String str){ double j=0; for(int i=0;i<str.length();i++){ if(str.charAt(i)== \'1\'){ j=j+ Math.pow(2,str.length()-1-i); } } return (int) j; }\n\nThis piece of code I have written manually. You can also use parseInt as mentioned above . This function will give decimal value corresponding to the binary string :)\n\nSumeet R SharmaSumeet R Sharma\n\nI think you are looking for Integer.parseInt. The second argument takes a radix, which in this case is 2. Integer.parseInt(c, 2)\n\n0\n\nint i = Integer.parseInt(c, 2);\n\nint num = Integer.parseInt(""binaryString"",2);\n\nuser4058730user4058730\n\nThis solution was provided multiple times, years before this answer was posted. public static Long binToDec(String bin) { long dec = 0L; long pow = 1L; for (int i = (bin.length() - 1); i >= 0; i--) { char c = bin.charAt(i); dec = dec + (Long.parseLong(c + """") * pow); pow = pow * 2; } return dec; }\n\nlong num = Long.parseLong(""101110111"",2);\n\nHave to think about the decimal precision, so you must to limit the bitstring length. Anyway, using BigDecimal is a good choice. public BigDecimal bitStringToBigDecimal(String bitStr){ BigDecimal sum = new BigDecimal(""0""); BigDecimal base = new BigDecimal(2); BigDecimal temp; for(int i=0;i<bitStr.length();i++){ if(bitStr.charAt(i)== \'1\'){ int exponent= bitStr.length()-1-i; temp=base.pow(exponent); sum=sum.add(temp); } } return sum; }\n\n9,1\n\nyou can test by:str=""10000101001001000010111100100110000000000000000000001010111101"";\n\nâ json.wei Jul 6, 2017 at 1:09\n\ntest this, you\'ll find out that there is a line in the code which contains Scan.S() .This is used only for stocking data (String). So just try this:\n\nPS:Don\'t forget to save the file as bindec\n\nimport java.io.*; class Scan { public static String S() { String x; char c; boolean erreur; do { x = """"; erreur = false; try { while((c = (char)System.in.read()) != \'\\n\') { if (c != \'\\r\') { x += c; } } } catch(IOException e) { System.out.print("" > enter String : ""); erreur = true; } } while(erreur); return x; } public class bindec{ public static void main (String[] args) { int b=0; String a; System.out.println(""bin: ""); a = Lire.S(); int j=a.length()-1; for(int i=0;i<a.length() ;i++ ){ if(a.charAt(i)==\'1\'){ b += Math.pow(2,j); } if(a.charAt(i)==\'0\'){ b+=0; } j=j-1; } System.out.println(""dec: ""+b); } }\n\nMouad AbriniMouad Abrini\n\nAccording to this : we can write this help function :\n\npublic static int convertBinaryToDecimal(String str) { int result = 0; for (int i = 0; i < str.length(); i++) { int value = Character.getNumericValue(str.charAt(i)); result = result * 2 + value; } return result; }\n\n4,it has a binary string of 1011001011110110000010101\n\neasiest way is to put all copies of the base needed on the left, which should always be string length - 1 (assuming not leading edge zeros), put and all the coefficients on the right :\n\necho \'1011001011110110000010101\' |\n\nmawk \'function __(_) { print; gsub(/./, ""2*("", _) return substr(_, 4) } $!_ = __($_) $!_\' FS= OFS=\')+\' | gtee >( gcat -b | lgp3 >&2; ) | bc\n\n23456789 1011001011110110000010101\n\n2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*( +1)+0)+1)+1)+0)+0)+1)+0)+1)+1)+1)+1)+0)+1)+1)+0)+0)+0)+0)+0)+1)+0)+1)+0)+1 2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*( 1) )+1)+1) ) )+1) )+1)+1)+1)+1) )+1)+1) ) ) ) ) )+1) )+1) )+1 2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*( 2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(2*(1) )+1)+1)))+1))+1)+1)+1)+1) )+1)+1) ))) ))+1) )+1) )+1\n\nversus the standard form, which is succinct only for base-2, and more helpful for polynomials than for bit-string/vector conversion :\n\n2^24 + 2^22 + 2^21 + 2^18 + 2^16 + 2^15 + 2^14 + 2^13 + 2^11 + 2^10 + 2^4 + 2^2 1*2^24 + 0*2^23 + 1*2^22 + 1*2^21 + 0*2^20 + 0*2^19 + 1*2^18 + 0*2^17 + 1*2^16 + 1*2^15 + 1*2^14 + 1*2^13 + 0*2^12 + 1*2^11 + 1*2^10 + 0*2^ 9 + 0*2^ 8 + 0*2^ 7 + 0*2^ 6 + 0*2^ 5 + 1*2^ 4 + 0*2^ 3 + 1*2^ 2 + 0*2 + 1\n\nDigits are always kept adjacent to one another, in big-endian notation, without the base and exponent getting in the way\n\nIt completely eliminated the power operator ^ from the chain of operations by using nested layers of the base supporting one another instead. Count up # of 2*s (i.e.""""""', '""""""(1 << 1)) to get floor of log2(x)\n\nSimilarly, count up # of 10*s (i.e. ((1 << 3) + (1 << 1)) in the decimal version to get floor of log10(x)\n\nFor each of the 1 bits, the power of 2 exponent associated with it would be just # of closing parenthesis ) to its right\n\nThe decimal equivalent of this structure is shown below. If anything, the condensed gapless form of the notation increases readability due to close proximity of digits with one another. 10*(10*(10*(10*(10*(10*(10*( 2)+ 3)+ 4)+ 5)+ 6)+ 7)+ 8)+ 9 10*(10*(10*(10*(10*(10*(10*(2)+3)+4)+5)+6)+7)+8)+9\n\nBut instead of using the minimum of 7 copies of 10 and 8 coefficient digits for a total of 15 numbers, the standard form needs 21 numbers for including superfluous exponents that could be easily derived just by counting layers in nested form. 2*10^7 + 3*10^6 + 4*10^5 + 5*10^4 + 6*10^3 + 7*10^2 + 8*10 + 9 2*10^7 + 3*10^6 + 4*10^5 + 5*10^4 + 6*10^3 + 7*10^2 + 8*10 + 9\n\nThe clutter in its gapless formâ¦\n\n2*10^7+3*10^6+4*10^5+5*10^4+6*10^3+7*10^2+8*10+9\n\nOnce you see numbers in any base in this nested form instead of standard notation, then base-conversion becomes a trivial exercise of nothing more than peeling back the nested layers. RARE Kpop ManifestoRARE Kpop Manifesto\n\n2,public static void convertStringToDecimal(String binary) { int decimal=0; int power=0; while(binary.length()>0) { int temp = Integer.parseInt(binary.charAt((binary.length())-1)+""""); decimal+=temp*Math.pow(2, power++); binary=binary.substring(0,binary.length()-1); } System.out.println(decimal); }\n\nimport java.util.Scanner; public class BinaryToDecimal{ public static void main(String[] args) { Scanner input = new Scanner(System.in); int binaryNumber = 0; int counter = 0; int number = 0; System.out.print(""Input binary number: ""); binaryNumber = input.nextInt(); //it\'s going to stop when the binaryNumber/10 is less than 0 //example: //binaryNumber = 11/10. The result value is 1 when you do the next //operation 1/10 . The result value is 0 while(binaryNumber != 0) { //Obtaining the remainder of the division and multiplying it //with the number raised to two //adding it up with the previous result number += ((binaryNumber % 10)) * Math.pow(2,counter); binaryNumber /= 10; //removing one digit from the binary number //Increasing counter 2^0, 2^1, 2^2, 2^3..... counter++; } System.out.println(""Decimal number : "" + number); }\n\nVictor FernÃ¡ndezVictor FernÃ¡ndez\n\nprivate static int convertBinaryToDecimal(String strOfBinary){ int flag = 1, binary=0; char binaryOne = \'1\'; char[] charArray = strOfBinary.toCharArray(); for(int i=charArray.length-1;i>=0;i--){ if(charArray[i] == binaryOne){ binary+=flag; } flag*=2; } return binary; }\n\n1,public static void main(String[] args) { java.util.Scanner scan = new java.util.Scanner(System.in); long decimalValue = 0; System.out.println(""Please enter a positive binary number.(Only 1s and 0s)""); //This reads the input as a String and splits each symbol into //array list String element = scan.nextLine(); String[] array = element.split(""""); //This assigns the length to integer arrys based on actual number of //symbols entered int[] numberSplit = new int[array.length]; int position = array.length - 1; //set beginning position to the end of array //This turns String array into Integer array for (int i = 0; i < array.length; i++) { numberSplit[i] = Integer.parseInt(array[i]); } //This loop goes from last to first position of an array making //calculation where power of 2 is the current loop instance number for (int i = 0; i < array.length; i++) { if (numberSplit[position] == 1) { decimalValue = decimalValue + (long) Math.pow(2, i); } position--; } System.out.println(decimalValue); main(null); }\n\n2,just wanted to share my solution :)\n\nimport java.util.*; public class BinaryToDecimal { public static void main() { Scanner sc=new Scanner(System.in); System.out.println(""enter the binary number""); double s=sc.nextDouble(); int c=0; long s1=0; while(s>0) { s1=s1+(long)(Math.pow(2,c)*(long)(s\x10)); s=(long)s/10; c++; } System.out.println(""The respective decimal number is : ""+s1); } }\n\nint base2(String bits) { int ans = 0; for (int i = bits.length() - 1, f = 1; i >= 0; i--) { ans += f * (bits.charAt(i) - \'0\'); f <<= 1; } return ans; }\n\n""""""']",0.208333333,1,0.75
lang,Thread,How to make a Java thread wait for another threads output?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor âÃÃ¶âÃâÂ¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on âÃÃ¶âÃâÂ¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesnâÃÃ¶âÃâÂ¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time âÃÃ¶âÃâÃ context switches  even just   to the OS and back  arenâÃÃ¶âÃâÂ¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","Most common way to construct:
Thread t1 = new Thread();
Based on 25 examples","You can use Thread.join() to do that:

Thread[] threads = new Thread[numOfThreads];
for (int i = 0; i < threads.length; i++) {
    threads[i] = new Thread(new Runnable() {
        public void run() {
            System.out.println(""xxx"");
        }
    });
    threads[i].start();
}

for (int i = 0; i < threads.length; i++) {
    try {
        threads[i].join();
    } catch (InterruptedException e) {
    }
}
For your solution

Thread[] threads = new Thread[3];
threads[i] = new Thread(new Runnable() {
        ...
}).start();
threads[i] = new Thread(new Runnable() {
        ...
}).start();
threads[i] = new Thread(new Runnable() {
        ...
}).start();

for (int i = 0; i < threads.length; i++) {
    try {
        threads[i].join();
    } catch (InterruptedException e) {
    }
}","*******************usage scenario 1********************** 
----------usage scenario----------
What is the difference between atomic / volatile / synchronized?
----------Explanation----------
You are specifically asking about how they internally work , so here you are: 

No synchronization
----------Code Sample----------
private int counter;

public int getNextUniqueIndex() {
return counter++; 
}

private boolean stopped;

public void run() {
while(!stopped) {
//do some work
}
}

public void pleaseStop() {
stopped = true;
}

private AtomicInteger counter = new AtomicInteger();

public int getNextUniqueIndex() {
return counter.getAndIncrement();
}

int current;
do {
current = get();
} while(!compareAndSet(current, current + 1));

private volatile int counter;

public int getNextUniqueIndex() {
return counter++; 
}

volatile int i = 0;
void incIBy5() {
i += 5;
}

void incIBy5() {
int temp;
synchronized(i) { temp = i }
synchronized(i) { i = temp + 5 }
}

synchronized(new Object()) {
//thread-safe, SRSLy?
}

void synchronized incIBy5() {
i += 5 
}

void incIBy5() {
synchronized(this) {
i += 5 
}
}

void incIBy5() {
synchronized(this) {
int temp = i;
i = temp + 5;
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java how to pass a thread an extra object
----------Explanation----------
Why not pass the different Thread s different Runnable s?
----------Code Sample----------
Runnable r1 = new Runnable() { public void run() { /* this is r1 */ } };
Runnable r2 = new Runnable() { public void run() { /* this is r2 */ } };
Thread t1 = new Thread(r1);
Thread t2 = new Thread(r2);
t1.start();
t2.start();

public class MyRunnable implements Runnable {
private final String s;

public MyRunnable(Stirng s) {
this.s = s;
}

public void run() {
// do something with s
}
}

Thread t1 = new Thread(new MyRunnable(""s1""));
Thread t2 = new Thread(new MyRunnable(""s2""));
t1.start();
t2.start();

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ExecutorServiceExample {
private static class CallableExample implements Callable {
private final Object foo;

private CallableExample(Object foo) {
this.foo = foo;
}

@Override
public Integer call() {
// do something and return it
return foo.hashCode();
}

}

public static void main(String[] args) throws InterruptedException, ExecutionException {
ExecutorService e = Executors.newFixedThreadPool(2);
Future f1 = e.submit(new CallableExample(""foo""));
Future f2 = e.submit(new CallableExample(""bar""));

System.out.println(f1.get());
System.out.println(f2.get());

e.shutdown();
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
RabbitMQ by Example: Multiple Threads, Channels and Queues
----------Explanation----------
A thread pool can be described as a collection of Runnable objects
(work queue) and a connections of running threads. These threads are
constantly running and are checking the work query for new work. If
there is new work to be done they execute this Runnable. The Thread
class itself provides a method, e.g. execute(Runnable r) to add a new
Runnable object to the work queue.
----------Code Sample----------
public class Main {
private static final int NTHREDS = 10;

public static void main(String[] args) {
ExecutorService executor = Executors.newFixedThreadPool(NTHREDS);
for (int i = 0; i < 500; i++) {
Runnable worker = new MyRunnable(10000000L + i);
executor.execute(worker);
}
// This will make the executor accept no new threads
// and finish all existing threads in the queue
executor.shutdown();
// Wait until all threads are finish
executor.awaitTermination();
System.out.println(""Finished all threads"");
}
} 

class CompositeRunnable implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(Runnable a) {
queue.add(a);
}

@Override
public void run() {
for(Runnable r: queue) {
r.run();
}
}
}

class CompositeMessageWorker implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(T message) {
queue.add(message);
}

@Override
public void run() {
for(T message: queue) {
// process a message
}
}
}

static class Worker extends DefaultConsumer {

String name;
Channel channel;
String queue;
int processed;
ExecutorService executorService;

public Worker(int prefetch, ExecutorService threadExecutor,
, Channel c, String q) throws Exception {
super(c);
channel = c;
queue = q;
channel.basicQos(prefetch);
channel.basicConsume(queue, false, this);
executorService = threadExecutor;
}

@Override
public void handleDelivery(String consumerTag,
Envelope envelope,
AMQP.BasicProperties properties,
byte[] body) throws IOException {
Runnable task = new VariableLengthTask(this,
envelope.getDeliveryTag(),
channel);
executorService.submit(task);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Where to stop/destroy threads in Android Service class?
----------Explanation----------
1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):
----------Code Sample----------
private volatile Thread runner;

public synchronized void startThread(){
if(runner == null){
runner = new Thread(this);
runner.start();
}
}

public synchronized void stopThread(){
if(runner != null){
Thread moribund = runner;
runner = null;
moribund.interrupt();
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary

if(/*fatal error*/){
stopThread();
return; //optional in this case since the loop will exit anyways
}
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Obtaining CPU thread usage in Java
----------Explanation----------
You can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:
----------Code Sample----------
private int sampleTime = 10000;
private ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
private RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
private OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();
private Map threadInitialCPU = new HashMap();
private Map threadCPUUsage = new HashMap();
private long initialUptime = runtimeMxBean.getUptime();

ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

try {Thread.sleep(sampleTime);} catch (InterruptedException e) {}

long upTime = runtimeMxBean.getUptime();

Map threadCurrentCPU = new HashMap();
ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

// CPU over all processes
//int nrCPUs = osMxBean.getAvailableProcessors();
// total CPU: CPU % can be more than 100% (devided over multiple cpus)
long nrCPUs = 1;
// elapsedTime is in ms.
long elapsedTime = (upTime - initialUptime);
for (ThreadInfo info : threadInfos) {
// elapsedCpu is in ns
Long initialCPU = threadInitialCPU.get(info.getThreadId());
if (initialCPU != null) {
long elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;
float cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);
threadCPUUsage.put(info.getThreadId(), cpuUsage);
}
}

// threadCPUUsage contains cpu % per thread
System.out.println(threadCPUUsage);
// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Threads Java Inturrupts
----------Explanation----------
I'm not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you'd do something like:
----------Code Sample----------
Thething theThing = new TheThing();
// set it to be a daemon thread before it starts
theThing.setDaemon(true);
theThing.start();

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to kill the thread now
tth.shutdown = true;
}

public class TheThing extends Thread {
volatile boolean shutdown = false;
public void run() {
while (!shutdown) {
...
// you can also test for shutdown while processing
if (shutdown) {
return;
}
}
}
}

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to interrupt the thread now
tth.interrupt();
}

public class TheThing extends Thread {
public void run() {
while (!Thread.currentThread().interrupted()) {
...
}
}
}

try {
Thread.sleep(1000);
} catch (InterruptedException e) {
// catching the interrupted exception clears the interrupt flag,
// so we need to re-enable it
Thread.currentThread().interrupt();
// probably you want to stop the thread if it is interrupted
return;
}

tth.shutdown = true;
// or tth.interrupt()
tth.join();

...
MyHandler handler = new MyHandler();
// catch the control-c signal, ""TERM"" is another common kill signal
Signal.handle(new Signal(""INT""), handler);
...

private static class MyHandler implements SignalHandler {
@Override
public void handle(Signal arg0) {
// interrupt your threads
// clean up stuff
// set shutdown flags
// ...
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How does sleep() method work on given thread and output?
----------Explanation----------
You have created two Runnable objects. If you run them by calling their run method you would get what you imagine:
----------Code Sample----------
Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.run()"");
m1.run(); // we call run method
System.out.println(""Calling m2.run()"");
m2.run();

Calling m1.run()
1
2
3
4
Calling m2.run()
1
2
3
4

Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.start()"");
m1.start(); // thread calls run method
System.out.println(""Calling m2.start()"");
m2.start();

Calling m1.start()
Calling m2.start()
1 < From thread 1
1 < From thread 2
2 ...
2
3
3
4
4

public class Aaa implements Runnable {
public void run() {
for (int i = 1; i < 5; i++) {
try {
Thread.sleep(500); // sleeps thread
} catch (InterruptedException e) {
System.out.println(e);
}
System.out.println(i);
}
}

public static void main(String[] args) {
Aaa m1 = new Aaa(); // creating one object
Thread t1 = new Thread(m1); // Its thread
Aaa m2 = new Aaa(); // creating second object of a class
Thread t2 = new Thread(m2); // Its thread
t1.start(); // calls m's run method in a new thread.
t2.start();
}

}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
comparison of code performance, threaded versus non-threaded
----------Explanation----------
By putting the join() in the loop, you're starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:
----------Code Sample----------
public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

// Pull thread pool count out into a value so you can easily change it
int threadCount = 10000;
Thread[] threads = new Thread[threadCount];

// Start all threads
for(int i = 0;i < threadCount;i++) {
// Pass list to each Runnable here
// Also, I added +i here as I think the intention is 
// to test 10000 possible numbers>5 for primeness - 
// was testing 5 in all loops
PrimeRunnable pr = new PrimeRunnable(primeStart+i, list);
Thread[i] threads = new Thread(pr);
threads[i].start(); // thread is now running in parallel
}

// All threads now running in parallel

// Then wait for all threads to complete
for(int i=0; i threads[i].join();
}
}

public class PrimeRunnable implements Runnable { 
private int from;
private List results; // shared but thread-safe

public PrimeRunnable(int from, List results) {
this.from = from;
this.results = results;
}

public void isPrime(int number) {
for(int i = 2;i < from;i++) {
if((number % i) == 0) {
return;
}
}
// found prime, add to shared results
this.results.add(number);
}

public void run() {
isPrime(from); // don't increment, just check one number
} 
}

public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

int threadCount = 16; // Experiment with this to find best on your machine
ExecutorService exec = Executors.newFixedThreadPool(threadCount);

int workCount = 10000; // See how # of work is now separate from # of threads?
for(int i = 0;i < workCount;i++) {
// submit work to the svc for execution across the thread pool 
exec.execute(new PrimeRunnable(primeStart+i, list));
}

// Wait for all tasks to be done or timeout to go off
exec.awaitTermination(1, TimeUnit.DAYS);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Tomcat Guice/JDBC Memory Leak
----------Explanation----------

----------Code Sample----------
Set threadSet = Thread.getAllStackTraces().keySet();
Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
for(Thread t:threadArray) {
if(t.getName().contains(""Abandoned connection cleanup thread"")) {
synchronized(t) {
t.stop(); //don't complain, it works
}
}
}

try {
AbandonedConnectionCleanupThread.shutdown();
} catch (InterruptedException e) {
logger.warn(""SEVERE problem cleaning up: "" + e.getMessage());
e.printStackTrace();
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
java Producer-Consumer Not always terminating
----------Explanation----------
An ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.
----------Code Sample----------
Producer: I love: 1 pool-2-thread-2
Producer: I love: 3 pool-2-thread-4
Producer: I love: 2 pool-2-thread-3
Producer: I love: 5 pool-2-thread-2
Producer: I love: 7 pool-2-thread-2
Producer: I love: 4 pool-2-thread-5
Producer: I love: 6 pool-2-thread-6
Producer: I love: 8 pool-2-thread-7
Producer: I love: 10 pool-2-thread-2
Producer: I love: 9 pool-2-thread-5
Producer: I love: 11 pool-2-thread-8
Producer: I love: 12 pool-2-thread-9
Producer: I love: 14 pool-2-thread-10
Producer: I love: 13 pool-2-thread-2
Producer: I love: 16 pool-2-thread-10
Producer: I love: 15 pool-2-thread-11
Producer: I love: 17 pool-2-thread-12
Producer: I love: 20 pool-2-thread-14
Producer: I love: 19 pool-2-thread-10
Producer: I love: 18 pool-2-thread-13
Producer: I love: 0 pool-2-thread-1
Producer: I love: 22 pool-2-thread-12
Producer: I love: 21 pool-2-thread-15
Producer: I love: 25 pool-2-thread-3
Producer: I love: 27 pool-2-thread-12
Producer: I love: 26 pool-2-thread-10
Producer: I love: 24 pool-2-thread-15
Producer: I love: 28 pool-2-thread-1
Producer: I love: 23 pool-2-thread-16
Producer: I love: 31 pool-2-thread-11
Producer: I love: 30 pool-2-thread-16
Producer: I love: 32 pool-2-thread-1
Producer: I love: 36 pool-2-thread-3
Consumer: I love: 2 pool-1-thread-1

Consumer: I love: 9975 pool-1-thread-1
Consumer: I love: 9977 pool-1-thread-1
Consumer: I love: 9978 pool-1-thread-1
Consumer: I love: 9979 pool-1-thread-1
Consumer: I love: 9981 pool-1-thread-1
Producer: I love: 9996 pool-2-thread-16
Consumer: I love: 9984 pool-1-thread-1
Consumer: I love: 9985 pool-1-thread-1
Consumer: I love: 9990 pool-1-thread-1
Consumer: I love: 9992 pool-1-thread-1
Producer: I love: 9997 pool-2-thread-16
Consumer: I love: 9994 pool-1-thread-1
Consumer: I love: 9995 pool-1-thread-1
Consumer: I love: 9996 pool-1-thread-1
Producer: I love: 9998 pool-2-thread-16
Producer: I love: 9999 pool-2-thread-16
Consumer: I love: 9997 pool-1-thread-1
Consumer: I love: 9998 pool-1-thread-1
Consumer: I love: 9999 pool-1-thread-1
finally
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java - creating a new thread
----------Explanation----------
You are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:
----------Code Sample----------
one = new Thread() {
public void run() {
try {
System.out.println(""Does it work?"");

Thread.sleep(1000);

System.out.println(""Nope, it doesnt...again."");
} catch(InterruptedException v) {
System.out.println(v);
}
} 
};

one.start();
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Starting a Java class in different threads
----------Explanation----------

----------Code Sample----------
$ javac Bar.java
$ java Bar
Thread ID 9 running
Thread ID 10 running
Thread ID 8 running
Doing something on thread 9
Doing something on thread 10
Doing something on thread 8
Thread ID 9 running
Doing something on thread 9
Thread ID 8 running
Doing something on thread 8
Thread ID 10 running
Doing something on thread 10

public class Bar
{

static private final class MyOtherClass
{
public void doSomething()
{
System.out.println(""Doing something on thread ""+Thread.currentThread().getId());
}
}

static private MyOtherClass myOtherClass=new MyOtherClass();

static private final class MyThreadClass implements Runnable
{
public void run()
{
while (true)
{
try
{
Thread.sleep(1000);
}
catch (InterruptedException ie)
{
System.err.println(""Interrupted"");
return;
}
System.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");
myOtherClass.doSomething();
}
}
}

static public void main(String[] args)
{
Thread t1=new Thread(new MyThreadClass());
Thread t2=new Thread(new MyThreadClass());
Thread t3=new Thread(new MyThreadClass());
t1.start();
t2.start();
t3.start();
}

}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How can I create a completely-connected graph of clients?
----------Explanation----------

----------Code Sample----------
if(localHostName == hostNames[i])

if(localHostName.equals(hostNames[i]))

public class MyServer implements Runnable {

private final String[] hostnames;

public MyServer(String... hostnames) {
this.hostnames = hostnames;
}

public void run() {
for (String hostname : hostnames) {
// connect to hostname
}
}

}

Thread[] threads = new Thread[6];
threads[0] = new Thread(new MyServer(""foo"", ""bar""));
threads[1] = new Thread(new MyServer(""bar"", ""dog""));
...
for (Thread thread : threads) {
thread.start();
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully
----------Explanation----------

----------Code Sample----------
public class DaemonThreadPlay {
public static void main(String [] args) {
Thread daemonThread = new Thread() {
public void run() {
while (true) {
try {
System.out.println(""Try block executed"");
Thread.sleep(1000l);
} catch (Throwable t) {
t.printStackTrace();
}
}
}

@Override
public void finalize() {
System.out.println(""Finalize method called"");
}
};
daemonThread.setDaemon(true);
daemonThread.start();

try {
Thread.sleep(2500l);
} catch (Throwable t) {
//NO-OP
}
}
} 

Thread shutdownHook = ... // construct thread that somehow
// knows about all the daemon threads
Runtime.getRuntime().addShutdownHook(shutdownHook);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Thread.join does not seem to work in my code; am I using it right?
----------Explanation----------
So, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.
----------Code Sample----------
public class ClipSetThread extends Thread {

Clipboard sysClip = null;
TheAppClass theApp = null;

private String toClipboard;

public ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {
theApp = app;
sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
this.toClipboard = toClipBoard;
// !! Check to see if the thread is also alive before trying to join with it...
if (waitFor != null && waitFor.isAlive()) {
try {
waitFor.join();
} catch (InterruptedException e) {
}
}
}

// You should really put your logic into the `run` method in order to allow
// the code to actually run in a separate thread...otherwise there is no
// point in using a thread....
@Override
public void run() {
// Two strings that will hopefully never be on the clipboard
String checkStr1 = ""9999999999999"";
String checkStr2 = ""99999999999999"";
// When we read in the clipboard we want to see if we change these strings from the ones they
// will never be, if they do change we read the clipboard successfully
String clipBoardTextBefore = checkStr1;
String clipBoardTextAfter = checkStr2;

// First get a copy of the current system clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to change the string it means we failed to read the text
if (clipBoardTextBefore.equals(checkStr1)) {
theApp.updateOutput(""Could NOT get sysClip text"");
} else {
// If we didn't failed to get the current text try to change it
while (true) {
try {
sysClip.setContents(new StringSelection(toClipboard), null);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}

// Now again check to see the clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to read the clipboard text
if (clipBoardTextAfter.equals(checkStr2)) {
theApp.updateOutput(""Could NOT check if sysClip update was successful"");
} else { // We re-read the clipboard text, see if it changed from the original clipboard text 
if (clipBoardTextAfter.equals(checkStr1)) {
theApp.updateOutput(""Could NOT successfully set clipboard text"");
} else {
theApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\n"");
}
}
}
}

}

public class Automator extends Thread implements NativeMouseInputListener {

// A ""locking"" object...
private static final Object WAIT_LOCK = new Object();

Robot rob = null;
TheAppClass theApp = null;
ClipSetThread lastClipSet = null;
boolean doit = false;
boolean settingClip = false;

public void run() {
try // to make the Global hook
{
GlobalScreen.registerNativeHook();
} catch (NativeHookException ex) {
theApp.updateOutput(""No Global Keyboard or Mouse Hook"");
return;
}
try // to create a robot (can simulate user input such as mouse and keyboard input)
{
rob = new Robot();
} catch (AWTException e1) {
theApp.updateOutput(""The Robot could not be created"");
return;
}

// This is wasteful...
// while (true) {
// }
// Locks do not consume CPU cycles while in the wait state...
synchronized (WAIT_LOCK) {
try {
WAIT_LOCK.wait();
} catch (Exception exp) {
}
}
}

public void dispose() {

// Tell the thread it can terminate...
synchronized (WAIT_LOCK) {
WAIT_LOCK.notify();
}
// This will STOP the current thread (which called this method)
// while the lastClipSet finishes...
if (lastClipSet != null && lastClipSet.isAlive()) {
lastClipSet.join();
}

}

public void setClip(String arg) {
ClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);
lastClipSet = set;
// You MUST START the thread...
set.start();
}

/*...*/
}

while(true)
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
}
catch(Exception e)
{
try {Thread.sleep(20);} catch (InterruptedException e1) {}
continue;
}
break;
}

boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
}
catch(Exception e)
{
retries++;
try {Thread.sleep(20);} catch (InterruptedException e1) {}
}
}

public class Engine extends Thread {

private Robot rob = null;
private PasteThread lastClipSet = null;

public void setClip(String arg) {
if (lastClipSet != null && lastClipSet.isAlive()) {
try {
lastClipSet.join();
} catch (InterruptedException ex) {
ex.printStackTrace();
}
}
PasteThread set = new PasteThread(arg);
lastClipSet = set;
lastClipSet.start();
}

public void pasteAtCursorLocation(String text) {
System.out.println(""Paste "" + text);
setClip(text);
rob.keyPress(KeyEvent.VK_CONTROL);
rob.keyPress(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_CONTROL);
}

public Engine() throws AWTException {
rob = new Robot();
rob.setAutoDelay(250);
try {
Thread.sleep(5000);
} catch (InterruptedException ex) {
}
pasteAtCursorLocation(""This is a simple test, thanks for watching!"");
}

public static void main(String[] args) {
try {
new Engine();
} catch (AWTException ex) {
Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);
}

}

public class PasteThread extends Thread {

private String toPaste;

public PasteThread(String value) {

toPaste = value;

}

@Override
public void run() {
Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
System.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));
sysClip.setContents(new StringSelection(toPaste), null);
System.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));
}

public String getClipboardContents(Clipboard clipboard) {
String value = null;
boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
Transferable contents = clipboard.getContents(null);
if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
try {
value = (String) contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
} catch (Exception exp) {
retries++;
exp.printStackTrace();
}
} else {
retries++;
}
}
System.out.println(successful + ""/"" + retries);
return value;
}
}
}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How to Pause and Resume a Thread in Java from another Thread
----------Explanation----------
So in this particular case, perhaps change MyThread as follows:
----------Code Sample----------
class MyThread extends Thread {

private volatile boolean running = true; // Run unless told to pause

...

@Override
public void run()
{
for(int i=0 ; ; i++)
{
// Only keep painting while ""running"" is true
// This is a crude implementation of pausing the thread
while (!running)
yield;

area.setText(i+"""");
}

public void pauseThread() throws InterruptedException
{
running = false;
}

public void resumeThread()
{
running = true;
}

}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Turning an ExecutorService to daemon in Java
----------Explanation----------
You can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:
----------Code Sample----------
ExecutorService exec = Executors.newFixedThreadPool(4,
new ThreadFactory() {
public Thread newThread(Runnable r) {
Thread t = Executors.defaultThreadFactory().newThread(r);
t.setDaemon(true);
return t;
}
});

exec.execute(YourTaskNowWillBeDaemon);

ExecutorService exec = MoreExecutors.getExitingExecutorService(
(ThreadPoolExecutor) Executors.newFixedThreadPool(4), 
100_000, TimeUnit.DAYS//period after which executor will be automatically closed
//I assume that 100_000 days is enough to simulate infinity
);
//exec.execute(YourTask);
exec.execute(() -> {
for (int i = 0; i < 3; i++) {
System.out.println(""daemon"");
try {
TimeUnit.SECONDS.sleep(1);
} catch (Exception e) {
e.printStackTrace();
}
}
});
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Problem with synchronizing on String objects?
----------Explanation----------
Without putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:
----------Code Sample----------
final String firstkey = ""Data-"" + email;
final String key = firstkey.intern();

// do not attempt double-check locking here. I mean it.
synchronized(StaticObject) {
data = StaticCache.get(key);
while (data == IN_PROGRESS) {
// another thread is getting the data
StaticObject.wait();
data = StaticCache.get(key);
}
if (data == null) {
// we must get the data
StaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);
}
}
if (data == null) {
// we must get the data
try {
data = server.DoSlowThing(key);
} finally {
synchronized(StaticObject) {
// WARNING: failure here is fatal, and must be allowed to terminate
// the app or else waiters will be left forever. Choose a suitable
// collection type in which replacing the value for a key is guaranteed.
StaticCache.put(key, data, CURRENT_TIME);
StaticObject.notifyAll();
}
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Possible to catch the OS doing Context Switching on threads?
----------Explanation----------

----------Code Sample----------
public class Test {
public static long count = 0;

public static void main(String[] args) {
for (int run = 0; run < 5; ++run) {
Test.count = 0;

Thread[] threads = new Thread[10];

for (int i = 0; i < threads.length; ++i) {
threads[i] = new Thread(new Runnable() {
public void run() {
for (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {
Test.count += 1;
}
}
});
}

for (int i = 0; i < threads.length; ++i) {
threads[i].start();
}

for (int i = 0; i < threads.length; ++i) {
try {
threads[i].join();
} catch (InterruptedException e) {
e.printStackTrace();
}
}

System.out.println(Test.count);
}
}
}

1443685504
1439908180
1461384255
1477413204
1440892041
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
JavaFX periodic background task
----------Explanation----------
You can use Timeline for what matter:
----------Code Sample----------
Timeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {

@Override
public void handle(ActionEvent","['"""""" The code was very messy and I don\'t like this approach. Instead of get(), which waits for completion, use process() and setProgress() to show intermediate results, as suggested in this simple example or this related example. 1.1kThe join() method allows one thread to wait for the completion of another.However, as with sleep, join is dependent on the OS for timing, so you should not assume that join will wait exactly as long as you specify. Jatin MandankaJatin Mandanka\n\n""""""']",0.224489796,0.307692308,1
lang,Thread,When does Javas Thread.sleep throw InterruptedException?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor âÃÃ¶âÃâÂ¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on âÃÃ¶âÃâÂ¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesnâÃÃ¶âÃâÂ¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time âÃÃ¶âÃâÃ context switches  even just   to the OS and back  arenâÃÃ¶âÃâÂ¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","Most common way to construct:
Thread t1 = new Thread();
Based on 25 examples","In this solution, I defined an interface Interruptible, and a method ignoreInterruption which converts an Interruptible to a Runnable:

public class Foo {

  public static void main(String... args) {
    new Thread(ignoreInterruption(Foo::bar)).start();
    new Thread(ignoreInterruption(() -> Foo.baz(1, 2, 3))).start();
  }

  static void bar() throws InterruptedException {
    // do something
    Thread.sleep(1000);
  }

  static void baz(int a, int b, int c) throws InterruptedException {
    // do something
    Thread.sleep(1000);
  }  

  interface Interruptible {
    public void run() throws InterruptedException;
  }

  static Runnable ignoreInterruption(Interruptible interruptible) {
    return () -> { 
      try {
        interruptible.run();
      }
      catch(InterruptedException ie) {
        // ignored
      }
    };
  }

}","*******************usage scenario 1********************** 
----------usage scenario----------
What is the difference between atomic / volatile / synchronized?
----------Explanation----------
You are specifically asking about how they internally work , so here you are: 

No synchronization
----------Code Sample----------
private int counter;

public int getNextUniqueIndex() {
return counter++; 
}

private boolean stopped;

public void run() {
while(!stopped) {
//do some work
}
}

public void pleaseStop() {
stopped = true;
}

private AtomicInteger counter = new AtomicInteger();

public int getNextUniqueIndex() {
return counter.getAndIncrement();
}

int current;
do {
current = get();
} while(!compareAndSet(current, current + 1));

private volatile int counter;

public int getNextUniqueIndex() {
return counter++; 
}

volatile int i = 0;
void incIBy5() {
i += 5;
}

void incIBy5() {
int temp;
synchronized(i) { temp = i }
synchronized(i) { i = temp + 5 }
}

synchronized(new Object()) {
//thread-safe, SRSLy?
}

void synchronized incIBy5() {
i += 5 
}

void incIBy5() {
synchronized(this) {
i += 5 
}
}

void incIBy5() {
synchronized(this) {
int temp = i;
i = temp + 5;
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java how to pass a thread an extra object
----------Explanation----------
Why not pass the different Thread s different Runnable s?
----------Code Sample----------
Runnable r1 = new Runnable() { public void run() { /* this is r1 */ } };
Runnable r2 = new Runnable() { public void run() { /* this is r2 */ } };
Thread t1 = new Thread(r1);
Thread t2 = new Thread(r2);
t1.start();
t2.start();

public class MyRunnable implements Runnable {
private final String s;

public MyRunnable(Stirng s) {
this.s = s;
}

public void run() {
// do something with s
}
}

Thread t1 = new Thread(new MyRunnable(""s1""));
Thread t2 = new Thread(new MyRunnable(""s2""));
t1.start();
t2.start();

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ExecutorServiceExample {
private static class CallableExample implements Callable {
private final Object foo;

private CallableExample(Object foo) {
this.foo = foo;
}

@Override
public Integer call() {
// do something and return it
return foo.hashCode();
}

}

public static void main(String[] args) throws InterruptedException, ExecutionException {
ExecutorService e = Executors.newFixedThreadPool(2);
Future f1 = e.submit(new CallableExample(""foo""));
Future f2 = e.submit(new CallableExample(""bar""));

System.out.println(f1.get());
System.out.println(f2.get());

e.shutdown();
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
RabbitMQ by Example: Multiple Threads, Channels and Queues
----------Explanation----------
A thread pool can be described as a collection of Runnable objects
(work queue) and a connections of running threads. These threads are
constantly running and are checking the work query for new work. If
there is new work to be done they execute this Runnable. The Thread
class itself provides a method, e.g. execute(Runnable r) to add a new
Runnable object to the work queue.
----------Code Sample----------
public class Main {
private static final int NTHREDS = 10;

public static void main(String[] args) {
ExecutorService executor = Executors.newFixedThreadPool(NTHREDS);
for (int i = 0; i < 500; i++) {
Runnable worker = new MyRunnable(10000000L + i);
executor.execute(worker);
}
// This will make the executor accept no new threads
// and finish all existing threads in the queue
executor.shutdown();
// Wait until all threads are finish
executor.awaitTermination();
System.out.println(""Finished all threads"");
}
} 

class CompositeRunnable implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(Runnable a) {
queue.add(a);
}

@Override
public void run() {
for(Runnable r: queue) {
r.run();
}
}
}

class CompositeMessageWorker implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(T message) {
queue.add(message);
}

@Override
public void run() {
for(T message: queue) {
// process a message
}
}
}

static class Worker extends DefaultConsumer {

String name;
Channel channel;
String queue;
int processed;
ExecutorService executorService;

public Worker(int prefetch, ExecutorService threadExecutor,
, Channel c, String q) throws Exception {
super(c);
channel = c;
queue = q;
channel.basicQos(prefetch);
channel.basicConsume(queue, false, this);
executorService = threadExecutor;
}

@Override
public void handleDelivery(String consumerTag,
Envelope envelope,
AMQP.BasicProperties properties,
byte[] body) throws IOException {
Runnable task = new VariableLengthTask(this,
envelope.getDeliveryTag(),
channel);
executorService.submit(task);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Where to stop/destroy threads in Android Service class?
----------Explanation----------
1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):
----------Code Sample----------
private volatile Thread runner;

public synchronized void startThread(){
if(runner == null){
runner = new Thread(this);
runner.start();
}
}

public synchronized void stopThread(){
if(runner != null){
Thread moribund = runner;
runner = null;
moribund.interrupt();
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary

if(/*fatal error*/){
stopThread();
return; //optional in this case since the loop will exit anyways
}
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Obtaining CPU thread usage in Java
----------Explanation----------
You can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:
----------Code Sample----------
private int sampleTime = 10000;
private ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
private RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
private OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();
private Map threadInitialCPU = new HashMap();
private Map threadCPUUsage = new HashMap();
private long initialUptime = runtimeMxBean.getUptime();

ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

try {Thread.sleep(sampleTime);} catch (InterruptedException e) {}

long upTime = runtimeMxBean.getUptime();

Map threadCurrentCPU = new HashMap();
ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

// CPU over all processes
//int nrCPUs = osMxBean.getAvailableProcessors();
// total CPU: CPU % can be more than 100% (devided over multiple cpus)
long nrCPUs = 1;
// elapsedTime is in ms.
long elapsedTime = (upTime - initialUptime);
for (ThreadInfo info : threadInfos) {
// elapsedCpu is in ns
Long initialCPU = threadInitialCPU.get(info.getThreadId());
if (initialCPU != null) {
long elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;
float cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);
threadCPUUsage.put(info.getThreadId(), cpuUsage);
}
}

// threadCPUUsage contains cpu % per thread
System.out.println(threadCPUUsage);
// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Threads Java Inturrupts
----------Explanation----------
I'm not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you'd do something like:
----------Code Sample----------
Thething theThing = new TheThing();
// set it to be a daemon thread before it starts
theThing.setDaemon(true);
theThing.start();

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to kill the thread now
tth.shutdown = true;
}

public class TheThing extends Thread {
volatile boolean shutdown = false;
public void run() {
while (!shutdown) {
...
// you can also test for shutdown while processing
if (shutdown) {
return;
}
}
}
}

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to interrupt the thread now
tth.interrupt();
}

public class TheThing extends Thread {
public void run() {
while (!Thread.currentThread().interrupted()) {
...
}
}
}

try {
Thread.sleep(1000);
} catch (InterruptedException e) {
// catching the interrupted exception clears the interrupt flag,
// so we need to re-enable it
Thread.currentThread().interrupt();
// probably you want to stop the thread if it is interrupted
return;
}

tth.shutdown = true;
// or tth.interrupt()
tth.join();

...
MyHandler handler = new MyHandler();
// catch the control-c signal, ""TERM"" is another common kill signal
Signal.handle(new Signal(""INT""), handler);
...

private static class MyHandler implements SignalHandler {
@Override
public void handle(Signal arg0) {
// interrupt your threads
// clean up stuff
// set shutdown flags
// ...
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How does sleep() method work on given thread and output?
----------Explanation----------
You have created two Runnable objects. If you run them by calling their run method you would get what you imagine:
----------Code Sample----------
Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.run()"");
m1.run(); // we call run method
System.out.println(""Calling m2.run()"");
m2.run();

Calling m1.run()
1
2
3
4
Calling m2.run()
1
2
3
4

Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.start()"");
m1.start(); // thread calls run method
System.out.println(""Calling m2.start()"");
m2.start();

Calling m1.start()
Calling m2.start()
1 < From thread 1
1 < From thread 2
2 ...
2
3
3
4
4

public class Aaa implements Runnable {
public void run() {
for (int i = 1; i < 5; i++) {
try {
Thread.sleep(500); // sleeps thread
} catch (InterruptedException e) {
System.out.println(e);
}
System.out.println(i);
}
}

public static void main(String[] args) {
Aaa m1 = new Aaa(); // creating one object
Thread t1 = new Thread(m1); // Its thread
Aaa m2 = new Aaa(); // creating second object of a class
Thread t2 = new Thread(m2); // Its thread
t1.start(); // calls m's run method in a new thread.
t2.start();
}

}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
comparison of code performance, threaded versus non-threaded
----------Explanation----------
By putting the join() in the loop, you're starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:
----------Code Sample----------
public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

// Pull thread pool count out into a value so you can easily change it
int threadCount = 10000;
Thread[] threads = new Thread[threadCount];

// Start all threads
for(int i = 0;i < threadCount;i++) {
// Pass list to each Runnable here
// Also, I added +i here as I think the intention is 
// to test 10000 possible numbers>5 for primeness - 
// was testing 5 in all loops
PrimeRunnable pr = new PrimeRunnable(primeStart+i, list);
Thread[i] threads = new Thread(pr);
threads[i].start(); // thread is now running in parallel
}

// All threads now running in parallel

// Then wait for all threads to complete
for(int i=0; i threads[i].join();
}
}

public class PrimeRunnable implements Runnable { 
private int from;
private List results; // shared but thread-safe

public PrimeRunnable(int from, List results) {
this.from = from;
this.results = results;
}

public void isPrime(int number) {
for(int i = 2;i < from;i++) {
if((number % i) == 0) {
return;
}
}
// found prime, add to shared results
this.results.add(number);
}

public void run() {
isPrime(from); // don't increment, just check one number
} 
}

public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

int threadCount = 16; // Experiment with this to find best on your machine
ExecutorService exec = Executors.newFixedThreadPool(threadCount);

int workCount = 10000; // See how # of work is now separate from # of threads?
for(int i = 0;i < workCount;i++) {
// submit work to the svc for execution across the thread pool 
exec.execute(new PrimeRunnable(primeStart+i, list));
}

// Wait for all tasks to be done or timeout to go off
exec.awaitTermination(1, TimeUnit.DAYS);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Tomcat Guice/JDBC Memory Leak
----------Explanation----------

----------Code Sample----------
Set threadSet = Thread.getAllStackTraces().keySet();
Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
for(Thread t:threadArray) {
if(t.getName().contains(""Abandoned connection cleanup thread"")) {
synchronized(t) {
t.stop(); //don't complain, it works
}
}
}

try {
AbandonedConnectionCleanupThread.shutdown();
} catch (InterruptedException e) {
logger.warn(""SEVERE problem cleaning up: "" + e.getMessage());
e.printStackTrace();
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
java Producer-Consumer Not always terminating
----------Explanation----------
An ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.
----------Code Sample----------
Producer: I love: 1 pool-2-thread-2
Producer: I love: 3 pool-2-thread-4
Producer: I love: 2 pool-2-thread-3
Producer: I love: 5 pool-2-thread-2
Producer: I love: 7 pool-2-thread-2
Producer: I love: 4 pool-2-thread-5
Producer: I love: 6 pool-2-thread-6
Producer: I love: 8 pool-2-thread-7
Producer: I love: 10 pool-2-thread-2
Producer: I love: 9 pool-2-thread-5
Producer: I love: 11 pool-2-thread-8
Producer: I love: 12 pool-2-thread-9
Producer: I love: 14 pool-2-thread-10
Producer: I love: 13 pool-2-thread-2
Producer: I love: 16 pool-2-thread-10
Producer: I love: 15 pool-2-thread-11
Producer: I love: 17 pool-2-thread-12
Producer: I love: 20 pool-2-thread-14
Producer: I love: 19 pool-2-thread-10
Producer: I love: 18 pool-2-thread-13
Producer: I love: 0 pool-2-thread-1
Producer: I love: 22 pool-2-thread-12
Producer: I love: 21 pool-2-thread-15
Producer: I love: 25 pool-2-thread-3
Producer: I love: 27 pool-2-thread-12
Producer: I love: 26 pool-2-thread-10
Producer: I love: 24 pool-2-thread-15
Producer: I love: 28 pool-2-thread-1
Producer: I love: 23 pool-2-thread-16
Producer: I love: 31 pool-2-thread-11
Producer: I love: 30 pool-2-thread-16
Producer: I love: 32 pool-2-thread-1
Producer: I love: 36 pool-2-thread-3
Consumer: I love: 2 pool-1-thread-1

Consumer: I love: 9975 pool-1-thread-1
Consumer: I love: 9977 pool-1-thread-1
Consumer: I love: 9978 pool-1-thread-1
Consumer: I love: 9979 pool-1-thread-1
Consumer: I love: 9981 pool-1-thread-1
Producer: I love: 9996 pool-2-thread-16
Consumer: I love: 9984 pool-1-thread-1
Consumer: I love: 9985 pool-1-thread-1
Consumer: I love: 9990 pool-1-thread-1
Consumer: I love: 9992 pool-1-thread-1
Producer: I love: 9997 pool-2-thread-16
Consumer: I love: 9994 pool-1-thread-1
Consumer: I love: 9995 pool-1-thread-1
Consumer: I love: 9996 pool-1-thread-1
Producer: I love: 9998 pool-2-thread-16
Producer: I love: 9999 pool-2-thread-16
Consumer: I love: 9997 pool-1-thread-1
Consumer: I love: 9998 pool-1-thread-1
Consumer: I love: 9999 pool-1-thread-1
finally
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java - creating a new thread
----------Explanation----------
You are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:
----------Code Sample----------
one = new Thread() {
public void run() {
try {
System.out.println(""Does it work?"");

Thread.sleep(1000);

System.out.println(""Nope, it doesnt...again."");
} catch(InterruptedException v) {
System.out.println(v);
}
} 
};

one.start();
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Starting a Java class in different threads
----------Explanation----------

----------Code Sample----------
$ javac Bar.java
$ java Bar
Thread ID 9 running
Thread ID 10 running
Thread ID 8 running
Doing something on thread 9
Doing something on thread 10
Doing something on thread 8
Thread ID 9 running
Doing something on thread 9
Thread ID 8 running
Doing something on thread 8
Thread ID 10 running
Doing something on thread 10

public class Bar
{

static private final class MyOtherClass
{
public void doSomething()
{
System.out.println(""Doing something on thread ""+Thread.currentThread().getId());
}
}

static private MyOtherClass myOtherClass=new MyOtherClass();

static private final class MyThreadClass implements Runnable
{
public void run()
{
while (true)
{
try
{
Thread.sleep(1000);
}
catch (InterruptedException ie)
{
System.err.println(""Interrupted"");
return;
}
System.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");
myOtherClass.doSomething();
}
}
}

static public void main(String[] args)
{
Thread t1=new Thread(new MyThreadClass());
Thread t2=new Thread(new MyThreadClass());
Thread t3=new Thread(new MyThreadClass());
t1.start();
t2.start();
t3.start();
}

}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How can I create a completely-connected graph of clients?
----------Explanation----------

----------Code Sample----------
if(localHostName == hostNames[i])

if(localHostName.equals(hostNames[i]))

public class MyServer implements Runnable {

private final String[] hostnames;

public MyServer(String... hostnames) {
this.hostnames = hostnames;
}

public void run() {
for (String hostname : hostnames) {
// connect to hostname
}
}

}

Thread[] threads = new Thread[6];
threads[0] = new Thread(new MyServer(""foo"", ""bar""));
threads[1] = new Thread(new MyServer(""bar"", ""dog""));
...
for (Thread thread : threads) {
thread.start();
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully
----------Explanation----------

----------Code Sample----------
public class DaemonThreadPlay {
public static void main(String [] args) {
Thread daemonThread = new Thread() {
public void run() {
while (true) {
try {
System.out.println(""Try block executed"");
Thread.sleep(1000l);
} catch (Throwable t) {
t.printStackTrace();
}
}
}

@Override
public void finalize() {
System.out.println(""Finalize method called"");
}
};
daemonThread.setDaemon(true);
daemonThread.start();

try {
Thread.sleep(2500l);
} catch (Throwable t) {
//NO-OP
}
}
} 

Thread shutdownHook = ... // construct thread that somehow
// knows about all the daemon threads
Runtime.getRuntime().addShutdownHook(shutdownHook);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Thread.join does not seem to work in my code; am I using it right?
----------Explanation----------
So, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.
----------Code Sample----------
public class ClipSetThread extends Thread {

Clipboard sysClip = null;
TheAppClass theApp = null;

private String toClipboard;

public ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {
theApp = app;
sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
this.toClipboard = toClipBoard;
// !! Check to see if the thread is also alive before trying to join with it...
if (waitFor != null && waitFor.isAlive()) {
try {
waitFor.join();
} catch (InterruptedException e) {
}
}
}

// You should really put your logic into the `run` method in order to allow
// the code to actually run in a separate thread...otherwise there is no
// point in using a thread....
@Override
public void run() {
// Two strings that will hopefully never be on the clipboard
String checkStr1 = ""9999999999999"";
String checkStr2 = ""99999999999999"";
// When we read in the clipboard we want to see if we change these strings from the ones they
// will never be, if they do change we read the clipboard successfully
String clipBoardTextBefore = checkStr1;
String clipBoardTextAfter = checkStr2;

// First get a copy of the current system clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to change the string it means we failed to read the text
if (clipBoardTextBefore.equals(checkStr1)) {
theApp.updateOutput(""Could NOT get sysClip text"");
} else {
// If we didn't failed to get the current text try to change it
while (true) {
try {
sysClip.setContents(new StringSelection(toClipboard), null);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}

// Now again check to see the clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to read the clipboard text
if (clipBoardTextAfter.equals(checkStr2)) {
theApp.updateOutput(""Could NOT check if sysClip update was successful"");
} else { // We re-read the clipboard text, see if it changed from the original clipboard text 
if (clipBoardTextAfter.equals(checkStr1)) {
theApp.updateOutput(""Could NOT successfully set clipboard text"");
} else {
theApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\n"");
}
}
}
}

}

public class Automator extends Thread implements NativeMouseInputListener {

// A ""locking"" object...
private static final Object WAIT_LOCK = new Object();

Robot rob = null;
TheAppClass theApp = null;
ClipSetThread lastClipSet = null;
boolean doit = false;
boolean settingClip = false;

public void run() {
try // to make the Global hook
{
GlobalScreen.registerNativeHook();
} catch (NativeHookException ex) {
theApp.updateOutput(""No Global Keyboard or Mouse Hook"");
return;
}
try // to create a robot (can simulate user input such as mouse and keyboard input)
{
rob = new Robot();
} catch (AWTException e1) {
theApp.updateOutput(""The Robot could not be created"");
return;
}

// This is wasteful...
// while (true) {
// }
// Locks do not consume CPU cycles while in the wait state...
synchronized (WAIT_LOCK) {
try {
WAIT_LOCK.wait();
} catch (Exception exp) {
}
}
}

public void dispose() {

// Tell the thread it can terminate...
synchronized (WAIT_LOCK) {
WAIT_LOCK.notify();
}
// This will STOP the current thread (which called this method)
// while the lastClipSet finishes...
if (lastClipSet != null && lastClipSet.isAlive()) {
lastClipSet.join();
}

}

public void setClip(String arg) {
ClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);
lastClipSet = set;
// You MUST START the thread...
set.start();
}

/*...*/
}

while(true)
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
}
catch(Exception e)
{
try {Thread.sleep(20);} catch (InterruptedException e1) {}
continue;
}
break;
}

boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
}
catch(Exception e)
{
retries++;
try {Thread.sleep(20);} catch (InterruptedException e1) {}
}
}

public class Engine extends Thread {

private Robot rob = null;
private PasteThread lastClipSet = null;

public void setClip(String arg) {
if (lastClipSet != null && lastClipSet.isAlive()) {
try {
lastClipSet.join();
} catch (InterruptedException ex) {
ex.printStackTrace();
}
}
PasteThread set = new PasteThread(arg);
lastClipSet = set;
lastClipSet.start();
}

public void pasteAtCursorLocation(String text) {
System.out.println(""Paste "" + text);
setClip(text);
rob.keyPress(KeyEvent.VK_CONTROL);
rob.keyPress(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_CONTROL);
}

public Engine() throws AWTException {
rob = new Robot();
rob.setAutoDelay(250);
try {
Thread.sleep(5000);
} catch (InterruptedException ex) {
}
pasteAtCursorLocation(""This is a simple test, thanks for watching!"");
}

public static void main(String[] args) {
try {
new Engine();
} catch (AWTException ex) {
Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);
}

}

public class PasteThread extends Thread {

private String toPaste;

public PasteThread(String value) {

toPaste = value;

}

@Override
public void run() {
Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
System.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));
sysClip.setContents(new StringSelection(toPaste), null);
System.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));
}

public String getClipboardContents(Clipboard clipboard) {
String value = null;
boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
Transferable contents = clipboard.getContents(null);
if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
try {
value = (String) contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
} catch (Exception exp) {
retries++;
exp.printStackTrace();
}
} else {
retries++;
}
}
System.out.println(successful + ""/"" + retries);
return value;
}
}
}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How to Pause and Resume a Thread in Java from another Thread
----------Explanation----------
So in this particular case, perhaps change MyThread as follows:
----------Code Sample----------
class MyThread extends Thread {

private volatile boolean running = true; // Run unless told to pause

...

@Override
public void run()
{
for(int i=0 ; ; i++)
{
// Only keep painting while ""running"" is true
// This is a crude implementation of pausing the thread
while (!running)
yield;

area.setText(i+"""");
}

public void pauseThread() throws InterruptedException
{
running = false;
}

public void resumeThread()
{
running = true;
}

}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Turning an ExecutorService to daemon in Java
----------Explanation----------
You can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:
----------Code Sample----------
ExecutorService exec = Executors.newFixedThreadPool(4,
new ThreadFactory() {
public Thread newThread(Runnable r) {
Thread t = Executors.defaultThreadFactory().newThread(r);
t.setDaemon(true);
return t;
}
});

exec.execute(YourTaskNowWillBeDaemon);

ExecutorService exec = MoreExecutors.getExitingExecutorService(
(ThreadPoolExecutor) Executors.newFixedThreadPool(4), 
100_000, TimeUnit.DAYS//period after which executor will be automatically closed
//I assume that 100_000 days is enough to simulate infinity
);
//exec.execute(YourTask);
exec.execute(() -> {
for (int i = 0; i < 3; i++) {
System.out.println(""daemon"");
try {
TimeUnit.SECONDS.sleep(1);
} catch (Exception e) {
e.printStackTrace();
}
}
});
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Problem with synchronizing on String objects?
----------Explanation----------
Without putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:
----------Code Sample----------
final String firstkey = ""Data-"" + email;
final String key = firstkey.intern();

// do not attempt double-check locking here. I mean it.
synchronized(StaticObject) {
data = StaticCache.get(key);
while (data == IN_PROGRESS) {
// another thread is getting the data
StaticObject.wait();
data = StaticCache.get(key);
}
if (data == null) {
// we must get the data
StaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);
}
}
if (data == null) {
// we must get the data
try {
data = server.DoSlowThing(key);
} finally {
synchronized(StaticObject) {
// WARNING: failure here is fatal, and must be allowed to terminate
// the app or else waiters will be left forever. Choose a suitable
// collection type in which replacing the value for a key is guaranteed.
StaticCache.put(key, data, CURRENT_TIME);
StaticObject.notifyAll();
}
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Possible to catch the OS doing Context Switching on threads?
----------Explanation----------

----------Code Sample----------
public class Test {
public static long count = 0;

public static void main(String[] args) {
for (int run = 0; run < 5; ++run) {
Test.count = 0;

Thread[] threads = new Thread[10];

for (int i = 0; i < threads.length; ++i) {
threads[i] = new Thread(new Runnable() {
public void run() {
for (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {
Test.count += 1;
}
}
});
}

for (int i = 0; i < threads.length; ++i) {
threads[i].start();
}

for (int i = 0; i < threads.length; ++i) {
try {
threads[i].join();
} catch (InterruptedException e) {
e.printStackTrace();
}
}

System.out.println(Test.count);
}
}
}

1443685504
1439908180
1461384255
1477413204
1440892041
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
JavaFX periodic background task
----------Explanation----------
You can use Timeline for what matter:
----------Code Sample----------
Timeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {

@Override
public void handle(ActionEvent","['"""""" Java Thread Sleep and Interrupted Exception\n\nWhy does a sleep thread need a try catch to catch Interrupted Exception? Why does a sleep even emit an Interrupted Exception error? This are the two questions I really wanna find out about in java programming I\'ve been searching through google and i\'ve still haven\'t found a clear explanation is to why this two things happen. Jericho AganonJericho Aganon\n\n1\n\nFolks stumbling onto this from search engines who have more questions now about what InterruptedException is really for should check out this insightful answer: n\nAn InterruptedException is thrown when the thread is blocked/waiting and it is interrupted by another thread (by means of Thread.interrupt). Think of it as a request for immediate termination, that do not suffer the drawbacks of Thread.stop(). This way, even if you instruct a thread to sleep for several years, you are able to interrupt that thread. The recommended practice is aborting whatever you are processing when a InterruptedException is thrown. 7,4\n\nOh so, for example i have two frames, frame1 and frame2. Frame1 has a button that shows frame 2. By declaring an interrupted exception, I can click that button to show my frame2 while frame1 is sleeping?\n\nSorry, I don\'t have enough experience with concurrency in AWT/Swing. I use threads for background tasks. If you can rephrase your question not using GUI I would be happy to answer.""""""']",0.142857143,0.333333333,0.5
lang,Thread,Java: Thread.currentThread().sleep(x) vs. Thread.sleep(x),"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor âÃÃ¶âÃâÂ¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on âÃÃ¶âÃâÂ¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesnâÃÃ¶âÃâÂ¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time âÃÃ¶âÃâÃ context switches  even just   to the OS and back  arenâÃÃ¶âÃâÂ¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","Most common way to construct:
Thread t1 = new Thread();
Based on 25 examples","The Thread.interrupt() method interrupts the specific Thread that the instance references to:

Thread x = getSomeThreadInstance();
x.interrupt();
The x variable can refer to any thread instance.

The Thread.currentThread().interrupt() method is the same as before, but applied to the current Thread, interrupting only the current thread of execution. It is equivalent to:

Thread x = Thread.currentThread();
x.interrupt();
About Thread.sleep() and Thread.currentThread().sleep() there is no difference. sleep() is a static method on the Thread class, and makes no difference on the way you call it. Calling it causes the current thread of execution to pause for the indicated amount of time.

Nonetheless, one should not call static method on an instance, which means static method should be called in a static way.","*******************usage scenario 1********************** 
----------usage scenario----------
What is the difference between atomic / volatile / synchronized?
----------Explanation----------
You are specifically asking about how they internally work , so here you are: 

No synchronization
----------Code Sample----------
private int counter;

public int getNextUniqueIndex() {
return counter++; 
}

private boolean stopped;

public void run() {
while(!stopped) {
//do some work
}
}

public void pleaseStop() {
stopped = true;
}

private AtomicInteger counter = new AtomicInteger();

public int getNextUniqueIndex() {
return counter.getAndIncrement();
}

int current;
do {
current = get();
} while(!compareAndSet(current, current + 1));

private volatile int counter;

public int getNextUniqueIndex() {
return counter++; 
}

volatile int i = 0;
void incIBy5() {
i += 5;
}

void incIBy5() {
int temp;
synchronized(i) { temp = i }
synchronized(i) { i = temp + 5 }
}

synchronized(new Object()) {
//thread-safe, SRSLy?
}

void synchronized incIBy5() {
i += 5 
}

void incIBy5() {
synchronized(this) {
i += 5 
}
}

void incIBy5() {
synchronized(this) {
int temp = i;
i = temp + 5;
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java how to pass a thread an extra object
----------Explanation----------
Why not pass the different Thread s different Runnable s?
----------Code Sample----------
Runnable r1 = new Runnable() { public void run() { /* this is r1 */ } };
Runnable r2 = new Runnable() { public void run() { /* this is r2 */ } };
Thread t1 = new Thread(r1);
Thread t2 = new Thread(r2);
t1.start();
t2.start();

public class MyRunnable implements Runnable {
private final String s;

public MyRunnable(Stirng s) {
this.s = s;
}

public void run() {
// do something with s
}
}

Thread t1 = new Thread(new MyRunnable(""s1""));
Thread t2 = new Thread(new MyRunnable(""s2""));
t1.start();
t2.start();

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ExecutorServiceExample {
private static class CallableExample implements Callable {
private final Object foo;

private CallableExample(Object foo) {
this.foo = foo;
}

@Override
public Integer call() {
// do something and return it
return foo.hashCode();
}

}

public static void main(String[] args) throws InterruptedException, ExecutionException {
ExecutorService e = Executors.newFixedThreadPool(2);
Future f1 = e.submit(new CallableExample(""foo""));
Future f2 = e.submit(new CallableExample(""bar""));

System.out.println(f1.get());
System.out.println(f2.get());

e.shutdown();
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
RabbitMQ by Example: Multiple Threads, Channels and Queues
----------Explanation----------
A thread pool can be described as a collection of Runnable objects
(work queue) and a connections of running threads. These threads are
constantly running and are checking the work query for new work. If
there is new work to be done they execute this Runnable. The Thread
class itself provides a method, e.g. execute(Runnable r) to add a new
Runnable object to the work queue.
----------Code Sample----------
public class Main {
private static final int NTHREDS = 10;

public static void main(String[] args) {
ExecutorService executor = Executors.newFixedThreadPool(NTHREDS);
for (int i = 0; i < 500; i++) {
Runnable worker = new MyRunnable(10000000L + i);
executor.execute(worker);
}
// This will make the executor accept no new threads
// and finish all existing threads in the queue
executor.shutdown();
// Wait until all threads are finish
executor.awaitTermination();
System.out.println(""Finished all threads"");
}
} 

class CompositeRunnable implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(Runnable a) {
queue.add(a);
}

@Override
public void run() {
for(Runnable r: queue) {
r.run();
}
}
}

class CompositeMessageWorker implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(T message) {
queue.add(message);
}

@Override
public void run() {
for(T message: queue) {
// process a message
}
}
}

static class Worker extends DefaultConsumer {

String name;
Channel channel;
String queue;
int processed;
ExecutorService executorService;

public Worker(int prefetch, ExecutorService threadExecutor,
, Channel c, String q) throws Exception {
super(c);
channel = c;
queue = q;
channel.basicQos(prefetch);
channel.basicConsume(queue, false, this);
executorService = threadExecutor;
}

@Override
public void handleDelivery(String consumerTag,
Envelope envelope,
AMQP.BasicProperties properties,
byte[] body) throws IOException {
Runnable task = new VariableLengthTask(this,
envelope.getDeliveryTag(),
channel);
executorService.submit(task);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Where to stop/destroy threads in Android Service class?
----------Explanation----------
1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):
----------Code Sample----------
private volatile Thread runner;

public synchronized void startThread(){
if(runner == null){
runner = new Thread(this);
runner.start();
}
}

public synchronized void stopThread(){
if(runner != null){
Thread moribund = runner;
runner = null;
moribund.interrupt();
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary

if(/*fatal error*/){
stopThread();
return; //optional in this case since the loop will exit anyways
}
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Obtaining CPU thread usage in Java
----------Explanation----------
You can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:
----------Code Sample----------
private int sampleTime = 10000;
private ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
private RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
private OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();
private Map threadInitialCPU = new HashMap();
private Map threadCPUUsage = new HashMap();
private long initialUptime = runtimeMxBean.getUptime();

ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

try {Thread.sleep(sampleTime);} catch (InterruptedException e) {}

long upTime = runtimeMxBean.getUptime();

Map threadCurrentCPU = new HashMap();
ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

// CPU over all processes
//int nrCPUs = osMxBean.getAvailableProcessors();
// total CPU: CPU % can be more than 100% (devided over multiple cpus)
long nrCPUs = 1;
// elapsedTime is in ms.
long elapsedTime = (upTime - initialUptime);
for (ThreadInfo info : threadInfos) {
// elapsedCpu is in ns
Long initialCPU = threadInitialCPU.get(info.getThreadId());
if (initialCPU != null) {
long elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;
float cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);
threadCPUUsage.put(info.getThreadId(), cpuUsage);
}
}

// threadCPUUsage contains cpu % per thread
System.out.println(threadCPUUsage);
// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Threads Java Inturrupts
----------Explanation----------
I'm not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you'd do something like:
----------Code Sample----------
Thething theThing = new TheThing();
// set it to be a daemon thread before it starts
theThing.setDaemon(true);
theThing.start();

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to kill the thread now
tth.shutdown = true;
}

public class TheThing extends Thread {
volatile boolean shutdown = false;
public void run() {
while (!shutdown) {
...
// you can also test for shutdown while processing
if (shutdown) {
return;
}
}
}
}

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to interrupt the thread now
tth.interrupt();
}

public class TheThing extends Thread {
public void run() {
while (!Thread.currentThread().interrupted()) {
...
}
}
}

try {
Thread.sleep(1000);
} catch (InterruptedException e) {
// catching the interrupted exception clears the interrupt flag,
// so we need to re-enable it
Thread.currentThread().interrupt();
// probably you want to stop the thread if it is interrupted
return;
}

tth.shutdown = true;
// or tth.interrupt()
tth.join();

...
MyHandler handler = new MyHandler();
// catch the control-c signal, ""TERM"" is another common kill signal
Signal.handle(new Signal(""INT""), handler);
...

private static class MyHandler implements SignalHandler {
@Override
public void handle(Signal arg0) {
// interrupt your threads
// clean up stuff
// set shutdown flags
// ...
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How does sleep() method work on given thread and output?
----------Explanation----------
You have created two Runnable objects. If you run them by calling their run method you would get what you imagine:
----------Code Sample----------
Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.run()"");
m1.run(); // we call run method
System.out.println(""Calling m2.run()"");
m2.run();

Calling m1.run()
1
2
3
4
Calling m2.run()
1
2
3
4

Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.start()"");
m1.start(); // thread calls run method
System.out.println(""Calling m2.start()"");
m2.start();

Calling m1.start()
Calling m2.start()
1 < From thread 1
1 < From thread 2
2 ...
2
3
3
4
4

public class Aaa implements Runnable {
public void run() {
for (int i = 1; i < 5; i++) {
try {
Thread.sleep(500); // sleeps thread
} catch (InterruptedException e) {
System.out.println(e);
}
System.out.println(i);
}
}

public static void main(String[] args) {
Aaa m1 = new Aaa(); // creating one object
Thread t1 = new Thread(m1); // Its thread
Aaa m2 = new Aaa(); // creating second object of a class
Thread t2 = new Thread(m2); // Its thread
t1.start(); // calls m's run method in a new thread.
t2.start();
}

}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
comparison of code performance, threaded versus non-threaded
----------Explanation----------
By putting the join() in the loop, you're starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:
----------Code Sample----------
public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

// Pull thread pool count out into a value so you can easily change it
int threadCount = 10000;
Thread[] threads = new Thread[threadCount];

// Start all threads
for(int i = 0;i < threadCount;i++) {
// Pass list to each Runnable here
// Also, I added +i here as I think the intention is 
// to test 10000 possible numbers>5 for primeness - 
// was testing 5 in all loops
PrimeRunnable pr = new PrimeRunnable(primeStart+i, list);
Thread[i] threads = new Thread(pr);
threads[i].start(); // thread is now running in parallel
}

// All threads now running in parallel

// Then wait for all threads to complete
for(int i=0; i threads[i].join();
}
}

public class PrimeRunnable implements Runnable { 
private int from;
private List results; // shared but thread-safe

public PrimeRunnable(int from, List results) {
this.from = from;
this.results = results;
}

public void isPrime(int number) {
for(int i = 2;i < from;i++) {
if((number % i) == 0) {
return;
}
}
// found prime, add to shared results
this.results.add(number);
}

public void run() {
isPrime(from); // don't increment, just check one number
} 
}

public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

int threadCount = 16; // Experiment with this to find best on your machine
ExecutorService exec = Executors.newFixedThreadPool(threadCount);

int workCount = 10000; // See how # of work is now separate from # of threads?
for(int i = 0;i < workCount;i++) {
// submit work to the svc for execution across the thread pool 
exec.execute(new PrimeRunnable(primeStart+i, list));
}

// Wait for all tasks to be done or timeout to go off
exec.awaitTermination(1, TimeUnit.DAYS);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Tomcat Guice/JDBC Memory Leak
----------Explanation----------

----------Code Sample----------
Set threadSet = Thread.getAllStackTraces().keySet();
Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
for(Thread t:threadArray) {
if(t.getName().contains(""Abandoned connection cleanup thread"")) {
synchronized(t) {
t.stop(); //don't complain, it works
}
}
}

try {
AbandonedConnectionCleanupThread.shutdown();
} catch (InterruptedException e) {
logger.warn(""SEVERE problem cleaning up: "" + e.getMessage());
e.printStackTrace();
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
java Producer-Consumer Not always terminating
----------Explanation----------
An ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.
----------Code Sample----------
Producer: I love: 1 pool-2-thread-2
Producer: I love: 3 pool-2-thread-4
Producer: I love: 2 pool-2-thread-3
Producer: I love: 5 pool-2-thread-2
Producer: I love: 7 pool-2-thread-2
Producer: I love: 4 pool-2-thread-5
Producer: I love: 6 pool-2-thread-6
Producer: I love: 8 pool-2-thread-7
Producer: I love: 10 pool-2-thread-2
Producer: I love: 9 pool-2-thread-5
Producer: I love: 11 pool-2-thread-8
Producer: I love: 12 pool-2-thread-9
Producer: I love: 14 pool-2-thread-10
Producer: I love: 13 pool-2-thread-2
Producer: I love: 16 pool-2-thread-10
Producer: I love: 15 pool-2-thread-11
Producer: I love: 17 pool-2-thread-12
Producer: I love: 20 pool-2-thread-14
Producer: I love: 19 pool-2-thread-10
Producer: I love: 18 pool-2-thread-13
Producer: I love: 0 pool-2-thread-1
Producer: I love: 22 pool-2-thread-12
Producer: I love: 21 pool-2-thread-15
Producer: I love: 25 pool-2-thread-3
Producer: I love: 27 pool-2-thread-12
Producer: I love: 26 pool-2-thread-10
Producer: I love: 24 pool-2-thread-15
Producer: I love: 28 pool-2-thread-1
Producer: I love: 23 pool-2-thread-16
Producer: I love: 31 pool-2-thread-11
Producer: I love: 30 pool-2-thread-16
Producer: I love: 32 pool-2-thread-1
Producer: I love: 36 pool-2-thread-3
Consumer: I love: 2 pool-1-thread-1

Consumer: I love: 9975 pool-1-thread-1
Consumer: I love: 9977 pool-1-thread-1
Consumer: I love: 9978 pool-1-thread-1
Consumer: I love: 9979 pool-1-thread-1
Consumer: I love: 9981 pool-1-thread-1
Producer: I love: 9996 pool-2-thread-16
Consumer: I love: 9984 pool-1-thread-1
Consumer: I love: 9985 pool-1-thread-1
Consumer: I love: 9990 pool-1-thread-1
Consumer: I love: 9992 pool-1-thread-1
Producer: I love: 9997 pool-2-thread-16
Consumer: I love: 9994 pool-1-thread-1
Consumer: I love: 9995 pool-1-thread-1
Consumer: I love: 9996 pool-1-thread-1
Producer: I love: 9998 pool-2-thread-16
Producer: I love: 9999 pool-2-thread-16
Consumer: I love: 9997 pool-1-thread-1
Consumer: I love: 9998 pool-1-thread-1
Consumer: I love: 9999 pool-1-thread-1
finally
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java - creating a new thread
----------Explanation----------
You are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:
----------Code Sample----------
one = new Thread() {
public void run() {
try {
System.out.println(""Does it work?"");

Thread.sleep(1000);

System.out.println(""Nope, it doesnt...again."");
} catch(InterruptedException v) {
System.out.println(v);
}
} 
};

one.start();
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Starting a Java class in different threads
----------Explanation----------

----------Code Sample----------
$ javac Bar.java
$ java Bar
Thread ID 9 running
Thread ID 10 running
Thread ID 8 running
Doing something on thread 9
Doing something on thread 10
Doing something on thread 8
Thread ID 9 running
Doing something on thread 9
Thread ID 8 running
Doing something on thread 8
Thread ID 10 running
Doing something on thread 10

public class Bar
{

static private final class MyOtherClass
{
public void doSomething()
{
System.out.println(""Doing something on thread ""+Thread.currentThread().getId());
}
}

static private MyOtherClass myOtherClass=new MyOtherClass();

static private final class MyThreadClass implements Runnable
{
public void run()
{
while (true)
{
try
{
Thread.sleep(1000);
}
catch (InterruptedException ie)
{
System.err.println(""Interrupted"");
return;
}
System.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");
myOtherClass.doSomething();
}
}
}

static public void main(String[] args)
{
Thread t1=new Thread(new MyThreadClass());
Thread t2=new Thread(new MyThreadClass());
Thread t3=new Thread(new MyThreadClass());
t1.start();
t2.start();
t3.start();
}

}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How can I create a completely-connected graph of clients?
----------Explanation----------

----------Code Sample----------
if(localHostName == hostNames[i])

if(localHostName.equals(hostNames[i]))

public class MyServer implements Runnable {

private final String[] hostnames;

public MyServer(String... hostnames) {
this.hostnames = hostnames;
}

public void run() {
for (String hostname : hostnames) {
// connect to hostname
}
}

}

Thread[] threads = new Thread[6];
threads[0] = new Thread(new MyServer(""foo"", ""bar""));
threads[1] = new Thread(new MyServer(""bar"", ""dog""));
...
for (Thread thread : threads) {
thread.start();
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully
----------Explanation----------

----------Code Sample----------
public class DaemonThreadPlay {
public static void main(String [] args) {
Thread daemonThread = new Thread() {
public void run() {
while (true) {
try {
System.out.println(""Try block executed"");
Thread.sleep(1000l);
} catch (Throwable t) {
t.printStackTrace();
}
}
}

@Override
public void finalize() {
System.out.println(""Finalize method called"");
}
};
daemonThread.setDaemon(true);
daemonThread.start();

try {
Thread.sleep(2500l);
} catch (Throwable t) {
//NO-OP
}
}
} 

Thread shutdownHook = ... // construct thread that somehow
// knows about all the daemon threads
Runtime.getRuntime().addShutdownHook(shutdownHook);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Thread.join does not seem to work in my code; am I using it right?
----------Explanation----------
So, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.
----------Code Sample----------
public class ClipSetThread extends Thread {

Clipboard sysClip = null;
TheAppClass theApp = null;

private String toClipboard;

public ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {
theApp = app;
sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
this.toClipboard = toClipBoard;
// !! Check to see if the thread is also alive before trying to join with it...
if (waitFor != null && waitFor.isAlive()) {
try {
waitFor.join();
} catch (InterruptedException e) {
}
}
}

// You should really put your logic into the `run` method in order to allow
// the code to actually run in a separate thread...otherwise there is no
// point in using a thread....
@Override
public void run() {
// Two strings that will hopefully never be on the clipboard
String checkStr1 = ""9999999999999"";
String checkStr2 = ""99999999999999"";
// When we read in the clipboard we want to see if we change these strings from the ones they
// will never be, if they do change we read the clipboard successfully
String clipBoardTextBefore = checkStr1;
String clipBoardTextAfter = checkStr2;

// First get a copy of the current system clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to change the string it means we failed to read the text
if (clipBoardTextBefore.equals(checkStr1)) {
theApp.updateOutput(""Could NOT get sysClip text"");
} else {
// If we didn't failed to get the current text try to change it
while (true) {
try {
sysClip.setContents(new StringSelection(toClipboard), null);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}

// Now again check to see the clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to read the clipboard text
if (clipBoardTextAfter.equals(checkStr2)) {
theApp.updateOutput(""Could NOT check if sysClip update was successful"");
} else { // We re-read the clipboard text, see if it changed from the original clipboard text 
if (clipBoardTextAfter.equals(checkStr1)) {
theApp.updateOutput(""Could NOT successfully set clipboard text"");
} else {
theApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\n"");
}
}
}
}

}

public class Automator extends Thread implements NativeMouseInputListener {

// A ""locking"" object...
private static final Object WAIT_LOCK = new Object();

Robot rob = null;
TheAppClass theApp = null;
ClipSetThread lastClipSet = null;
boolean doit = false;
boolean settingClip = false;

public void run() {
try // to make the Global hook
{
GlobalScreen.registerNativeHook();
} catch (NativeHookException ex) {
theApp.updateOutput(""No Global Keyboard or Mouse Hook"");
return;
}
try // to create a robot (can simulate user input such as mouse and keyboard input)
{
rob = new Robot();
} catch (AWTException e1) {
theApp.updateOutput(""The Robot could not be created"");
return;
}

// This is wasteful...
// while (true) {
// }
// Locks do not consume CPU cycles while in the wait state...
synchronized (WAIT_LOCK) {
try {
WAIT_LOCK.wait();
} catch (Exception exp) {
}
}
}

public void dispose() {

// Tell the thread it can terminate...
synchronized (WAIT_LOCK) {
WAIT_LOCK.notify();
}
// This will STOP the current thread (which called this method)
// while the lastClipSet finishes...
if (lastClipSet != null && lastClipSet.isAlive()) {
lastClipSet.join();
}

}

public void setClip(String arg) {
ClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);
lastClipSet = set;
// You MUST START the thread...
set.start();
}

/*...*/
}

while(true)
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
}
catch(Exception e)
{
try {Thread.sleep(20);} catch (InterruptedException e1) {}
continue;
}
break;
}

boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
}
catch(Exception e)
{
retries++;
try {Thread.sleep(20);} catch (InterruptedException e1) {}
}
}

public class Engine extends Thread {

private Robot rob = null;
private PasteThread lastClipSet = null;

public void setClip(String arg) {
if (lastClipSet != null && lastClipSet.isAlive()) {
try {
lastClipSet.join();
} catch (InterruptedException ex) {
ex.printStackTrace();
}
}
PasteThread set = new PasteThread(arg);
lastClipSet = set;
lastClipSet.start();
}

public void pasteAtCursorLocation(String text) {
System.out.println(""Paste "" + text);
setClip(text);
rob.keyPress(KeyEvent.VK_CONTROL);
rob.keyPress(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_CONTROL);
}

public Engine() throws AWTException {
rob = new Robot();
rob.setAutoDelay(250);
try {
Thread.sleep(5000);
} catch (InterruptedException ex) {
}
pasteAtCursorLocation(""This is a simple test, thanks for watching!"");
}

public static void main(String[] args) {
try {
new Engine();
} catch (AWTException ex) {
Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);
}

}

public class PasteThread extends Thread {

private String toPaste;

public PasteThread(String value) {

toPaste = value;

}

@Override
public void run() {
Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
System.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));
sysClip.setContents(new StringSelection(toPaste), null);
System.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));
}

public String getClipboardContents(Clipboard clipboard) {
String value = null;
boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
Transferable contents = clipboard.getContents(null);
if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
try {
value = (String) contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
} catch (Exception exp) {
retries++;
exp.printStackTrace();
}
} else {
retries++;
}
}
System.out.println(successful + ""/"" + retries);
return value;
}
}
}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How to Pause and Resume a Thread in Java from another Thread
----------Explanation----------
So in this particular case, perhaps change MyThread as follows:
----------Code Sample----------
class MyThread extends Thread {

private volatile boolean running = true; // Run unless told to pause

...

@Override
public void run()
{
for(int i=0 ; ; i++)
{
// Only keep painting while ""running"" is true
// This is a crude implementation of pausing the thread
while (!running)
yield;

area.setText(i+"""");
}

public void pauseThread() throws InterruptedException
{
running = false;
}

public void resumeThread()
{
running = true;
}

}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Turning an ExecutorService to daemon in Java
----------Explanation----------
You can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:
----------Code Sample----------
ExecutorService exec = Executors.newFixedThreadPool(4,
new ThreadFactory() {
public Thread newThread(Runnable r) {
Thread t = Executors.defaultThreadFactory().newThread(r);
t.setDaemon(true);
return t;
}
});

exec.execute(YourTaskNowWillBeDaemon);

ExecutorService exec = MoreExecutors.getExitingExecutorService(
(ThreadPoolExecutor) Executors.newFixedThreadPool(4), 
100_000, TimeUnit.DAYS//period after which executor will be automatically closed
//I assume that 100_000 days is enough to simulate infinity
);
//exec.execute(YourTask);
exec.execute(() -> {
for (int i = 0; i < 3; i++) {
System.out.println(""daemon"");
try {
TimeUnit.SECONDS.sleep(1);
} catch (Exception e) {
e.printStackTrace();
}
}
});
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Problem with synchronizing on String objects?
----------Explanation----------
Without putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:
----------Code Sample----------
final String firstkey = ""Data-"" + email;
final String key = firstkey.intern();

// do not attempt double-check locking here. I mean it.
synchronized(StaticObject) {
data = StaticCache.get(key);
while (data == IN_PROGRESS) {
// another thread is getting the data
StaticObject.wait();
data = StaticCache.get(key);
}
if (data == null) {
// we must get the data
StaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);
}
}
if (data == null) {
// we must get the data
try {
data = server.DoSlowThing(key);
} finally {
synchronized(StaticObject) {
// WARNING: failure here is fatal, and must be allowed to terminate
// the app or else waiters will be left forever. Choose a suitable
// collection type in which replacing the value for a key is guaranteed.
StaticCache.put(key, data, CURRENT_TIME);
StaticObject.notifyAll();
}
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Possible to catch the OS doing Context Switching on threads?
----------Explanation----------

----------Code Sample----------
public class Test {
public static long count = 0;

public static void main(String[] args) {
for (int run = 0; run < 5; ++run) {
Test.count = 0;

Thread[] threads = new Thread[10];

for (int i = 0; i < threads.length; ++i) {
threads[i] = new Thread(new Runnable() {
public void run() {
for (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {
Test.count += 1;
}
}
});
}

for (int i = 0; i < threads.length; ++i) {
threads[i].start();
}

for (int i = 0; i < threads.length; ++i) {
try {
threads[i].join();
} catch (InterruptedException e) {
e.printStackTrace();
}
}

System.out.println(Test.count);
}
}
}

1443685504
1439908180
1461384255
1477413204
1440892041
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
JavaFX periodic background task
----------Explanation----------
You can use Timeline for what matter:
----------Code Sample----------
Timeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {

@Override
public void handle(ActionEvent","['""""""Java: Thread.currentThread().sleep(x) vs. Thread.sleep(x)\n\nI have this in my code\n\nThread.currentThread().sleep(x);\n\nEclipse tells me to use the static\n\ninstead, why? What\'s the difference, is there some difference in functionality at all between these 2 methods? 1\n\nthere\'s a \'Save Action\' in Eclipse that will automatically replace static members access via instance variables with static access via the class name - enable this Save Action and as many of the other Save Actions as you agree with (e.g., remove unnecessary casts, unnecessary \'this\', etc.). There is only one method, not two, and it is static.""""""']",0.163265306,0.714285714,0.91333333
lang,Thread,How a thread should close itself in Java?,"<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.
if more than one thread is waiting on the monitor âÃÃ¶âÃâÂ¨ this will wake <em>all of them up</em>.
However  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on âÃÃ¶âÃâÂ¨ the others will then be blocked until they can acquire the monitor s lock.</p>
The OS doesnâÃÃ¶âÃâÂ¥t even try to   schedule the sleeping thread until requested time has passed.</p>
The OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>
<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.
If a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>
improve system   responsiveness (at the expense of time âÃÃ¶âÃâÃ context switches  even just   to the OS and back  arenâÃÃ¶âÃâÂ¥t free).
Measure and test against goals you   care about  as always.</p> </blockquote>
<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.
So in order to wake it up before the due time  you need to know the Thread reference.
It s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>
<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).
Basically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>
<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).
Don t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>
method needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>
<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>
The major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.
Wait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>
if you have more then one thread in waiting state and you want to wake all of those thread).
method is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>
Like if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>
<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>
The thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.
<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).
Using it is possible to halt a thread other   than the current thread.
A suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>
Wait is called on an object  not a   thread; we call this object the  lock object. 
then releases this lock  and adds the thread to the  wait list    associated with the lock.
Later  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.
Basically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>
the thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>","Most common way to construct:
Thread t1 = new Thread();
Based on 25 examples","You can add a method like this as any blocking IO operation will throw an IOException:-

public void close() throws IOException {
    this.socket.close();
}
From the javadoc:-

Closes this socket. Any thread currently blocked in accept() will throw a SocketException.","*******************usage scenario 1********************** 
----------usage scenario----------
What is the difference between atomic / volatile / synchronized?
----------Explanation----------
You are specifically asking about how they internally work , so here you are: 

No synchronization
----------Code Sample----------
private int counter;

public int getNextUniqueIndex() {
return counter++; 
}

private boolean stopped;

public void run() {
while(!stopped) {
//do some work
}
}

public void pleaseStop() {
stopped = true;
}

private AtomicInteger counter = new AtomicInteger();

public int getNextUniqueIndex() {
return counter.getAndIncrement();
}

int current;
do {
current = get();
} while(!compareAndSet(current, current + 1));

private volatile int counter;

public int getNextUniqueIndex() {
return counter++; 
}

volatile int i = 0;
void incIBy5() {
i += 5;
}

void incIBy5() {
int temp;
synchronized(i) { temp = i }
synchronized(i) { i = temp + 5 }
}

synchronized(new Object()) {
//thread-safe, SRSLy?
}

void synchronized incIBy5() {
i += 5 
}

void incIBy5() {
synchronized(this) {
i += 5 
}
}

void incIBy5() {
synchronized(this) {
int temp = i;
i = temp + 5;
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Java how to pass a thread an extra object
----------Explanation----------
Why not pass the different Thread s different Runnable s?
----------Code Sample----------
Runnable r1 = new Runnable() { public void run() { /* this is r1 */ } };
Runnable r2 = new Runnable() { public void run() { /* this is r2 */ } };
Thread t1 = new Thread(r1);
Thread t2 = new Thread(r2);
t1.start();
t2.start();

public class MyRunnable implements Runnable {
private final String s;

public MyRunnable(Stirng s) {
this.s = s;
}

public void run() {
// do something with s
}
}

Thread t1 = new Thread(new MyRunnable(""s1""));
Thread t2 = new Thread(new MyRunnable(""s2""));
t1.start();
t2.start();

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class ExecutorServiceExample {
private static class CallableExample implements Callable {
private final Object foo;

private CallableExample(Object foo) {
this.foo = foo;
}

@Override
public Integer call() {
// do something and return it
return foo.hashCode();
}

}

public static void main(String[] args) throws InterruptedException, ExecutionException {
ExecutorService e = Executors.newFixedThreadPool(2);
Future f1 = e.submit(new CallableExample(""foo""));
Future f2 = e.submit(new CallableExample(""bar""));

System.out.println(f1.get());
System.out.println(f2.get());

e.shutdown();
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
RabbitMQ by Example: Multiple Threads, Channels and Queues
----------Explanation----------
A thread pool can be described as a collection of Runnable objects
(work queue) and a connections of running threads. These threads are
constantly running and are checking the work query for new work. If
there is new work to be done they execute this Runnable. The Thread
class itself provides a method, e.g. execute(Runnable r) to add a new
Runnable object to the work queue.
----------Code Sample----------
public class Main {
private static final int NTHREDS = 10;

public static void main(String[] args) {
ExecutorService executor = Executors.newFixedThreadPool(NTHREDS);
for (int i = 0; i < 500; i++) {
Runnable worker = new MyRunnable(10000000L + i);
executor.execute(worker);
}
// This will make the executor accept no new threads
// and finish all existing threads in the queue
executor.shutdown();
// Wait until all threads are finish
executor.awaitTermination();
System.out.println(""Finished all threads"");
}
} 

class CompositeRunnable implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(Runnable a) {
queue.add(a);
}

@Override
public void run() {
for(Runnable r: queue) {
r.run();
}
}
}

class CompositeMessageWorker implements Runnable {

protected Queue queue = new LinkedList<>();

public void add(T message) {
queue.add(message);
}

@Override
public void run() {
for(T message: queue) {
// process a message
}
}
}

static class Worker extends DefaultConsumer {

String name;
Channel channel;
String queue;
int processed;
ExecutorService executorService;

public Worker(int prefetch, ExecutorService threadExecutor,
, Channel c, String q) throws Exception {
super(c);
channel = c;
queue = q;
channel.basicQos(prefetch);
channel.basicConsume(queue, false, this);
executorService = threadExecutor;
}

@Override
public void handleDelivery(String consumerTag,
Envelope envelope,
AMQP.BasicProperties properties,
byte[] body) throws IOException {
Runnable task = new VariableLengthTask(this,
envelope.getDeliveryTag(),
channel);
executorService.submit(task);
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Where to stop/destroy threads in Android Service class?
----------Explanation----------
1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):
----------Code Sample----------
private volatile Thread runner;

public synchronized void startThread(){
if(runner == null){
runner = new Thread(this);
runner.start();
}
}

public synchronized void stopThread(){
if(runner != null){
Thread moribund = runner;
runner = null;
moribund.interrupt();
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary
}
}

public void run(){
while(Thread.currentThread() == runner){
//do stuff which can be interrupted if necessary

if(/*fatal error*/){
stopThread();
return; //optional in this case since the loop will exit anyways
}
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Obtaining CPU thread usage in Java
----------Explanation----------
You can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:
----------Code Sample----------
private int sampleTime = 10000;
private ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();
private RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();
private OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();
private Map threadInitialCPU = new HashMap();
private Map threadCPUUsage = new HashMap();
private long initialUptime = runtimeMxBean.getUptime();

ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

try {Thread.sleep(sampleTime);} catch (InterruptedException e) {}

long upTime = runtimeMxBean.getUptime();

Map threadCurrentCPU = new HashMap();
ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);
for (ThreadInfo info : threadInfos) {
threadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));
}

// CPU over all processes
//int nrCPUs = osMxBean.getAvailableProcessors();
// total CPU: CPU % can be more than 100% (devided over multiple cpus)
long nrCPUs = 1;
// elapsedTime is in ms.
long elapsedTime = (upTime - initialUptime);
for (ThreadInfo info : threadInfos) {
// elapsedCpu is in ns
Long initialCPU = threadInitialCPU.get(info.getThreadId());
if (initialCPU != null) {
long elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;
float cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);
threadCPUUsage.put(info.getThreadId(), cpuUsage);
}
}

// threadCPUUsage contains cpu % per thread
System.out.println(threadCPUUsage);
// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Threads Java Inturrupts
----------Explanation----------
I'm not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you'd do something like:
----------Code Sample----------
Thething theThing = new TheThing();
// set it to be a daemon thread before it starts
theThing.setDaemon(true);
theThing.start();

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to kill the thread now
tth.shutdown = true;
}

public class TheThing extends Thread {
volatile boolean shutdown = false;
public void run() {
while (!shutdown) {
...
// you can also test for shutdown while processing
if (shutdown) {
return;
}
}
}
}

void connect(String portName) throws Exception {
Thread thh = new TheThing(""blaghname"");
thh.start();
...
// we are ready to interrupt the thread now
tth.interrupt();
}

public class TheThing extends Thread {
public void run() {
while (!Thread.currentThread().interrupted()) {
...
}
}
}

try {
Thread.sleep(1000);
} catch (InterruptedException e) {
// catching the interrupted exception clears the interrupt flag,
// so we need to re-enable it
Thread.currentThread().interrupt();
// probably you want to stop the thread if it is interrupted
return;
}

tth.shutdown = true;
// or tth.interrupt()
tth.join();

...
MyHandler handler = new MyHandler();
// catch the control-c signal, ""TERM"" is another common kill signal
Signal.handle(new Signal(""INT""), handler);
...

private static class MyHandler implements SignalHandler {
@Override
public void handle(Signal arg0) {
// interrupt your threads
// clean up stuff
// set shutdown flags
// ...
}
}
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
How does sleep() method work on given thread and output?
----------Explanation----------
You have created two Runnable objects. If you run them by calling their run method you would get what you imagine:
----------Code Sample----------
Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.run()"");
m1.run(); // we call run method
System.out.println(""Calling m2.run()"");
m2.run();

Calling m1.run()
1
2
3
4
Calling m2.run()
1
2
3
4

Aaa m1=new Aaa(); // creating one object
Aaa m2=new Aaa(); // creating second object of a class
System.out.println(""Calling m1.start()"");
m1.start(); // thread calls run method
System.out.println(""Calling m2.start()"");
m2.start();

Calling m1.start()
Calling m2.start()
1 < From thread 1
1 < From thread 2
2 ...
2
3
3
4
4

public class Aaa implements Runnable {
public void run() {
for (int i = 1; i < 5; i++) {
try {
Thread.sleep(500); // sleeps thread
} catch (InterruptedException e) {
System.out.println(e);
}
System.out.println(i);
}
}

public static void main(String[] args) {
Aaa m1 = new Aaa(); // creating one object
Thread t1 = new Thread(m1); // Its thread
Aaa m2 = new Aaa(); // creating second object of a class
Thread t2 = new Thread(m2); // Its thread
t1.start(); // calls m's run method in a new thread.
t2.start();
}

}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
comparison of code performance, threaded versus non-threaded
----------Explanation----------
By putting the join() in the loop, you're starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:
----------Code Sample----------
public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

// Pull thread pool count out into a value so you can easily change it
int threadCount = 10000;
Thread[] threads = new Thread[threadCount];

// Start all threads
for(int i = 0;i < threadCount;i++) {
// Pass list to each Runnable here
// Also, I added +i here as I think the intention is 
// to test 10000 possible numbers>5 for primeness - 
// was testing 5 in all loops
PrimeRunnable pr = new PrimeRunnable(primeStart+i, list);
Thread[i] threads = new Thread(pr);
threads[i].start(); // thread is now running in parallel
}

// All threads now running in parallel

// Then wait for all threads to complete
for(int i=0; i threads[i].join();
}
}

public class PrimeRunnable implements Runnable { 
private int from;
private List results; // shared but thread-safe

public PrimeRunnable(int from, List results) {
this.from = from;
this.results = results;
}

public void isPrime(int number) {
for(int i = 2;i < from;i++) {
if((number % i) == 0) {
return;
}
}
// found prime, add to shared results
this.results.add(number);
}

public void run() {
isPrime(from); // don't increment, just check one number
} 
}

public static void main(String[] args) {
int primeStart = 5;

// Make thread-safe list for adding results to
List list = Collections.synchronizedList(new ArrayList());

int threadCount = 16; // Experiment with this to find best on your machine
ExecutorService exec = Executors.newFixedThreadPool(threadCount);

int workCount = 10000; // See how # of work is now separate from # of threads?
for(int i = 0;i < workCount;i++) {
// submit work to the svc for execution across the thread pool 
exec.execute(new PrimeRunnable(primeStart+i, list));
}

// Wait for all tasks to be done or timeout to go off
exec.awaitTermination(1, TimeUnit.DAYS);
}
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Tomcat Guice/JDBC Memory Leak
----------Explanation----------

----------Code Sample----------
Set threadSet = Thread.getAllStackTraces().keySet();
Thread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);
for(Thread t:threadArray) {
if(t.getName().contains(""Abandoned connection cleanup thread"")) {
synchronized(t) {
t.stop(); //don't complain, it works
}
}
}

try {
AbandonedConnectionCleanupThread.shutdown();
} catch (InterruptedException e) {
logger.warn(""SEVERE problem cleaning up: "" + e.getMessage());
e.printStackTrace();
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
java Producer-Consumer Not always terminating
----------Explanation----------
An ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.
----------Code Sample----------
Producer: I love: 1 pool-2-thread-2
Producer: I love: 3 pool-2-thread-4
Producer: I love: 2 pool-2-thread-3
Producer: I love: 5 pool-2-thread-2
Producer: I love: 7 pool-2-thread-2
Producer: I love: 4 pool-2-thread-5
Producer: I love: 6 pool-2-thread-6
Producer: I love: 8 pool-2-thread-7
Producer: I love: 10 pool-2-thread-2
Producer: I love: 9 pool-2-thread-5
Producer: I love: 11 pool-2-thread-8
Producer: I love: 12 pool-2-thread-9
Producer: I love: 14 pool-2-thread-10
Producer: I love: 13 pool-2-thread-2
Producer: I love: 16 pool-2-thread-10
Producer: I love: 15 pool-2-thread-11
Producer: I love: 17 pool-2-thread-12
Producer: I love: 20 pool-2-thread-14
Producer: I love: 19 pool-2-thread-10
Producer: I love: 18 pool-2-thread-13
Producer: I love: 0 pool-2-thread-1
Producer: I love: 22 pool-2-thread-12
Producer: I love: 21 pool-2-thread-15
Producer: I love: 25 pool-2-thread-3
Producer: I love: 27 pool-2-thread-12
Producer: I love: 26 pool-2-thread-10
Producer: I love: 24 pool-2-thread-15
Producer: I love: 28 pool-2-thread-1
Producer: I love: 23 pool-2-thread-16
Producer: I love: 31 pool-2-thread-11
Producer: I love: 30 pool-2-thread-16
Producer: I love: 32 pool-2-thread-1
Producer: I love: 36 pool-2-thread-3
Consumer: I love: 2 pool-1-thread-1

Consumer: I love: 9975 pool-1-thread-1
Consumer: I love: 9977 pool-1-thread-1
Consumer: I love: 9978 pool-1-thread-1
Consumer: I love: 9979 pool-1-thread-1
Consumer: I love: 9981 pool-1-thread-1
Producer: I love: 9996 pool-2-thread-16
Consumer: I love: 9984 pool-1-thread-1
Consumer: I love: 9985 pool-1-thread-1
Consumer: I love: 9990 pool-1-thread-1
Consumer: I love: 9992 pool-1-thread-1
Producer: I love: 9997 pool-2-thread-16
Consumer: I love: 9994 pool-1-thread-1
Consumer: I love: 9995 pool-1-thread-1
Consumer: I love: 9996 pool-1-thread-1
Producer: I love: 9998 pool-2-thread-16
Producer: I love: 9999 pool-2-thread-16
Consumer: I love: 9997 pool-1-thread-1
Consumer: I love: 9998 pool-1-thread-1
Consumer: I love: 9999 pool-1-thread-1
finally
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java - creating a new thread
----------Explanation----------
You are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:
----------Code Sample----------
one = new Thread() {
public void run() {
try {
System.out.println(""Does it work?"");

Thread.sleep(1000);

System.out.println(""Nope, it doesnt...again."");
} catch(InterruptedException v) {
System.out.println(v);
}
} 
};

one.start();
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
Starting a Java class in different threads
----------Explanation----------

----------Code Sample----------
$ javac Bar.java
$ java Bar
Thread ID 9 running
Thread ID 10 running
Thread ID 8 running
Doing something on thread 9
Doing something on thread 10
Doing something on thread 8
Thread ID 9 running
Doing something on thread 9
Thread ID 8 running
Doing something on thread 8
Thread ID 10 running
Doing something on thread 10

public class Bar
{

static private final class MyOtherClass
{
public void doSomething()
{
System.out.println(""Doing something on thread ""+Thread.currentThread().getId());
}
}

static private MyOtherClass myOtherClass=new MyOtherClass();

static private final class MyThreadClass implements Runnable
{
public void run()
{
while (true)
{
try
{
Thread.sleep(1000);
}
catch (InterruptedException ie)
{
System.err.println(""Interrupted"");
return;
}
System.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");
myOtherClass.doSomething();
}
}
}

static public void main(String[] args)
{
Thread t1=new Thread(new MyThreadClass());
Thread t2=new Thread(new MyThreadClass());
Thread t3=new Thread(new MyThreadClass());
t1.start();
t2.start();
t3.start();
}

}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
How can I create a completely-connected graph of clients?
----------Explanation----------

----------Code Sample----------
if(localHostName == hostNames[i])

if(localHostName.equals(hostNames[i]))

public class MyServer implements Runnable {

private final String[] hostnames;

public MyServer(String... hostnames) {
this.hostnames = hostnames;
}

public void run() {
for (String hostname : hostnames) {
// connect to hostname
}
}

}

Thread[] threads = new Thread[6];
threads[0] = new Thread(new MyServer(""foo"", ""bar""));
threads[1] = new Thread(new MyServer(""bar"", ""dog""));
...
for (Thread thread : threads) {
thread.start();
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
How does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully
----------Explanation----------

----------Code Sample----------
public class DaemonThreadPlay {
public static void main(String [] args) {
Thread daemonThread = new Thread() {
public void run() {
while (true) {
try {
System.out.println(""Try block executed"");
Thread.sleep(1000l);
} catch (Throwable t) {
t.printStackTrace();
}
}
}

@Override
public void finalize() {
System.out.println(""Finalize method called"");
}
};
daemonThread.setDaemon(true);
daemonThread.start();

try {
Thread.sleep(2500l);
} catch (Throwable t) {
//NO-OP
}
}
} 

Thread shutdownHook = ... // construct thread that somehow
// knows about all the daemon threads
Runtime.getRuntime().addShutdownHook(shutdownHook);
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
Thread.join does not seem to work in my code; am I using it right?
----------Explanation----------
So, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.
----------Code Sample----------
public class ClipSetThread extends Thread {

Clipboard sysClip = null;
TheAppClass theApp = null;

private String toClipboard;

public ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {
theApp = app;
sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
this.toClipboard = toClipBoard;
// !! Check to see if the thread is also alive before trying to join with it...
if (waitFor != null && waitFor.isAlive()) {
try {
waitFor.join();
} catch (InterruptedException e) {
}
}
}

// You should really put your logic into the `run` method in order to allow
// the code to actually run in a separate thread...otherwise there is no
// point in using a thread....
@Override
public void run() {
// Two strings that will hopefully never be on the clipboard
String checkStr1 = ""9999999999999"";
String checkStr2 = ""99999999999999"";
// When we read in the clipboard we want to see if we change these strings from the ones they
// will never be, if they do change we read the clipboard successfully
String clipBoardTextBefore = checkStr1;
String clipBoardTextAfter = checkStr2;

// First get a copy of the current system clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to change the string it means we failed to read the text
if (clipBoardTextBefore.equals(checkStr1)) {
theApp.updateOutput(""Could NOT get sysClip text"");
} else {
// If we didn't failed to get the current text try to change it
while (true) {
try {
sysClip.setContents(new StringSelection(toClipboard), null);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}

// Now again check to see the clipboard text
while (true) {
try {
Transferable contents = sysClip.getContents(null);
clipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);
} catch (Exception e) {
try {
Thread.sleep(20);
} catch (InterruptedException e1) {
}
continue;
}
break;
}
// If we failed to read the clipboard text
if (clipBoardTextAfter.equals(checkStr2)) {
theApp.updateOutput(""Could NOT check if sysClip update was successful"");
} else { // We re-read the clipboard text, see if it changed from the original clipboard text 
if (clipBoardTextAfter.equals(checkStr1)) {
theApp.updateOutput(""Could NOT successfully set clipboard text"");
} else {
theApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\n"");
}
}
}
}

}

public class Automator extends Thread implements NativeMouseInputListener {

// A ""locking"" object...
private static final Object WAIT_LOCK = new Object();

Robot rob = null;
TheAppClass theApp = null;
ClipSetThread lastClipSet = null;
boolean doit = false;
boolean settingClip = false;

public void run() {
try // to make the Global hook
{
GlobalScreen.registerNativeHook();
} catch (NativeHookException ex) {
theApp.updateOutput(""No Global Keyboard or Mouse Hook"");
return;
}
try // to create a robot (can simulate user input such as mouse and keyboard input)
{
rob = new Robot();
} catch (AWTException e1) {
theApp.updateOutput(""The Robot could not be created"");
return;
}

// This is wasteful...
// while (true) {
// }
// Locks do not consume CPU cycles while in the wait state...
synchronized (WAIT_LOCK) {
try {
WAIT_LOCK.wait();
} catch (Exception exp) {
}
}
}

public void dispose() {

// Tell the thread it can terminate...
synchronized (WAIT_LOCK) {
WAIT_LOCK.notify();
}
// This will STOP the current thread (which called this method)
// while the lastClipSet finishes...
if (lastClipSet != null && lastClipSet.isAlive()) {
lastClipSet.join();
}

}

public void setClip(String arg) {
ClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);
lastClipSet = set;
// You MUST START the thread...
set.start();
}

/*...*/
}

while(true)
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
}
catch(Exception e)
{
try {Thread.sleep(20);} catch (InterruptedException e1) {}
continue;
}
break;
}

boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
{
try 
{
Transferable contents = sysClip.getContents(null);
clipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
}
catch(Exception e)
{
retries++;
try {Thread.sleep(20);} catch (InterruptedException e1) {}
}
}

public class Engine extends Thread {

private Robot rob = null;
private PasteThread lastClipSet = null;

public void setClip(String arg) {
if (lastClipSet != null && lastClipSet.isAlive()) {
try {
lastClipSet.join();
} catch (InterruptedException ex) {
ex.printStackTrace();
}
}
PasteThread set = new PasteThread(arg);
lastClipSet = set;
lastClipSet.start();
}

public void pasteAtCursorLocation(String text) {
System.out.println(""Paste "" + text);
setClip(text);
rob.keyPress(KeyEvent.VK_CONTROL);
rob.keyPress(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_V);
rob.keyRelease(KeyEvent.VK_CONTROL);
}

public Engine() throws AWTException {
rob = new Robot();
rob.setAutoDelay(250);
try {
Thread.sleep(5000);
} catch (InterruptedException ex) {
}
pasteAtCursorLocation(""This is a simple test, thanks for watching!"");
}

public static void main(String[] args) {
try {
new Engine();
} catch (AWTException ex) {
Logger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);
}

}

public class PasteThread extends Thread {

private String toPaste;

public PasteThread(String value) {

toPaste = value;

}

@Override
public void run() {
Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();
System.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));
sysClip.setContents(new StringSelection(toPaste), null);
System.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));
}

public String getClipboardContents(Clipboard clipboard) {
String value = null;
boolean successful = false;
int retries = 0;
while (!successful && retries < 20) {
Transferable contents = clipboard.getContents(null);
if (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {
try {
value = (String) contents.getTransferData(DataFlavor.stringFlavor);
successful = true;
} catch (Exception exp) {
retries++;
exp.printStackTrace();
}
} else {
retries++;
}
}
System.out.println(successful + ""/"" + retries);
return value;
}
}
}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How to Pause and Resume a Thread in Java from another Thread
----------Explanation----------
So in this particular case, perhaps change MyThread as follows:
----------Code Sample----------
class MyThread extends Thread {

private volatile boolean running = true; // Run unless told to pause

...

@Override
public void run()
{
for(int i=0 ; ; i++)
{
// Only keep painting while ""running"" is true
// This is a crude implementation of pausing the thread
while (!running)
yield;

area.setText(i+"""");
}

public void pauseThread() throws InterruptedException
{
running = false;
}

public void resumeThread()
{
running = true;
}

}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Turning an ExecutorService to daemon in Java
----------Explanation----------
You can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:
----------Code Sample----------
ExecutorService exec = Executors.newFixedThreadPool(4,
new ThreadFactory() {
public Thread newThread(Runnable r) {
Thread t = Executors.defaultThreadFactory().newThread(r);
t.setDaemon(true);
return t;
}
});

exec.execute(YourTaskNowWillBeDaemon);

ExecutorService exec = MoreExecutors.getExitingExecutorService(
(ThreadPoolExecutor) Executors.newFixedThreadPool(4), 
100_000, TimeUnit.DAYS//period after which executor will be automatically closed
//I assume that 100_000 days is enough to simulate infinity
);
//exec.execute(YourTask);
exec.execute(() -> {
for (int i = 0; i < 3; i++) {
System.out.println(""daemon"");
try {
TimeUnit.SECONDS.sleep(1);
} catch (Exception e) {
e.printStackTrace();
}
}
});
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Problem with synchronizing on String objects?
----------Explanation----------
Without putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:
----------Code Sample----------
final String firstkey = ""Data-"" + email;
final String key = firstkey.intern();

// do not attempt double-check locking here. I mean it.
synchronized(StaticObject) {
data = StaticCache.get(key);
while (data == IN_PROGRESS) {
// another thread is getting the data
StaticObject.wait();
data = StaticCache.get(key);
}
if (data == null) {
// we must get the data
StaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);
}
}
if (data == null) {
// we must get the data
try {
data = server.DoSlowThing(key);
} finally {
synchronized(StaticObject) {
// WARNING: failure here is fatal, and must be allowed to terminate
// the app or else waiters will be left forever. Choose a suitable
// collection type in which replacing the value for a key is guaranteed.
StaticCache.put(key, data, CURRENT_TIME);
StaticObject.notifyAll();
}
}
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
Possible to catch the OS doing Context Switching on threads?
----------Explanation----------

----------Code Sample----------
public class Test {
public static long count = 0;

public static void main(String[] args) {
for (int run = 0; run < 5; ++run) {
Test.count = 0;

Thread[] threads = new Thread[10];

for (int i = 0; i < threads.length; ++i) {
threads[i] = new Thread(new Runnable() {
public void run() {
for (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {
Test.count += 1;
}
}
});
}

for (int i = 0; i < threads.length; ++i) {
threads[i].start();
}

for (int i = 0; i < threads.length; ++i) {
try {
threads[i].join();
} catch (InterruptedException e) {
e.printStackTrace();
}
}

System.out.println(Test.count);
}
}
}

1443685504
1439908180
1461384255
1477413204
1440892041
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
JavaFX periodic background task
----------Explanation----------
You can use Timeline for what matter:
----------Code Sample----------
Timeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {

@Override
public void handle(ActionEvent","['""""""You should always end threads by checking a flag in the run() loop (if any). Your thread should look like this:\n\npublic class IndexProcessor implements Runnable { private static final Logger LOGGER = LoggerFactory.getLogger(IndexProcessor.class); private volatile boolean execute; @Override public void run() { this.execute = true; while (this.execute) { try { LOGGER.debug(""Sleeping...""); Thread.sleep((long) 15000); LOGGER.debug(""Processing""); } catch (InterruptedException e) { LOGGER.error(""Exception"", e); this.execute = false; } } } public void stopExecuting() { this.execute = false; } }\n\nThen you can end the thread by calling thread.stopExecuting(). That way the thread is ended clean, but this takes up to 15 seconds (due to your sleep). You can still call thread.interrupt() if it\'s really urgent - but the prefered way should always be checking the flag. To avoid waiting for 15 seconds, you can split up the sleep like this:\n\n... try { LOGGER.debug(""Sleeping...""); for (int i = 0; (i < 150) && this.execute; i++) { Thread.sleep((long) 100); } LOGGER.debug(""Processing""); } catch (InterruptedException e) { ... 3,1\n\nit\'s not a Thread -- it implements Runnable -- you can\'t call Thread methods on it unless you declare it in as a Thread in which case you can\'t call stopExecuting()\n\n\n\nTypically, a thread is terminated when it\'s interrupted. So, why not use the native boolean? Try isInterrupted():\n\nThread t = new Thread(new Runnable(){ @Override public void run() { while(!Thread.currentThread().isInterrupted()){ // do stuff } }}); t.start(); // Sleep a second, and then interrupt try { Thread.sleep(1000); } catch (InterruptedException e) {} t.interrupt();\n\nref- How can I kill a thread? without using stop();\n\nLovekush VishwakarmaLovekush Vishwakarma\n\n3,3\n\nThe interrupted thread IS NOT terminated, it\'s just interrupted. If the thread is interrupted while in sleep(), then it throws InterruptedException which your thread should catch and possibly end itself or maybe simply go on with further processing. isInterrutped will be true ONLY if the thread was not in sleep or wait (it was actually running) and this can give you a hint, that the thread was interrupted. In other words: if you put sleep() in your // do stuff line, then t.interrupt() won\'t terminate it (well, for 99.9% it won\'t). The first sentence of the answer should say ""Typically, the goal of interruption is to terminate a thread."" To clarify what @Cromax said, if this while condition is going to be the sole way to stop the thread, then any catch (InterruptedException) block needs to call Thread.currentThread().interrupt(); in order to maintain the interrupted status for the while condition. But depending on the work, it might be safe to use those catch blocks to break; out of the loop early, or even safe to add more .isInterrupted() checks throughout the loop body. ""Blocking library methods like Thread.sleep and Object.wait try to detect when a thread has been interrupted and return early. They respond to interruption by clearing the interrupted status and throwing InterruptedException, indicating that the blocking operation completed early due to interruption. The JVM makes no guarantees on how quickly a blocking method will detect inter- ruption, but in practice this happens reasonably quickly."" Brian Goetz\n\n\n\nFor synchronizing threads I prefer using CountDownLatch which helps threads to wait until the process being performed complete. In this case, the worker class is set up with a CountDownLatch instance with a given count. A call to await method will block until the current count reaches zero due to invocations of the countDown method or the timeout set is reached. This approach allows interrupting a thread instantly without having to wait for the specified waiting time to elapse:\n\npublic class IndexProcessor implements Runnable { private static final Logger LOGGER = LoggerFactory.getLogger(IndexProcessor.class); private final CountDownLatch countdownlatch; public IndexProcessor(CountDownLatch countdownlatch) { this.countdownlatch = countdownlatch; } public void run() { try { while (!countdownlatch.await(15000, TimeUnit.MILLISECONDS)) { LOGGER.debug(""Processing...""); } } catch (InterruptedException e) { LOGGER.error(""Exception"", e); run = false; } } }\n\nWhen you want to finish execution of the other thread, execute countDown on the CountDownLatch and join the thread to the main thread:\n\npublic class SearchEngineContextListener implements ServletContextListener { private static final Logger LOGGER = LoggerFactory.getLogger(SearchEngineContextListener.class); private Thread thread = null; private IndexProcessor runnable = null; private CountDownLatch countdownLatch = null; @Override public void contextInitialized(ServletContextEvent event) { countdownLatch = new CountDownLatch(1); Thread thread = new Thread(new IndexProcessor(countdownLatch)); LOGGER.debug(""Starting thread: "" + thread); thread.start(); LOGGER.debug(""Background process successfully started.""); } @Override public void contextDestroyed(ServletContextEvent event) { LOGGER.debug(""Stopping thread: "" + thread); if (countdownLatch != null) { countdownLatch.countDown(); } if (thread != null) { try { thread.join(); } catch (InterruptedException e) { LOGGER.error(""Exception"", e); } LOGGER.debug(""Thread successfully stopped.""); } } }\n\nEduardo Sanchez-RosEduardo Sanchez-Ros\n\n1,Some supplementary info. Both flag and interrupt are suggested in the Java doc.""""""']",0.102040816,1,1
net,Socket,Java sending and receiving file (byte[]) over sockets,"Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>
<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.
Buffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>
<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.
<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.
Servers with threadpools  or with threads handling more than one connection each  now become possible.
If only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.
With non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.
A <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>
Selectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.
pattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>
<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>
I don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>","Most common way to construct:
ServerSocket server = É;
Socket s = server.accept();
Based on 78 examples","Take a look at the tutorial on Reading from and Writing to a Socket.

To write a byte array to a socket you would:

byte[] message = ...;
Socket socket=new Socket(ipAddress, port);
OutputStream socketOutputStream = socket.getOutputStream();
socketOutputStream.write(message);
Similarly, to read, you would use socket.getInputStream.","*******************usage scenario 1********************** 
----------usage scenario----------
Create ""Hello World"" WebSocket example
----------Explanation----------
Create server Socket (System.Net.Sockets) bind it to specific port, and keep listening with asynchronous accepting of connections. Something like that:
----------Code Sample----------
Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);
serverSocket.Bind(new IPEndPoint(IPAddress.Any, 8080));
serverSocket.Listen(128);
serverSocket.BeginAccept(null, 0, OnAccept, null);
private void OnAccept(IAsyncResult result) {
try {
Socket client = null;
if (serverSocket != null && serverSocket.IsBound) {
client = serverSocket.EndAccept(result);
}
if (client != null) {
/* Handshaking and managing ClientSocket */
}
} catch(SocketException exception) {

} finally {
if (serverSocket != null && serverSocket.IsBound) {
serverSocket.BeginAccept(null, 0, OnAccept, null);
}
}
}
GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: http://example.com
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
static private string guid = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";
private string AcceptKey(ref string key) {
string longKey = key + guid;
SHA1 sha1 = SHA1CryptoServiceProvider.Create();
byte[] hashBytes = sha1.ComputeHash(System.Text.Encoding.ASCII.GetBytes(longKey));
return Convert.ToBase64String(hashBytes);
}

HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
socket.io / parameters on connection
----------Explanation----------
2) There is an easier and more reliable (because there is no risk to access an undefined property of handshaken object) way to get query parameter inside connection handler:
----------Code Sample----------
console.log(socket.handshake.query.param);

$(document).ready(function() {
var socket = io.connect('', {query: 'name=something'});

// [...]

socket.on('some_event_from_server', function(data, cb) {});

// [...]

$('#someButton').click(function() {
socket.emit('markers_add', {some: 'data'}); //send `markers_add` message to server within main namespace
});

$('#someOtherButton').click(function() {
socket.emit('icon_sets_add', {some: 'thing'}, function(response) {
//server may response to this request. see server side code below
});
});
});

io.on('connection', function(socket) { //connection handler of main namespace
socket.on('markers_add', function(data) { /* ... */ });
socket.on('icon_sets_add', function(data, cb) {
// do something
cb({some: 'response'});
});

// [...]

socket.emit('some_event_from_server', {}); //server sends a message to a client

//BTW, now it should be OK:
console.log(socket.handshake.query.name);
});
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Java sending and receiving file (byte[]) over sockets
----------Explanation----------
Server
----------Code Sample----------
public class Server {
public static void main(String[] args) throws IOException {
ServerSocket serverSocket = null;

try {
serverSocket = new ServerSocket(4444);
} catch (IOException ex) {
System.out.println(""Can't setup server on this port number. "");
}

Socket socket = null;
InputStream in = null;
OutputStream out = null;

try {
socket = serverSocket.accept();
} catch (IOException ex) {
System.out.println(""Can't accept client connection. "");
}

try {
in = socket.getInputStream();
} catch (IOException ex) {
System.out.println(""Can't get socket input stream. "");
}

try {
out = new FileOutputStream(""M:\\test2.xml"");
} catch (FileNotFoundException ex) {
System.out.println(""File not found. "");
}

byte[] bytes = new byte[16*1024];

int count;
while ((count = in.read(bytes)) > 0) {
out.write(bytes, 0, count);
}

out.close();
in.close();
socket.close();
serverSocket.close();
}
}

public class Client {
public static void main(String[] args) throws IOException {
Socket socket = null;
String host = ""127.0.0.1"";

socket = new Socket(host, 4444);

File file = new File(""M:\\test.xml"");
// Get the size of the file
long length = file.length();
byte[] bytes = new byte[16 * 1024];
InputStream in = new FileInputStream(file);
OutputStream out = socket.getOutputStream();

int count;
while ((count = in.read(bytes)) > 0) {
out.write(bytes, 0, count);
}

out.close();
in.close();
socket.close();
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Chrome & Safari revert to xhr-polling rather than websockets with socket.io
----------Explanation----------
Here's a sample code for the cross domain file which you can include in your code and see if that makes your server run with websockets.
----------Code Sample----------
var net = require(""net"");

// Node.js 

var Policy = net.createServer(function(socket)
{
socket.setEncoding('utf8');
socket.on('connect',function(){
console.log(""Policy Request"");
socket.end("""");
});
});

Policy.listen(843);
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java RMI + SSL + Compression = IMPOSSIBLE!
----------Explanation----------
A Socket always is based by an object implementing SocketImpl . Thus, having a custom socket in fact means using a custom SocketImpl class. Here is an implementation based on a pair of streams (and a base socket, for closing purposes):
----------Code Sample----------
/**
* A SocketImpl implementation which works on a pair
* of streams.
*
* A instance of this class represents an already
* connected socket, thus all the methods relating to
* connecting, accepting and such are not implemented.
*
* The implemented methods are {@link #getInputStream},
* {@link #getOutputStream}, {@link #available} and the
* shutdown methods {@link #close}, {@link #shutdownInput},
* {@link #shutdownOutput}.
*/
private static class WrappingSocketImpl extends SocketImpl {
private InputStream inStream;
private OutputStream outStream;

private Socket base;

WrappingSocketImpl(StreamPair pair, Socket base) {
this.inStream = pair.input;
this.outStream = pair.output;
this.base = base;
}

protected InputStream getInputStream() {
return inStream;
}

protected OutputStream getOutputStream() {
return outStream;
}

protected int available() throws IOException {
return inStream.available();
}

protected void close() throws IOException {
base.close();
}

protected void shutdownInput() throws IOException {
base.shutdownInput();
// TODO: inStream.close() ?
}

protected void shutdownOutput() throws IOException {
base.shutdownOutput();
// TODO: outStream.close()?
}

protected void create(boolean stream) {
if(!stream) {
throw new IllegalArgumentException(""datagram socket not supported."");
}
}

public Object getOption(int optID) {
System.err.println(""getOption("" + optID + "")"");
return null;
}

public void setOption(int optID, Object value) {
// noop, as we don't have any options.
}

// unsupported operations

protected void connect(String host, int port) {
System.err.println(""connect("" + host + "", "" + port + "")"");
throw new UnsupportedOperationException();
}


protected void connect(InetAddress address, int port) {
System.err.println(""connect("" + address + "", "" + port + "")"");
throw new UnsupportedOperationException();
}

protected void connect(SocketAddress addr, int timeout) {
System.err.println(""connect("" + addr + "", "" + timeout + "")"");
throw new UnsupportedOperationException();
}

protected void bind(InetAddress host, int port) {
System.err.println(""bind("" + host + "", "" + port + "")"");
throw new UnsupportedOperationException();
}

protected void listen(int backlog) {
System.err.println(""listen("" + backlog + "")"");
throw new UnsupportedOperationException();
}

protected void accept(SocketImpl otherSide) {
System.err.println(""accept("" + otherSide + "")"");
throw new UnsupportedOperationException();
}

protected void sendUrgentData(int data) {
System.err.println(""sendUrgentData()"");
throw new UnsupportedOperationException();
}
}

/**
* A simple holder class for a pair of streams.
*/
public static class StreamPair {
public InputStream input;
public OutputStream output;
public StreamPair(InputStream in, OutputStream out) {
this.input = in; this.output = out;
}
}

/**
* A base class for RMI socket factories which do their
* work by wrapping the streams of Sockets from another
* Socket factory.
*
* Subclasses have to overwrite the {@link #wrap} method.
*
* Instances of this class can be used as both client and
* server socket factories, or as only one of them.
*/
public abstract class WrappingSocketFactory 
extends RMISocketFactory
implements Serializable
{

/**
* The base client socket factory. This will be serialized.
*/
private RMIClientSocketFactory baseCFactory;

/**
* The base server socket factory. This will not be serialized,
* since the server socket factory is used only on the server side.
*/
private transient RMIServerSocketFactory baseSFactory;

/**
* Wraps a pair of streams.
* Subclasses must implement this method to do the actual
* work.
* @param input the input stream from the base socket.
* @param output the output stream to the base socket.
* @param server if true, we are constructing a socket in
* {@link ServerSocket#accept}. If false, this is a pure
* client socket.
*/
protected abstract StreamPair wrap(InputStream input,
OutputStream output,
boolean server);

/**
* Creates a client socket and connects it to the given host/port pair.
*
* This retrieves a socket to the host/port from the base client
* socket factory and then wraps a new socket (with a custom SocketImpl)
* around it.
* @param host the host we want to be connected with.
* @param port the port we want to be connected with.
* @return a new Socket connected to the host/port pair.
* @throws IOException if something goes wrong.
*/
public Socket createSocket(String host, int port)
throws IOException
{
Socket baseSocket = baseCFactory.createSocket(host, port);

StreamPair streams = this.wrap(baseSocket.getInputStream(),
baseSocket.getOutputStream(),
false);

SocketImpl wrappingImpl = new WrappingSocketImpl(streams, baseSocket);

return new Socket(wrappingImpl) {
public boolean isConnected() { return true; }
};

}

/**
* A server socket subclass which wraps our custom sockets around the
* sockets retrieves by a base server socket.
*
* We only override enough methods to work. Basically, this is
* a unbound server socket, which handles {@link #accept} specially.
*/
private class WrappingServerSocket extends ServerSocket {
private ServerSocket base;

public WrappingServerSocket(ServerSocket b)
throws IOException
{
this.base = b;
}

/**
* returns the local port this ServerSocket is bound to.
*/
public int getLocalPort() {
return base.getLocalPort();
}

/**
* accepts a connection from some remote host.
* This will accept a socket from the base socket, and then
* wrap a new custom socket around it.
*/
public Socket accept() throws IOException {

final Socket baseSocket = base.accept();
StreamPair streams =
WrappingSocketFactory.this.wrap(baseSocket.getInputStream(),
baseSocket.getOutputStream(),
true);

SocketImpl wrappingImpl =
new WrappingSocketImpl(streams, baseSocket);

// For some reason, this seems to work only as a
// anonymous direct subclass of Socket, not as a
// external subclass. Strange.
Socket result = new Socket(wrappingImpl) {
public boolean isConnected() { return true; }
public boolean isBound() { return true; }
public int getLocalPort() {
return baseSocket.getLocalPort();
}
public InetAddress getLocalAddress() {
return baseSocket.getLocalAddress();
}
};

return result;
}
}

/**
* Creates a server socket listening on the given port.
*
* This retrieves a ServerSocket listening on the given port
* from the base server socket factory, and then creates a 
* custom server socket, which on {@link ServerSocket#accept accept}
* wraps new Sockets (with a custom SocketImpl) around the sockets
* from the base server socket.
* @param host the host we want to be connected with.
* @param port the port we want to be connected with.
* @return a new Socket connected to the host/port pair.
* @throws IOException if something goes wrong.
*/
public ServerSocket createServerSocket(int port)
throws IOException
{
final ServerSocket baseSocket = getSSFac().createServerSocket(port);
ServerSocket ss = new WrappingServerSocket(baseSocket);
return ss;
}

}

protected StreamPair wrap(InputStream in, OutputStream out, boolean server)
{
InputStream wrappedIn = in;
OutputStream wrappedOut = new FilterOutputStream(out) {
public void write(int b) throws IOException {
System.err.println(""write(.)"");
super.write(b);
}
public void write(byte[] b, int off, int len)
throws IOException {
System.err.println(""write("" + len + "")"");
super.out.write(b, off, len);
}
public void flush() throws IOException {
System.err.println(""flush()"");
super.flush();
}
};
return new StreamPair(wrappedIn, wrappedOut);
}

[example] write(14)
[example] flush()
[example] write(287)
[example] flush()
[example] flush()
[example] flush()
[example] write(1)
[example] flush()
[example] write(425)
[example] flush()
[example] flush()

/**
* An RMISocketFactory which enables compressed transmission.
* We use {@link #CompressingInputStream} and {@link #CompressingOutputStream}
* for this.
*
* As we extend WrappingSocketFactory, this can be used on top of another
* {@link RMISocketFactory}.
*/
public class CompressedRMISocketFactory
extends WrappingSocketFactory
{

private static final long serialVersionUID = 1;

//------------ Constructors -----------------

/**
* Creates a CompressedRMISocketFactory based on a pair of
* socket factories.
*
* @param cFac the base socket factory used for creating client
* sockets. This may be {@code null}, then we will use the
* {@linkplain RMISocketFactory#getDefault() default socket factory}
* of client system where this object is finally used for
* creating sockets.
* If not null, it should be serializable.
* @param sFac the base socket factory used for creating server
* sockets. This may be {@code null}, then we will use the
* {@linkplain RMISocketFactory#getDefault() default RMI Socket factory}.
* This will not be serialized to the client.
*/
public CompressedRMISocketFactory(RMIClientSocketFactory cFac,
RMIServerSocketFactory sFac) {
super(cFac, sFac);
}

// [snipped more constructors]

//-------------- Implementation -------------

/**
* wraps a pair of streams into compressing/decompressing streams.
*/
protected StreamPair wrap(InputStream in, OutputStream out,
boolean server)
{
return new StreamPair(new DecompressingInputStream(in),
new CompressingOutputStream(out));
}
}

CompressedRMISocketFactory fac =
new CompressedRMISocketFactory(new SslRMIClientSocketFactory(),
new SslRMIServerSocketFactory());

Remote server =
UnicastRemoteObject.exportObject(new EchoServerImpl(),
0, fac, fac);
System.err.println(""server: "" + server);

Registry registry =
LocateRegistry.createRegistry(Registry.REGISTRY_PORT);

registry.bind(""echo"", server);

Registry registry =
LocateRegistry.getRegistry(""localhost"",
Registry.REGISTRY_PORT);

EchoServer es = (EchoServer)registry.lookup(""echo"");
System.err.println(""es: "" + es);
System.out.println(es.echo(""hallo""));
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Variables by reference or by value? Java
----------Explanation----------
Continuing the int analogy:
----------Code Sample----------
int a;
int b;

a = 5;
b = a;
a = 6;

Socket d;
Socket s;

d = /* ... create and connect a socket... */;
s = d;
d = null;
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Java Generics enforcing compatible wildcards
----------Explanation----------
Seems that it's better to parameterize Socket and Wire with color:
----------Code Sample----------
interface Socket {}
interface Wire {}

class RedSocket implements Socket {}
class GreenSocket implements Socket {}
class RedWire implements Wire {}
class GreenWire implements Wire {}

new Connection(); // ok
new Connection(); // ok
new Connection(); // error
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to send a list of files over a socket in Java
----------Explanation----------

----------Code Sample----------
String directory = ...;
String hostDomain = ...;
int port = ...;

File[] files = new File(directory).listFiles();

Socket socket = new Socket(InetAddress.getByName(hostDomain), port);

BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());
DataOutputStream dos = new DataOutputStream(bos);

dos.writeInt(files.length);

for(File file : files)
{
long length = file.length();
dos.writeLong(length);

String name = file.getName();
dos.writeUTF(name);

FileInputStream fis = new FileInputStream(file);
BufferedInputStream bis = new BufferedInputStream(fis);

int theByte = 0;
while((theByte = bis.read()) != -1) bos.write(theByte);

bis.close();
}

dos.close();

String dirPath = ...;

ServerSocket serverSocket = ...;
Socket socket = serverSocket.accept();

BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());
DataInputStream dis = new DataInputStream(bis);

int filesCount = dis.readInt();
File[] files = new File[filesCount];

for(int i = 0; i < filesCount; i++)
{
long fileLength = dis.readLong();
String fileName = dis.readUTF();

files[i] = new File(dirPath + ""/"" + fileName);

FileOutputStream fos = new FileOutputStream(files[i]);
BufferedOutputStream bos = new BufferedOutputStream(fos);

for(int j = 0; j < fileLength; j++) bos.write(bis.read());

bos.close();
}

dis.close();
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to wait for a WebSocket's readyState to change
----------Explanation----------
This is simple and it work perfectly... you can add condition about maximal time, or number of try to make it more robust...
----------Code Sample----------
function sendMessage(msg){
// Wait until the state of the socket is not ready and send the message when it is...
waitForSocketConnection(ws, function(){
console.log(""message sent!!!"");
ws.send(msg);
});
}

// Make the function wait until the connection is made...
function waitForSocketConnection(socket, callback){
setTimeout(
function () {
if (socket.readyState === 1) {
console.log(""Connection is made"")
if(callback != null){
callback();
}
return;

} else {
console.log(""wait for connection..."")
waitForSocketConnection(socket, callback);
}

}, 5); // wait 5 milisecond for the connection...
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Socket IO reconnect?
----------Explanation----------
So your initSocket , should be something like
----------Code Sample----------
function initSocket(__bool){ 
if(__bool == true){ 
if ( !socket ) { 
socket = io.connect('http://xxx.xxx.xxx.xxx:8081', {secure:false}); 
socket.on('connect', function(){console.log('connected')}); 
socket.on('disconnect', function (){console.log('disconnected')});
} else {
socket.socket.connect(); // Yep, socket.socket ( 2 times )
}
}else{
socket.disconnect();
// socket = null; <<< We don't need this anymore
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Sending a message to all clients (Client - Server communication)
----------Explanation----------
Here's the Server class:
----------Code Sample----------
public class Server {
private ArrayList clientList;
private LinkedBlockingQueue messages;
private ServerSocket serverSocket;

public Server(int port) {
clientList = new ArrayList();
messages = new LinkedBlockingQueue();
serverSocket = new ServerSocket(port);

Thread accept = new Thread() {
public void run(){
while(true){
try{
Socket s = serverSocket.accept();
clientList.add(new ConnectionToClient(s));
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

accept.setDaemon(true);
accept.start();

Thread messageHandling = new Thread() {
public void run(){
while(true){
try{
Object message = messages.take();
// Do some handling here...
System.out.println(""Message Received: "" + message);
}
catch(InterruptedException e){ }
}
}
};

messageHandling.setDaemon(true);
messageHandling.start();
}

private class ConnectionToClient {
ObjectInputStream in;
ObjectOutputStream out;
Socket socket;

ConnectionToClient(Socket socket) throws IOException {
this.socket = socket;
in = new ObjectInputStream(socket.getInputStream());
out = new ObjectOutputStream(socket.getOutputStream());

Thread read = new Thread(){
public void run(){
while(true){
try{
Object obj = in.readObject();
messages.put(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

read.setDaemon(true); // terminate when main ends
read.start();
}

public void write(Object obj) {
try{
out.writeObject(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}

public void sendToOne(int index, Object message)throws IndexOutOfBoundsException {
clientList.get(index).write(message);
}

public void sendToAll(Object message){
for(ConnectionToClient client : clientList)
client.write(message);
}

}

public class Client {
private ConnectionToServer server;
private LinkedBlockingQueue messages;
private Socket socket;

public Client(String IPAddress, int port) throws IOException{
socket = new Socket(IPAddress, port);
messages = new LinkedBlokingQueue();
server = new ConnecionToServer(socket);

Thread messageHandling = new Thread() {
public void run(){
while(true){
try{
Object message = messages.take();
// Do some handling here...
System.out.println(""Message Received: "" + message);
}
catch(InterruptedException e){ }
}
}
};

messageHandling.setDaemon(true);
messageHandling.start();
}

private class ConnectionToServer {
ObjectInputStream in;
ObjectOutputStream out;
Socket socket;

ConnectionToServer(Socket socket) throws IOException {
this.socket = socket;
in = new ObjectInputStream(socket.getInputStream());
out = new ObjectOutputStream(socket.getOutputStream());

Thread read = new Thread(){
public void run(){
while(true){
try{
Object obj = in.readObject();
messages.put(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

read.setDaemon(true);
read.start();
}

private void write(Object obj) {
try{
out.writeObject(obj);
}
catch(IOException e){ e.printStackTrace(); }
}


}

public void send(Object obj) {
server.write(obj);
}
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
socket programming multiple client to one server
----------Explanation----------
For every client you need to start separate thread. Example:
----------Code Sample----------
public class EchoThread extends Thread {
protected Socket socket;

public EchoThread(Socket clientSocket) {
this.socket = clientSocket;
}

public void run() {
InputStream inp = null;
BufferedReader brinp = null;
DataOutputStream out = null;
try {
inp = socket.getInputStream();
brinp = new BufferedReader(new InputStreamReader(inp));
out = new DataOutputStream(socket.getOutputStream());
} catch (IOException e) {
return;
}
String line;
while (true) {
try {
line = brinp.readLine();
if ((line == null) || line.equalsIgnoreCase(""QUIT"")) {
socket.close();
return;
} else {
out.writeBytes(line + ""\n\r"");
out.flush();
}
} catch (IOException e) {
e.printStackTrace();
return;
}
}
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Sending a message to a client via its socket.id
----------Explanation----------
Also you should be avoiding sending messages like so, since that is part of Socket.IO internally and may change:
----------Code Sample----------
io.sockets.socket(id).emit('hello');

// the clients hash stores the sockets
// the users hash stores the username of the connected user and its socket.id
io.sockets.on('connection', function (socket) {
// get the handshake and the session object
var hs = socket.handshake;
users[hs.session.username] = socket.id; // connected user with its socket.id
clients[socket.id] = socket; // add the client data to the hash
...
socket.on('disconnect', function () {
delete clients[socket.id]; // remove the client from the array
delete users[hs.session.username]; // remove connected user & socket.id
});
}

// we want at some point to send a message to user 'alex'
if (users['alex']) {
// we get the socket.id for the user alex
// and with that we can sent him a message using his socket (stored in clients)
clients[users['alex']].emit(""Hello Alex, how've you been"");
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Socket.io emit from Express controllers
----------Explanation----------
You can use a pattern based on standard JS closures. The main export in logs.js will not be the controller function itself, but a factory function that will accept all needed dependencies, and create the controller:
----------Code Sample----------
exports.create = function(socket) {
return function(req, res) {
// write body of api request to mongodb
socket.emit();
}
}

app.route('/logs').post(logs.create(socket));
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
BufferedWriter and socket in java, write has no effect
----------Explanation----------
Your code is correct. I tested it with a generic server that will echo whatever the client sends and it worked fine (with no changes). It could be that the server your using is faulty. One thing I noticed was that for my server I needed to append a new line character every time I wrote to the output stream, for it to actually send the data. I'm willing to bet that's why your GUI isn't receiving anything. Here's the client thread class from my server:
----------Code Sample----------
class ClientThread extends Thread {

private Socket sock;
private InputStream in;
private OutputStream out;

ClientThread( Socket sock ) {
this.sock = sock;
try {
this.in = sock.getInputStream();
this.out = sock.getOutputStream();
} catch ( IOException e ) {
e.printStackTrace();
}
}

//Echos whatever the client sends to it
public void run() {
BufferedReader bufIn = new BufferedReader( new InputStreamReader( in ) );
BufferedWriter bufOut = new BufferedWriter( new OutputStreamWriter( out ) );
while ( true ) {
try {
String msg = bufIn.readLine();
System.out.println( ""Received: "" + msg );
bufOut.write( msg );
bufOut.newLine(); //HERE!!!!!!
bufOut.flush();
} catch ( IOException e ) {
e.printStackTrace();
}

}
}

}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How do I access instantiated WebSockets in Jetty 9?
----------Explanation----------

----------Code Sample----------
class=""lang-java prettyprint-override"">@WebSocket
public class ChatSocket {
public Session session;

@OnWebSocketConnect
public void onConnect(Session session) {
this.session = session;
ChatRoom.getInstance().join(this);
}

@OnWebSocketMessage
public void onText(String message) {
ChatRoom.getInstance().writeAllMembers(""Hello all"");
}

@OnWebSocketClose
public void onClose(int statusCode, String reason) {
ChatRoom.getInstance().part(this);
}
}

public class ChatRoom {
private static final ChatRoom INSTANCE = new ChatRoom();

public static ChatRoom getInstance()
{
return INSTANCE;
}

private List members = new ArrayList<>();

public void join(ChatSocket socket) 
{
members.add(socket);
}

public void part(ChatSocket socket) 
{
members.remove(socket);
}

public void writeAllMembers(String message) 
{
for(ChatSocket member: members)
{
member.session.getRemote().sendStringByFuture(message);
}
}

public void writeSpecificMember(String memberName, String message) 
{
ChatSocket member = findMemberByName(memberName);
member.session.getRemote().sendStringByFuture(message);
}

public ChatSocket findMemberByName(String memberName) 
{
// left as exercise to reader
}
}

class=""lang-java prettyprint-override"">ChatRoom.getInstance().writeSpecificMember(""alex"", ""Hello"");

// or

ChatRoom.getInstance().writeAllMembers(""Hello all"");

class=""lang-java prettyprint-override"">@WebSocket
public class ChatSocket {
public ChatRoom chatroom;

public ChatSocket(ChatRoom chatroom)
{
this.chatroom = chatroom;
}

@OnWebSocketConnect
public void onConnect(Session session) {
chatroom.join(this);
}

@OnWebSocketMessage
public void onText(String message) {
chatroom.writeAllMembers(message);
}

@OnWebSocketClose
public void onClose(int statusCode, String reason) {
chatroom.part(this);
}
}

public class ChatCreator implements WebSocketCreator
{
private ChatRoom chatroom;

public ChatCreator(ChatRoom chatroom)
{
this.chatroom = chatroom;
}

public Object createWebSocket(UpgradeRequest request, 
UpgradeResponse response)
{
// We want to create the Chat Socket and associate
// it with our chatroom implementation
return new ChatSocket(chatroom);
}
}

public class ChatHandler extends WebSocketHandler
{
private ChatRoom chatroom = new ChatRoom();

@Override
public void configure(WebSocketServletFactory factory)
{
factory.setCreator(new ChatCreator(chatroom));
}
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Java: Multithreading & UDP Socket Programming
----------Explanation----------
The (basic) model for the server is that the only thing it does is receive socket connections... the server relies on a handler to handle those connections and that's it. If you try to build that model it would look something like this:
----------Code Sample----------
class Server{
private final ServerSocket serverSocket;
private final ExecutorService pool;

public Server(int port, int poolSize) throws IOException {
serverSocket = new ServerSocket(port);
pool = Executors.newFixedThreadPool(poolSize);
}

public void serve() {
try {
while(true) {
pool.execute(new Handler(serverSocket.accept()));
}
} catch (IOException ex) {
pool.shutdown();
}
}
}

class Handler implements Runnable {
private final Socket socket;
Handler(Socket socket) { this.socket = socket; }
public void run() {
// receive the datagram packets
}
}

public void run()
{
while(true)
{
// receive UDP packets
// process the UDP packets
}
}


public static void main(String[] args) throws IOException
{
// start your client
new Client().start();
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Android Manifest - ""Has No Default Constructor"" With Activity/Runnable Class
----------Explanation----------
Android Activity classes must have a default constructor that takes no parameters. Your ChatConnect class has this constructor:
----------Code Sample----------
public ChatConnect(Socket s){
socket = s;
}

public ChatConnect(){
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
How to send a message to a particular client with socket.io
----------Explanation----------
A pair of username and socket should be stored in an object like this:
----------Code Sample----------
var users = {
'userA@example.com': [socket object],
'userB@example.com': [socket object],
'userC@example.com': [socket object]
}

{
to:[the other receiver's username as a string],
from:[the person who sent the message as string],
message:[the message to be sent as string]
}

users[data.to].emit('receivedMessage', data)
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Android: continuous socket write
----------Explanation--","['""""""Java sending and receiving file (byte[]) over sockets\n\nI am trying to develop a very simple client / server where the client converts a file to bytes, sends it to the server, and then converts the bytes back in to a file. Currently the program just creates an empty file. I\'m not a fantastic Java developer so any help much appreciated. This is the server part that receives what the client sends. ServerSocket serverSocket = null; serverSocket = new ServerSocket(4444); Socket socket = null; socket = serverSocket.accept(); DataOutputStream out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream())); DataInputStream in = new DataInputStream(new BufferedInputStream(socket.getInputStream())); byte[] bytes = new byte[1024]; in.read(bytes); System.out.println(bytes); FileOutputStream fos = new FileOutputStream(""C:\\\\test2.xml""); fos.write(bytes);\n\nAnd here is the client part\n\nSocket socket = null; DataOutputStream out = null; DataInputStream in = null; String host = ""127.0.0.1""; socket = new Socket(host, 4444); out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream())); in = new DataInputStream(new BufferedInputStream(socket.getInputStream())); File file = new File(""C:\\\\test.xml""); //InputStream is = new FileInputStream(file); // Get the size of the file long length = file.length(); if (length > Integer.MAX_VALUE) { System.out.println(""File is too large.""); } byte[] bytes = new byte[(int) length]; //out.write(bytes); System.out.println(bytes); out.close(); in.close(); socket.close();\n\n1,3\n\nI bet you threw away all the exceptions... Please post the whole program. Your client doesn\'t write anything to its output stream, and your server ignores the result of the read method. Google for ""Java IO tutorial"". \n\nare the answers to the solution can be modified for chat and file sharing on same time and same socket stream\n\nâ Nimish Bansal May 31, 2018 at 18:08\n\nThe correct way to copy a stream in Java is as follows:\n\nint count; byte[] buffer = new byte[8192]; // or 4096, or more while ((count = in.read(buffer)) > 0) { out.write(buffer, 0, count); }\n\nWish I had a dollar for every time I\'ve posted that in a forum. user207421user207421\n\n10\n\nThank you!""""""', '""""""Thanks. If you are using spring, there\'s a util class available in spring-core. You can simply do\n\nimport org.springframework.util.SerializationUtils; byte[] bytes = SerializationUtils.serialize(anyObject); Object object = SerializationUtils.deserialize(bytes);\n\nSupun WijerathneSupun Wijerathne\n\n1\n\n@PaleBlueDot yes it is, if you go to the method and see the implementation, you could see that it doesn\'t involve any global member. I would like to transmit it as byte[] over sockets to another machine\n\n// When you connect ObjectOutputStream oos = new ObjectOutputStream(socket.getOutputStream()); // When you want to send it oos.writeObject(appMessage);\n\nwhere it is rebuilt from the bytes received. // When you connect ObjectInputStream ois = new ObjectInputStream(socket.getInputStream()); // When you want to receive it AppMessage appMessage = (AppMessage)ois.readObject();\n\nuser207421user207421\n\nSpring Framework org.springframework.util.SerializationUtils\n\nbyte[] data = SerializationUtils.serialize(obj);\n\n2,In case you want a nice no dependencies copy-paste solution. Grab the code below. MyObject myObject = ... byte[] bytes = SerializeUtils.serialize(myObject); myObject = SerializeUtils.deserialize(bytes);\n\nimport java.io.*; public class SerializeUtils { public static byte[] serialize(Serializable value) throws IOException { ByteArrayOutputStream out = new ByteArrayOutputStream(); try(ObjectOutputStream outputStream = new ObjectOutputStream(out)) { outputStream.writeObject(value); } return out.toByteArray(); } public static <T extends Serializable> T deserialize(byte[] data) throws IOException, ClassNotFoundException { try(ByteArrayInputStream bis = new ByteArrayInputStream(data)) { //noinspection unchecked return (T) new ObjectInputStream(bis).readObject(); } } }\n\nIlya GazmanIlya Gazman\n\nThis is just an optimized code form of the accepted answer in case anyone wants to use this in production :\n\npublic static void byteArrayOps() throws IOException, ClassNotFoundException{ String str=""123""; byte[] yourBytes = null; // Convert to byte[] try(ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream out = new ObjectOutputStream(bos);) { out.writeObject(str); out.flush(); yourBytes = bos.toByteArray(); } finally { } // convert back to Object try(ByteArrayInputStream bis = new ByteArrayInputStream(yourBytes); ObjectInput in = new ObjectInputStream(bis);) { Object o = in.readObject(); } finally { } }\n\nNishant_SinghNishant_Singh\n\nmake sure to implements Serializable or exception will be your destiny\n\npublic class Dto implements Serializable { private String firstName; private String lastName; private Integer myNumber; public String getFirstName() { return firstName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } public Integer getMyNumber() { return myNumber; } public void setMyNumber(Integer myNumber) { this.myNumber = myNumber; } @Override public String toString() { return ""Dto{"" + ""firstName=\'"" + firstName + \'\\\'\' + "", lastName=\'"" + lastName + \'\\\'\' + "", myNumber="" + myNumber + \'}\'; }\n\npublic class Main { public static void main(String[] args) { Dto dto=new Dto(); dto.setFirstName(""Sajjad""); dto.setLastName(""ahmed""); dto.setMyNumber(0305); byte[] serializedDto = serializeObject(dto); System.out.println(""Serialized Dto=== "" + new String(serializedDto)); Dto deserializedDto = deserializeObject(serializedDto); System.out.println(""Deserialized Dto==="" + deserializedDto); } private static byte[] serializeObject(Dto dto) { try { ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream(); ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteOutputStream); objectOutputStream.writeObject(dto); objectOutputStream.close(); byteOutputStream.close(); return byteOutputStream.toByteArray(); } catch (IOException e) { e.printStackTrace(); return null; }} private static Dto deserializeObject(byte[] byteArray) { try { ByteArrayInputStream byteInputStream = new ByteArrayInputStream(byteArray); ObjectInputStream objectInputStream = new ObjectInputStream(byteInputStream); Dto deserializedObject = (Dto) objectInputStream.readObject(); objectInputStream.close(); byteInputStream.close(); return deserializedObject; } catch (IOException | ClassNotFoundException e) { e.printStackTrace(); return null; } }\n\nSajjad AhmedSajjad Ahmed\n\ncode example with java 8+:\n\npublic class Person implements Serializable { private String lastName; private String firstName; public Person() { } public Person(String firstName, String lastName) { this.firstName = firstName; this.lastName = lastName; } public void setFirstName(String firstName) { this.firstName = firstName; } public String getFirstName() { return firstName; } public String getLastName() { return lastName; } public void setLastName(String lastName) { this.lastName = lastName; } @Override public String toString() { return ""firstName: "" + firstName + "", lastName: "" + lastName; } } public interface PersonMarshaller { default Person fromStream(InputStream inputStream) { try (ObjectInputStream objectInputStream = new ObjectInputStream(inputStream)) { Person person= (Person) objectInputStream.readObject(); return person; } catch (IOException | ClassNotFoundException e) { System.err.println(e.getMessage()); return null; } } default OutputStream toStream(Person person) { try (OutputStream outputStream = new ByteArrayOutputStream()) { ObjectOutput objectOutput = new ObjectOutputStream(outputStream); objectOutput.writeObject(person); objectOutput.flush(); return outputStream; } catch (IOException e) { System.err.println(e.getMessage()); return null; } } }\n\nMohamed.AbdoMohamed.Abdo\n\n2,""""""', '""""""Buyer beware. The other case to get correct byte array via stream, after send request to server and waiting for the response. /** * Begin setup TCP connection to PC app * to open integrate connection between mobile app and pc app (or mobile app) */ mSocket = new Socket(IP, port); // mSocket.setSoTimeout(30000); DataOutputStream mDos = new DataOutputStream(mSocket.getOutputStream()); String str = ""MobileRequest#"" + params[0] + ""#<EOF>""; mDos.write(str.getBytes()); try { Thread.sleep(1000); } catch (InterruptedException e) { e.printStackTrace(); } /* Since data are accepted as byte, all of them will be collected in the following byte array which initialised with accepted data length. */ DataInputStream mDis = new DataInputStream(mSocket.getInputStream()); byte[] data = new byte[mDis.available()]; // Collecting data into byte array for (int i = 0; i < data.length; i++) data[i] = mDis.readByte(); // Converting collected data in byte array into String. String RESPONSE = new String(data);\n\n7,You\'re doing an extra copy if you use ByteArrayOutputStream. If you know the length of the stream before you start reading it (e.g. the InputStream is actually a FileInputStream, and you can call file.length() on the file, or the InputStream is a zipfile entry InputStream, and you can call zipEntry.length()), then it\'s far better to write directly into the byte[] array -- it uses half the memory, and saves time. // Read the file contents into a byte[] array byte[] buf = new byte[inputStreamLength]; int bytesRead = Math.max(0, inputStream.read(buf)); // If needed: for safety, truncate the array if the file may somehow get // truncated during the read operation byte[] contents = bytesRead == inputStreamLength ? buf : Arrays.copyOf(buf, bytesRead);\n\nN.B. the last line above deals with files getting truncated while the stream is being read, if you need to handle that possibility, but if the file gets longer while the stream is being read, the contents in the byte[] array will not be lengthened to include the new file content, the array will simply be truncated to the old length inputStreamLength. Luke HutchisonLuke Hutchison\n\n8,if(inputStream != null){ ByteArrayOutputStream contentStream = readSourceContent(inputStream); String stringContent = contentStream.toString(); byte[] byteArr = encodeString(stringContent); }\n\npublic static ByteArrayOutputStream readSourceContent(InputStream inputStream) throws IOException { ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); int nextChar; try { while ((nextChar = inputStream.read()) != -1) { outputStream.write(nextChar); } outputStream.flush(); } catch (IOException e) { throw new IOException(""Exception occurred while reading content"", e); } return outputStream; }\n\npublic static byte[] encodeString(String content) throws UnsupportedEncodingException { byte[] bytes; try { bytes = content.getBytes(); } catch (UnsupportedEncodingException e) { String msg = ENCODING + "" is unsupported encoding type""; log.error(msg,e); throw new UnsupportedEncodingException(msg, e); } return bytes; }\n\n1\n\nWhy convert to String and then to byte[] (which might mess with binary data)? ByteArrayOutputStream has .toByteArray(): docs.oracle.com/javase/7/docs/api/java/io/â¦\n\n\n\npublic static byte[] toByteArray(InputStream is) throws IOException { ByteArrayOutputStream output = new ByteArrayOutputStream(); try { byte[] b = new byte[4096]; int n = 0; while ((n = is.read(b)) != -1) { output.write(b, 0, n); } return output.toByteArray(); } finally { output.close(); } }\n\n1\n\nAdd some explanation with answer for how this answer help OP in fixing current issue\n\n\n\nThis is my copy-paste version:\n\n@SuppressWarnings(""empty-statement"") public static byte[] inputStreamToByte(InputStream is) throws IOException { if (is == null) { return null; } // Define a size if you have an idea of it. ByteArrayOutputStream r = new ByteArrayOutputStream(2048); byte[] read = new byte[512]; // Your buffer size. for (int i; -1 != (i = is.read(read)); r.write(read, 0, i)); is.close(); return r.toByteArray(); }\n\nDaniel De LeÃ³nDaniel De LeÃ³n\n\n1\n\nWhile this code snippet may solve the question, including an explanation really helps to improve the quality of your post. Remember that you are answering the question for readers in the future, and those people might not know the reasons for your code suggestion. import sun.misc.IOUtils; ... InputStream in = ...; byte[] buf = IOUtils.readFully(in, -1, false);\n\n1\n\nsun.misc.IOUtils is not âJava 7â. Itâs a proprietary, implementation specific class that may not be present in other JRE implementations and can disappear without any warning in one of the next releases. You can try Cactoos:\n\nbyte[] array = new BytesOf(stream).bytes();\n\nHere is an optimized version, that tries to avoid copying data bytes as much as possible:\n\nprivate static byte[] loadStream (InputStream stream) throws IOException { int available = stream.available(); int expectedSize = available > 0 ? available : -1; return loadStream(stream, expectedSize); } private static byte[] loadStream (InputStream stream, int expectedSize) throws IOException { int basicBufferSize = 0x4000; int initialBufferSize = (expectedSize >= 0) ? expectedSize : basicBufferSize; byte[] buf = new byte[initialBufferSize]; int pos = 0; while (true) { if (pos == buf.length) { int readAhead = -1; if (pos == expectedSize) { readAhead = stream.read(); // test whether EOF is at expectedSize if (readAhead == -1) { return buf; } } int newBufferSize = Math.max(2 * buf.length, basicBufferSize); buf = Arrays.copyOf(buf, newBufferSize); if (readAhead != -1) { buf[pos++] = (byte)readAhead; } } int len = stream.read(buf, pos, buf.length - pos); if (len < 0) { return Arrays.copyOf(buf, pos); } pos += len; } }\n\nChristian d\'HeureuseChristian d\'Heureuse\n\n5,Solution in Kotlin (will work in Java too, of course), which includes both cases of when you know the size or not:\n\nfun InputStream.readBytesWithSize(size: Long): ByteArray? { return when { size < 0L -> this.readBytes() size == 0L -> ByteArray(0) size > Int.MAX_VALUE -> null else -> { val sizeInt = size.toInt() val result = ByteArray(sizeInt) readBytesIntoByteArray(result, sizeInt) result } } } fun InputStream.readBytesIntoByteArray(byteArray: ByteArray,bytesToRead:Int=byteArray.size) { var offset = 0 while (true) { val read = this.read(byteArray, offset, bytesToRead - offset) if (read == -1) break offset += read if (offset >= bytesToRead) break } }\n\nIf you know the size, it saves you on having double the memory used compared to the other solutions (in a brief moment, but still could be useful). That\'s because you have to read the entire stream to the end, and then convert it to a byte array (similar to ArrayList which you convert to just an array). So, if you are on Android, for example, and you got some Uri to handle, you can try to get the size using this:\n\nfun getStreamLengthFromUri(context: Context, uri: Uri): Long { context.contentResolver.query(uri, arrayOf(MediaStore.MediaColumns.SIZE), null, null, null)?.use { if (!it.moveToNext()) return@use val fileSize = it.getLong(it.getColumnIndex(MediaStore.MediaColumns.SIZE)) if (fileSize > 0) return fileSize } //if you wish, you can also get the file-path from the uri here, and then try to get its size, using this: https://stackoverflow.com/a/61835665/878126 FileUtilEx.getFilePathFromUri(context, uri, false)?.use { val file = it.file val fileSize = file.length() if (fileSize > 0) return fileSize } context.contentResolver.openInputStream(uri)?.use { inputStream -> if (inputStream is FileInputStream) return inputStream.channel.size() else { var bytesCount = 0L while (true) { val available = inputStream.available() if (available == 0) break val skip = inputStream.skip(available.toLong()) if (skip < 0) break bytesCount += skip } if (bytesCount > 0L) return bytesCount } } return -1L }\n\nandroid developerandroid developer\n\n1.3kHighly active question. Earn 10 reputation (not counting the association bonus) in order to answer this question.""""""']",0.3125,1,0.35
net,Socket,Sending compressed JPG image over socket,"Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>
<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.
Buffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>
<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.
<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.
Servers with threadpools  or with threads handling more than one connection each  now become possible.
If only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.
With non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.
A <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>
Selectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.
pattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>
<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>
I don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>","Most common way to construct:
ServerSocket server = É;
Socket s = server.accept();
Based on 78 examples","Actually the code looks ok. Here's a complete code, that works fine on my machine:

import java.awt.*;
import java.awt.image.BufferedImage;
import java.net.*;

import javax.imageio.ImageIO;
import javax.swing.*;

public class Server {
  public static void main(String[] args) throws Exception {
    BufferedImage screencapture = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
    try (ServerSocket serv = new ServerSocket(25000)) {
      System.out.println(""waiting..."");
      try (Socket socket = serv.accept()) {
        System.out.println(""client connected"");
        ImageIO.write(screencapture, ""jpg"", socket.getOutputStream());
        System.out.println(""sent"");
      }
    }
  }
}

class Client {
  public static void main(String[] args) throws Exception {
    try(Socket socket = new Socket(""localhost"", 25000)){
      BufferedImage image = ImageIO.read(socket.getInputStream());
      JLabel label = new JLabel(new ImageIcon(image));
      JFrame f = new JFrame(""vnc"");
      f.getContentPane().add(label);
      f.pack();
      f.setVisible(true);
    }
  }
}
Though this will only work if you close the socket after sending the images. It will fail if you'll just try to send a few images over the same socket. See https://stackoverflow.com/a/6973863/211205.","*******************usage scenario 1********************** 
----------usage scenario----------
Create ""Hello World"" WebSocket example
----------Explanation----------
Create server Socket (System.Net.Sockets) bind it to specific port, and keep listening with asynchronous accepting of connections. Something like that:
----------Code Sample----------
Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);
serverSocket.Bind(new IPEndPoint(IPAddress.Any, 8080));
serverSocket.Listen(128);
serverSocket.BeginAccept(null, 0, OnAccept, null);
private void OnAccept(IAsyncResult result) {
try {
Socket client = null;
if (serverSocket != null && serverSocket.IsBound) {
client = serverSocket.EndAccept(result);
}
if (client != null) {
/* Handshaking and managing ClientSocket */
}
} catch(SocketException exception) {

} finally {
if (serverSocket != null && serverSocket.IsBound) {
serverSocket.BeginAccept(null, 0, OnAccept, null);
}
}
}
GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
Origin: http://example.com
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
static private string guid = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";
private string AcceptKey(ref string key) {
string longKey = key + guid;
SHA1 sha1 = SHA1CryptoServiceProvider.Create();
byte[] hashBytes = sha1.ComputeHash(System.Text.Encoding.ASCII.GetBytes(longKey));
return Convert.ToBase64String(hashBytes);
}

HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
socket.io / parameters on connection
----------Explanation----------
2) There is an easier and more reliable (because there is no risk to access an undefined property of handshaken object) way to get query parameter inside connection handler:
----------Code Sample----------
console.log(socket.handshake.query.param);

$(document).ready(function() {
var socket = io.connect('', {query: 'name=something'});

// [...]

socket.on('some_event_from_server', function(data, cb) {});

// [...]

$('#someButton').click(function() {
socket.emit('markers_add', {some: 'data'}); //send `markers_add` message to server within main namespace
});

$('#someOtherButton').click(function() {
socket.emit('icon_sets_add', {some: 'thing'}, function(response) {
//server may response to this request. see server side code below
});
});
});

io.on('connection', function(socket) { //connection handler of main namespace
socket.on('markers_add', function(data) { /* ... */ });
socket.on('icon_sets_add', function(data, cb) {
// do something
cb({some: 'response'});
});

// [...]

socket.emit('some_event_from_server', {}); //server sends a message to a client

//BTW, now it should be OK:
console.log(socket.handshake.query.name);
});
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Java sending and receiving file (byte[]) over sockets
----------Explanation----------
Server
----------Code Sample----------
public class Server {
public static void main(String[] args) throws IOException {
ServerSocket serverSocket = null;

try {
serverSocket = new ServerSocket(4444);
} catch (IOException ex) {
System.out.println(""Can't setup server on this port number. "");
}

Socket socket = null;
InputStream in = null;
OutputStream out = null;

try {
socket = serverSocket.accept();
} catch (IOException ex) {
System.out.println(""Can't accept client connection. "");
}

try {
in = socket.getInputStream();
} catch (IOException ex) {
System.out.println(""Can't get socket input stream. "");
}

try {
out = new FileOutputStream(""M:\\test2.xml"");
} catch (FileNotFoundException ex) {
System.out.println(""File not found. "");
}

byte[] bytes = new byte[16*1024];

int count;
while ((count = in.read(bytes)) > 0) {
out.write(bytes, 0, count);
}

out.close();
in.close();
socket.close();
serverSocket.close();
}
}

public class Client {
public static void main(String[] args) throws IOException {
Socket socket = null;
String host = ""127.0.0.1"";

socket = new Socket(host, 4444);

File file = new File(""M:\\test.xml"");
// Get the size of the file
long length = file.length();
byte[] bytes = new byte[16 * 1024];
InputStream in = new FileInputStream(file);
OutputStream out = socket.getOutputStream();

int count;
while ((count = in.read(bytes)) > 0) {
out.write(bytes, 0, count);
}

out.close();
in.close();
socket.close();
}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Chrome & Safari revert to xhr-polling rather than websockets with socket.io
----------Explanation----------
Here's a sample code for the cross domain file which you can include in your code and see if that makes your server run with websockets.
----------Code Sample----------
var net = require(""net"");

// Node.js 

var Policy = net.createServer(function(socket)
{
socket.setEncoding('utf8');
socket.on('connect',function(){
console.log(""Policy Request"");
socket.end("""");
});
});

Policy.listen(843);
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java RMI + SSL + Compression = IMPOSSIBLE!
----------Explanation----------
A Socket always is based by an object implementing SocketImpl . Thus, having a custom socket in fact means using a custom SocketImpl class. Here is an implementation based on a pair of streams (and a base socket, for closing purposes):
----------Code Sample----------
/**
* A SocketImpl implementation which works on a pair
* of streams.
*
* A instance of this class represents an already
* connected socket, thus all the methods relating to
* connecting, accepting and such are not implemented.
*
* The implemented methods are {@link #getInputStream},
* {@link #getOutputStream}, {@link #available} and the
* shutdown methods {@link #close}, {@link #shutdownInput},
* {@link #shutdownOutput}.
*/
private static class WrappingSocketImpl extends SocketImpl {
private InputStream inStream;
private OutputStream outStream;

private Socket base;

WrappingSocketImpl(StreamPair pair, Socket base) {
this.inStream = pair.input;
this.outStream = pair.output;
this.base = base;
}

protected InputStream getInputStream() {
return inStream;
}

protected OutputStream getOutputStream() {
return outStream;
}

protected int available() throws IOException {
return inStream.available();
}

protected void close() throws IOException {
base.close();
}

protected void shutdownInput() throws IOException {
base.shutdownInput();
// TODO: inStream.close() ?
}

protected void shutdownOutput() throws IOException {
base.shutdownOutput();
// TODO: outStream.close()?
}

protected void create(boolean stream) {
if(!stream) {
throw new IllegalArgumentException(""datagram socket not supported."");
}
}

public Object getOption(int optID) {
System.err.println(""getOption("" + optID + "")"");
return null;
}

public void setOption(int optID, Object value) {
// noop, as we don't have any options.
}

// unsupported operations

protected void connect(String host, int port) {
System.err.println(""connect("" + host + "", "" + port + "")"");
throw new UnsupportedOperationException();
}


protected void connect(InetAddress address, int port) {
System.err.println(""connect("" + address + "", "" + port + "")"");
throw new UnsupportedOperationException();
}

protected void connect(SocketAddress addr, int timeout) {
System.err.println(""connect("" + addr + "", "" + timeout + "")"");
throw new UnsupportedOperationException();
}

protected void bind(InetAddress host, int port) {
System.err.println(""bind("" + host + "", "" + port + "")"");
throw new UnsupportedOperationException();
}

protected void listen(int backlog) {
System.err.println(""listen("" + backlog + "")"");
throw new UnsupportedOperationException();
}

protected void accept(SocketImpl otherSide) {
System.err.println(""accept("" + otherSide + "")"");
throw new UnsupportedOperationException();
}

protected void sendUrgentData(int data) {
System.err.println(""sendUrgentData()"");
throw new UnsupportedOperationException();
}
}

/**
* A simple holder class for a pair of streams.
*/
public static class StreamPair {
public InputStream input;
public OutputStream output;
public StreamPair(InputStream in, OutputStream out) {
this.input = in; this.output = out;
}
}

/**
* A base class for RMI socket factories which do their
* work by wrapping the streams of Sockets from another
* Socket factory.
*
* Subclasses have to overwrite the {@link #wrap} method.
*
* Instances of this class can be used as both client and
* server socket factories, or as only one of them.
*/
public abstract class WrappingSocketFactory 
extends RMISocketFactory
implements Serializable
{

/**
* The base client socket factory. This will be serialized.
*/
private RMIClientSocketFactory baseCFactory;

/**
* The base server socket factory. This will not be serialized,
* since the server socket factory is used only on the server side.
*/
private transient RMIServerSocketFactory baseSFactory;

/**
* Wraps a pair of streams.
* Subclasses must implement this method to do the actual
* work.
* @param input the input stream from the base socket.
* @param output the output stream to the base socket.
* @param server if true, we are constructing a socket in
* {@link ServerSocket#accept}. If false, this is a pure
* client socket.
*/
protected abstract StreamPair wrap(InputStream input,
OutputStream output,
boolean server);

/**
* Creates a client socket and connects it to the given host/port pair.
*
* This retrieves a socket to the host/port from the base client
* socket factory and then wraps a new socket (with a custom SocketImpl)
* around it.
* @param host the host we want to be connected with.
* @param port the port we want to be connected with.
* @return a new Socket connected to the host/port pair.
* @throws IOException if something goes wrong.
*/
public Socket createSocket(String host, int port)
throws IOException
{
Socket baseSocket = baseCFactory.createSocket(host, port);

StreamPair streams = this.wrap(baseSocket.getInputStream(),
baseSocket.getOutputStream(),
false);

SocketImpl wrappingImpl = new WrappingSocketImpl(streams, baseSocket);

return new Socket(wrappingImpl) {
public boolean isConnected() { return true; }
};

}

/**
* A server socket subclass which wraps our custom sockets around the
* sockets retrieves by a base server socket.
*
* We only override enough methods to work. Basically, this is
* a unbound server socket, which handles {@link #accept} specially.
*/
private class WrappingServerSocket extends ServerSocket {
private ServerSocket base;

public WrappingServerSocket(ServerSocket b)
throws IOException
{
this.base = b;
}

/**
* returns the local port this ServerSocket is bound to.
*/
public int getLocalPort() {
return base.getLocalPort();
}

/**
* accepts a connection from some remote host.
* This will accept a socket from the base socket, and then
* wrap a new custom socket around it.
*/
public Socket accept() throws IOException {

final Socket baseSocket = base.accept();
StreamPair streams =
WrappingSocketFactory.this.wrap(baseSocket.getInputStream(),
baseSocket.getOutputStream(),
true);

SocketImpl wrappingImpl =
new WrappingSocketImpl(streams, baseSocket);

// For some reason, this seems to work only as a
// anonymous direct subclass of Socket, not as a
// external subclass. Strange.
Socket result = new Socket(wrappingImpl) {
public boolean isConnected() { return true; }
public boolean isBound() { return true; }
public int getLocalPort() {
return baseSocket.getLocalPort();
}
public InetAddress getLocalAddress() {
return baseSocket.getLocalAddress();
}
};

return result;
}
}

/**
* Creates a server socket listening on the given port.
*
* This retrieves a ServerSocket listening on the given port
* from the base server socket factory, and then creates a 
* custom server socket, which on {@link ServerSocket#accept accept}
* wraps new Sockets (with a custom SocketImpl) around the sockets
* from the base server socket.
* @param host the host we want to be connected with.
* @param port the port we want to be connected with.
* @return a new Socket connected to the host/port pair.
* @throws IOException if something goes wrong.
*/
public ServerSocket createServerSocket(int port)
throws IOException
{
final ServerSocket baseSocket = getSSFac().createServerSocket(port);
ServerSocket ss = new WrappingServerSocket(baseSocket);
return ss;
}

}

protected StreamPair wrap(InputStream in, OutputStream out, boolean server)
{
InputStream wrappedIn = in;
OutputStream wrappedOut = new FilterOutputStream(out) {
public void write(int b) throws IOException {
System.err.println(""write(.)"");
super.write(b);
}
public void write(byte[] b, int off, int len)
throws IOException {
System.err.println(""write("" + len + "")"");
super.out.write(b, off, len);
}
public void flush() throws IOException {
System.err.println(""flush()"");
super.flush();
}
};
return new StreamPair(wrappedIn, wrappedOut);
}

[example] write(14)
[example] flush()
[example] write(287)
[example] flush()
[example] flush()
[example] flush()
[example] write(1)
[example] flush()
[example] write(425)
[example] flush()
[example] flush()

/**
* An RMISocketFactory which enables compressed transmission.
* We use {@link #CompressingInputStream} and {@link #CompressingOutputStream}
* for this.
*
* As we extend WrappingSocketFactory, this can be used on top of another
* {@link RMISocketFactory}.
*/
public class CompressedRMISocketFactory
extends WrappingSocketFactory
{

private static final long serialVersionUID = 1;

//------------ Constructors -----------------

/**
* Creates a CompressedRMISocketFactory based on a pair of
* socket factories.
*
* @param cFac the base socket factory used for creating client
* sockets. This may be {@code null}, then we will use the
* {@linkplain RMISocketFactory#getDefault() default socket factory}
* of client system where this object is finally used for
* creating sockets.
* If not null, it should be serializable.
* @param sFac the base socket factory used for creating server
* sockets. This may be {@code null}, then we will use the
* {@linkplain RMISocketFactory#getDefault() default RMI Socket factory}.
* This will not be serialized to the client.
*/
public CompressedRMISocketFactory(RMIClientSocketFactory cFac,
RMIServerSocketFactory sFac) {
super(cFac, sFac);
}

// [snipped more constructors]

//-------------- Implementation -------------

/**
* wraps a pair of streams into compressing/decompressing streams.
*/
protected StreamPair wrap(InputStream in, OutputStream out,
boolean server)
{
return new StreamPair(new DecompressingInputStream(in),
new CompressingOutputStream(out));
}
}

CompressedRMISocketFactory fac =
new CompressedRMISocketFactory(new SslRMIClientSocketFactory(),
new SslRMIServerSocketFactory());

Remote server =
UnicastRemoteObject.exportObject(new EchoServerImpl(),
0, fac, fac);
System.err.println(""server: "" + server);

Registry registry =
LocateRegistry.createRegistry(Registry.REGISTRY_PORT);

registry.bind(""echo"", server);

Registry registry =
LocateRegistry.getRegistry(""localhost"",
Registry.REGISTRY_PORT);

EchoServer es = (EchoServer)registry.lookup(""echo"");
System.err.println(""es: "" + es);
System.out.println(es.echo(""hallo""));
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Variables by reference or by value? Java
----------Explanation----------
Continuing the int analogy:
----------Code Sample----------
int a;
int b;

a = 5;
b = a;
a = 6;

Socket d;
Socket s;

d = /* ... create and connect a socket... */;
s = d;
d = null;
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Java Generics enforcing compatible wildcards
----------Explanation----------
Seems that it's better to parameterize Socket and Wire with color:
----------Code Sample----------
interface Socket {}
interface Wire {}

class RedSocket implements Socket {}
class GreenSocket implements Socket {}
class RedWire implements Wire {}
class GreenWire implements Wire {}

new Connection(); // ok
new Connection(); // ok
new Connection(); // error
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to send a list of files over a socket in Java
----------Explanation----------

----------Code Sample----------
String directory = ...;
String hostDomain = ...;
int port = ...;

File[] files = new File(directory).listFiles();

Socket socket = new Socket(InetAddress.getByName(hostDomain), port);

BufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());
DataOutputStream dos = new DataOutputStream(bos);

dos.writeInt(files.length);

for(File file : files)
{
long length = file.length();
dos.writeLong(length);

String name = file.getName();
dos.writeUTF(name);

FileInputStream fis = new FileInputStream(file);
BufferedInputStream bis = new BufferedInputStream(fis);

int theByte = 0;
while((theByte = bis.read()) != -1) bos.write(theByte);

bis.close();
}

dos.close();

String dirPath = ...;

ServerSocket serverSocket = ...;
Socket socket = serverSocket.accept();

BufferedInputStream bis = new BufferedInputStream(socket.getInputStream());
DataInputStream dis = new DataInputStream(bis);

int filesCount = dis.readInt();
File[] files = new File[filesCount];

for(int i = 0; i < filesCount; i++)
{
long fileLength = dis.readLong();
String fileName = dis.readUTF();

files[i] = new File(dirPath + ""/"" + fileName);

FileOutputStream fos = new FileOutputStream(files[i]);
BufferedOutputStream bos = new BufferedOutputStream(fos);

for(int j = 0; j < fileLength; j++) bos.write(bis.read());

bos.close();
}

dis.close();
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to wait for a WebSocket's readyState to change
----------Explanation----------
This is simple and it work perfectly... you can add condition about maximal time, or number of try to make it more robust...
----------Code Sample----------
function sendMessage(msg){
// Wait until the state of the socket is not ready and send the message when it is...
waitForSocketConnection(ws, function(){
console.log(""message sent!!!"");
ws.send(msg);
});
}

// Make the function wait until the connection is made...
function waitForSocketConnection(socket, callback){
setTimeout(
function () {
if (socket.readyState === 1) {
console.log(""Connection is made"")
if(callback != null){
callback();
}
return;

} else {
console.log(""wait for connection..."")
waitForSocketConnection(socket, callback);
}

}, 5); // wait 5 milisecond for the connection...
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Socket IO reconnect?
----------Explanation----------
So your initSocket , should be something like
----------Code Sample----------
function initSocket(__bool){ 
if(__bool == true){ 
if ( !socket ) { 
socket = io.connect('http://xxx.xxx.xxx.xxx:8081', {secure:false}); 
socket.on('connect', function(){console.log('connected')}); 
socket.on('disconnect', function (){console.log('disconnected')});
} else {
socket.socket.connect(); // Yep, socket.socket ( 2 times )
}
}else{
socket.disconnect();
// socket = null; <<< We don't need this anymore
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Sending a message to all clients (Client - Server communication)
----------Explanation----------
Here's the Server class:
----------Code Sample----------
public class Server {
private ArrayList clientList;
private LinkedBlockingQueue messages;
private ServerSocket serverSocket;

public Server(int port) {
clientList = new ArrayList();
messages = new LinkedBlockingQueue();
serverSocket = new ServerSocket(port);

Thread accept = new Thread() {
public void run(){
while(true){
try{
Socket s = serverSocket.accept();
clientList.add(new ConnectionToClient(s));
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

accept.setDaemon(true);
accept.start();

Thread messageHandling = new Thread() {
public void run(){
while(true){
try{
Object message = messages.take();
// Do some handling here...
System.out.println(""Message Received: "" + message);
}
catch(InterruptedException e){ }
}
}
};

messageHandling.setDaemon(true);
messageHandling.start();
}

private class ConnectionToClient {
ObjectInputStream in;
ObjectOutputStream out;
Socket socket;

ConnectionToClient(Socket socket) throws IOException {
this.socket = socket;
in = new ObjectInputStream(socket.getInputStream());
out = new ObjectOutputStream(socket.getOutputStream());

Thread read = new Thread(){
public void run(){
while(true){
try{
Object obj = in.readObject();
messages.put(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

read.setDaemon(true); // terminate when main ends
read.start();
}

public void write(Object obj) {
try{
out.writeObject(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}

public void sendToOne(int index, Object message)throws IndexOutOfBoundsException {
clientList.get(index).write(message);
}

public void sendToAll(Object message){
for(ConnectionToClient client : clientList)
client.write(message);
}

}

public class Client {
private ConnectionToServer server;
private LinkedBlockingQueue messages;
private Socket socket;

public Client(String IPAddress, int port) throws IOException{
socket = new Socket(IPAddress, port);
messages = new LinkedBlokingQueue();
server = new ConnecionToServer(socket);

Thread messageHandling = new Thread() {
public void run(){
while(true){
try{
Object message = messages.take();
// Do some handling here...
System.out.println(""Message Received: "" + message);
}
catch(InterruptedException e){ }
}
}
};

messageHandling.setDaemon(true);
messageHandling.start();
}

private class ConnectionToServer {
ObjectInputStream in;
ObjectOutputStream out;
Socket socket;

ConnectionToServer(Socket socket) throws IOException {
this.socket = socket;
in = new ObjectInputStream(socket.getInputStream());
out = new ObjectOutputStream(socket.getOutputStream());

Thread read = new Thread(){
public void run(){
while(true){
try{
Object obj = in.readObject();
messages.put(obj);
}
catch(IOException e){ e.printStackTrace(); }
}
}
};

read.setDaemon(true);
read.start();
}

private void write(Object obj) {
try{
out.writeObject(obj);
}
catch(IOException e){ e.printStackTrace(); }
}


}

public void send(Object obj) {
server.write(obj);
}
}
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
socket programming multiple client to one server
----------Explanation----------
For every client you need to start separate thread. Example:
----------Code Sample----------
public class EchoThread extends Thread {
protected Socket socket;

public EchoThread(Socket clientSocket) {
this.socket = clientSocket;
}

public void run() {
InputStream inp = null;
BufferedReader brinp = null;
DataOutputStream out = null;
try {
inp = socket.getInputStream();
brinp = new BufferedReader(new InputStreamReader(inp));
out = new DataOutputStream(socket.getOutputStream());
} catch (IOException e) {
return;
}
String line;
while (true) {
try {
line = brinp.readLine();
if ((line == null) || line.equalsIgnoreCase(""QUIT"")) {
socket.close();
return;
} else {
out.writeBytes(line + ""\n\r"");
out.flush();
}
} catch (IOException e) {
e.printStackTrace();
return;
}
}
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
Sending a message to a client via its socket.id
----------Explanation----------
Also you should be avoiding sending messages like so, since that is part of Socket.IO internally and may change:
----------Code Sample----------
io.sockets.socket(id).emit('hello');

// the clients hash stores the sockets
// the users hash stores the username of the connected user and its socket.id
io.sockets.on('connection', function (socket) {
// get the handshake and the session object
var hs = socket.handshake;
users[hs.session.username] = socket.id; // connected user with its socket.id
clients[socket.id] = socket; // add the client data to the hash
...
socket.on('disconnect', function () {
delete clients[socket.id]; // remove the client from the array
delete users[hs.session.username]; // remove connected user & socket.id
});
}

// we want at some point to send a message to user 'alex'
if (users['alex']) {
// we get the socket.id for the user alex
// and with that we can sent him a message using his socket (stored in clients)
clients[users['alex']].emit(""Hello Alex, how've you been"");
}
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Socket.io emit from Express controllers
----------Explanation----------
You can use a pattern based on standard JS closures. The main export in logs.js will not be the controller function itself, but a factory function that will accept all needed dependencies, and create the controller:
----------Code Sample----------
exports.create = function(socket) {
return function(req, res) {
// write body of api request to mongodb
socket.emit();
}
}

app.route('/logs').post(logs.create(socket));
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
BufferedWriter and socket in java, write has no effect
----------Explanation----------
Your code is correct. I tested it with a generic server that will echo whatever the client sends and it worked fine (with no changes). It could be that the server your using is faulty. One thing I noticed was that for my server I needed to append a new line character every time I wrote to the output stream, for it to actually send the data. I'm willing to bet that's why your GUI isn't receiving anything. Here's the client thread class from my server:
----------Code Sample----------
class ClientThread extends Thread {

private Socket sock;
private InputStream in;
private OutputStream out;

ClientThread( Socket sock ) {
this.sock = sock;
try {
this.in = sock.getInputStream();
this.out = sock.getOutputStream();
} catch ( IOException e ) {
e.printStackTrace();
}
}

//Echos whatever the client sends to it
public void run() {
BufferedReader bufIn = new BufferedReader( new InputStreamReader( in ) );
BufferedWriter bufOut = new BufferedWriter( new OutputStreamWriter( out ) );
while ( true ) {
try {
String msg = bufIn.readLine();
System.out.println( ""Received: "" + msg );
bufOut.write( msg );
bufOut.newLine(); //HERE!!!!!!
bufOut.flush();
} catch ( IOException e ) {
e.printStackTrace();
}

}
}

}
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
How do I access instantiated WebSockets in Jetty 9?
----------Explanation----------

----------Code Sample----------
class=""lang-java prettyprint-override"">@WebSocket
public class ChatSocket {
public Session session;

@OnWebSocketConnect
public void onConnect(Session session) {
this.session = session;
ChatRoom.getInstance().join(this);
}

@OnWebSocketMessage
public void onText(String message) {
ChatRoom.getInstance().writeAllMembers(""Hello all"");
}

@OnWebSocketClose
public void onClose(int statusCode, String reason) {
ChatRoom.getInstance().part(this);
}
}

public class ChatRoom {
private static final ChatRoom INSTANCE = new ChatRoom();

public static ChatRoom getInstance()
{
return INSTANCE;
}

private List members = new ArrayList<>();

public void join(ChatSocket socket) 
{
members.add(socket);
}

public void part(ChatSocket socket) 
{
members.remove(socket);
}

public void writeAllMembers(String message) 
{
for(ChatSocket member: members)
{
member.session.getRemote().sendStringByFuture(message);
}
}

public void writeSpecificMember(String memberName, String message) 
{
ChatSocket member = findMemberByName(memberName);
member.session.getRemote().sendStringByFuture(message);
}

public ChatSocket findMemberByName(String memberName) 
{
// left as exercise to reader
}
}

class=""lang-java prettyprint-override"">ChatRoom.getInstance().writeSpecificMember(""alex"", ""Hello"");

// or

ChatRoom.getInstance().writeAllMembers(""Hello all"");

class=""lang-java prettyprint-override"">@WebSocket
public class ChatSocket {
public ChatRoom chatroom;

public ChatSocket(ChatRoom chatroom)
{
this.chatroom = chatroom;
}

@OnWebSocketConnect
public void onConnect(Session session) {
chatroom.join(this);
}

@OnWebSocketMessage
public void onText(String message) {
chatroom.writeAllMembers(message);
}

@OnWebSocketClose
public void onClose(int statusCode, String reason) {
chatroom.part(this);
}
}

public class ChatCreator implements WebSocketCreator
{
private ChatRoom chatroom;

public ChatCreator(ChatRoom chatroom)
{
this.chatroom = chatroom;
}

public Object createWebSocket(UpgradeRequest request, 
UpgradeResponse response)
{
// We want to create the Chat Socket and associate
// it with our chatroom implementation
return new ChatSocket(chatroom);
}
}

public class ChatHandler extends WebSocketHandler
{
private ChatRoom chatroom = new ChatRoom();

@Override
public void configure(WebSocketServletFactory factory)
{
factory.setCreator(new ChatCreator(chatroom));
}
}
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Java: Multithreading & UDP Socket Programming
----------Explanation----------
The (basic) model for the server is that the only thing it does is receive socket connections... the server relies on a handler to handle those connections and that's it. If you try to build that model it would look something like this:
----------Code Sample----------
class Server{
private final ServerSocket serverSocket;
private final ExecutorService pool;

public Server(int port, int poolSize) throws IOException {
serverSocket = new ServerSocket(port);
pool = Executors.newFixedThreadPool(poolSize);
}

public void serve() {
try {
while(true) {
pool.execute(new Handler(serverSocket.accept()));
}
} catch (IOException ex) {
pool.shutdown();
}
}
}

class Handler implements Runnable {
private final Socket socket;
Handler(Socket socket) { this.socket = socket; }
public void run() {
// receive the datagram packets
}
}

public void run()
{
while(true)
{
// receive UDP packets
// process the UDP packets
}
}


public static void main(String[] args) throws IOException
{
// start your client
new Client().start();
}
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
Android Manifest - ""Has No Default Constructor"" With Activity/Runnable Class
----------Explanation----------
Android Activity classes must have a default constructor that takes no parameters. Your ChatConnect class has this constructor:
----------Code Sample----------
public ChatConnect(Socket s){
socket = s;
}

public ChatConnect(){
}
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
How to send a message to a particular client with socket.io
----------Explanation----------
A pair of username and socket should be stored in an object like this:
----------Code Sample----------
var users = {
'userA@example.com': [socket object],
'userB@example.com': [socket object],
'userC@example.com': [socket object]
}

{
to:[the other receiver's username as a string],
from:[the person who sent the message as string],
message:[the message to be sent as string]
}

users[data.to].emit('receivedMessage', data)
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
Android: continuous socket write
----------Explanation--","['""""""Sending compressed JPG image over socket\n\n I am trying to create a program with Java which takes a screenshot of the user\'s screen, compresses the image, and sends it to a server over sockets. For some reason the image is saved corrupted in the end (it\'s unreadable). Can you maybe help me find what the problem could be? CLIENT: (the screenshot is entered as a BufferedImage, and the returned byte array is then returned to the second function which sends it to the server)\n\npublic static byte[] compressImage(BufferedImage image) throws IOException { System.out.println(""starting compression""); ByteArrayOutputStream os = new ByteArrayOutputStream(37628); float quality = 0.16f; // create a BufferedImage as the result of decoding the supplied InputStream // get all image writers for JPG format Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(""jpg""); //Iterator iter = ImageIO.getImageWritersByFormatName(""jpeg""); if (!writers.hasNext()) throw new IllegalStateException(""No writers found""); ImageWriter writer = (ImageWriter) writers.next(); ImageOutputStream ios = ImageIO.createImageOutputStream(os); writer.setOutput(ios); ImageWriteParam param = writer.getDefaultWriteParam(); // compress to a given quality param.setCompressionMode(ImageWriteParam.MODE_EXPLICIT); param.setCompressionQuality(quality); // appends a complete image stream containing a single image and //associated stream and image metadata and thumbnails to the output writer.write(null, new IIOImage(image, null, null), param); os.flush(); return os.toByteArray(); } public void uploadShot(byte[] imgData, String nickname) { try { /* Try to connect to the server on localhost, port 5555 */ Socket sk = new Socket(""localhost"", 23232); OutputStream output = sk.getOutputStream(); /* Send filename to server */ OutputStreamWriter outputStream = new OutputStreamWriter(sk.getOutputStream()); outputStream.write(nickname + ""\\n""); outputStream.flush(); /* Get response from server */ BufferedReader inReader = new BufferedReader(new InputStreamReader(sk.getInputStream())); String serverStatus = inReader.readLine(); // Read the first line /* If server is ready, send the file */ if (serverStatus.equals(""READY"")){ int len = imgData.length; int start = 0; if (len < 0) throw new IllegalArgumentException(""Negative length not allowed""); if (start < 0 || start >= imgData.length) throw new IndexOutOfBoundsException(""Out of bounds: "" + start); // Other checks if needed. // May be better to save the streams in the support class; // just like the socket variable. OutputStream out = sk.getOutputStream(); DataOutputStream dos = new DataOutputStream(out); dos.writeInt(len); if (len > 0) { dos.write(imgData, start, len); } dos.close(); output.close(); sk.close(); System.out.println(""Transfer complete.""); } } catch (Exception ex){ /* Catch any errors */ System.out.println(ex.getMessage()); } }\n\nSERVER: (the received image is saved to the folder mentioned with a timestamp)\n\npublic static void main(String args[]) throws Exception{ System.out.println(""Server running...""); /* Listen on port 5555 */ ServerSocket server = new ServerSocket(23232); /* Accept the sk */ Socket sk = server.accept(); System.out.println(""Server accepted client""); InputStream input = sk.getInputStream(); BufferedReader inReader = new BufferedReader(new InputStreamReader(sk.getInputStream())); BufferedWriter outReader = new BufferedWriter(new OutputStreamWriter(sk.getOutputStream())); /* Read the filename */ String nickname = inReader.readLine(); if ( !nickname.equals("""") ){ /* Reply back to client with READY status */ outReader.write(""READY\\n""); outReader.flush(); } String current = ""/home/kasgel/screenshots""; DateFormat dateFormat = new SimpleDateFormat(""dd-MM-yyyy__HH:mm:ss""); Date timestamp = new Date(); File filename = new File(current + ""/"" + nickname + ""-"" + dateFormat.format(timestamp) + "".jpg""); if (!filename.exists()) { filename.createNewFile(); } FileOutputStream wr = new FileOutputStream(filename); byte[] buffer = new byte[sk.getReceiveBufferSize()]; int bytesReceived = 0; while((bytesReceived = input.read(buffer))>0) { wr.write(buffer,0,bytesReceived); } wr.close(); }\n\nAnd the error message which I get when opening the saved screenshot is the following: display.im6: Not a JPEG file: starts with 0x00 0x03 `MyNick-30-03-2015__19:27:58.jpg\' @ error/jpeg.c/JPEGErrorHandler/316. 2\n\nSend some known data and compare.""""""']",0.3125,0.195121951,1
sql,Connection,Authentication during connection to MongoDB server instance using Java,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","Following on from Bob Kuhar's accepted answer, in Mongo3 the mechanism has change to SHA1 from challenge response as shown in the code snippet. I need to update the code snippet as follows:

...
import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
...

// Manage the mongo db connection...
List<ServerAddress> seeds = new ArrayList<ServerAddress>();
seeds.add( new ServerAddress(configuration.getMongoHost(), configuration.getMongoPort() ));
List<MongoCredential> credentials = new ArrayList<MongoCredential>();
credentials.add(
    MongoCredential.createScramSha1Credential(
        configuration.getMongoUser(),
        configuration.getMongoDb(),
        configuration.getMongoPassword().toCharArray()
    )
);
MongoClient mongo = new MongoClient( seeds, credentials );",None,"['""""""Authentication during connection to MongoDB server instance using Java\n\n\nIs it possible to make something like :\n\nMongoClient mongo = new MongoClient(ip, port, usrName, password)\n\nin JAVA similar to the MongoVUE or other SQL based databases\' authentication method. There the authentication is done during connection to DB instance. I don\'t see an appropriate instance method in MongoClient java doc\n\nAnd the way in Authentication (Optional) Official docs\n\ndoesn\'t fit my goals, because it requires to change all the existing query methods in my application which don\'t use authentication now. The way in Authenticate to MongoDB with the Java Driver looks exactly what i need, but there\'s no com.mongodb.MongoCredential class in mongo 2.10.1 distribution. rokpoto.comrokpoto.com\n\n9,1\n\nHow about creating a wrapper for the instantiation of the Mongo client? â Alex Theedom Feb 18, 2014 at 16:54\n\nYou shouldn\'t need to change all your existing queries, you should only need to change the logic that establishes your MongoClient. Most applications do this as some sort of Singleton so adding authentication is just a matter of modifying the Singleton. It is a pain-in-the-butt that there isn\'t a signature that takes just String, String for username password, but its the Mongo Java API, get used to disappointment. You can either go the MongoURI path which gets you the shortest signature... MongoClient mongo = new MongoClient( new MongoClientURI( ""mongodb://app_user:bestPo55word3v3r@localhost/data"" ) );\n\nOr go with the more verbose List<MongoCredential> path\n\nList<ServerAddress> seeds = new ArrayList<ServerAddress>(); seeds.add( new ServerAddress( ""localhost"" ); List<MongoCredential> credentials = new ArrayList<MongoCredential>(); credentials.add( MongoCredential.createMongoCRCredential( ""app_user"", ""data"", ""bestPo55word3v3r"".toCharArray() ) ); MongoClient mongo = new MongoClient( seeds, credentials );\n\n6\n\nthanks. Can you say, please, which jar contains definition of MongoCredential type? \n\nMongoClient is in the mongo-java-driver-2.11.3.jar, but the JavaDocs say its been there since 2.10.0. My project gets the JARs through gradle. â Bob Kuhar Feb 18, 2014 at 17:19\n\nI\'m confused. There\'s MongoClient, but not MongoCredential in mongo-2.10.1.jar. \n\nBummer. You\'re screwed. If you are stuck with 2.10.1 than the MongoClientURI is your only path to Mongo Authentication. Looking again at the JavaDocs, it appears MongoCredential shows up at 2.11.0: api.mongodb.org/java/2.11.3/com/mongodb/MongoCredential.html. We are running 2.11.4 here and do our authentication through MongoCredentials.  What about the port number port in the accepted solution? \n\nFollowing on from Bob Kuhar\'s accepted answer, in Mongo3 the mechanism has change to SHA1 from challenge response as shown in the code snippet. I need to update the code snippet as follows:\n\n.""""""']",0.333333333,0.7,0.32
sql,Connection,How to get database url from java.sql.Connection?,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","I believe you can use the DatabaseMetaData object from the Connection and then get the URL. Try:

DatabaseMetaData dmd = connection.getMetaData();
String url = dmd.getURL();",None,"['"""""" How to get database url from java.sql.Connection? For given Connection instance how do I find out url that the Connection uses to connect the database ? Is it somewhere in Properties returned by Connection.getClientInfo() method? If there you need me to provide clearer description all comments are welcome. Thank you\n\nConnection has the getMetaData() to return DatabaseMetaData . DatabaseMetaData has the getURL() to return the URL for this DBMS. 3\n\nIs there way to get it without metadata because if connections fails this code isnt work\n\n\n\ndo you think it makes sense that if you cannot connect to the server but can also get the information from the server ? ..... It dependes on your needs.I need to access only datasource url info in runtime.DirverManagedDatasource has getUrl method and give this info without any server request\n\n\n\nI believe you can use the DatabaseMetaData object from the Connection and then get the URL. Try:\n\nDatabaseMetaData dmd = connection.getMetaData(); String url = dmd.getURL();\n\n,Inside the Connection object, you have an object of type DatabaseMetaData, it contains a lot of information about the database. Lucas de Oliveira gave you a good example of code. And here is the documentation of the object : Interface DatabaseMetaData\n\n1\n\nWelcome to SO. Please consider add a link to DatabaseMetaData javadoc. connection.getClientInfo() has all the details related to connection. It returns a properties object. You can retrieve the value of ""password"" property to fetch the password that was used for the connection object. Please let me know if this solves your problem.""""""']",0.333333333,1,0.526315789
sql,Connection,How to get database schema name when using oracle jdbc connection?,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","You can get schema name using

Connection conn = 
DriverManager.getConnection(""jdbc:oracle:thin:@server:port:SID"",prop);    
DatabaseMetaData databaseMetaData = conn.getMetaData();
System.out.println(""schema name >>>> ""+databaseMetaData.getUserName());",None,"['""""""The answer unfortunately is that there are no consistent solutions. If John has access to Sally.Table ... the query will work but getUserName() will return John and not Sally schema. For Oracle the user owns their schema and while others may have access, that user ID is the default schema on that connection. Further, neither getSchemaName() nor getCatalog() will return the schema name. @horse_with_no_name has the closest answer for Oracle since a given user name is the (default) schema name unless overridden in object reference as shown. For other databases the same rules do not apply consistently. Darrell TeagueDarrell Teague\n\n4,You can get schema name using\n\nConnection conn = DriverManager.getConnection(""jdbc:oracle:thin:@server:port:SID"",prop); DatabaseMetaData databaseMetaData = conn.getMetaData(); System.out.println(""schema name >>>> ""+databaseMetaData.getUserName());\n\n""""""']",0.333333333,0.333333333,1
sql,Connection,Connect Java to a MySQL database,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","To create database through Java code, you must use executeUpdate(sql) instead of executeQuery(sql); and connect to the mysql database as root:

connection =  DriverManager.getConnection(
    ""jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull"",
    ""root"", ""root""
);
Statement st = connection.createStatement();
st.executeUpdate(sql);
st.close();",None,"['""""""Connect Java to a MySQL database\n\nHow do you connect to a MySQL database in Java? java.sql.SQLException: No suitable driver found for jdbc:mysql://database/table at java.sql.DriverManager.getConnection(DriverManager.java:689) at java.sql.DriverManager.getConnection(DriverManager.java:247)\n\njava.lang.ClassNotFoundException: com.mysql.jdbc.Driver\n\njava.lang.ClassNotFoundException: com.mysql.cj.jdbc.Driver\n\n9,1\n\nHere\'s a short 3-minute video tutorial that demonstrates using MySQL from Java. Check it out here: Quick Tutorial: Connecting to MySQL database using Java\n\n\n\nHere\'s a step by step explanation how to install MySQL and JDBC and how to use it:\n\nDownload and install the MySQL server. Just do it the usual way.""""""']",0.333333333,0.25,0.90777777
sql,Connection,Should you set up database connection properties in server.xml or context.xml,"could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>
<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.
<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.
What is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>
<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>
<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>
<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>
<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>
<p>Next  make sure that the java keystore contains all the CA certificates.
<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>","Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","A connection pool operates by performing the work of creating connections ahead of time. In the case of a JDBC connection pool, a pool of Connection objects is created at the time the application server starts. The client can access the connection object in connection pool and return the object to pool once the db work is completed.

Context.xml

   <Resource name=""jdbc/TestDB"" auth=""Container"" type=""javax.sql.DataSource"" 
maxActive=""100"" maxIdle=""30"" maxWait=""10000"" username=""root"" password="""" 
driverClassName=""com.mysql.jdbc.Driver""               
url=""jdbc:mysql://localhost:3306/cdcol""/>
//This should be added in the servers context,xml file. For example if you are using apache server then the context.xml will be found in C:\apache-tomcat-6.0.26\conf\Context.xml

web.xml

  <resource-ref>
      <description>DB Connection</description>
      <res-ref-name>jdbc/TestDB</res-ref-name>
      <res-type>javax.sql.DataSource</res-type>
      <res-auth>Container</res-auth>
  </resource-ref>
//This should be added in the web.xml of the local project. (Not in server's web.xml).

Context ctx=new InitialContext();
          Context envContext = (Context)ctx.lookup(""java:comp/env"");
          DataSource ds=(DataSource)envContext.lookup(""jdbc/TestDB"");//TestDB is the Database Name
          con=ds.getConnection();
          stmt = con.createStatement();",None,"['"""""" Should you set up database connection properties in server.xml or context.xml\n\nI am trying to set up the database connection properties using JNDI for a Spring web application. I am considering two approaches as below:\n\nIn your Spring configuration you may have something like:\n\n<jee:jndi-lookup id=""dataSource"" jndi-name=""java:comp/env/jdbc/facs""/>\n\nThen in your webapp /META-INF/context.xml file you should have something similar too:\n\n<?xml version=\'1.0\' encoding=\'utf-8\'?> <!-- antiResourceLocking=""true"" --> <Context path=""/podd-apn"" reloadable=""true"" cachingAllowed=""false"" antiResourceLocking=""true"" > <Resource name=""jdbc/facs"" type=""javax.sql.DataSource"" username=""${database.username}"" password=""${database.password}"" driverClassName=""org.postgresql.Driver"" url=""${database.url}"" maxActive=""8"" maxIdle=""4"" global=""jdbc/facs"" /> </Context>\n\nAnd in your web.xml you should something like:\n\n<!-- JNDI --> <resource-ref> <description>FACs Datasource</description> <res-ref-name>jdbc/facs</res-ref-name> <res-type>javax.sql.DataSource</res-type> <res-auth>Container</res-auth> </resource-ref>\n\nSetup in the Spring context like this:\n\n<jee:jndi-lookup id=""dbDataSource"" jndi-name=""jdbc/DatabaseName"" expected-type=""javax.sql.DataSource"" />\n\nYou can declare the JNDI resource in Tomcat\'s server.xml using something like this:\n\n<GlobalNamingResources> <Resource name=""jdbc/DatabaseName"" auth=""Container"" type=""javax.sql.DataSource"" username=""dbUsername"" password=""dbPasswd"" url=""jdbc:postgresql://localhost/dbname"" driverClassName=""org.postgresql.Driver"" initialSize=""5"" maxWait=""5000"" maxActive=""120"" maxIdle=""5"" validationQuery=""select 1"" poolPreparedStatements=""true""/> </GlobalNamingResources/>\n\nAnd reference the JNDI resource from Tomcat\'s web context.xml like this:\n\n<ResourceLink name=""jdbc/DatabaseName"" global=""jdbc/DatabaseName"" type=""javax.sql.DataSource""/>\n\nMy question is where is the best place to keep database properties? Should they be placed in server.xml or context.xml?""""""', '""""""7\n\nThanks for ur answer. if i place all the properties in our applications META-INF/context.xml? is it best place to keep? I do not think that placing some properties value INSIDE (for exampl in META-INF/context.xml) the application is a good approach, because then you have to recompile and deploy the application if the properties changes. - So this would be nearly the same like using no properties at all and placing the values directly in the spring config.xml\n\nThen which is the recommended place to keep them? I would just add, instead of defining these for all apps using context.xml.default, you can use application-specific context configuration files, like yourapp.xml in the same folder, which allows you to point two deployments of the same war to different databases. Not a helpful answer.""""""']",0.333333333,0.333333333,1
sql,ResultSet,HSQLDB delete row(s) from JDBC resultset,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","Most common way to construct:
PreparedStatement pstmt = É;
ResultSet rs = pstmt.executeQuery();
Based on 77 examples","Specify the cursor holdability in the code:

c.prepareStatement(select,
     ResultSet.TYPE_SCROLL_INSENSITIVE,
     ResultSet.CONCUR_UPDATABLE,
     ResultSet.HOLD_CURSORS_OVER_COMMIT);
The problem seems to be that HSQLDB JDBC driver uses ResultSet.CLOSE_CURSOS_AT_COMMIT as the default value.",None,"['""""""HSQLDB delete row(s) from JDBC resultset\n\nI have run into a couple of problems while trying to convert an existing JDBC application to use HSQLDB version 2.2.9 (Currently the codebase runs successfully on MySQL, ORACLE and SQLServer, but an embedded database seemed like a good option too). I will ask the questions one at a time and separately (although they all relate to the JDBC ResultSet.deleteRow() method, supported since HSQLDB 2.0)\n\nWhy does rs.next() return false after calling rs.deleteRow()? Here is a complete self contained code sample (including simple table creation, sample inserts, and deleting the table at the end):\n\nint deletedRows=0; try{ Connection c = DriverManager.getConnection(""jdbc:hsqldb:mem:mytestdb"", ""SA"", """"); String createSQL = ""create table test (num INTEGER PRIMARY KEY, str VARCHAR(25))""; Statement createStmt = c.createStatement(); createStmt.execute(createSQL); createStmt.close(); String ins = ""insert into test (num,str) values (?,?)""; PreparedStatement pStmt = c.prepareStatement(ins); for(int i=0; i<100; i++){ pStmt.setInt(1, i); pStmt.setString(2, ""String""+i); pStmt.execute(); } // there should now be 100 rows in the table String select = ""SELECT * FROM test""; PreparedStatement stmt = c.prepareStatement(select, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE); ResultSet rs = stmt.executeQuery(); rs.beforeFirst(); while(rs.next()){ int num = rs.getInt(""num""); if((num%7)==0){ System.out.println(""Deleting row:""+num); rs.deleteRow(); deletedRows++; } } Statement dropStmt = c.createStatement(); dropStmt.execute(""drop table test;""); dropStmt.close(); } catch (SQLException sqle) { System.out.println(""Deleted ""+deletedRows+ "" rows before exception: ""+sqle.getMessage()); sqle.printStackTrace(); }\n\nWhen running the same code on MySQL database, the output shows that every 7th row is deleted:\n\nOn HSQLDB, the output is:\n\nThe rs.next() returns false after the first call to rs.deleteRow(). I cannot find any information in the HSQLDB javadoc. Does anyone have any ideas? RudolphEstRudolphEst\n\n1,3\n\nBy the way, I know I could do the same deletion using a simple SQL delete statement, but that is not an option in the actual existing code (the deletion is not quite as simple as the example, and requires DB implementation specific SQL). It sounds like a bug in the HSQLDB implementation of ResultSet.deleteRow(). \n\nThat is what I am thinking too, but I cannot find such a bug report. I\'ll have a look again and ask their dev team. As I also commented before, this sounds like a bug in the HSQLDB JDBC implementation. The JDBC 4.1 spec (section 15.2.4.2) says:\n\nAfter the method deleteRow has been called, the cursor will be positioned before the next valid row. If the deleted row is the last row, the cursor will be positioned after the last row. This implies that the call to next() should have returned true (if the ResultSet contained more rows). \n\nSpecify the cursor holdability in the code:\n\nc.prepareStatement(select, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT);\n\nThe problem seems to be that HSQLDB JDBC driver uses ResultSet.CLOSE_CURSORS_AT_COMMIT as the default value. RudolphEstRudolphEst\n\n1,Most likely, you have a misconfiguation.""""""', '""""""For example you may have an older version of the HSQLDB jar in your classpath. I get this output with the current SVN code. The JDBC code has not changed since 2.2.9. Deleting row:0 Deleting row:7 Deleting row:14 Deleting row:21 Deleting row:28 Deleting row:35 Deleting row:42 Deleting row:49 Deleting row:56 Deleting row:63 Deleting row:70 Deleting row:77 Deleting row:84 Deleting row:91 Deleting row:98\n\n2\n\nI ran it on the 2.2.9 jar as well as on the 2.2.9 source and got the problem. It looks like the default cursor holdability is CLOSE_CURSORS_AT_COMMIT and not HOLD_CURSORS_OVER_COMMIT as it should be. If c.prepareStatement(select, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE, ResultSet.HOLD_CURSORS_OVER_COMMIT) is used, the code works as expected. Maybe there should be a not in the JavaDoc for HSQLDB at least... I think we should continue this discussion on the HSQLDB forums. I\'ll add my own answer and be done with it here...""""""']",0.131578947,1,0.85
sql,ResultSet,How to programmatically create a Java ResultSet from custom data with no database,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","Most common way to construct:
PreparedStatement pstmt = É;
ResultSet rs = pstmt.executeQuery();
Based on 77 examples","Why you are getting ""Closed resultset:next"" error, see here:

Why am I getting ResultSet is closed error when I never closed any

I suppose you are not using some ORM framework like Hibernate.

In this case, map the resultset data in the DAO or build an object mapper yourself, which maps the ResultSet to a some Data Transfer Object. Then pass this object to the createExcel() method.

Something like this:

ResultSet rs = myDao.getResult();
List<ExcelDto> excelDtos = new ArrayList<>();
ExcelDto excelDto;
while (rs.next()) {      
    excelDto = new ExcelDto();    
    dto.setXCol(rs.getString(""XColumn""))
    excelDtos.add(dto);  
}
excelCreator.createExcel(excelDtos);
Then in the excelCreator you can work with an ArrayList instead of ResultSet.",None,"['""""""How to programmatically create a Java ResultSet from custom data with no database\n\nI have some existing code that accepts a java.sql.ResultSet that contains info retrieved from an Oracle database. I would now like to reuse this code, but I\'d like to pass it a ResultSet object that I create myself from some in-memory data that is not affiliated with any database. Is there an existing Java framework class that I can use for this? ResultSet has tons of methods, so implementing my own class for this seemed like overkill, even though I could ignore most of the methods for my specific case. I was thinking of something along the lines of the old Microsoft ADO recordset object, where I could create the fields and then populate the row data for each field. This seemed like an easily googlable question, but I\'ve been unable to find any good pointers. Chris FarmerChris Farmer\n\n1\n\nThis could help as well: stackoverflow.com/questions/878848/\n\nCreate your own AbstractResultSet class, one that (like AbstractQueue) implements all methods by throwing UnsupportedOperationException (Eclipse autogenerates these methods in a split second). Now extend AbstractResultSet. The subclass can override only the methods you\'re interested in implementing. """"""']",0.131578947,0.3125,1
sql,ResultSet,Retrieve column names from java.sql.ResultSet,"<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>
<p>If you want to report an empty set  add a variable counting the items read.
<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>
Use  do...while  to process the first row  while continuing to process remaining rows
<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .
You check whether there is something in your  resultset  and don t advance your cursor.
You can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.
First generates an exception if done on a resultset from type  forward only .
always moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>
Although there are methods for  backing up   they are not supported for all types of result sets.</p>
<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>
<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>
<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>
There will be no zeros returned for empty value in the database</p>
<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>
<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.
Another option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>
<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>
<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>
<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.
Iterating through the result set to find the row count is almost same as processing the data.
<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>
<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.
The only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).
Otherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.
For every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.
By thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).
First  you should never return a <code>HashMap</code>  which is a specific implementation.
So i save the current ResultSet position and restore it after i created the maps.</p>
I reduced that to only one array-acces each for-loop iteration.","Most common way to construct:
PreparedStatement pstmt = É;
ResultSet rs = pstmt.executeQuery();
Based on 77 examples","You can use the the ResultSetMetaData (http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html) object for that, like this:

ResultSet rs = stmt.executeQuery(""SELECT * FROM table"");
ResultSetMetaData rsmd = rs.getMetaData();
String firstColumnName = rsmd.getColumnName(1);",None,"['""""""Retrieve column names from java.sql.ResultSet\n\nWith java.sql.ResultSet is there a way to get a column\'s name as a String by using the column\'s index? I had a look through the API doc but I can\'t find anything. 1.1m3.6k3.6kYou can get this info from the ResultSet metadata. See ResultSetMetaData\n\nResultSet rs = stmt.executeQuery(""SELECT a, b, c FROM TABLE2""); ResultSetMetaData rsmd = rs.getMetaData(); String name = rsmd.getColumnName(1);\n\nand you can get the column name from there. If you do\n\nselect x as y from table\n\nthen rsmd.getColumnLabel() will get you the retrieved label name too. Brian AgnewBrian Agnew\n\n6\n\nSee also rsmd.getColumnLabel if you retrieves columns with labels (for example SELECT columnName AS ColumnLabel\n\n\n\nYou may be surprised as me seeing column count starting at 1. You can iterate through column names with for (int i = 1; i <= rsmd.getColumnCount(); i++) String name = rsmd.getColumnName(i);\n\n\n\nDoes getColumnName() return the original column name if not using AS alias naming? @membersound Yes, as documented in its Javadoc: ""If a SQL AS is not specified, the value returned from getColumnLabel will be the same as the value returned by the getColumnName method."". In almost all case you should use getColumnLabel instead of getColumnName. This will fail if table is empty. | Show 1 more comment\n\nIn addition to the above answers, if you\'re working with a dynamic query and you want the column names but do not know how many columns there are, you can use the ResultSetMetaData object to get the number of columns first and then cycle through them. Amending Brian\'s code:\n\nResultSet rs = stmt.executeQuery(""SELECT a, b, c FROM TABLE2""); ResultSetMetaData rsmd = rs.getMetaData(); int columnCount = rsmd.getColumnCount(); // The column count starts from 1 for (int i = 1; i <= columnCount; i++ ) { String name = rsmd.getColumnName(i); // Do stuff with name }\n\n5,2\n\nisn\'t this right? for (int i = 1; i <= columnCount + 1; i++ ) { ... }\n\n\n\n@Martin No, because that will attempt to get Column n + 1 that doesn\'t exist. If you want to be absolutely concise, then it\'d be i <= columnCount. You can use the the ResultSetMetaData (http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html) object for that, like this:\n\nResultSet rs = stmt.executeQuery(""SELECT * FROM table""); ResultSetMetaData rsmd = rs.getMetaData(); String firstColumnName = rsmd.getColumnName(1);\n\n2\n\nthanx it helped me... i used it as: resultSet.getString(resultSet.findColumn(""fullname""))\n\n\n\nLimit the records fetched to 1. Otherwise if the table is too big, unnecessary overhead then. Eg for teradatabase: use query ""SELECT * FROM table SAMPLE 1""\n\n\n\nThis question is old and so are the correct previous answers. But what I was looking for when I found this topic was something like this solution.""""""', '""""""Glad this helped you! The SQL statements that read data from a database query return the data in a result set. The SELECT statement is the standard way to select rows from a database and view them in a result set. The **java.sql.ResultSet** interface represents the result set of a database query. Get methods: used to view the data in the columns of the current row being pointed to by the cursor. Using MetaData of a result set to fetch the exact column count\n\nResultSet rs = stmt.executeQuery(""SELECT a, b, c FROM TABLE2""); ResultSetMetaData rsmd = rs.getMetaData(); int numberOfColumns = rsmd.getColumnCount(); boolean b = rsmd.isSearchable(1);\n\nhttp://docs.oracle.com/javase/7/docs/api/java/sql/ResultSetMetaData.html\n\nand further more to bind it to data model table\n\npublic static void main(String[] args) { Connection conn = null; Statement stmt = null; try { //STEP 2: Register JDBC driver Class.forName(""com.mysql.jdbc.Driver""); //STEP 3: Open a connection System.out.println(""Connecting to a selected database...""); conn = DriverManager.getConnection(DB_URL, USER, PASS); System.out.println(""Connected database successfully...""); //STEP 4: Execute a query System.out.println(""Creating statement...""); stmt = conn.createStatement(); String sql = ""SELECT id, first, last, age FROM Registration""; ResultSet rs = stmt.executeQuery(sql); //STEP 5: Extract data from result set while(rs.next()){ //Retrieve by column name int id = rs.getInt(""id""); int age = rs.getInt(""age""); String first = rs.getString(""first""); String last = rs.getString(""last""); //Display values System.out.print(""ID: "" + id); System.out.print("", Age: "" + age); System.out.print("", First: "" + first); System.out.println("", Last: "" + last); } rs.close(); } catch(SQLException se) { //Handle errors for JDBC se.printStackTrace(); } catch(Exception e) { //Handle errors for Class.forName e.printStackTrace(); } finally { //finally block used to close resources try { if(stmt!=null) conn.close(); } catch(SQLException se) { } // do nothing try { if(conn!=null) conn.close(); } catch(SQLException se) { se.printStackTrace(); } //end finally try }//end try System.out.println(""Goodbye!""); }//end main //end JDBCExample\n\nvery nice tutorial here : http://www.tutorialspoint.com/jdbc/\n\nResultSetMetaData meta = resultset.getMetaData(); // for a valid resultset object after executing query Integer columncount = meta.getColumnCount(); int count = 1 ; // start counting from 1 always String[] columnNames = null; while(columncount <=count) { columnNames [i] = meta.getColumnName(i); } System.out.println (columnNames.size() ); //see the list and bind it to TableModel object. the to your jtbale.setModel(your_table_model);\n\nMiss Chanandler Bong\n\n4,Develop4LifeDevelop4Life\n\n7,Incase your table is empty and you still need to get table column names you can get your column as type Vector,see the following:\n\nResultSet rs = stmt.executeQuery(""SELECT a, b, c FROM TABLE2""); ResultSetMetaData rsmd = rs.getMetaData(); int columnCount = rsmd.getColumnCount(); Vector<Vector<String>>tableVector = new Vector<Vector<String>>(); boolean isTableEmpty = true; int col = 0; while(rs.next()) { isTableEmpty = false; //set to false since rs.next has data: this means the table is not empty if(col != columnCount) { for(int x = 1;x <= columnCount;x++){ Vector<String> tFields = new Vector<String>(); tFields.add(rsmd.getColumnName(x).toString()); tableVector.add(tFields); } col = columnCount; } } //if table is empty then get column names only if(isTableEmpty){ for(int x=1;x<=colCount;x++){ Vector<String> tFields = new Vector<String>(); tFields.add(rsmd.getColumnName(x).toString()); tableVector.add(tFields); } } rs.close(); stmt.close(); return tableVector;\n\n1,ResultSet rsTst = hiSession.connection().prepareStatement(queryStr).executeQuery(); ResultSetMetaData meta = rsTst.getMetaData(); int columnCount = meta.getColumnCount(); // The column count starts from 1 String nameValuePair = """"; while (rsTst.next()) { for (int i = 1; i < columnCount + 1; i++ ) { String name = meta.getColumnName(i); // Do stuff with name String value = rsTst.getString(i); //.getObject(1); nameValuePair = nameValuePair + name + ""="" +value + "",""; //nameValuePair = nameValuePair + "", ""; } nameValuePair = nameValuePair+""||"" + ""\\t""; }\n\n2,If you want to use spring jdbctemplate and don\'t want to deal with connection staff, you can use following:\n\njdbcTemplate.query(""select * from books"", new RowCallbackHandler() { public void processRow(ResultSet resultSet) throws SQLException { ResultSetMetaData rsmd = resultSet.getMetaData(); for (int i = 1; i <= rsmd.getColumnCount(); i++ ) { String name = rsmd.getColumnName(i); // Do stuff with name } } });\n\nselins sofaselins sofa\n\nU can get column name and value from resultSet.getMetaData(); This code work for me:\n\nConnection conn = null; PreparedStatement preparedStatement = null; try { Class.forName(""com.mysql.cj.jdbc.Driver""); conn = MySQLJDBCUtil.getConnection(); preparedStatement = conn.prepareStatement(sql); if (params != null) { for (int i = 0; i < params.size(); i++) { preparedStatement.setObject(i + 1, params.get(i).getSqlValue()); } ResultSet resultSet = preparedStatement.executeQuery(); ResultSetMetaData md = resultSet.getMetaData(); while (resultSet.next()) { int counter = md.getColumnCount(); String colName[] = new String[counter]; Map<String, Object> field = new HashMap<>(); for (int loop = 1; loop <= counter; loop++) { int index = loop - 1; colName[index] = md.getColumnLabel(loop); field.put(colName[index], resultSet.getObject(colName[index])); } rows.add(field); } } } catch (SQLException e) { e.printStackTrace(); } finally { if (preparedStatement != null) { try { preparedStatement.close(); }catch (Exception e1) { e1.printStackTrace(); } } if (conn != null) { try { conn.close(); } catch (SQLException e) { e.printStackTrace(); } } } return rows;\n\nI know, this question is already answered but probably somebody like me needs to access a column name from DatabaseMetaData by label instead of index:\n\nResultSet resultSet = null; DatabaseMetaData metaData = null; try { metaData = connection.getMetaData(); resultSet = metaData.getColumns(null, null, tableName, null); while (resultSet.next()){ String name = resultSet.getString(""COLUMN_NAME""); } }\n\nWe spent a sprint addressing your requests  how it went\n\nUpcoming initiatives on Stack Overflow and across the Stack Exchange network... 20 Java ResultSet - get Column name based on Index\n\n11 Java - How to get Column name on Result Set\n\n0 how to get a column name from resultset in java\n\n0 Print out entire table with column names\n\n1 How to get data with column names/headers in java JDBC\n\n0 How to get column name list from java.sql.ResultSet\n\n-1 How can I print the column names from 3 tables joining JDBC? 0 how to get all the columns of a specific table ucanaccess\n\n0 Retrieve data from SQL database based on user input using JDBC? 2 Java retrieving results from database\n\nSee more linked questions\n\n7 getting column names in JDBC\n\n55 JDBC ResultSet get columns with table alias\n\n0 Java ResultSet get Returned Field Names\n\n2 How to get a column by alias/label from Java\'s ResultSet? 1 Get/Set column names after join\n\n7 Returning just column names of ResultSet without actually performing the query (Oracle and Java)\n\n61 Print the data in ResultSet along with column names\n\n0 Retrieving column names from a table without using ResultSetMetaData\n\n1 How to print the whole column from resultset? 0 Java: How to retrieve SQL resultSet data through column name? Hot Network Questions\n\nParadox in Prisoner\'s dilemma\n\nWhat does ""..and make joyful the hearing of my wife with your approach"" mean? On the Lipschitz constant outside the stretch set\n\nDoes physical reality exist without an observer? The use of Bio-weapons as a deterrent? Fill the triangular grid using the digits 1-9 subject to the constraints provided\n\nWhat does ""I\'ll do, I\'ll do, and I\'ll do"" mean? Has a rocket engine ever been reused by a second/third stage\n\nOlder brother licking younger sister\'s legs\n\nIterating over the contents of a file\n\nWhy do the Fourier components of a piano note shift away from the harmonic series? Why does RBF rule #3 exist? Difficult time in life\n\nIs this a potentially more intuitive approach to MergeSort? I feel guilty about past behavior in my college\n\nAny philosophical works that explicitly address the heat death of the Universe and its philosophical implications? Positive sum can always be presented as a sum with strictly positive incremental sub-sums\n\nDo all Brauer relations for finite groups vanish under the augmentation map? The (apparently) same sequence of symbols in an Aikido diploma results in weirdly different translations in Google Translator.""""""']",0.131578947,0.25,0.723404255
util,ArrayList,How to sort a Map by Value (ArrayList) size in Java?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","Most common way to construct:
ArrayList list = new ArrayList();
Based on 161 examples

 void	sort()

          Sorts this list.


sort

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public void sort()
Use java.util.Collections.sort(List).","If you are using java-8, here's also a way to do this:

List<String> keys = unsortedMap.entrySet()
                   .stream()
                   .sorted((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()))
                   .map(Map.Entry::getKey)
                   .collect(Collectors.toList());
System.out.println(keys); //[C, A, B]
What it does is:

get a Stream of the entries of your map
sort the entries by the the size of each arraylist
map each entry to its corresponding key
collect the result in a List
If you want you could also write the sorted line as :

.sorted(Comparator.comparing(e -> e.getValue().size(), Comparator.reverseOrder()))","*******************usage scenario 1********************** 
----------usage scenario----------
Java, Using Iterator to search an ArrayList and delete matching objects
----------Explanation----------
You don't need them on one line, just use remove to remove an item when it matches:
----------Code Sample----------
import java.util.*;
public class ListExample {
public static final void main(String[] args) {
List list = new ArrayList(5);
String targetCaption = ""match"";
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
Iterator it = list.iterator();
while (it.hasNext()) {
if (it.next().getFriendCaption().equals(targetCaption)) {
it.remove();
// If you know it's unique, you could `break;` here
}
}
}
private static class Friend {
private String friendCaption;
public Friend(String fc) {
this.friendCaption = fc;
}
public String getFriendCaption() {
return this.friendCaption;
}
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Detect and prevent duplicate names ArrayList
----------Explanation----------

----------Code Sample----------
public class Fraction {
int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? true

public class Fraction {
public int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
@Override
public boolean equals(Object o) {
if (o==null) return false;
if (o==this) return true;
if (!(o instanceof Fraction) return false;
Fraction f = (Fraction) o;
return f.x == x && f.y ==y;
}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? false
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Java: How to read a text file
----------Explanation----------
You can use Files#readAllLines() to get all lines of a text file into a List<String> .
----------Code Sample----------
List numbers = new ArrayList<>();
for (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {
for (String part : line.split(""\\s+"")) {
Integer i = Integer.valueOf(part);
numbers.add(i);
}
}

List numbers = Files.lines(Paths.get(""/path/to/test.txt""))
.map(line -> line.split(""\\s+"")).flatMap(Arrays::stream)
.map(Integer::valueOf)
.collect(Collectors.toList());
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to capture a list of specific type with mockito
----------Explanation----------
The nested generics-problem can be avoided with the @Captor annotation :
----------Code Sample----------
@RunWith(MockitoJUnitRunner.class)
public class Test{

@Mock
private Service service;

@Captor
private ArgumentCaptor> captor;

@Test 
public void shouldDoStuffWithListValues() {
//...
verify(service).doStuff(captor.capture()));
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
How to sort ArrayList using Comparator?
----------Explanation----------
Use the Collections.sort(List, Comparator) method:
----------Code Sample----------
Collections.sort(students, Student.getCompByName());

List students = new ArrayList();

public static void main(String[] args) {
Student[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};
List students = new ArrayList(Arrays.asList(studentArr));
Collections.sort(students, Student.getCompByName());

for(Student student:students){
System.out.println(student.getName());
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
how to use an array list?
----------Explanation----------
The following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:
----------Code Sample----------
import java.util.*;

//...

List list = new ArrayList();
list.add(""Hello!"");
list.add(""How are you?"");

System.out.println(list.get(0)); // prints ""Hello!""

for (String s : list) {
System.out.println(s);
} // prints ""Hello!"", ""How are you?""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
what is the sense of final ArrayList?
----------Explanation----------
This means that you cannot rebind the variable to point to a different collection instance :
----------Code Sample----------
final List list = new ArrayList();
list = new ArrayList(); // Since `list' is final, this won't compile

final List list = Collections.unmodifiableList(new ArrayList(...));
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to add strings into an arraylist between two strings
----------Explanation----------
Third, to do what you ask for, there is overloaded method add for choosing position :
----------Code Sample----------
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(1,""Maybe""); //insert into position 1 and shift everything to the right.

[Yes, Maybe, No]

List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(1, ""Or"");
list.add(3, ""Or"");
System.out.println(list);

[Yes, Or, No, Or, Maybe]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

List orList = addOr(list);
System.out.println(orList);
}

public static List addOr(List list){
List newList = new ArrayList<>();
int count = 0;
for(String text : list){
count++;
newList.add(text);
if (count != list.size()){
newList.add(""Or"");
}
}
return newList;
}

[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

String niceOutput = addOr(list);
System.out.println(""Choose from following options: "" + niceOutput);
} 

public static String addOr(List list){
String orText = """";
int count = 0;
for(String text : list){
count++;
orText += '\'' + text + '\'';
if (count != list.size()){
orText += "" or "";
}
}
return orText; 
}

Choose from following options: 'Yes' or 'No' or 'Maybe' or 'Probably' or 'Never'
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?
----------Explanation----------
You can change the behaviour of ArrayList
----------Code Sample----------
List list = new ArrayList() {
public boolean add(MyType mt) {
super.add(mt);
Collections.sort(list, comparator);
return true;
}
}; 

List list = new ArrayList() {
public boolean add(MyType mt) {
int index = Collections.binarySearch(this, mt);
if (index < 0) index = ~index;
super.add(index, mt);
return true;
}
};
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Dynamic initialization of ArrayList
----------Explanation----------

----------Code Sample----------
private void setModel(Class type) {
ArrayList arrayList = new ArrayList();
}

private ArrayList getModel(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}

public class Tester {

private ArrayList getModels(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = (ArrayList) t.getModels(Data.class);
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = (ArrayList) t.getModels(Magic.class);
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Tester {

private ArrayList getModel() {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = t.getModel();
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = t.getModel();
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Data {

private Integer id;
private String name;


public Data() {
}


public Data(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}

public class Magic {

private Integer id;
private String name;


public Magic() {
}


public Magic(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java Velocity foreach loop
----------Explanation----------
For an ArrayList populated as below --
----------Code Sample----------
ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");

#foreach($iter in $list)
$!iter
#set($list_str=$!list_str+$!iter+"","")
#end
$!list_str

try
to
figure
it
try,to,figure,it,

ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");
list.add(null);

try
to
figure
it

try,to,figure,it,$!iter,
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
ArrayList contains case sensitivity
----------Explanation----------
You can use this exactly like you'd use any other ArrayList. You can pass this List out to other code, and external code won't have to understand any string wrapper classes.
----------Code Sample----------
public class CustomStringList3 extends ArrayList {
@Override
public boolean contains(Object o) {
String paramStr = (String)o;
for (String s : this) {
if (paramStr.equalsIgnoreCase(s)) return true;
}
return false;
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
'Catch branch is identical' however still requires me to catch it
----------Explanation----------
You can collapse exception branches if they're identical, and with the multi-catch syntax, you'll wind up with one catch statement that does the same thing as your three:
----------Code Sample----------
try {
FileInputStream e = new FileInputStream(""outings.ser"");
ObjectInputStream inputStream = new ObjectInputStream(e);
return (ArrayList)inputStream.readObject();
} catch (ClassNotFoundException | IOException var3) {
var3.printStackTrace();
}
return null;
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Passing ArrayList of string arrays from one activity to another in android
----------Explanation----------
You can use intents
----------Code Sample----------
ArrayList mylist = new ArrayList(); 
Intent intent = new Intent(ActivityName.this, Second.class);
intent.putStringArrayListExtra(""key"", mylist);
startActivity(intent);

Intent i = getIntent(); 
ArrayList list = i.getStringArrayListExtra(""key"");

name The name of the extra data, with package prefix.
value The ArrayList data value.

Returns the same Intent object, for chaining multiple calls into a single statement.

String[] people = {
""Mike Strong"",
""Jennifer Anniston"",
""Tom Bennet"",
""Leander Paes"",
""Liam Nesson"",
""George Clooney"",
""Barack Obama"",
""Steve Jobs"",
""Larry Page"",
""Sergey Brin"",
""Steve Wozniak""
};
String[] people1 = {
""raghu"", 
""hello""
};


ArrayList list = new ArrayList();
list.add(people);
list.add(people1);
Intent i = new Intent(MainActivity.this,SecondActivity.class);
i.putExtra(""key"", list);
startActivity(i); 

Intent in = getIntent();
ArrayList list =(ArrayList) in.getSerializableExtra(""key"");
for(int i=0;i {
String s[]= list.get(i);
for(int iv=0;iv Log.i(""..............:"",""""+s[iv]);
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
HashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?
----------Explanation----------
How is the HashMap declaration expressed in that scope? It should be:
----------Code Sample----------
HashMap dictMap

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap> dictMap
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Java: How to efficiently read from database?
----------Explanation----------

----------Code Sample----------
double[] data1 = new double[data.size()];
for(int a = 0; a < data1.length; ++a) {
data1[a]=data.get(a);
}

double[] data1 = data.toArray(new double[data.size()]);

ArrayList data = new ArrayList();

ArrayList data = new ArrayList(AMOUNT_OF_RECORDS);

select distinct price_open from stock_data ...
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Java ArrayList and HashMap on-the-fly
----------Explanation----------

----------Code Sample----------
List list = new ArrayList() {
{
add(""value1"");
add(""value2"");
}
};

Map map = new HashMap() {
{
put(""key1"", ""value1"");
put(""key2"", ""value2"");
}
};
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
java multidimensional arraylist
----------Explanation----------
You have to create a new ArrayList for each new row. Replacing
----------Code Sample----------
workArray.clear();

workArray = new ArrayList();

ArrayList workArray = new ArrayList(); 

ArrayList> workMatrix = new ArrayList<>();
ArrayList workArray = new ArrayList<>(); 
workMatrix.add(workArray);

// This prints ""true"": The first element of the matrix
// and the workArray are IDENTICAL. (Not only equal, 
// but really IDENTICAL)
System.out.println(workMatrix.get(0) == workArray);
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
ArrayList initialization equivalent to array initialization
----------Explanation----------
Arrays.asList can help here:
----------Code Sample----------
new ArrayList(Arrays.asList(1,2,3,5,8,13,21));
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
How can I calculate the difference between two ArrayLists?
----------Explanation----------
In Java, you can use the Collection interface's removeAll method.
----------Code Sample----------
// Create a couple ArrayList objects and populate them
// with some delicious fruits.
Collection firstList = new ArrayList() {{
add(""apple"");
add(""orange"");
}};

Collection secondList = new ArrayList() {{
add(""apple"");
add(""orange"");
add(""banana"");
add(""strawberry"");
}};

// Show the ""before"" lists
System.out.println(""First List: "" + firstList);
System.out.println(""Second List: "" + secondList);

// Remove all elements in firstList from secondList
secondList.removeAll(firstList);

// Show the ""after"" list
System.out.println(""Result: "" + secondList);

First List: [apple, orange]
Second List: [apple, orange, banana, strawberry]
Result: [banana, strawberry]
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
BaseExpandableListAdapter add child programmatically
----------Explanation----------
in which i've initialize ExpandableListAdapter
----------Code Sample----------
/*
* view types
*/
SortCategoryExpand sortCategoryExpand = new SortCategoryExpand();

private static final int VIEW_1 = 0;
private static final int View_2 = 1;
private static final int View_3=2;
* data
private Context context = null;
ArrayList groups = new ArrayList();
public ExpandableListAdapter(Context context) {
this.context = context;
}
@Override
public int getChildType(int groupPosition, int childPosition) {
int type = -1;
if (groupPosition == 2) {
type = View_3;
}
else if (groupPosition == 1) {
type = View_2;
}else {
type = View_1;
return type;
public int getChildTypeCount() {
// Past and Future Travel Plans
return 3;
public Object getChild(int groupPosition, int childPosition) {
return groups.get(groupPosition).entryItems.get(childPosition);
public long getChildId(int groupPosition, int childPosition) {
return childPosition;
public View getChildView(int groupPosition, int childPosition,
boolean isLastChild, View convertView, ViewGroup parent) {
// get the type of the group this child belongs
Type viewType = groups.get(groupPosition).type;
View view = convertView;
if (viewType == Type.Data1) {
if (view == null) {
view = LayoutInflater.from(context).inflate(
R.layout.category_absence_line_item, parent, false);
Data1ViewHolder holder = new Data1ViewHolder ();
holder.txtSubject = (TextView) view.findViewById(R.id.subject);
holder.txtFromUser = (TextView) view.findViewById(R.id.user);
holder.txtStartDate = (TextView) view
.findViewById(R.id.startDate);
holder.txtEndDate = (TextView) view.findViewById(R.id.endDate);
view.setTag(holder);
}
Data1ViewHolder holder = (Data1ViewHolder ) view.getTag();
EntryItem entryItem = (EntryItem) getChild(groupPosition,
childPosition);
if (entryItem.subject.equals(""None"")) {
holder.txtSubject.setText(""None"");
} else {
holder.txtSubject.setText("""" + entryItem.subject);
if (entryItem.fromUser.equals(""None"")) {
holder.txtFromUser.setText("""");
} else if (entryItem.fromUser.equals(""anyType{}"")) {
holder.txtFromUser.setText(""From User : "");
holder.txtFromUser.setText(""From User : "" + entryItem.fromUser);
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)
.equals(""01-Jan-1970"")) {
holder.txtStartDate.setText(""Start Date : None"");
} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(
entryItem.startDate).equals(""03-Mar-3800"")) {
holder.txtStartDate.setText("""");
holder.txtStartDate.setText(""Start Date : ""
+ new SimpleDateFormat(""dd-MMM-yyyy"")
.format(entryItem.startDate));
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)
holder.txtEndDate.setText(""Due Date : None"");
entryItem.endDate).equals(""03-Mar-3800"")) {
holder.txtEndDate.setText(""Due Date : ""
.format(entryItem.endDate));
}else ifviewType == Type.Data2){
R.layout.category_ticket_line_item, parent, false);
Data2ViewHolder holder = new Data2ViewHolder ();
Data2ViewHolder holder = (Data2ViewHolder ) view.getTag();
else if(viewType == Type.Data3){
R.layout.category_timesheet_line_item, parent, false);
Data3ViewHolder holder = new Data3ViewHolder ();
Data3ViewHolder holder = (Data3ViewHolder ) view.getTag();
return view;
public int getChildrenCount(int groupPosition) {
return groups.get(groupPosition).entryItems.size();
public Object getGroup(int groupPosition) {
return groups.get(groupPosition);
public int getGroupCount() {
return groups.size();
public long getGroupId(int groupPosition) {
return groupPosition;
public View getGroupView(int groupPosition, boolean isExpanded,
View convertView, ViewGroup parent) {
view = null;
R.layout.expandable_list_group_absenceview, parent,
false);
holder.textabsence = (TextView) view
.findViewById(R.id.AbsencegroupHeader);
holder.imageAbsence = (ImageView) view
.findViewById(R.id.AbsenceexpandableIcon);
holder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""
+ groups.get(groupPosition).entryItems.size() + "")"");
if (groups.get(groupPosition).entryItems.size() == 0) {
holder.imageAbsence.setVisibility(View.INVISIBLE);
int imageResourceId = isExpanded ? android.R.drawable.arrow_up_float
: android.R.drawable.arrow_down_float;
holder.imageAbsence.setImageResource(imageResourceId);
holder.imageAbsence.setVisibility(View.VISIBLE);
}else if(viewType == Type.Data2) {
R.layout.expandable_list_group_ticketview, parent,
holder.textticket = (TextView) view
.findViewById(R.id.TicketgroupHeader);
holder.imageTicket= (ImageView) view
.findViewById(R.id.TicketexpandableIcon);
Data2ViewHolder holder = (Data2ViewHolder) view.getTag();
holder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""
holder.imageTicket.setVisibility(View.INVISIBLE);
holder.imageTicket.setImageResource(imageResourceId);
holder.imageTicket.setVisibility(View.VISIBLE);
else if(viewType == Type.Data3) {
R.layout.expandable_list_group_timesheetview, parent,
holder.texttimesheet = (TextView) view
.findViewById(R.id.TimesheetgroupHeader);
holder.imageTimesheet= (ImageView) view
.findViewById(R.id.TimesheetexpandableIcon);
holder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""
holder.imageTimesheet.setVisibility(View.INVISIBLE);
holder.imageTimesheet.setImageResource(imageResourceId);
holder.imageTimesheet.setVisibility(View.VISIBLE);
public boolean hasStableIds() {
return true;
public boolean isChildSelectable(int groupPosition, int childPosition) {
public void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {
groups.clear();
if (aryAbsence != null) {
Group g1 = new Group();
g1.type = Type.Absence;
g1.entryItems.clear();
g1.entryItems = new ArrayList(aryAbsence);
groups.add(g1);
if (aryTicket != null) {
Group g2 = new Group();
g2.type = Type.Ticket;
g2.entryItems.clear();
g2.entryItems = new ArrayList(aryTicket);
groups.add(g2);
if (aryTimeSheet != null) {
Group g3 = new Group();
g3.type = Type.TimeSheet;
g3.entryItems.clear();
g3.entryItems = new ArrayList(aryTimeSheet);
groups.add(g3);
notifyDataSetChanged();
* Holder for the Past view type
public static class Data1ViewHolder {
public ImageView imageAbsence;
public TextView textabsence;
public TextView txtEndDate;
public TextView txtStartDate;
public TextView txtFromUser;
public TextView txtSubject;
public static class Data2ViewHolder {
public ImageView imageTicket;
public TextView textticket;
public static class Data3ViewHolder {
public ImageView imageTimesheet;
public TextView texttimesheet;
* Wrapper for each group that contains the list elements and the type of
* travel.
public static class Group {
public enum Type {
Data_1,Data_2,Data_3;
};
public Type type;
ArrayList entryItems = new ArrayList();
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Modifier static is only allowed in constant variable declarations
----------Explanation----------
You can make the Control class static.
----------Code Sample----------
private static class Control {
^^^^^^

// Ok to have static members:
public static ArrayList keys = new ArrayList();

...
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Why are variables declared with their interface name in Java?
----------Explanation----------

----------Code Sample----------
List list = new ArrayList();
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
How do I find out what type each object is in a ArrayList?
----------Explanation----------

----------Code Sample----------
ArrayList list = ...;
// List list = ...;
foreach (object o in list) {
if (o is int) {
HandleInt((int)o);
}
else if (o is string) {
HandleString((string)o);
}
...
}

ArrayList list = ...;
for (Object o : list) {
if (o.getClass().equals(Integer.class)) {
handleInt((int)o);
}
else if (o.getClass().equals(String.class)) {
handleString((String)o);
}
...
}
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
NullPointerException when I try to call a method outside my main method
----------Explanation----------

----------Code Sample----------
import java.util.*;

public class SummationPuzzle 
{

public static ArrayList fsList;
public static ArrayList lastW;
public static ArrayList finaList;

/**
* Reads in 3 words entered by user and converts the first two string into a single ArrayList
* takes the third string entered and converts it into it's own ArrayList
* @param firstW
* @param secondW
* @param thirdW
*/
public static void convertStr(String firstW, String secondW, String thirdW)
{
String combined = new String(firstW + secondW); 
for(int i = 0; i< combined.length(); i++)
{
fsList.add(combined.charAt(i));
for(int j = 0; j< thirdW.length(); j++)
{
lastW.add(thirdW.charAt(j));
}
}
removeDuplicate(fsList, lastW);
//feeds the resulting lists into the removeDuplicate method
}

/**
* Combines two ArrayList into a one ArrayList with single instances of the char
* @param fsList
* @param lastW
*/
public static void removeDuplicate(ArrayList fsList, ArrayList lastW)
{
public static ArrayList fsList = new ArrayList();
public static ArrayList lastW = new ArrayList();
public static ArrayList finaList = new ArrayList();
tempList.addAll(fsList);
tempList.addAll(lastW);
for(char dupLetter : tempList)
{
if(!finaList.contains(dupLetter))
{
finaList.add(dupLetter);
}
}
System.out.println(finaList + ""This is the list with duplicates removed"");
assignNum(finaList, lastW);
//feeds results into the assignNum method
}

/**
* Assigns a random number to the char that resides at each address in the ArrayList
* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program
* assigns that character the value of ""1""
* @param finaList
* @param lastW
*/
public static void assignNum(ArrayList finaList, ArrayList lastW)
{
char[] assignLetter= new char[finaList.size()];
Random r = new Random();
for(int i = 0; i< assignLetter.length; i++)
{
assignLetter[i] = finaList.get(i);
assignLetter[i] = (char)r.nextInt(assignLetter.length);
System.out.println((long)assignLetter[i]);
if(lastW.get(0).equals(assignLetter[i]))
{
assignLetter[i] = 1;
}
}

System.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");

}


//main method
public static void main(String[] args)

{
//Receive user input
Scanner userIn = new Scanner(System.in);
System.out.println(""Please enter your first word"");
String firstW = userIn.next().trim();
System.out.println(""Please enter your Second word"");
String secondW = userIn.next().trim();
System.out.println(""Please enter your Third word"");
String thirdW = userIn.next().trim();


//print the summation puzzle
System.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);
convertStr(firstW, secondW, thirdW);
}
}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How to sort an ArrayList in Java
----------Explanation----------
Use a Comparator like this:
----------Code Sample----------
List fruits= new ArrayList();

Fruit fruit;
for(int i = 0; i < 100; i++)
{
fruit = new Fruit();
fruit.setname(...);
fruits.add(fruit);
}

// Sorting
Collections.sort(fruits, new Comparator() {
@Override
public int compare(Fruit fruit2, Fruit fruit1)
{

return fruit1.fruitName.compareTo(fruit2.fruitName);
}
});
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How to pass an ArrayList to a varargs method parameter?
----------Explanation----------
Use the toArray(T[] arr) method.
----------Code Sample----------
.getMap(locations.toArray(new WorldLocation[locations.size()]))

public static void method(String... strs) {
for (String s : strs)
System.out.println(s);
}

...
List strs = new ArrayList();
strs.add(""hello"");
strs.add(""wordld"");

method(strs.toArray(new String[strs.size()]));
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
Remove Duplicates from ArrayList filled with POJOs
----------Explanation----------

----------Code Sample----------
package test.urlstore;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


public class DuplicateDemo{

public static void main(String[] args) throws Exception {
List urlStores = new ArrayList();
UrlStore usg = new UrlStore(""google"");
UrlStore usy = new UrlStore(""yahoo"");
UrlStore usb = new UrlStore(""bing"");
UrlStore usa = new UrlStore(""ask"");
UrlStore usd = new UrlStore(""duckduckgo"");


usg.setData(""mail"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""doc"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usy.setData(""search"");
urlStores.add(usy);
usy.setData(""search"");
urlStores.add(usy);
usb.setData(""search"");
urlStores.add(usb);
usb.setData(""search"");
urlStores.add(usb);
usa.setData(""search"");
urlStores.add(usa);
usd.setData(""search"");
urlStores.add(usd);

System.out.println(""before removing duplicates"");
// before removing duplicates
for (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());
}

System.out.println(""\n\nafter removing duplicates"");
//removing duplicates
Set uniqueUrlStores = new HashSet(urlStores);

//After removing duplicates
for (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());

}

}



static class UrlStore {

public String url;
public String data;

public UrlStore(String url) {
this.url = url;
}

public void setData(String data) {
this.data = data;
}

@Override
public String toString() {
return ""UrlStore [url="" + url + "", data="" + data + ""]"";
}

@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((data == null) ? 0 : data.hashCode());
result = prime * result + ((url == null) ? 0 : url.hashCode());
return result;
}

@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
UrlStore other = (UrlStore) obj;
if (data == null) {
if (other.data != null)
return false;
} else if (!data.equals(other.data))
return false;
if (url == null) {
if (other.url != null)
return false;
} else if (!url.equals(other.url))
return false;
return true;
}


} 
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
What is the fastest way to split Integer into digits?
----------Explanation----------
A simple test like this one compares both approaches. ","['""""""How to sort a Map by Value (ArrayList) size in Java? I have the following Map:\n\nMap<String, List<String>> map = new HashMap<String, List<String>>();\n\nwhich is filled with pairs of keys and values. For example: key = student name and value = family members names. I want to sort the map by the size of the list of strings. I have tried implementing Comparator with a TreeMap but I got an error so I switched back to HashMap. Any ideas? 6\n\nTreeMap with Comparator is the way to go IMO.. What was your error? Just to reinforce the message of other answers, you can\'t sort a HashMap (or, generally speaking, a Map). You\'d have to use specific versions of Map that support sorting. TreeMap seems like the best shot to sort by values. TreeMap sorts by key, not value.\n\nI can\'t mark it as such, but this is an exact duplicate of stackoverflow.com/questions/8896679/, I have seen there are other similar questions but I haven\'t found one with a List as a value for the Map. And that\'s a little different. | Show 1 more comment\n\nYou should use the HashMap unordered, and then each time you want to order, put all the values of the HashMap into a TreeMap, using a Comparator that has the HashMap as a variable. Then, for each key you compare, you get the value of the HashMap (the list) and check the list size. So you compare by the list sizes, returning -1, 0 or 1 depending on the case. Once you finish what you need, you discard that TreeMap. If you try to use only a TreeMap, then you\'ll see that you are ordering the keys according to a value that is not a property of such key. In this case, the length of the value (a list). So, there may exist a function that increases the length of the list, and the TreeMap won\'t even notice. public class ListSizeComparator implements Comparator<String> { private final Map<String, List<String>> map; public ListSizeComparator(final Map<String, List<String>> map) { this.map = map; } @Override public int compare(String s1, String s2) { //Here I assume both keys exist in the map. List<String> list1 = this.map.get(s1); List<String> list2 = this.map.get(s2); Integer length1 = list1.size(); Integer length2 = list2.size(); return length1.compareTo(length2); } }\n\n8,5\n\nI\'m not sure I understand what you mean. Could you elaborate on how the compare method would look like? Hey, thanks! I tried TreeMap<String, List<String>> sorter = new TreeMap(new ListSizeComparator(map)); but it didn\'t work. When I try to print the map I get nothing. Because you need to fill the treemap after the constructor. sorter.putAll(map);\n\nI just changed the return of the compare method, because if the lengths are the same, one of the two entries won\'t be inserted into the treemap. Otherwise it works!""""""', '""""""Without explaining that, the comment doesn\'t do much good, unfortunately. We can simply use Collections.max() and Collections.min() method. public class MaxList { public static void main(String[] args) { List l = new ArrayList(); l.add(1); l.add(2); l.add(3); l.add(4); l.add(5); System.out.println(Collections.max(l)); // 5 System.out.println(Collections.min(l)); // 1 } }\n\nBhavin ShahBhavin Shah\n\n1,0\n\nComparator.comparing\n\nIn Java 8, Collections have been enhanced by using lambda. So finding max and min can be accomplished as follows, using Comparator.comparing:\n\nList<Integer> ints = Stream.of(12, 72, 54, 83, 51).collect(Collectors.toList()); System.out.println(""the list: ""); ints.forEach((i) -> { System.out.print(i + "" ""); }); System.out.println(""""); Integer minNumber = ints.stream() .min(Comparator.comparing(i -> i)).get(); Integer maxNumber = ints.stream() .max(Comparator.comparing(i -> i)).get(); System.out.println(""Min number is "" + minNumber); System.out.println(""Max number is "" + maxNumber);\n\nthe list: 12 72 54 83 51 Min number is 12 Max number is 83\n\n1.2kKick ButtowskiKick Buttowski\n\n6,Integer class implements Comparable.So we can easily get the max or min value of the Integer list. public int maxOfNumList() { List<Integer> numList = new ArrayList<>(); numList.add(1); numList.add(10); return Collections.max(numList); }\n\nIf a class does not implements Comparable and we have to find max and min value then we have to write our own Comparator. List<MyObject> objList = new ArrayList<MyObject>(); objList.add(object1); objList.add(object2); objList.add(object3); MyObject maxObject = Collections.max(objList, new Comparator<MyObject>() { @Override public int compare(MyObject o1, MyObject o2) { if (o1.getValue() == o2.getValue()) { return 0; } else if (o1.getValue() > o2.getValue()) { return -1; } else if (o1.getValue() < o2.getValue()) { return 1; } return 0; } });\n\nThere is no particularly efficient way to find the maximum value in an unsorted list -- you just need to check them all and return the highest value. Brendan LongBrendan Long\n\n3\n\nwhat about this Integer i = Collections.max(arrayList). it returns the highest value in my case whether i am not very sure. what you say? @user1010399 - This does exactly what I\'m saying -- It checks every value and returns the highest one. ok, alright. thanks. i was bit confused between this collections method & sorting algorithm. Here are three more ways to find the maximum value in a list, using streams:\n\nList<Integer> nums = Arrays.asList(-1, 2, 1, 7, 3); Optional<Integer> max1 = nums.stream().reduce(Integer::max); Optional<Integer> max2 = nums.stream().max(Comparator.naturalOrder()); OptionalInt max3 = nums.stream().mapToInt(p->p).max(); System.out.println(""max1: "" + max1.get() + "", max2: "" + max2.get() + "", max3: "" + max3.getAsInt());\n\nAll of these methods, just like Collections.max, iterate over the entire collection, hence they require time proportional to the size of the collection. \n\nAs integers are comparable we can use the following one liner in:\n\nList<Integer> ints = Stream.of(22,44,11,66,33,55).collect(Collectors.toList()); Integer max = ints.stream().mapToInt(i->i).max().orElseThrow(NoSuchElementException::new); //66 Integer min = ints.stream().mapToInt(i->i).min().orElseThrow(NoSuchElementException::new); //11\n\nAnother point to note is we cannot use Funtion.identity() in place of i->i as mapToInt expects ToIntFunction which is a completely different interface and is not related to Function. Moreover this interface has only one method applyAsInt and no identity() method. akhil_mittalakhil_mittal\n\narrayList.stream() .reduce(Integer::max) .get()\n\nlasclockerlasclocker\n\nHere is the fucntion\n\npublic int getIndexOfMax(ArrayList<Integer> arr){ int MaxVal = arr.get(0); // take first as MaxVal int indexOfMax = -1; //returns -1 if all elements are equal for (int i = 0; i < arr.size(); i++) { //if current is less then MaxVal if(arr.get(i) < MaxVal ){ MaxVal = arr.get(i); // put it in MaxVal indexOfMax = i; // put index of current Max } } return indexOfMax; }\n\npackage in.co.largestinarraylist; import java.util.ArrayList; import java.util.Scanner; public class LargestInArrayList { public static void main(String[] args) { int n; ArrayList<Integer> L = new ArrayList<Integer>(); int max; Scanner in = new Scanner(System.in); System.out.println(""Enter Size of Array List""); n = in.nextInt(); System.out.println(""Enter elements in Array List""); for (int i = 0; i < n; i++) { L.add(in.nextInt()); } max = L.get(0); for (int i = 0; i < L.size(); i++) { if (L.get(i) > max) { max = L.get(i); } } System.out.println(""Max Element: "" + max); in.close(); } }\n\n2,Tarun JadhavTarun Jadhav\n\nIn addition to gotomanners answer, in case anyone else came here looking for a null safe solution to the same problem, this is what I ended up with\n\nCollections.max(arrayList, Comparator.nullsFirst(Comparator.naturalOrder()))\n\nChris JohansenChris Johansen\n\nmodel =list.stream().max(Comparator.comparing(Model::yourSortList)).get();\n\nMehmet OnarMehmet Onar\n\nThey\'re many ways to find the maximum. But there will be no noticeable difference in performance unless the collection is huge. List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5); System.out.println( integers.stream().max(Integer::compare).get() ); System.out.println( integers.stream().mapToInt(Integer::intValue).max().getAsInt() ); System.out.println( integers.stream().max(Comparator.comparing(i -> i)).get() ); System.out.println( integers.stream().reduce((a, b) -> a > b ? a : b).get() ); System.out.println( integers.stream().reduce(Integer.MIN_VALUE, (a, b) -> a > b ? a : b) );\n\nThe max method expects a Comparator as a parameter. The reduce method expects a BinaryOperator as a parameter. \n\ndepending on the size of your array a multithreaded solution might also speed up things\n\n2,1\n\nThis sounds more like a comment than an actual answer to the question. """"""']",0.04950495,0.714285714,0.2
util,ArrayList,How to convert comma-separated String to ArrayList?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","Most common way to construct:
ArrayList list = new ArrayList();
Based on 161 examples

 void	sort()

          Sorts this list.


sort

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public void sort()
Use java.util.Collections.sort(List).","Here is another one for converting CSV to ArrayList:

String str=""string,with,comma"";
ArrayList aList= new ArrayList(Arrays.asList(str.split("","")));
for(int i=0;i<aList.size();i++)
{
    System.out.println("" -->""+aList.get(i));
}
Prints you

-->string
-->with
-->comma","*******************usage scenario 1********************** 
----------usage scenario----------
Java, Using Iterator to search an ArrayList and delete matching objects
----------Explanation----------
You don't need them on one line, just use remove to remove an item when it matches:
----------Code Sample----------
import java.util.*;
public class ListExample {
public static final void main(String[] args) {
List list = new ArrayList(5);
String targetCaption = ""match"";
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
Iterator it = list.iterator();
while (it.hasNext()) {
if (it.next().getFriendCaption().equals(targetCaption)) {
it.remove();
// If you know it's unique, you could `break;` here
}
}
}
private static class Friend {
private String friendCaption;
public Friend(String fc) {
this.friendCaption = fc;
}
public String getFriendCaption() {
return this.friendCaption;
}
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Detect and prevent duplicate names ArrayList
----------Explanation----------

----------Code Sample----------
public class Fraction {
int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? true

public class Fraction {
public int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
@Override
public boolean equals(Object o) {
if (o==null) return false;
if (o==this) return true;
if (!(o instanceof Fraction) return false;
Fraction f = (Fraction) o;
return f.x == x && f.y ==y;
}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? false
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Java: How to read a text file
----------Explanation----------
You can use Files#readAllLines() to get all lines of a text file into a List<String> .
----------Code Sample----------
List numbers = new ArrayList<>();
for (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {
for (String part : line.split(""\\s+"")) {
Integer i = Integer.valueOf(part);
numbers.add(i);
}
}

List numbers = Files.lines(Paths.get(""/path/to/test.txt""))
.map(line -> line.split(""\\s+"")).flatMap(Arrays::stream)
.map(Integer::valueOf)
.collect(Collectors.toList());
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to capture a list of specific type with mockito
----------Explanation----------
The nested generics-problem can be avoided with the @Captor annotation :
----------Code Sample----------
@RunWith(MockitoJUnitRunner.class)
public class Test{

@Mock
private Service service;

@Captor
private ArgumentCaptor> captor;

@Test 
public void shouldDoStuffWithListValues() {
//...
verify(service).doStuff(captor.capture()));
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
How to sort ArrayList using Comparator?
----------Explanation----------
Use the Collections.sort(List, Comparator) method:
----------Code Sample----------
Collections.sort(students, Student.getCompByName());

List students = new ArrayList();

public static void main(String[] args) {
Student[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};
List students = new ArrayList(Arrays.asList(studentArr));
Collections.sort(students, Student.getCompByName());

for(Student student:students){
System.out.println(student.getName());
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
how to use an array list?
----------Explanation----------
The following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:
----------Code Sample----------
import java.util.*;

//...

List list = new ArrayList();
list.add(""Hello!"");
list.add(""How are you?"");

System.out.println(list.get(0)); // prints ""Hello!""

for (String s : list) {
System.out.println(s);
} // prints ""Hello!"", ""How are you?""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
what is the sense of final ArrayList?
----------Explanation----------
This means that you cannot rebind the variable to point to a different collection instance :
----------Code Sample----------
final List list = new ArrayList();
list = new ArrayList(); // Since `list' is final, this won't compile

final List list = Collections.unmodifiableList(new ArrayList(...));
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to add strings into an arraylist between two strings
----------Explanation----------
Third, to do what you ask for, there is overloaded method add for choosing position :
----------Code Sample----------
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(1,""Maybe""); //insert into position 1 and shift everything to the right.

[Yes, Maybe, No]

List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(1, ""Or"");
list.add(3, ""Or"");
System.out.println(list);

[Yes, Or, No, Or, Maybe]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

List orList = addOr(list);
System.out.println(orList);
}

public static List addOr(List list){
List newList = new ArrayList<>();
int count = 0;
for(String text : list){
count++;
newList.add(text);
if (count != list.size()){
newList.add(""Or"");
}
}
return newList;
}

[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

String niceOutput = addOr(list);
System.out.println(""Choose from following options: "" + niceOutput);
} 

public static String addOr(List list){
String orText = """";
int count = 0;
for(String text : list){
count++;
orText += '\'' + text + '\'';
if (count != list.size()){
orText += "" or "";
}
}
return orText; 
}

Choose from following options: 'Yes' or 'No' or 'Maybe' or 'Probably' or 'Never'
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?
----------Explanation----------
You can change the behaviour of ArrayList
----------Code Sample----------
List list = new ArrayList() {
public boolean add(MyType mt) {
super.add(mt);
Collections.sort(list, comparator);
return true;
}
}; 

List list = new ArrayList() {
public boolean add(MyType mt) {
int index = Collections.binarySearch(this, mt);
if (index < 0) index = ~index;
super.add(index, mt);
return true;
}
};
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Dynamic initialization of ArrayList
----------Explanation----------

----------Code Sample----------
private void setModel(Class type) {
ArrayList arrayList = new ArrayList();
}

private ArrayList getModel(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}

public class Tester {

private ArrayList getModels(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = (ArrayList) t.getModels(Data.class);
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = (ArrayList) t.getModels(Magic.class);
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Tester {

private ArrayList getModel() {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = t.getModel();
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = t.getModel();
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Data {

private Integer id;
private String name;


public Data() {
}


public Data(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}

public class Magic {

private Integer id;
private String name;


public Magic() {
}


public Magic(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java Velocity foreach loop
----------Explanation----------
For an ArrayList populated as below --
----------Code Sample----------
ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");

#foreach($iter in $list)
$!iter
#set($list_str=$!list_str+$!iter+"","")
#end
$!list_str

try
to
figure
it
try,to,figure,it,

ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");
list.add(null);

try
to
figure
it

try,to,figure,it,$!iter,
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
ArrayList contains case sensitivity
----------Explanation----------
You can use this exactly like you'd use any other ArrayList. You can pass this List out to other code, and external code won't have to understand any string wrapper classes.
----------Code Sample----------
public class CustomStringList3 extends ArrayList {
@Override
public boolean contains(Object o) {
String paramStr = (String)o;
for (String s : this) {
if (paramStr.equalsIgnoreCase(s)) return true;
}
return false;
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
'Catch branch is identical' however still requires me to catch it
----------Explanation----------
You can collapse exception branches if they're identical, and with the multi-catch syntax, you'll wind up with one catch statement that does the same thing as your three:
----------Code Sample----------
try {
FileInputStream e = new FileInputStream(""outings.ser"");
ObjectInputStream inputStream = new ObjectInputStream(e);
return (ArrayList)inputStream.readObject();
} catch (ClassNotFoundException | IOException var3) {
var3.printStackTrace();
}
return null;
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Passing ArrayList of string arrays from one activity to another in android
----------Explanation----------
You can use intents
----------Code Sample----------
ArrayList mylist = new ArrayList(); 
Intent intent = new Intent(ActivityName.this, Second.class);
intent.putStringArrayListExtra(""key"", mylist);
startActivity(intent);

Intent i = getIntent(); 
ArrayList list = i.getStringArrayListExtra(""key"");

name The name of the extra data, with package prefix.
value The ArrayList data value.

Returns the same Intent object, for chaining multiple calls into a single statement.

String[] people = {
""Mike Strong"",
""Jennifer Anniston"",
""Tom Bennet"",
""Leander Paes"",
""Liam Nesson"",
""George Clooney"",
""Barack Obama"",
""Steve Jobs"",
""Larry Page"",
""Sergey Brin"",
""Steve Wozniak""
};
String[] people1 = {
""raghu"", 
""hello""
};


ArrayList list = new ArrayList();
list.add(people);
list.add(people1);
Intent i = new Intent(MainActivity.this,SecondActivity.class);
i.putExtra(""key"", list);
startActivity(i); 

Intent in = getIntent();
ArrayList list =(ArrayList) in.getSerializableExtra(""key"");
for(int i=0;i {
String s[]= list.get(i);
for(int iv=0;iv Log.i(""..............:"",""""+s[iv]);
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
HashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?
----------Explanation----------
How is the HashMap declaration expressed in that scope? It should be:
----------Code Sample----------
HashMap dictMap

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap> dictMap
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Java: How to efficiently read from database?
----------Explanation----------

----------Code Sample----------
double[] data1 = new double[data.size()];
for(int a = 0; a < data1.length; ++a) {
data1[a]=data.get(a);
}

double[] data1 = data.toArray(new double[data.size()]);

ArrayList data = new ArrayList();

ArrayList data = new ArrayList(AMOUNT_OF_RECORDS);

select distinct price_open from stock_data ...
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Java ArrayList and HashMap on-the-fly
----------Explanation----------

----------Code Sample----------
List list = new ArrayList() {
{
add(""value1"");
add(""value2"");
}
};

Map map = new HashMap() {
{
put(""key1"", ""value1"");
put(""key2"", ""value2"");
}
};
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
java multidimensional arraylist
----------Explanation----------
You have to create a new ArrayList for each new row. Replacing
----------Code Sample----------
workArray.clear();

workArray = new ArrayList();

ArrayList workArray = new ArrayList(); 

ArrayList> workMatrix = new ArrayList<>();
ArrayList workArray = new ArrayList<>(); 
workMatrix.add(workArray);

// This prints ""true"": The first element of the matrix
// and the workArray are IDENTICAL. (Not only equal, 
// but really IDENTICAL)
System.out.println(workMatrix.get(0) == workArray);
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
ArrayList initialization equivalent to array initialization
----------Explanation----------
Arrays.asList can help here:
----------Code Sample----------
new ArrayList(Arrays.asList(1,2,3,5,8,13,21));
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
How can I calculate the difference between two ArrayLists?
----------Explanation----------
In Java, you can use the Collection interface's removeAll method.
----------Code Sample----------
// Create a couple ArrayList objects and populate them
// with some delicious fruits.
Collection firstList = new ArrayList() {{
add(""apple"");
add(""orange"");
}};

Collection secondList = new ArrayList() {{
add(""apple"");
add(""orange"");
add(""banana"");
add(""strawberry"");
}};

// Show the ""before"" lists
System.out.println(""First List: "" + firstList);
System.out.println(""Second List: "" + secondList);

// Remove all elements in firstList from secondList
secondList.removeAll(firstList);

// Show the ""after"" list
System.out.println(""Result: "" + secondList);

First List: [apple, orange]
Second List: [apple, orange, banana, strawberry]
Result: [banana, strawberry]
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
BaseExpandableListAdapter add child programmatically
----------Explanation----------
in which i've initialize ExpandableListAdapter
----------Code Sample----------
/*
* view types
*/
SortCategoryExpand sortCategoryExpand = new SortCategoryExpand();

private static final int VIEW_1 = 0;
private static final int View_2 = 1;
private static final int View_3=2;
* data
private Context context = null;
ArrayList groups = new ArrayList();
public ExpandableListAdapter(Context context) {
this.context = context;
}
@Override
public int getChildType(int groupPosition, int childPosition) {
int type = -1;
if (groupPosition == 2) {
type = View_3;
}
else if (groupPosition == 1) {
type = View_2;
}else {
type = View_1;
return type;
public int getChildTypeCount() {
// Past and Future Travel Plans
return 3;
public Object getChild(int groupPosition, int childPosition) {
return groups.get(groupPosition).entryItems.get(childPosition);
public long getChildId(int groupPosition, int childPosition) {
return childPosition;
public View getChildView(int groupPosition, int childPosition,
boolean isLastChild, View convertView, ViewGroup parent) {
// get the type of the group this child belongs
Type viewType = groups.get(groupPosition).type;
View view = convertView;
if (viewType == Type.Data1) {
if (view == null) {
view = LayoutInflater.from(context).inflate(
R.layout.category_absence_line_item, parent, false);
Data1ViewHolder holder = new Data1ViewHolder ();
holder.txtSubject = (TextView) view.findViewById(R.id.subject);
holder.txtFromUser = (TextView) view.findViewById(R.id.user);
holder.txtStartDate = (TextView) view
.findViewById(R.id.startDate);
holder.txtEndDate = (TextView) view.findViewById(R.id.endDate);
view.setTag(holder);
}
Data1ViewHolder holder = (Data1ViewHolder ) view.getTag();
EntryItem entryItem = (EntryItem) getChild(groupPosition,
childPosition);
if (entryItem.subject.equals(""None"")) {
holder.txtSubject.setText(""None"");
} else {
holder.txtSubject.setText("""" + entryItem.subject);
if (entryItem.fromUser.equals(""None"")) {
holder.txtFromUser.setText("""");
} else if (entryItem.fromUser.equals(""anyType{}"")) {
holder.txtFromUser.setText(""From User : "");
holder.txtFromUser.setText(""From User : "" + entryItem.fromUser);
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)
.equals(""01-Jan-1970"")) {
holder.txtStartDate.setText(""Start Date : None"");
} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(
entryItem.startDate).equals(""03-Mar-3800"")) {
holder.txtStartDate.setText("""");
holder.txtStartDate.setText(""Start Date : ""
+ new SimpleDateFormat(""dd-MMM-yyyy"")
.format(entryItem.startDate));
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)
holder.txtEndDate.setText(""Due Date : None"");
entryItem.endDate).equals(""03-Mar-3800"")) {
holder.txtEndDate.setText(""Due Date : ""
.format(entryItem.endDate));
}else ifviewType == Type.Data2){
R.layout.category_ticket_line_item, parent, false);
Data2ViewHolder holder = new Data2ViewHolder ();
Data2ViewHolder holder = (Data2ViewHolder ) view.getTag();
else if(viewType == Type.Data3){
R.layout.category_timesheet_line_item, parent, false);
Data3ViewHolder holder = new Data3ViewHolder ();
Data3ViewHolder holder = (Data3ViewHolder ) view.getTag();
return view;
public int getChildrenCount(int groupPosition) {
return groups.get(groupPosition).entryItems.size();
public Object getGroup(int groupPosition) {
return groups.get(groupPosition);
public int getGroupCount() {
return groups.size();
public long getGroupId(int groupPosition) {
return groupPosition;
public View getGroupView(int groupPosition, boolean isExpanded,
View convertView, ViewGroup parent) {
view = null;
R.layout.expandable_list_group_absenceview, parent,
false);
holder.textabsence = (TextView) view
.findViewById(R.id.AbsencegroupHeader);
holder.imageAbsence = (ImageView) view
.findViewById(R.id.AbsenceexpandableIcon);
holder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""
+ groups.get(groupPosition).entryItems.size() + "")"");
if (groups.get(groupPosition).entryItems.size() == 0) {
holder.imageAbsence.setVisibility(View.INVISIBLE);
int imageResourceId = isExpanded ? android.R.drawable.arrow_up_float
: android.R.drawable.arrow_down_float;
holder.imageAbsence.setImageResource(imageResourceId);
holder.imageAbsence.setVisibility(View.VISIBLE);
}else if(viewType == Type.Data2) {
R.layout.expandable_list_group_ticketview, parent,
holder.textticket = (TextView) view
.findViewById(R.id.TicketgroupHeader);
holder.imageTicket= (ImageView) view
.findViewById(R.id.TicketexpandableIcon);
Data2ViewHolder holder = (Data2ViewHolder) view.getTag();
holder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""
holder.imageTicket.setVisibility(View.INVISIBLE);
holder.imageTicket.setImageResource(imageResourceId);
holder.imageTicket.setVisibility(View.VISIBLE);
else if(viewType == Type.Data3) {
R.layout.expandable_list_group_timesheetview, parent,
holder.texttimesheet = (TextView) view
.findViewById(R.id.TimesheetgroupHeader);
holder.imageTimesheet= (ImageView) view
.findViewById(R.id.TimesheetexpandableIcon);
holder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""
holder.imageTimesheet.setVisibility(View.INVISIBLE);
holder.imageTimesheet.setImageResource(imageResourceId);
holder.imageTimesheet.setVisibility(View.VISIBLE);
public boolean hasStableIds() {
return true;
public boolean isChildSelectable(int groupPosition, int childPosition) {
public void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {
groups.clear();
if (aryAbsence != null) {
Group g1 = new Group();
g1.type = Type.Absence;
g1.entryItems.clear();
g1.entryItems = new ArrayList(aryAbsence);
groups.add(g1);
if (aryTicket != null) {
Group g2 = new Group();
g2.type = Type.Ticket;
g2.entryItems.clear();
g2.entryItems = new ArrayList(aryTicket);
groups.add(g2);
if (aryTimeSheet != null) {
Group g3 = new Group();
g3.type = Type.TimeSheet;
g3.entryItems.clear();
g3.entryItems = new ArrayList(aryTimeSheet);
groups.add(g3);
notifyDataSetChanged();
* Holder for the Past view type
public static class Data1ViewHolder {
public ImageView imageAbsence;
public TextView textabsence;
public TextView txtEndDate;
public TextView txtStartDate;
public TextView txtFromUser;
public TextView txtSubject;
public static class Data2ViewHolder {
public ImageView imageTicket;
public TextView textticket;
public static class Data3ViewHolder {
public ImageView imageTimesheet;
public TextView texttimesheet;
* Wrapper for each group that contains the list elements and the type of
* travel.
public static class Group {
public enum Type {
Data_1,Data_2,Data_3;
};
public Type type;
ArrayList entryItems = new ArrayList();
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Modifier static is only allowed in constant variable declarations
----------Explanation----------
You can make the Control class static.
----------Code Sample----------
private static class Control {
^^^^^^

// Ok to have static members:
public static ArrayList keys = new ArrayList();

...
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Why are variables declared with their interface name in Java?
----------Explanation----------

----------Code Sample----------
List list = new ArrayList();
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
How do I find out what type each object is in a ArrayList?
----------Explanation----------

----------Code Sample----------
ArrayList list = ...;
// List list = ...;
foreach (object o in list) {
if (o is int) {
HandleInt((int)o);
}
else if (o is string) {
HandleString((string)o);
}
...
}

ArrayList list = ...;
for (Object o : list) {
if (o.getClass().equals(Integer.class)) {
handleInt((int)o);
}
else if (o.getClass().equals(String.class)) {
handleString((String)o);
}
...
}
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
NullPointerException when I try to call a method outside my main method
----------Explanation----------

----------Code Sample----------
import java.util.*;

public class SummationPuzzle 
{

public static ArrayList fsList;
public static ArrayList lastW;
public static ArrayList finaList;

/**
* Reads in 3 words entered by user and converts the first two string into a single ArrayList
* takes the third string entered and converts it into it's own ArrayList
* @param firstW
* @param secondW
* @param thirdW
*/
public static void convertStr(String firstW, String secondW, String thirdW)
{
String combined = new String(firstW + secondW); 
for(int i = 0; i< combined.length(); i++)
{
fsList.add(combined.charAt(i));
for(int j = 0; j< thirdW.length(); j++)
{
lastW.add(thirdW.charAt(j));
}
}
removeDuplicate(fsList, lastW);
//feeds the resulting lists into the removeDuplicate method
}

/**
* Combines two ArrayList into a one ArrayList with single instances of the char
* @param fsList
* @param lastW
*/
public static void removeDuplicate(ArrayList fsList, ArrayList lastW)
{
public static ArrayList fsList = new ArrayList();
public static ArrayList lastW = new ArrayList();
public static ArrayList finaList = new ArrayList();
tempList.addAll(fsList);
tempList.addAll(lastW);
for(char dupLetter : tempList)
{
if(!finaList.contains(dupLetter))
{
finaList.add(dupLetter);
}
}
System.out.println(finaList + ""This is the list with duplicates removed"");
assignNum(finaList, lastW);
//feeds results into the assignNum method
}

/**
* Assigns a random number to the char that resides at each address in the ArrayList
* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program
* assigns that character the value of ""1""
* @param finaList
* @param lastW
*/
public static void assignNum(ArrayList finaList, ArrayList lastW)
{
char[] assignLetter= new char[finaList.size()];
Random r = new Random();
for(int i = 0; i< assignLetter.length; i++)
{
assignLetter[i] = finaList.get(i);
assignLetter[i] = (char)r.nextInt(assignLetter.length);
System.out.println((long)assignLetter[i]);
if(lastW.get(0).equals(assignLetter[i]))
{
assignLetter[i] = 1;
}
}

System.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");

}


//main method
public static void main(String[] args)

{
//Receive user input
Scanner userIn = new Scanner(System.in);
System.out.println(""Please enter your first word"");
String firstW = userIn.next().trim();
System.out.println(""Please enter your Second word"");
String secondW = userIn.next().trim();
System.out.println(""Please enter your Third word"");
String thirdW = userIn.next().trim();


//print the summation puzzle
System.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);
convertStr(firstW, secondW, thirdW);
}
}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How to sort an ArrayList in Java
----------Explanation----------
Use a Comparator like this:
----------Code Sample----------
List fruits= new ArrayList();

Fruit fruit;
for(int i = 0; i < 100; i++)
{
fruit = new Fruit();
fruit.setname(...);
fruits.add(fruit);
}

// Sorting
Collections.sort(fruits, new Comparator() {
@Override
public int compare(Fruit fruit2, Fruit fruit1)
{

return fruit1.fruitName.compareTo(fruit2.fruitName);
}
});
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How to pass an ArrayList to a varargs method parameter?
----------Explanation----------
Use the toArray(T[] arr) method.
----------Code Sample----------
.getMap(locations.toArray(new WorldLocation[locations.size()]))

public static void method(String... strs) {
for (String s : strs)
System.out.println(s);
}

...
List strs = new ArrayList();
strs.add(""hello"");
strs.add(""wordld"");

method(strs.toArray(new String[strs.size()]));
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
Remove Duplicates from ArrayList filled with POJOs
----------Explanation----------

----------Code Sample----------
package test.urlstore;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


public class DuplicateDemo{

public static void main(String[] args) throws Exception {
List urlStores = new ArrayList();
UrlStore usg = new UrlStore(""google"");
UrlStore usy = new UrlStore(""yahoo"");
UrlStore usb = new UrlStore(""bing"");
UrlStore usa = new UrlStore(""ask"");
UrlStore usd = new UrlStore(""duckduckgo"");


usg.setData(""mail"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""doc"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usy.setData(""search"");
urlStores.add(usy);
usy.setData(""search"");
urlStores.add(usy);
usb.setData(""search"");
urlStores.add(usb);
usb.setData(""search"");
urlStores.add(usb);
usa.setData(""search"");
urlStores.add(usa);
usd.setData(""search"");
urlStores.add(usd);

System.out.println(""before removing duplicates"");
// before removing duplicates
for (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());
}

System.out.println(""\n\nafter removing duplicates"");
//removing duplicates
Set uniqueUrlStores = new HashSet(urlStores);

//After removing duplicates
for (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());

}

}



static class UrlStore {

public String url;
public String data;

public UrlStore(String url) {
this.url = url;
}

public void setData(String data) {
this.data = data;
}

@Override
public String toString() {
return ""UrlStore [url="" + url + "", data="" + data + ""]"";
}

@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((data == null) ? 0 : data.hashCode());
result = prime * result + ((url == null) ? 0 : url.hashCode());
return result;
}

@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
UrlStore other = (UrlStore) obj;
if (data == null) {
if (other.data != null)
return false;
} else if (!data.equals(other.data))
return false;
if (url == null) {
if (other.url != null)
return false;
} else if (!url.equals(other.url))
return false;
return true;
}


} 
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
What is the fastest way to split Integer into digits?
----------Explanation----------
A simple test like this one compares both approaches. ","['""""""How to convert comma-separated String to List? Is there any built-in method in Java which allows us to convert comma separated String to some container (e.g array, List or Vector)? Or do I need to write custom code for that? String commaSeparated = ""item1 , item2 , item3""; List<String> items = //method that converts above string into list?? 5\n\nIf you want to parse CSV see stackoverflow.com/questions/3908012/parsing-csv-in-java\n\n\n\n@Raedwald That\'s not what OP asked for though\n\n\n\nONLY ColinD\'s answer is correct here, assuming you want an ArrayList as in the question title. ArrayList (which is mutable) is totally different from List, which can be just a simple fixed list. @Fattie - fair point, and fixed that - stackoverflow.com/a/34735419/744133\n\n\n\nJava 8 solution: stackoverflow.com/a/46485179/1216775\n\n\n\nConvert comma separated String to List\n\nList<String> items = Arrays.asList(str.split(""\\\\s*,\\\\s*""));\n\nThe above code splits the string on a delimiter defined as: zero or more whitespace, a literal comma, zero or more whitespace which will place the words into the list and collapse any whitespace between the words and commas. Please note that this returns simply a wrapper on an array: you CANNOT for example .remove() from the resulting List. For an actual ArrayList you must further use new ArrayList<String>. 9\n\n@rosch Its a regular expression (regex). \\s matches any white space, The * applies the match zero or more times. So \\s* means ""match any white space zero or more times"". We look for this before and after the comma. Therefore, the split will work for strings like ""item1 , item2 , item3"", or ""item1,item2 ,item3"", etc. In Java, you need to escape the backslash in strings, so you get \\\\s*\n\n\n\n""[\\\\s,]+"" will also split on internal space within a comma separated token, it will treat both whitespace as a delimiter even when a comma is not present, instead of a comma plus any number of surrounding whitespace. ""\\\\s*(,\\\\s*)+"" will trim whitespace only around comma separated tokens, and also ignore any strings that are only whitespace or empty. As a side note: if you expect to get an empty list in case of an empty input string, then this method does not suit your use case. You will get a list with 1 element containing an empty string. @MadisPukkonen, you are absolutely right, but I respect the OP enough to assume that he can add such logic himself.""""""']",0.04950495,0.818181818,1
util,ArrayList,How to get ArrayList<Integer> and Scanner to play nice?,"The list returned from asList has <strong>fixed size</strong>.
So  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.
The list returned from <code>asList()</code> is backed by the original array.
If you modify the original array  the list will be modified as well.
https://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.
But it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.
Use the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>
API s methods by way of simply extending an <code>AbstractList</code>
(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.
static factory method in order to create a <code>List</code> literal.
Filling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>
<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.
ArrayList where the Object[] data points directly to the array.</p>
<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;
<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>
<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.
In <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.
As with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>
One of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>
steps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.
In other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.
Javadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>
(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.
But adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.
Iterating over either kind of List is practically equally cheap.
In an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).
the desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>
Another benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.
LinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>
Also  if you have large lists  keep in mind that memory usage is also different.
Each element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.
The default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).
But since the underlying implementation is an array  the array must be resized if you add a lot of elements.
To avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>
If the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.
The Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.
Addition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.
Under the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.
The elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>
<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>
In practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>
As CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>
<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.
Note the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>
Any indexed operation requires a traversal  i.e. has O(n) performance.
This is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>
<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>
As someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.
While the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>
<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.
Even though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>
ArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.
I d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.
The copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).
The only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.
And if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).
There are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>
<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.
However  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.
<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.
<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>
<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>
//Note: ArrayList is 26 time faster here than LinkedList for addAll()
//Note: ArrayList is 9 times faster than LinkedList for add sequentially
//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.
//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.
//Note: Linked List is 500 Milliseconds faster than ArrayList
<p><code>ArrayList</code> is essentially an array.
<code>LinkedList</code> is implemented as a double linked list.
<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.
O(n) for <code>LinkedList</code>  because it needs to find the index first.
<p><code>LinkedList</code> is faster in add and remove  but slower in get.
<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>
<p>With Java 8 you can use a method reference for your comparator:</p>","Most common way to construct:
ArrayList list = new ArrayList();
Based on 161 examples

 void	sort()

          Sorts this list.


sort

This is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.
public void sort()
Use java.util.Collections.sort(List).","Your problem is here :

 while(scan.hasNextInt()){  <-- This will loop untill you enter any non integer value
     list.add(scan.nextInt());
  }
You just have to enter a character say e.g q once you finished entering all the integer values and then your program will print expected results.

Sample Input :14 17 18 33 54 1 4 6 q","*******************usage scenario 1********************** 
----------usage scenario----------
Java, Using Iterator to search an ArrayList and delete matching objects
----------Explanation----------
You don't need them on one line, just use remove to remove an item when it matches:
----------Code Sample----------
import java.util.*;
public class ListExample {
public static final void main(String[] args) {
List list = new ArrayList(5);
String targetCaption = ""match"";
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
list.add(new Friend(""match""));
list.add(new Friend(""non-match""));
Iterator it = list.iterator();
while (it.hasNext()) {
if (it.next().getFriendCaption().equals(targetCaption)) {
it.remove();
// If you know it's unique, you could `break;` here
}
}
}
private static class Friend {
private String friendCaption;
public Friend(String fc) {
this.friendCaption = fc;
}
public String getFriendCaption() {
return this.friendCaption;
}
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
Detect and prevent duplicate names ArrayList
----------Explanation----------

----------Code Sample----------
public class Fraction {
int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? true

public class Fraction {
public int x, int y;
public Fraction(int x, int y) { this.x=x;this.y=y;}
@Override
public boolean equals(Object o) {
if (o==null) return false;
if (o==this) return true;
if (!(o instanceof Fraction) return false;
Fraction f = (Fraction) o;
return f.x == x && f.y ==y;
}
}

List fractions = new ArrayList();
Fraction f1 = new Fraction(1,2);

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

if (!fractions.contains(f1))
System.out.println(""added fraction? ""+fractions.add(f1));

added fraction? true
added fraction? false
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Java: How to read a text file
----------Explanation----------
You can use Files#readAllLines() to get all lines of a text file into a List<String> .
----------Code Sample----------
List numbers = new ArrayList<>();
for (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {
for (String part : line.split(""\\s+"")) {
Integer i = Integer.valueOf(part);
numbers.add(i);
}
}

List numbers = Files.lines(Paths.get(""/path/to/test.txt""))
.map(line -> line.split(""\\s+"")).flatMap(Arrays::stream)
.map(Integer::valueOf)
.collect(Collectors.toList());
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to capture a list of specific type with mockito
----------Explanation----------
The nested generics-problem can be avoided with the @Captor annotation :
----------Code Sample----------
@RunWith(MockitoJUnitRunner.class)
public class Test{

@Mock
private Service service;

@Captor
private ArgumentCaptor> captor;

@Test 
public void shouldDoStuffWithListValues() {
//...
verify(service).doStuff(captor.capture()));
}
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
How to sort ArrayList using Comparator?
----------Explanation----------
Use the Collections.sort(List, Comparator) method:
----------Code Sample----------
Collections.sort(students, Student.getCompByName());

List students = new ArrayList();

public static void main(String[] args) {
Student[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};
List students = new ArrayList(Arrays.asList(studentArr));
Collections.sort(students, Student.getCompByName());

for(Student student:students){
System.out.println(student.getName());
}
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
how to use an array list?
----------Explanation----------
The following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:
----------Code Sample----------
import java.util.*;

//...

List list = new ArrayList();
list.add(""Hello!"");
list.add(""How are you?"");

System.out.println(list.get(0)); // prints ""Hello!""

for (String s : list) {
System.out.println(s);
} // prints ""Hello!"", ""How are you?""
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
what is the sense of final ArrayList?
----------Explanation----------
This means that you cannot rebind the variable to point to a different collection instance :
----------Code Sample----------
final List list = new ArrayList();
list = new ArrayList(); // Since `list' is final, this won't compile

final List list = Collections.unmodifiableList(new ArrayList(...));
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to add strings into an arraylist between two strings
----------Explanation----------
Third, to do what you ask for, there is overloaded method add for choosing position :
----------Code Sample----------
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(1,""Maybe""); //insert into position 1 and shift everything to the right.

[Yes, Maybe, No]

List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(1, ""Or"");
list.add(3, ""Or"");
System.out.println(list);

[Yes, Or, No, Or, Maybe]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

List orList = addOr(list);
System.out.println(orList);
}

public static List addOr(List list){
List newList = new ArrayList<>();
int count = 0;
for(String text : list){
count++;
newList.add(text);
if (count != list.size()){
newList.add(""Or"");
}
}
return newList;
}

[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]

public static void main(String[] args) {
List list = new ArrayList();
list.add(""Yes"");
list.add(""No"");
list.add(""Maybe"");
list.add(""Probably"");
list.add(""Never"");

String niceOutput = addOr(list);
System.out.println(""Choose from following options: "" + niceOutput);
} 

public static String addOr(List list){
String orText = """";
int count = 0;
for(String text : list){
count++;
orText += '\'' + text + '\'';
if (count != list.size()){
orText += "" or "";
}
}
return orText; 
}

Choose from following options: 'Yes' or 'No' or 'Maybe' or 'Probably' or 'Never'
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Java List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?
----------Explanation----------
You can change the behaviour of ArrayList
----------Code Sample----------
List list = new ArrayList() {
public boolean add(MyType mt) {
super.add(mt);
Collections.sort(list, comparator);
return true;
}
}; 

List list = new ArrayList() {
public boolean add(MyType mt) {
int index = Collections.binarySearch(this, mt);
if (index < 0) index = ~index;
super.add(index, mt);
return true;
}
};
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Dynamic initialization of ArrayList
----------Explanation----------

----------Code Sample----------
private void setModel(Class type) {
ArrayList arrayList = new ArrayList();
}

private ArrayList getModel(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}

public class Tester {

private ArrayList getModels(Class type) {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = (ArrayList) t.getModels(Data.class);
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = (ArrayList) t.getModels(Magic.class);
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Tester {

private ArrayList getModel() {
ArrayList arrayList = new ArrayList();
return arrayList;
}


public static void main(String[] args) {
Data data = new Data(12, ""test_12"");
Magic magic = new Magic(123, ""test_123"");

Tester t = new Tester();

ArrayList datas = t.getModel();
datas.add(data);
for(Data data2 : datas) {
System.out.println(data2);
}

ArrayList magics = t.getModel();
magics.add(magic);
for(Magic magic2 : magics) {
System.out.println(magic2);
}

}

}

public class Data {

private Integer id;
private String name;


public Data() {
}


public Data(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}

public class Magic {

private Integer id;
private String name;


public Magic() {
}


public Magic(Integer id, String name) {
super();
this.id = id;
this.name = name;
}


public Integer getId() {
return id;
}

public void setId(Integer id) {
this.id = id;
}

public String getName() {
return name;
}

public void setName(String name) {
this.name = name;
}


@Override
public String toString() {
return ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";
}

}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Java Velocity foreach loop
----------Explanation----------
For an ArrayList populated as below --
----------Code Sample----------
ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");

#foreach($iter in $list)
$!iter
#set($list_str=$!list_str+$!iter+"","")
#end
$!list_str

try
to
figure
it
try,to,figure,it,

ArrayList list=new ArrayList();
list.add(""try"");
list.add(""to"");
list.add(""figure"");
list.add(""it"");
list.add(null);

try
to
figure
it

try,to,figure,it,$!iter,
*******************end of usage scenario 11***************** 

*******************usage scenario 12********************** 
----------usage scenario----------
ArrayList contains case sensitivity
----------Explanation----------
You can use this exactly like you'd use any other ArrayList. You can pass this List out to other code, and external code won't have to understand any string wrapper classes.
----------Code Sample----------
public class CustomStringList3 extends ArrayList {
@Override
public boolean contains(Object o) {
String paramStr = (String)o;
for (String s : this) {
if (paramStr.equalsIgnoreCase(s)) return true;
}
return false;
}
}
*******************end of usage scenario 12***************** 

*******************usage scenario 13********************** 
----------usage scenario----------
'Catch branch is identical' however still requires me to catch it
----------Explanation----------
You can collapse exception branches if they're identical, and with the multi-catch syntax, you'll wind up with one catch statement that does the same thing as your three:
----------Code Sample----------
try {
FileInputStream e = new FileInputStream(""outings.ser"");
ObjectInputStream inputStream = new ObjectInputStream(e);
return (ArrayList)inputStream.readObject();
} catch (ClassNotFoundException | IOException var3) {
var3.printStackTrace();
}
return null;
*******************end of usage scenario 13***************** 

*******************usage scenario 14********************** 
----------usage scenario----------
Passing ArrayList of string arrays from one activity to another in android
----------Explanation----------
You can use intents
----------Code Sample----------
ArrayList mylist = new ArrayList(); 
Intent intent = new Intent(ActivityName.this, Second.class);
intent.putStringArrayListExtra(""key"", mylist);
startActivity(intent);

Intent i = getIntent(); 
ArrayList list = i.getStringArrayListExtra(""key"");

name The name of the extra data, with package prefix.
value The ArrayList data value.

Returns the same Intent object, for chaining multiple calls into a single statement.

String[] people = {
""Mike Strong"",
""Jennifer Anniston"",
""Tom Bennet"",
""Leander Paes"",
""Liam Nesson"",
""George Clooney"",
""Barack Obama"",
""Steve Jobs"",
""Larry Page"",
""Sergey Brin"",
""Steve Wozniak""
};
String[] people1 = {
""raghu"", 
""hello""
};


ArrayList list = new ArrayList();
list.add(people);
list.add(people1);
Intent i = new Intent(MainActivity.this,SecondActivity.class);
i.putExtra(""key"", list);
startActivity(i); 

Intent in = getIntent();
ArrayList list =(ArrayList) in.getSerializableExtra(""key"");
for(int i=0;i {
String s[]= list.get(i);
for(int iv=0;iv Log.i(""..............:"",""""+s[iv]);
}
*******************end of usage scenario 14***************** 

*******************usage scenario 15********************** 
----------usage scenario----------
HashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?
----------Explanation----------
How is the HashMap declaration expressed in that scope? It should be:
----------Code Sample----------
HashMap dictMap

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap dictMap = new HashMap();
...
ArrayList current = dictMap.get(dictCode);

HashMap> dictMap
*******************end of usage scenario 15***************** 

*******************usage scenario 16********************** 
----------usage scenario----------
Java: How to efficiently read from database?
----------Explanation----------

----------Code Sample----------
double[] data1 = new double[data.size()];
for(int a = 0; a < data1.length; ++a) {
data1[a]=data.get(a);
}

double[] data1 = data.toArray(new double[data.size()]);

ArrayList data = new ArrayList();

ArrayList data = new ArrayList(AMOUNT_OF_RECORDS);

select distinct price_open from stock_data ...
*******************end of usage scenario 16***************** 

*******************usage scenario 17********************** 
----------usage scenario----------
Java ArrayList and HashMap on-the-fly
----------Explanation----------

----------Code Sample----------
List list = new ArrayList() {
{
add(""value1"");
add(""value2"");
}
};

Map map = new HashMap() {
{
put(""key1"", ""value1"");
put(""key2"", ""value2"");
}
};
*******************end of usage scenario 17***************** 

*******************usage scenario 18********************** 
----------usage scenario----------
java multidimensional arraylist
----------Explanation----------
You have to create a new ArrayList for each new row. Replacing
----------Code Sample----------
workArray.clear();

workArray = new ArrayList();

ArrayList workArray = new ArrayList(); 

ArrayList> workMatrix = new ArrayList<>();
ArrayList workArray = new ArrayList<>(); 
workMatrix.add(workArray);

// This prints ""true"": The first element of the matrix
// and the workArray are IDENTICAL. (Not only equal, 
// but really IDENTICAL)
System.out.println(workMatrix.get(0) == workArray);
*******************end of usage scenario 18***************** 

*******************usage scenario 19********************** 
----------usage scenario----------
ArrayList initialization equivalent to array initialization
----------Explanation----------
Arrays.asList can help here:
----------Code Sample----------
new ArrayList(Arrays.asList(1,2,3,5,8,13,21));
*******************end of usage scenario 19***************** 

*******************usage scenario 20********************** 
----------usage scenario----------
How can I calculate the difference between two ArrayLists?
----------Explanation----------
In Java, you can use the Collection interface's removeAll method.
----------Code Sample----------
// Create a couple ArrayList objects and populate them
// with some delicious fruits.
Collection firstList = new ArrayList() {{
add(""apple"");
add(""orange"");
}};

Collection secondList = new ArrayList() {{
add(""apple"");
add(""orange"");
add(""banana"");
add(""strawberry"");
}};

// Show the ""before"" lists
System.out.println(""First List: "" + firstList);
System.out.println(""Second List: "" + secondList);

// Remove all elements in firstList from secondList
secondList.removeAll(firstList);

// Show the ""after"" list
System.out.println(""Result: "" + secondList);

First List: [apple, orange]
Second List: [apple, orange, banana, strawberry]
Result: [banana, strawberry]
*******************end of usage scenario 20***************** 

*******************usage scenario 21********************** 
----------usage scenario----------
BaseExpandableListAdapter add child programmatically
----------Explanation----------
in which i've initialize ExpandableListAdapter
----------Code Sample----------
/*
* view types
*/
SortCategoryExpand sortCategoryExpand = new SortCategoryExpand();

private static final int VIEW_1 = 0;
private static final int View_2 = 1;
private static final int View_3=2;
* data
private Context context = null;
ArrayList groups = new ArrayList();
public ExpandableListAdapter(Context context) {
this.context = context;
}
@Override
public int getChildType(int groupPosition, int childPosition) {
int type = -1;
if (groupPosition == 2) {
type = View_3;
}
else if (groupPosition == 1) {
type = View_2;
}else {
type = View_1;
return type;
public int getChildTypeCount() {
// Past and Future Travel Plans
return 3;
public Object getChild(int groupPosition, int childPosition) {
return groups.get(groupPosition).entryItems.get(childPosition);
public long getChildId(int groupPosition, int childPosition) {
return childPosition;
public View getChildView(int groupPosition, int childPosition,
boolean isLastChild, View convertView, ViewGroup parent) {
// get the type of the group this child belongs
Type viewType = groups.get(groupPosition).type;
View view = convertView;
if (viewType == Type.Data1) {
if (view == null) {
view = LayoutInflater.from(context).inflate(
R.layout.category_absence_line_item, parent, false);
Data1ViewHolder holder = new Data1ViewHolder ();
holder.txtSubject = (TextView) view.findViewById(R.id.subject);
holder.txtFromUser = (TextView) view.findViewById(R.id.user);
holder.txtStartDate = (TextView) view
.findViewById(R.id.startDate);
holder.txtEndDate = (TextView) view.findViewById(R.id.endDate);
view.setTag(holder);
}
Data1ViewHolder holder = (Data1ViewHolder ) view.getTag();
EntryItem entryItem = (EntryItem) getChild(groupPosition,
childPosition);
if (entryItem.subject.equals(""None"")) {
holder.txtSubject.setText(""None"");
} else {
holder.txtSubject.setText("""" + entryItem.subject);
if (entryItem.fromUser.equals(""None"")) {
holder.txtFromUser.setText("""");
} else if (entryItem.fromUser.equals(""anyType{}"")) {
holder.txtFromUser.setText(""From User : "");
holder.txtFromUser.setText(""From User : "" + entryItem.fromUser);
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)
.equals(""01-Jan-1970"")) {
holder.txtStartDate.setText(""Start Date : None"");
} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(
entryItem.startDate).equals(""03-Mar-3800"")) {
holder.txtStartDate.setText("""");
holder.txtStartDate.setText(""Start Date : ""
+ new SimpleDateFormat(""dd-MMM-yyyy"")
.format(entryItem.startDate));
if (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)
holder.txtEndDate.setText(""Due Date : None"");
entryItem.endDate).equals(""03-Mar-3800"")) {
holder.txtEndDate.setText(""Due Date : ""
.format(entryItem.endDate));
}else ifviewType == Type.Data2){
R.layout.category_ticket_line_item, parent, false);
Data2ViewHolder holder = new Data2ViewHolder ();
Data2ViewHolder holder = (Data2ViewHolder ) view.getTag();
else if(viewType == Type.Data3){
R.layout.category_timesheet_line_item, parent, false);
Data3ViewHolder holder = new Data3ViewHolder ();
Data3ViewHolder holder = (Data3ViewHolder ) view.getTag();
return view;
public int getChildrenCount(int groupPosition) {
return groups.get(groupPosition).entryItems.size();
public Object getGroup(int groupPosition) {
return groups.get(groupPosition);
public int getGroupCount() {
return groups.size();
public long getGroupId(int groupPosition) {
return groupPosition;
public View getGroupView(int groupPosition, boolean isExpanded,
View convertView, ViewGroup parent) {
view = null;
R.layout.expandable_list_group_absenceview, parent,
false);
holder.textabsence = (TextView) view
.findViewById(R.id.AbsencegroupHeader);
holder.imageAbsence = (ImageView) view
.findViewById(R.id.AbsenceexpandableIcon);
holder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""
+ groups.get(groupPosition).entryItems.size() + "")"");
if (groups.get(groupPosition).entryItems.size() == 0) {
holder.imageAbsence.setVisibility(View.INVISIBLE);
int imageResourceId = isExpanded ? android.R.drawable.arrow_up_float
: android.R.drawable.arrow_down_float;
holder.imageAbsence.setImageResource(imageResourceId);
holder.imageAbsence.setVisibility(View.VISIBLE);
}else if(viewType == Type.Data2) {
R.layout.expandable_list_group_ticketview, parent,
holder.textticket = (TextView) view
.findViewById(R.id.TicketgroupHeader);
holder.imageTicket= (ImageView) view
.findViewById(R.id.TicketexpandableIcon);
Data2ViewHolder holder = (Data2ViewHolder) view.getTag();
holder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""
holder.imageTicket.setVisibility(View.INVISIBLE);
holder.imageTicket.setImageResource(imageResourceId);
holder.imageTicket.setVisibility(View.VISIBLE);
else if(viewType == Type.Data3) {
R.layout.expandable_list_group_timesheetview, parent,
holder.texttimesheet = (TextView) view
.findViewById(R.id.TimesheetgroupHeader);
holder.imageTimesheet= (ImageView) view
.findViewById(R.id.TimesheetexpandableIcon);
holder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""
holder.imageTimesheet.setVisibility(View.INVISIBLE);
holder.imageTimesheet.setImageResource(imageResourceId);
holder.imageTimesheet.setVisibility(View.VISIBLE);
public boolean hasStableIds() {
return true;
public boolean isChildSelectable(int groupPosition, int childPosition) {
public void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {
groups.clear();
if (aryAbsence != null) {
Group g1 = new Group();
g1.type = Type.Absence;
g1.entryItems.clear();
g1.entryItems = new ArrayList(aryAbsence);
groups.add(g1);
if (aryTicket != null) {
Group g2 = new Group();
g2.type = Type.Ticket;
g2.entryItems.clear();
g2.entryItems = new ArrayList(aryTicket);
groups.add(g2);
if (aryTimeSheet != null) {
Group g3 = new Group();
g3.type = Type.TimeSheet;
g3.entryItems.clear();
g3.entryItems = new ArrayList(aryTimeSheet);
groups.add(g3);
notifyDataSetChanged();
* Holder for the Past view type
public static class Data1ViewHolder {
public ImageView imageAbsence;
public TextView textabsence;
public TextView txtEndDate;
public TextView txtStartDate;
public TextView txtFromUser;
public TextView txtSubject;
public static class Data2ViewHolder {
public ImageView imageTicket;
public TextView textticket;
public static class Data3ViewHolder {
public ImageView imageTimesheet;
public TextView texttimesheet;
* Wrapper for each group that contains the list elements and the type of
* travel.
public static class Group {
public enum Type {
Data_1,Data_2,Data_3;
};
public Type type;
ArrayList entryItems = new ArrayList();
*******************end of usage scenario 21***************** 

*******************usage scenario 22********************** 
----------usage scenario----------
Modifier static is only allowed in constant variable declarations
----------Explanation----------
You can make the Control class static.
----------Code Sample----------
private static class Control {
^^^^^^

// Ok to have static members:
public static ArrayList keys = new ArrayList();

...
*******************end of usage scenario 22***************** 

*******************usage scenario 23********************** 
----------usage scenario----------
Why are variables declared with their interface name in Java?
----------Explanation----------

----------Code Sample----------
List list = new ArrayList();
*******************end of usage scenario 23***************** 

*******************usage scenario 24********************** 
----------usage scenario----------
How do I find out what type each object is in a ArrayList?
----------Explanation----------

----------Code Sample----------
ArrayList list = ...;
// List list = ...;
foreach (object o in list) {
if (o is int) {
HandleInt((int)o);
}
else if (o is string) {
HandleString((string)o);
}
...
}

ArrayList list = ...;
for (Object o : list) {
if (o.getClass().equals(Integer.class)) {
handleInt((int)o);
}
else if (o.getClass().equals(String.class)) {
handleString((String)o);
}
...
}
*******************end of usage scenario 24***************** 

*******************usage scenario 25********************** 
----------usage scenario----------
NullPointerException when I try to call a method outside my main method
----------Explanation----------

----------Code Sample----------
import java.util.*;

public class SummationPuzzle 
{

public static ArrayList fsList;
public static ArrayList lastW;
public static ArrayList finaList;

/**
* Reads in 3 words entered by user and converts the first two string into a single ArrayList
* takes the third string entered and converts it into it's own ArrayList
* @param firstW
* @param secondW
* @param thirdW
*/
public static void convertStr(String firstW, String secondW, String thirdW)
{
String combined = new String(firstW + secondW); 
for(int i = 0; i< combined.length(); i++)
{
fsList.add(combined.charAt(i));
for(int j = 0; j< thirdW.length(); j++)
{
lastW.add(thirdW.charAt(j));
}
}
removeDuplicate(fsList, lastW);
//feeds the resulting lists into the removeDuplicate method
}

/**
* Combines two ArrayList into a one ArrayList with single instances of the char
* @param fsList
* @param lastW
*/
public static void removeDuplicate(ArrayList fsList, ArrayList lastW)
{
public static ArrayList fsList = new ArrayList();
public static ArrayList lastW = new ArrayList();
public static ArrayList finaList = new ArrayList();
tempList.addAll(fsList);
tempList.addAll(lastW);
for(char dupLetter : tempList)
{
if(!finaList.contains(dupLetter))
{
finaList.add(dupLetter);
}
}
System.out.println(finaList + ""This is the list with duplicates removed"");
assignNum(finaList, lastW);
//feeds results into the assignNum method
}

/**
* Assigns a random number to the char that resides at each address in the ArrayList
* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program
* assigns that character the value of ""1""
* @param finaList
* @param lastW
*/
public static void assignNum(ArrayList finaList, ArrayList lastW)
{
char[] assignLetter= new char[finaList.size()];
Random r = new Random();
for(int i = 0; i< assignLetter.length; i++)
{
assignLetter[i] = finaList.get(i);
assignLetter[i] = (char)r.nextInt(assignLetter.length);
System.out.println((long)assignLetter[i]);
if(lastW.get(0).equals(assignLetter[i]))
{
assignLetter[i] = 1;
}
}

System.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");

}


//main method
public static void main(String[] args)

{
//Receive user input
Scanner userIn = new Scanner(System.in);
System.out.println(""Please enter your first word"");
String firstW = userIn.next().trim();
System.out.println(""Please enter your Second word"");
String secondW = userIn.next().trim();
System.out.println(""Please enter your Third word"");
String thirdW = userIn.next().trim();


//print the summation puzzle
System.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);
convertStr(firstW, secondW, thirdW);
}
}
*******************end of usage scenario 25***************** 

*******************usage scenario 26********************** 
----------usage scenario----------
How to sort an ArrayList in Java
----------Explanation----------
Use a Comparator like this:
----------Code Sample----------
List fruits= new ArrayList();

Fruit fruit;
for(int i = 0; i < 100; i++)
{
fruit = new Fruit();
fruit.setname(...);
fruits.add(fruit);
}

// Sorting
Collections.sort(fruits, new Comparator() {
@Override
public int compare(Fruit fruit2, Fruit fruit1)
{

return fruit1.fruitName.compareTo(fruit2.fruitName);
}
});
*******************end of usage scenario 26***************** 

*******************usage scenario 27********************** 
----------usage scenario----------
How to pass an ArrayList to a varargs method parameter?
----------Explanation----------
Use the toArray(T[] arr) method.
----------Code Sample----------
.getMap(locations.toArray(new WorldLocation[locations.size()]))

public static void method(String... strs) {
for (String s : strs)
System.out.println(s);
}

...
List strs = new ArrayList();
strs.add(""hello"");
strs.add(""wordld"");

method(strs.toArray(new String[strs.size()]));
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
*******************end of usage scenario 27***************** 

*******************usage scenario 28********************** 
----------usage scenario----------
Remove Duplicates from ArrayList filled with POJOs
----------Explanation----------

----------Code Sample----------
package test.urlstore;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;


public class DuplicateDemo{

public static void main(String[] args) throws Exception {
List urlStores = new ArrayList();
UrlStore usg = new UrlStore(""google"");
UrlStore usy = new UrlStore(""yahoo"");
UrlStore usb = new UrlStore(""bing"");
UrlStore usa = new UrlStore(""ask"");
UrlStore usd = new UrlStore(""duckduckgo"");


usg.setData(""mail"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""doc"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usg.setData(""search"");
urlStores.add(usg);
usg = new UrlStore(""google"");
usy.setData(""search"");
urlStores.add(usy);
usy.setData(""search"");
urlStores.add(usy);
usb.setData(""search"");
urlStores.add(usb);
usb.setData(""search"");
urlStores.add(usb);
usa.setData(""search"");
urlStores.add(usa);
usd.setData(""search"");
urlStores.add(usd);

System.out.println(""before removing duplicates"");
// before removing duplicates
for (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());
}

System.out.println(""\n\nafter removing duplicates"");
//removing duplicates
Set uniqueUrlStores = new HashSet(urlStores);

//After removing duplicates
for (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {
UrlStore urlStore = (UrlStore) iterator.next();
System.out.println(urlStore.toString());

}

}



static class UrlStore {

public String url;
public String data;

public UrlStore(String url) {
this.url = url;
}

public void setData(String data) {
this.data = data;
}

@Override
public String toString() {
return ""UrlStore [url="" + url + "", data="" + data + ""]"";
}

@Override
public int hashCode() {
final int prime = 31;
int result = 1;
result = prime * result + ((data == null) ? 0 : data.hashCode());
result = prime * result + ((url == null) ? 0 : url.hashCode());
return result;
}

@Override
public boolean equals(Object obj) {
if (this == obj)
return true;
if (obj == null)
return false;
if (getClass() != obj.getClass())
return false;
UrlStore other = (UrlStore) obj;
if (data == null) {
if (other.data != null)
return false;
} else if (!data.equals(other.data))
return false;
if (url == null) {
if (other.url != null)
return false;
} else if (!url.equals(other.url))
return false;
return true;
}


} 
}
*******************end of usage scenario 28***************** 

*******************usage scenario 29********************** 
----------usage scenario----------
What is the fastest way to split Integer into digits?
----------Explanation----------
A simple test like this one compares both approaches. ","['""""""How to get ArrayList<Integer> and Scanner to play nice? \n\nimport java.util.*; public class CyclicShiftApp{ public static void main(String[] args){ Scanner scan = new Scanner(System.in); ArrayList<Integer> list = new ArrayList<Integer>(); while(scan.hasNextInt()){ list.add(scan.nextInt()); } Integer[] nums = new Integer[list.size()]; nums = list.toArray(nums); for(int i = 0;i < nums.length; i++){ System.out.println(nums[i]); } }\n\nThanks to poor-mans-debugging I\'ve found that the while(scan.hasNextInt()) isnt actually adding anything. What might be going wrong?""""""', '""""""It works for me. If I type in 10 (return) 20 (return) 30 (return) Ctrl-D (return) it shows the three numbers. Oh sorry. Just a list of numbers with whitespaces. eg. 14 17 18 33 54 1 4 6\n\n\n\n@SamwiseGibbens: Again, if I type that in, then hit return, then Ctrl-D, return, it prints out all the numbers. How are you terminating input? (Congrats for showing a short but complete program, and trying to learn from the ground up rather than racing straight to a GUI+database etc, by the way. I wish everyone took that approach.)\n\n\n\n14 17 18 33 54 1 4 6 it will treat as String input and scan.hasNextInt() will return false. @ExtremeCoders: You can make the loop end by providing any non-integer. | Show 8 more comments\n\nDoes this work, master Samwise? import java.util.*; public class CyclicShiftApp{ public static void main(String[] args){ Scanner scan = new Scanner(System.in); ArrayList<Integer> list = new ArrayList<Integer>(); System.out.print(""Enter integers please ""); System.out.println(""(EOF or non-integer to terminate): ""); while(scan.hasNextInt()){ list.add(scan.nextInt()); } Integer [] nums = list.toArray(new Integer[0]); for(int i = 0; i < nums.length; i++){ System.out.println(nums[i]); } } }\n\nI\'m assuming there\'s a reason why you need the list as an array, otherwise the conversion to an array is unnecessary. As Jon Skeet mentions in the comments, the loop will terminate only when the stream doesn\'t have a next int, ie. a non-integer value or a file\'s EOF if you\'re using \'java CyclicShiftApp < input_file.txt\'. rtheunissenrtheunissen\n\n7,Your problem is here :\n\nwhile(scan.hasNextInt()){ <-- This will loop untill you enter any non integer value list.add(scan.nextInt()); }\n\nYou just have to enter a character say e.g q once you finished entering all the integer values and then your program will print expected results. Sample Input :14 17 18 33 54 1 4 6 q\n\nAmit DeshpandeAmit Deshpande\n\n3\n\nIs there a way to cut it off after it finds the last integer? I would think that hasNextInt fixed that? it seems like it should go.. \'if there is no next int, cancel loop\'. Yes, but for that you would have to terminate the input. Either with a file which ends automatically or something like Ctrl + C on Windows command line. (Or Ctrl + D and enter)\n\n\n\nThere is no way it can detect which is last int unless you define some. So use characters or non integer to specify that it is end of input. import java.util.*; class SimpleArrayList{ public static void main(String args[]) { Scanner sc = new Scanner(System.in); ArrayList <Integer> al2 = new ArrayList<Integer>(); System.out.println(""enter the item in list""); while(sc.hasNextInt()) { al2.add(sc.nextInt()); } Iterator it1 = al2.iterator(); /*loop will be terminated when it will not get integer value */ while(it1.hasNext()) { System.out.println(it1.next()); } } }\n\nTrupti ParsaiTrupti Parsai\n\nThis is one of the simple and easiest way to use Scanner and ArrayList together. import java.util.*; public class Main { public static void main(String args[]) { Scanner sc=new Scanner(System.in); int num=sc.nextInt(); ArrayList<Integer> list=new ArrayList<Integer>(num); for(int i=0;i<num;i++) { list.add(sc.nextInt()); } Iterator itr=list.iterator(); { while(itr.hasNext()) { System.out.print(itr.next()+"" ""); } } } }""""""']'",0.089108911,0.22,1
util,Map,JAXB java.util.Map to key value pairs,"<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>
<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.
<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>
<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>
actually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>
If you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.
That means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>
Using a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();
As of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>
(By the way  a map can t contain twice the same value  your second put will overwrite the first one.
map is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>
If you want your map to never change  you should after the initialization wrap your map by <code>Collections.
The map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.
Also  the key and the value of each entry is immutable  cannot be changed.
See the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>
Pass an existing map  get back an immutable copy of that map.</p> <p>
For efficiency  if the passed map is already truly immutable  the <code>copyOf</code>
method produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.
If the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.
We see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>
An alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>
The utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>","Most common way to construct:
Map map = new HashMap();
Based on 17 examples

Many methods in Collections Framework interfaces are defined in terms of the {@link Object#equals(Object) equals} method. For example, the specification for the {@link #containsKey(Object) containsKey(Object key)} method says: ""returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k))."" This specification should not be construed to imply that invoking Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The {@link Object#hashCode()} specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying {@link Object} methods wherever the implementor deems it appropriate.","I'm still working on a better solution but using MOXy JAXB, I've been able to handle the following XML:

<?xml version=""1.0"" encoding=""UTF-8""?>
<root>
   <mapProperty>
      <map>
         <key>value</key>
         <key2>value2</key2>
      </map>
   </mapProperty>
</root>
You need to use an @XmlJavaTypeAdapter on your Map property:

import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

@XmlRootElement
public class Root {

    private Map<String, String> mapProperty;

    public Root() {
        mapProperty = new HashMap<String, String>();
    }

    @XmlJavaTypeAdapter(MapAdapter.class)
    public Map<String, String> getMapProperty() {
        return mapProperty;
    }

    public void setMapProperty(Map<String, String> map) {
        this.mapProperty = map;
    }

}
The implementation of the XmlAdapter is as follows:

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class MapAdapter extends XmlAdapter<AdaptedMap, Map<String, String>> {

    @Override
    public AdaptedMap marshal(Map<String, String> map) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.newDocument();
        Element rootElement = document.createElement(""map"");
        document.appendChild(rootElement);

        for(Entry<String,String> entry : map.entrySet()) {
            Element mapElement = document.createElement(entry.getKey());
            mapElement.setTextContent(entry.getValue());
            rootElement.appendChild(mapElement);
        }

        AdaptedMap adaptedMap = new AdaptedMap();
        adaptedMap.setValue(document);
        return adaptedMap;
    }

    @Override
    public Map<String, String> unmarshal(AdaptedMap adaptedMap) throws Exception {
        Map<String, String> map = new HashMap<String, String>();
        Element rootElement = (Element) adaptedMap.getValue();
        NodeList childNodes = rootElement.getChildNodes();
        for(int x=0,size=childNodes.getLength(); x<size; x++) {
            Node childNode = childNodes.item(x);
            if(childNode.getNodeType() == Node.ELEMENT_NODE) {
                map.put(childNode.getLocalName(), childNode.getTextContent());
            }
        }
        return map;
    }

}
The AdpatedMap class is where all the magic happens, we will use a DOM to represent the content. We will trick JAXB intro dealing with a DOM through the combination of @XmlAnyElement and a property of type Object:

import javax.xml.bind.annotation.XmlAnyElement;

public class AdaptedMap {

    private Object value;

    @XmlAnyElement
    public Object getValue() {
        return value;
    }

    public void setValue(Object value) {
        this.value = value;
    }

}
This solution requires the MOXy JAXB implementation. You can configure the JAXB runtime to use the MOXy implementation by adding a file named jaxb.properties in with your model classes with the following entry:

javax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory
The following demo code can be used to verify the code:

import java.io.File;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

public class Demo {

    public static void main(String[] args) throws Exception {
        JAXBContext jc = JAXBContext.newInstance(Root.class);

        Unmarshaller unmarshaller = jc.createUnmarshaller();
        Root root = (Root) unmarshaller.unmarshal(new File(""src/forum74/input.xml""));

        Marshaller marshaller = jc.createMarshaller();
        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        marshaller.marshal(root, System.out);
    }
}",None,"['""""""JAXB java.util.Map to key value pairs\n\nI\'d like to marshall/unmarshall a Map into attributes of an XML element. I\'ve seen examples like:\n\n<map> <entry key=""key1"">value1</entry> <entry key=""key2"">value2</entry> </map>\n\nWhat I really want is:\n\n<map key1=""value1"" key2=""value2""/>\n\nAssume with me that there are no complex values and that they can legally be represented as XML attributes. Also, I\'m trying to write this generically because the set of keys is not known until runtime. How would I go about this? I\'m familiar with XmlJavaTypeAdapter. I thought about creating a MyMap that contains a List of entries but this wouldn\'t get the output I\'d like. 2,Like I hinted in my comment, this cannot be achieved with JAXB alone. In the JAXB specification (JSR 222) it says:\n\nIn all application scenarios, we create a Java object-level binding of the schema. That means that the scope of the binding is the same as the scope of the schema, which is static. A JAXB binding is not meant to be changed without recompiling the code. There are some exceptions, e.g. for xs:anyAttribute which is discussed in section 6.9 of the specification, but since you didn\'t vote for the answer suggesting the use of @XmlAnyAttribute you probably don\'t want to live with the limitations - e.g. only have QName keys in your map. I hope you are convinced that to do what you want with JAXB is a really bad idea, but just for reference below is an example that modifies the document after marshalling to bring it to the structure you want. You can copy and paste it into a single file and compile it with Java 7. The output will look like this:\n\n<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?> <mapExample> <map France=""Paris"" Japan=""Tokyo""/> </mapExample>\n\nMy code only shows the marshalilng the other direction is equivalent:\n\nimport java.util.ArrayList; import java.util.HashMap; import java.util.List; import java.util.Map; import javax.xml.bind.JAXBContext; import javax.xml.bind.Marshaller; import javax.xml.bind.annotation.XmlAttribute; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; import javax.xml.bind.annotation.adapters.XmlAdapter; import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter; import javax.xml.transform.TransformerFactory; import javax.xml.transform.dom.DOMResult; import javax.xml.transform.dom.DOMSource; import javax.xml.transform.stream.StreamResult; import javax.xml.xpath.XPath; import javax.xml.xpath.XPathConstants; import javax.xml.xpath.XPathExpression; import javax.xml.xpath.XPathFactory; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.Node; import org.w3c.dom.NodeList; @XmlRootElement class MapExample { @XmlJavaTypeAdapter(MapXmlAdapter.class) @XmlElement(name=""map"") private Map<String, String> data = new HashMap<>(); public static void main(String[] args) throws Exception { MapExample example = new MapExample(); example.data.put(""France"", ""Paris""); example.data.put(""Japan"", ""Tokyo""); JAXBContext context = JAXBContext.newInstance(MapExample.class); Marshaller marshaller = context.createMarshaller(); DOMResult result = new DOMResult(); marshaller.marshal(example, result); XPathFactory factory = XPathFactory.newInstance(); XPath xpath = factory.newXPath(); Document document = (Document)result.getNode(); XPathExpression expression = xpath.compile(""//map/entry""); NodeList nodes = (NodeList)expression.evaluate(document, XPathConstants.NODESET); expression = xpath.compile(""//map""); Node oldMap = (Node)expression.evaluate(document, XPathConstants.NODE); Element newMap = document.createElement(""map""); for (int index = 0; index < nodes.getLength(); index++) { Element element = (Element)nodes.item(index); newMap.setAttribute(element.getAttribute(""key""), element.getAttribute(""value"")); } expression = xpath.compile(""//map/..""); Node parent = (Node)expression.evaluate(document, XPathConstants.NODE); parent.replaceChild(newMap, oldMap); TransformerFactory.newInstance().newTransformer(). transform(new DOMSource(document), new StreamResult(System.out)); } } class MapXmlAdapter extends XmlAdapter<MyMap, Map<String, String>> { @Override public Map<String, String> unmarshal(MyMap value) throws Exception { throw new UnsupportedOperationException(); } @Override public MyMap marshal(Map<String, String> value) throws Exception { MyMap map = new MyMap(); map.entries = new ArrayList<MyEntry>(); for (String key : value.keySet()) { MyEntry entry = new MyEntry(); entry.key = key; entry.value = value.get(key); map.entries.add(entry); } return map; } } class MyMap { @XmlElement(name=""entry"") public List<MyEntry> entries; } class MyEntry { @XmlAttribute public String key; @XmlAttribute public String value; }\n\n3,6\n\nCould you show an example? It seems to me that the Javadoc explains how to annotate objects to obtain an XML structure that the OP doesn\'t want... â Lukas Eder Oct 15, 2012 at 18:11\n\nNot the structure I\'m looking for. I want all entries in the Map to be key-value pairs. The entries in the Java map object are not affected by this, e.g. they still implement java.util.Map.Entry. MyEntry is only used during marshalling. Or do you mean the XML output by ""Not the structure I\'m looking for""?""""""']",0.178571429,1,0.217391304
util,Map,serialize json object which extends map,"<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>
<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.
<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>
<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>
actually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>
If you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.
That means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>
Using a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();
As of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>
(By the way  a map can t contain twice the same value  your second put will overwrite the first one.
map is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>
If you want your map to never change  you should after the initialization wrap your map by <code>Collections.
The map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.
Also  the key and the value of each entry is immutable  cannot be changed.
See the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>
Pass an existing map  get back an immutable copy of that map.</p> <p>
For efficiency  if the passed map is already truly immutable  the <code>copyOf</code>
method produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.
If the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.
We see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>
An alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>
The utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>","Most common way to construct:
Map map = new HashMap();
Based on 17 examples

Many methods in Collections Framework interfaces are defined in terms of the {@link Object#equals(Object) equals} method. For example, the specification for the {@link #containsKey(Object) containsKey(Object key)} method says: ""returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k))."" This specification should not be construed to imply that invoking Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The {@link Object#hashCode()} specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying {@link Object} methods wherever the implementor deems it appropriate.","I came up with this solution:

public class ArrayToMapDeserializer extends JsonDeserializer<SortedMap<Object, Object>>
    implements ContextualDeserializer {

    private Class<?> keyAs;

    private Class<?> contentAs;

    @Override
    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
        return this.deserialize(p, ctxt, new HashMap<>());
    }

    @Override
    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt,
        Map<Object, Object> intoValue) throws IOException, JsonProcessingException {
        JsonNode node = p.readValueAsTree();
        ObjectCodec codec = p.getCodec();
        if (node.isArray()) {
            node.forEach(entry -> {
                try {
                    JsonNode keyNode = entry.get(0);
                    JsonNode valueNode = entry.get(1);
                    intoValue.put(keyNode.traverse(codec).readValueAs(this.keyAs),
                        valueNode.traverse(codec).readValueAs(this.contentAs));
                } catch (NullPointerException | IOException e) {
                    // skip entry
                }
            });
        }
        return intoValue;
    }

    @Override
    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)
        throws JsonMappingException {
        JsonDeserialize jsonDeserialize = property.getAnnotation(JsonDeserialize.class);
        this.keyAs = jsonDeserialize.keyAs();
        this.contentAs = jsonDeserialize.contentAs();
        return this;
    }

}
which can be used like this:

public class Baz {

    @JsonSerialize(using = MapToArraySerializer.class)
    @JsonDeserialize(using = ArrayToMapDeserializer.class,
        keyAs = Foo.class, contentAs = Bar.class)
    Map<Foo, Bar> map;

}",None,"['""""""It\'s not like it would break anything at all or am I missing something here? \n\nIn the case you\'d still want Java built-in serialization without having to resort to marshal your JSON object into string notation, one thing you could do is extend JSONObject and JSONArray from org.json and just implement Serializable. Then you can use your own versions of JSONObject and JSONArray across the board instead of the originals. Make sure you define all constructors on your subclasses and call their super() counterparts as well as implement specific methods that return the parent types such as getJSONObject() and getJSONArray() from properties. Roberto AndradeRoberto Andrade\n\n1,3\n\nvoting up, since this is the right approach. I do the same since I am caching a comples JSONObject on MemCache, rather than get it created all the time or stringified. This does seem to work, but is it ""safe"" to do? Something about extending a 3rd party class that isn\'t serializable, and then marking it as so, seems a little risky. This is a better approach than the accepted one! Another way is to swap org.json library with json-simple. The JSONObject class from json-simple extends HashMap which is java Serializable as well as more java-ish API. http://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple/1.1.1\n\nhttps://www.mkyong.com/java/json-simple-example-read-and-write-json/\n\nThamme GowdaThamme Gowda\n\nIf you have JSONArray inside Serializable object class try to initialize JSONArray in this way. private transient JSONArray jsonArray;\n\npublic class Person implements Serializable { private String name; private transient JSONArray jsonArray; public String getName() { return name; } public void setName(String name) { this.name = name; } public JSONArray getJsonArray() { return jsonArray; } public void setJsonArray(JSONArray jsonArray) { this.jsonArray = jsonArray; } }\n\n3,1\n\nBecause it\'ll change functionality, you might not want to lose your JSONArray on deserialize.""""""', '""""""jackson serialization for Java object with Map? I have a Java class like this and want to convert to JSON using Jackson. Thanks for your help. public class myClass { String Id; Map<String, Object> optionalData = new LinkedHashMap<String, Object>(); }\n\nHow to serialization it to JSON using Jackson ObjectMapper ? For example, suppose the optionalData is a Map saving two entries <""type"", ""book""> and <""year"", ""2014""> I want the output to be as follow. Please note that the key/value of optionalData could be changed on the fly (so, I cannot create a ""static"" Java object for this without using Map)\n\n[ { id: ""book-id1"", type: ""book"", year: ""2014"" }, { id: ""book-id2"", type: ""book"", year: ""2013"" } ]\n\n3,Jason ChenJason Chen\n\n1\n\nwhat you have tried so far? and where you facing problem?""""""']",0.178571429,0.55,0.25
awt,Image,Take a screenshot and save as Image in Java,None,None,"Use Robot#createScreenCapture().

BufferedImage image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
ImageIO.write(image, ""png"", new File(""/screenshot.png""));","*******************usage scenario 1********************** 
----------usage scenario----------
Capture HTML Canvas as gif/jpg/png/pdf?
----------Explanation----------

----------Code Sample----------
var canvas = document.getElementById(""mycanvas"");
var img = canvas.toDataURL(""image/png"");

document.write('');
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
how to show alternate image if source image is not found? (onerror working in IE but not in mozilla)
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
HTML5 Canvas Resize (Downscale) Image High Quality?
----------Explanation----------
fiddle result : 
http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ 
fiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/
----------Code Sample----------
// scales the image by (float) scale < 1
// returns a canvas containing the scaled image.
function downScaleImage(img, scale) {
var imgCV = document.createElement('canvas');
imgCV.width = img.width;
imgCV.height = img.height;
var imgCtx = imgCV.getContext('2d');
imgCtx.drawImage(img, 0, 0);
return downScaleCanvas(imgCV, scale);
}

// scales the canvas by (float) scale < 1
// returns a new canvas containing the scaled image.
function downScaleCanvas(cv, scale) {
if (!(scale < 1) || !(scale > 0)) throw ('scale must be a positive number <1 ');
var sqScale = scale * scale; // square scale = area of source pixel within target
var sw = cv.width; // source image width
var sh = cv.height; // source image height
var tw = Math.floor(sw * scale); // target image width
var th = Math.floor(sh * scale); // target image height
var sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array
var tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array
var tX = 0, tY = 0; // rounded tx, ty
var w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y
// weight is weight of current source point within target.
// next weight is weight of current source point within next target's point.
var crossX = false; // does scaled px cross its current px right border ?
var crossY = false; // does scaled px cross its current px bottom border ?
var sBuffer = cv.getContext('2d').
getImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba
var tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb
var sR = 0, sG = 0, sB = 0; // source's current point r,g,b
/* untested !
var sA = 0; //source alpha */ 

for (sy = 0; sy < sh; sy++) {
ty = sy * scale; // y src position within target
tY = 0 | ty; // rounded : target pixel's y
yIndex = 3 * tY * tw; // line index within target array
crossY = (tY != (0 | ty + scale)); 
if (crossY) { // if pixel is crossing botton target pixel
wy = (tY + 1 - ty); // weight of point within target pixel
nwy = (ty + scale - tY - 1); // ... within y+1 target pixel
}
for (sx = 0; sx < sw; sx++, sIndex += 4) {
tx = sx * scale; // x src position within target
tX = 0 | ?tx; // rounded : target pixel's x
tIndex = yIndex + tX * 3; // target pixel index within target array
crossX = (tX != (0 | tx + scale));
if (crossX) { // if pixel is crossing target pixel's right
wx = (tX + 1 - tx); // weight of point within target pixel
nwx = (tx + scale - tX - 1); // ... within x+1 target pixel
}
sR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.
sG = sBuffer[sIndex + 1];
sB = sBuffer[sIndex + 2];

/* !! untested : handling alpha !!
sA = sBuffer[sIndex + 3];
if (!sA) continue;
if (sA != 0xFF) {
sR = (sR * sA) >> 8; // or use /256 instead ??
sG = (sG * sA) >> 8;
sB = (sB * sA) >> 8;
}
*/
if (!crossX && !crossY) { // pixel does not cross
// just add components weighted by squared scale.
tBuffer[tIndex ] += sR * sqScale;
tBuffer[tIndex + 1] += sG * sqScale;
tBuffer[tIndex + 2] += sB * sqScale;
} else if (crossX && !crossY) { // cross on X only
w = wx * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tX+1) px 
nw = nwx * scale
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
} else if (crossY && !crossX) { // cross on Y only
w = wy * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tY+1) px 
nw = nwy * scale
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
} else { // crosses both x and y : four target points involved
// add weighted component for current px
w = wx * wy;
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// for tX + 1; tY px
nw = nwx * wy;
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
// for tX ; tY + 1 px
nw = wx * nwy;
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
// for tX + 1 ; tY +1 px
nw = nwx * nwy;
tBuffer[tIndex + 3 * tw + 3] += sR * nw;
tBuffer[tIndex + 3 * tw + 4] += sG * nw;
tBuffer[tIndex + 3 * tw + 5] += sB * nw;
}
} // end for sx 
} // end for sy

// create result canvas
var resCV = document.createElement('canvas');
resCV.width = tw;
resCV.height = th;
var resCtx = resCV.getContext('2d');
var imgRes = resCtx.getImageData(0, 0, tw, th);
var tByteBuffer = imgRes.data;
// convert float32 array into a UInt8Clamped Array
var pxIndex = 0; // 
for (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {
tByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);
tByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);
tByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);
tByteBuffer[tIndex + 3] = 255;
}
// writing result to canvas.
resCtx.putImageData(imgRes, 0, 0);
return resCV;
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to check a uploaded file whether it is a image or other file?
----------Explanation----------
I'm assuming that you're running this in a servlet context. If it's affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .
----------Code Sample----------
String fileName = uploadedFile.getFileName();
String mimeType = getServletContext().getMimeType(fileName);
if (mimeType.startsWith(""image/"")) {
// It's an image.
}

try (InputStream input = uploadedFile.getInputStream()) {
try {
ImageIO.read(input).toString();
// It's an image (only BMP, GIF, JPG and PNG are recognized).
} catch (Exception e) {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
String mimeType = Magic.getMagicMatch(input, false).getMimeType();
if (mimeType.startsWith(""image/"")) {
// It's an image.
} else {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
Files.copy(input, new File(uploadFolder, fileName).toPath());
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java Switch Statement - Is ""or""/""and"" possible?
----------Explanation----------
You can use switch-case fall through by omitting the break; statement.
----------Code Sample----------
char c = /* whatever */;

switch(c) {
case 'a':
case 'A':
//get the 'A' image;
break;
case 'b':
case 'B':
//get the 'B' image;
break;
// (...)
case 'z':
case 'Z':
//get the 'Z' image;
break;
}

char c = Character.toUpperCase(/* whatever */);

switch(c) {
case 'A':
//get the 'A' image;
break;
case 'B':
//get the 'B' image;
break;
// (...)
case 'Z':
//get the 'Z' image;
break;
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How do you cache an image in Javascript
----------Explanation----------
So, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it's probably best to do it with javascript as it generally won't hold up the page load when done from javascript. You can do that like this:
----------Code Sample----------
function preloadImages(array) {
if (!preloadImages.list) {
preloadImages.list = [];
}
var list = preloadImages.list;
for (var i = 0; i < array.length; i++) {
var img = new Image();
img.onload = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = array[i];
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);

function preloadImages(array, waitForOtherResources, timeout) {
var loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;
if (!preloadImages.list) {
preloadImages.list = [];
}
if (!waitForOtherResources || document.readyState === 'complete') {
loadNow();
} else {
window.addEventListener(""load"", function() {
clearTimeout(timer);
loadNow();
});
// in case window.addEventListener doesn't get called (sometimes some resource gets stuck)
// then preload the images anyway after some timeout time
timer = setTimeout(loadNow, t);
}

function loadNow() {
if (!loaded) {
loaded = true;
for (var i = 0; i < imgs.length; i++) {
var img = new Image();
img.onload = img.onerror = img.onabort = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = imgs[i];
}
}
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);
preloadImages([""url99.jpg"", ""url98.jpg""], true);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Check if an image is loaded (no errors) in JavaScript
----------Explanation----------
Another option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here's an example of what I mean:
----------Code Sample----------
$("""")
.on('load', function() { console.log(""image loaded correctly""); })
.on('error', function() { console.log(""error loading image""); })
.attr(""src"", $(originalImage).attr(""src""))
;
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Unable to read JPEG image using ImageIO.read(File file)
----------Explanation----------
Read a CMYK image into RGB BufferedImage.
----------Code Sample----------
File f = new File(""/path/imagefile.jpg"");

//Find a suitable ImageReader
Iterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");
ImageReader reader = null;
while(readers.hasNext()) {
reader = (ImageReader)readers.next();
if(reader.canReadRaster()) {
break;
}
}

//Stream the image file (the original CMYK image)
ImageInputStream input = ImageIO.createImageInputStream(f); 
reader.setInput(input); 

//Read the image raster
Raster raster = reader.readRaster(0, null); 

//Create a new RGB image
BufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), 
BufferedImage.TYPE_4BYTE_ABGR); 

//Fill the new image with the old raster
bi.getRaster().setRect(raster);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to upload and store an image with google app engine (java)
----------Explanation----------
Declaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc
----------Code Sample----------
@Entity
public class MyImage {
@PrimaryKey
@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
private Long id;

@Persistent
private String name;

@Persistent
Blob image;

public MyImage() { }
public MyImage(String name, Blob image) {
this.name = name; 
this.image = image;
}

// JPA getters and setters and empty contructor
// ...
public Blob getImage() { return image; }
public void setImage(Blob image) { this.image = image; }
}

// Your upload handle would look like
public void doPost(HttpServletRequest req, HttpServletResponse res) {
// Get the image representation
ServletFileUpload upload = new ServletFileUpload();
FileItemIterator iter = upload.getItemIterator(req);
FileItemStream imageItem = iter.next();
InputStream imgStream = imageItem.openStream();

// construct our entity objects
Blob imageBlob = new Blob(IOUtils.toByteArray(imgStream));
MyImage myImage = new MyImage(imageItem.getName(), imageBlob);

// persist image
PersistenceManager pm = PMF.get().getPersistenceManager();
pm.makePersistent(myImage);
pm.close();

// respond to query
res.setContentType(""text/plain"");
res.getOutputStream().write(""OK!"".getBytes());
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Android Bitmap: Convert transparent pixels to a color
----------Explanation----------
If you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .
----------Code Sample----------
Bitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size
imageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want
Canvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image
canvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background
image.recycle(); // clear out old image
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Is it possible to apply CSS to half of a character?
----------Explanation----------
HTML
----------Code Sample----------
Now on GitHub as a Plugin!


enter image description here Feel free to fork and improve.



Demo | Download Zip | Half-Style.com (Redirects to GitHub)





Pure CSS for a Single Character

JavaScript used for automation accross text or multiple characters

Preserves Text Accessibility for screen readers for the blind or visually
impaired



Part1: Basic Solution


Half Style on text



Demo: http://jsfiddle.net/pd9yB/817/





This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.



Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.



Explanation for a single character:



Pure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.



For each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won't need to hard code it for every instance.



Explanation for any text:



Simply add textToHalfStyle class to the element containing the text.





CSS:



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: black; /* or transparent, any color */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    left:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: #f00;

}



Single Characters:



X

Y

Z

A





Automated:





Half-style, please.



jQuery(function($) {

    var text, chars, $el, i, output;



    // Iterate over all class occurences

    $('.textToHalfStyle').each(function(idx, el) {

        $el = $(el);

        text = $el.text();

        chars = text.split('');



        // Set the screen-reader text

        $el.html('' + text + '');



        // Reset output for appending

        output = '';



        // Iterate over all chars in the text

        for (i = 0; i < chars.length; i++) {

            // Create a styled element for each character and append to container

            output += '' + chars[i] + '';

        }



        // Write to DOM only once

        $el.append(output);

    });

});



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before { /* creates the top part */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the bottom part */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 100%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}



.halfStyle { /* base char and also the right 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the left 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    width: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



.halfStyle { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



body{

    background-color: black;

}



.textToHalfStyle{

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}



.halfStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}



jQuery(function($) {

    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;



    // Iterate over all class occurrences

    $('.textToHalfStyle').each(function(idx, halfstyle_el) {

        $halfstyle_el = $(halfstyle_el);

        halfstyle_style = $halfstyle_el.data('halfstyle');

        halfstyle_text = $halfstyle_el.text();

        halfstyle_chars = halfstyle_text.split('');



        // Set the screen-reader text

        $halfstyle_el.html('' + halfstyle_text + '');



        // Reset output for appending

        halfstyle_output = '';



        // Iterate over all chars in the text

        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {

            // Create a styled element for each character and append to container

            halfstyle_output += '' + halfstyle_chars[halfstyle_i] + '';

        }



        // Write to DOM only once

        $halfstyle_el.append(halfstyle_output);

    });

});



 /* start half-style hs-base */

 .halfStyle.hs-base {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #000; /* for demo purposes */

}

.halfStyle.hs-base:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    pointer-events: none; /* so the base char is selectable by mouse */

    overflow:hidden;

    color: #f00; /* for demo purposes */

}

 /* end half-style hs-base */



/* start half-style hs-horizontal-third */

.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}

/* end half-style hs-horizontal-third */



/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */

.halfStyle.hs-PeelingStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle.hs-PeelingStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}

/* end half-style hs-PeelingStyle */



/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/

.textToHalfStyle.hs-KevinGranger {

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle.hs-KevinGranger {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle.hs-KevinGranger:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}

/* end half-style hs-KevinGranger





    Half-style, please.






    Half-style, please.






    Half-style, please.






    Half-style, please.




*******************end of usage scenario 11*****************



*******************usage scenario 12**********************


----------usage scenario----------

Changing the image source using jQuery

----------Explanation----------

You can use jQuery's  attr()  function.  For example, if you img tag has an id attribute of 'my_image':

----------Code Sample----------





$(""#my_image"").attr(""src"",""second.jpg"");



$('#my_image').on({

    'click': function(){

        $('#my_image').attr('src','second.jpg');

    }

});



$('img').on({

    'click': function() {

         var src = ($(this).attr('src') === 'img1_on.jpg')

            ? 'img2_on.jpg'

            : 'img1_on.jpg';

         $(this).attr('src', src);

    }

});

*******************end of usage scenario 12*****************



*******************usage scenario 13**********************


----------usage scenario----------

Setting background-image using jQuery CSS property

----------Explanation----------

You probably want this (to make it like a normal CSS background-image declaration):

----------Code Sample----------

$('myOjbect').css('background-image', 'url(' + imageUrl + ')');

*******************end of usage scenario 13*****************



*******************usage scenario 14**********************


----------usage scenario----------

What is the best way to display millions of images in Java?

----------Explanation----------



----------Code Sample----------

Image tile = new Image(""tile.png"");



Group house = new Group();

house.setCache(true);

house.setCacheHint(CacheHint.SPEED);



Effect lighting = new Lighting();



for (int i = 0; i < houseWidth; i++) {

  // here is the critical part => don't do new ImageView(new Image(""tile.png""))

  ImageView tileView = new ImageView(tile));

  tileView.setEffect(lighting);

  tileView.setCache(true);

  tileView.setCacheHint(CacheHint.SPEED);



  house.add(tileView);  

}

*******************end of usage scenario 14*****************



*******************usage scenario 15**********************


----------usage scenario----------

How to flip BufferedImage in java

----------Explanation----------

Based on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .

----------Code Sample----------

import java.awt.Component;

import java.awt.Graphics2D;

import java.awt.GridLayout;

import java.awt.RenderingHints;

import java.awt.geom.AffineTransform;

import java.awt.image.BufferedImage;

import java.awt.image.ByteLookupTable;

import java.awt.image.LookupOp;

import java.awt.image.LookupTable;

import java.io.File;

import java.io.IOException;

import java.util.Arrays;



import javax.imageio.ImageIO;

import javax.swing.BorderFactory;

import javax.swing.ImageIcon;

import javax.swing.JFrame;

import javax.swing.JLabel;

import javax.swing.JPanel;

import javax.swing.SwingUtilities;



public class ImageFlipTest

{

    public static void main(String[] args)

    {

        SwingUtilities.invokeLater(new Runnable()

        {

            @Override

            public void run()

            {

                createAndShowGUI();

            }

        });

    }



    private static void createAndShowGUI()

    {

        JFrame frame = new JFrame();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(new GridLayout(1, 1));



        BufferedImage image = null;

        try

        {

            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));

        }

        catch (IOException e1)

        {

            e1.printStackTrace();

        }



        JPanel panel = new JPanel(new GridLayout(2,2));

        panel.add(createComponent(""Original"", image));

        panel.add(createComponent(""Flipped"", createFlipped(image)));

        panel.add(createComponent(""Rotated"", createRotated(image)));

        panel.add(createComponent(""Inverted"", createInverted(image)));



        frame.getContentPane().add(panel);

        frame.pack();

        frame.setLocationRelativeTo(null);

        frame.setVisible(true);

    }



    private static BufferedImage convertToARGB(BufferedImage image)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }    



    private static BufferedImage createFlipped(BufferedImage image)

    {

        AffineTransform at = new AffineTransform();

        at.concatenate(AffineTransform.getScaleInstance(1, -1));

        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));

        return createTransformed(image, at);

    }



    private static BufferedImage createRotated(BufferedImage image)

    {

        AffineTransform at = AffineTransform.getRotateInstance(

            Math.PI, image.getWidth()/2, image.getHeight()/2.0);

        return createTransformed(image, at);

    }



    private static BufferedImage createTransformed(

        BufferedImage image, AffineTransform at)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.transform(at);

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }



    private static BufferedImage createInverted(BufferedImage image)

    {

        if (image.getType() != BufferedImage.TYPE_INT_ARGB)

        {

            image = convertToARGB(image);

        }

        LookupTable lookup = new LookupTable(0, 4)

        {

            @Override

            public int[] lookupPixel(int[] src, int[] dest)

            {

                dest[0] = (int)(255-src[0]);

                dest[1] = (int)(255-src[1]);

                dest[2] = (int)(255-src[2]);

                return dest;

            }

        };

        LookupOp op = new LookupOp(lookup, new RenderingHints(null));

        return op.filter(image, null);

    }
","['""""""Share Your Experience: Is there a way to take a screenshot using Java and save it to some sort of image? Simple as the title states: Can you use only Java commands to take a screenshot and save it? Or, do I need to use an OS specific program to take the screenshot and then grab it off the clipboard? 4\n\nweb.archive.org/web/20090204074007/http://schmidt.devlib.org/\n\nBelieve it or not, you can actually use java.awt.Robot to ""create an image containing pixels read from the screen."" You can then write that image to a file on disk. I just tried it, and the whole thing ends up like:\n\nRectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()); BufferedImage capture = new Robot().createScreenCapture(screenRect); ImageIO.write(capture, ""bmp"", new File(args[0]));\n\nNOTE: This will only capture the primary monitor. See GraphicsConfiguration for multi-monitor support. David CitronDavid Citron\n\n4\n\nI wonder if this is what screen sharing applications like Elluminate (elluminate.com) use. \n\n it will be work without console if you will hardcode path to screenshot in your app. \n\nRobot does not include the mouse in the screen capture. Is there a similar function which does the exact same thing, but DOES include the mouse? is there a way to capture the mouse cursor as well ?\n\nI never liked using Robot, so I made my own simple method for making screenshots of JFrame objects:\n\npublic static final void makeScreenshot(JFrame argFrame) { Rectangle rec = argFrame.getBounds(); BufferedImage bufferedImage = new BufferedImage(rec.width, rec.height, BufferedImage.TYPE_INT_ARGB); argFrame.paint(bufferedImage.getGraphics()); try { // Create temp file File temp = File.createTempFile(""screenshot"", "".png""); // Use the ImageIO API to write the bufferedImage to a temporary file ImageIO.write(bufferedImage, ""png"", temp); // Delete temp file when program exits temp.deleteOnExit(); } catch (IOException ioe) { ioe.printStackTrace(); } }\n\nAny reason for why you\'re not liking Robot? \n\nThink of it simply as a matter of taste. It looks like this should have the advantage of working even if the target window is obscured before the screenshot is taken. \n\nOn the other hand, this gets only the contents of the window, whereas with Robot you can also get the window\'s frame and titlebar. \n\nFor HiDPI (Mac retina) displays this creates screenshots at half resolution. To fix that bufferedImage.getGraphics().scale(2, 2) before the argFrame.paint(bufferedImage.getGraphics()) call and use new BufferedImage(rec.width*2, rec.height*2, BufferedImage.TYPE_INT_ARGB) to create the BufferedImage\n\n | Show 1 more comment\n\nIf you\'d like to capture all monitors, you can use the following code:\n\nGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] screens = ge.getScreenDevices(); Rectangle allScreenBounds = new Rectangle(); for (GraphicsDevice screen : screens) { Rectangle screenBounds = screen.getDefaultConfiguration().getBounds(); allScreenBounds.width += screenBounds.width; allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height); } Robot robot = new Robot(); BufferedImage screenShot = robot.createScreenCapture(allScreenBounds);\n\n7,2\n\nwould be better to calculate it this way\n\n That answer solved my problem, thank you for linking it here! public void captureScreen(String fileName) throws Exception { Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); Rectangle screenRectangle = new Rectangle(screenSize); Robot robot = new Robot(); BufferedImage image = robot.createScreenCapture(screenRectangle); ImageIO.write(image, ""png"", new File(fileName)); }\n\nGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] screens = ge.getScreenDevices(); Rectangle allScreenBounds = new Rectangle(); for (GraphicsDevice screen : screens) { Rectangle screenBounds = screen.getDefaultConfiguration().getBounds(); allScreenBounds.width += screenBounds.width; allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height); allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x); allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y); } Robot robot = new Robot(); BufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds); File file = new File(""C:\\\\Users\\\\Joe\\\\Desktop\\\\scr.png""); if(!file.exists()) file.createNewFile(); FileOutputStream fos = new FileOutputStream(file); ImageIO.write( bufferedImage, ""png"", fos );\n\nbufferedImage will contain a full screenshot, this was tested with three monitors\n\njoe pelletierjoe pelletier\n\nimport java.awt.Color; import java.awt.Dimension; import java.awt.Rectangle; import java.awt.Robot; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.image.BufferedImage; import java.io.File; import javax.imageio.ImageIO; import javax.swing.*; public class HelloWorldFrame extends JFrame implements ActionListener { JButton b; public HelloWorldFrame() { this.setVisible(true); this.setLayout(null); b = new JButton(""Click Here""); b.setBounds(380, 290, 120, 60); b.setBackground(Color.red); b.setVisible(true); b.addActionListener(this); add(b); setSize(1000, 700); } public void actionPerformed(ActionEvent e) { if (e.getSource() == b) { this.dispose(); try { Thread.sleep(1000); Toolkit tk = Toolkit.getDefaultToolkit(); Dimension d = tk.getScreenSize(); Rectangle rec = new Rectangle(0, 0, d.width, d.height); Robot ro = new Robot(); BufferedImage img = ro.createScreenCapture(rec); File f = new File(""myimage.jpg"");//set appropriate path ImageIO.write(img, ""jpg"", f); } catch (Exception ex) { System.out.println(ex.getMessage()); } } } public static void main(String[] args) { HelloWorldFrame obj = new HelloWorldFrame(); } }\n\nNilesh JadavNilesh Jadav\n\n1\n\nI did a benchmark and this one is the slowest, also has the greatest loss and biggest file size. Sorry,\n\nYou can use java.awt.Robot to achieve this task. below is the code of server, which saves the captured screenshot as image in your Directory. import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.net.ServerSocket; import java.net.Socket; import java.net.SocketTimeoutException; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Date; import javax.imageio.ImageIO; public class ServerApp extends Thread { private ServerSocket serverSocket=null; private static Socket server = null; private Date date = null; private static final String DIR_NAME = ""screenshots""; public ServerApp() throws IOException, ClassNotFoundException, Exception{ serverSocket = new ServerSocket(61000); serverSocket.setSoTimeout(180000); } public void run() { while(true) { try { server = serverSocket.accept(); date = new Date(); DateFormat dateFormat = new SimpleDateFormat(""_yyMMdd_HHmmss""); String fileName = server.getInetAddress().getHostName().replace(""."", ""-""); System.out.println(fileName); BufferedImage img=ImageIO.read(ImageIO.createImageInputStream(server.getInputStream())); ImageIO.write(img, ""png"", new File(""D:\\\\screenshots\\\\""+fileName+dateFormat.format(date)+"".png"")); System.out.println(""Image received!!!!""); //lblimg.setIcon(img); } catch(SocketTimeoutException st) { System.out.println(""Socket timed out!""+st.toString()); //createLogFile(""[stocktimeoutexception]""+stExp.getMessage()); break; } catch(IOException e) { e.printStackTrace(); break; } catch(Exception ex) { System.out.println(ex); } } } public static void main(String [] args) throws IOException, SQLException, ClassNotFoundException, Exception{ ServerApp serverApp = new ServerApp(); serverApp.createDirectory(DIR_NAME); Thread thread = new Thread(serverApp); thread.start(); } private void createDirectory(String dirName) { File newDir = new File(""D:\\\\""+dirName); if(!newDir.exists()){ boolean isCreated = newDir.mkdir(); } } }\n\nAnd this is Client code which is running on thread and after some minutes it is capturing the screenshot of user screen. package com.viremp.client; import java.awt.AWTException; import java.awt.Dimension; import java.awt.Rectangle; import java.awt.Robot; import java.awt.Toolkit; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.Socket; import java.util.Random; import javax.imageio.ImageIO; public class ClientApp implements Runnable { private static long nextTime = 0; private static ClientApp clientApp = null; private String serverName = ""192.168.100.18""; //loop back ip private int portNo = 61000; //private Socket serverSocket = null; /** * @param args * @throws InterruptedException */ public static void main(String[] args) throws InterruptedException { clientApp = new ClientApp(); clientApp.getNextFreq(); Thread thread = new Thread(clientApp); thread.start(); } private void getNextFreq() { long currentTime = System.currentTimeMillis(); Random random = new Random(); long value = random.nextInt(180000); //1800000 nextTime = currentTime + value; //return currentTime+value; } @Override public void run() { while(true){ if(nextTime < System.currentTimeMillis()){ System.out.println("" get screen shot ""); try { clientApp.sendScreen(); clientApp.getNextFreq(); } catch (AWTException e) { // TODO Auto-generated catch block System.out.println("" err""+e); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch(Exception e){ e.printStackTrace(); } } //System.out.println("" statrted ....""); } } private void sendScreen()throws AWTException, IOException { Socket serverSocket = new Socket(serverName, portNo); Toolkit toolkit = Toolkit.getDefaultToolkit(); Dimension dimensions = toolkit.getScreenSize(); Robot robot = new Robot(); // Robot class BufferedImage screenshot = robot.createScreenCapture(new Rectangle(dimensions)); ImageIO.write(screenshot,""png"",serverSocket.getOutputStream()); serverSocket.close(); } }\n\nMuhammad YawarMuhammad Yawar\n\nToolkit returns pixels based on PPI, as a result, a screenshot is not created for the entire screen when using PPI> 100% in Windows. I propose to do this:\n\nDisplayMode displayMode = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode(); Rectangle screenRectangle = new Rectangle(displayMode.getWidth(), displayMode.getHeight()); BufferedImage screenShot = new Robot().createScreenCapture(screenRectangle);\n\nMisterParserMisterParser\n\nHighly active question.""""""']",0,0.2,0.416666667
awt,Image,Is there a way to take a screenshot using Java and save it to some sort of Image?,None,None,"GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();  
GraphicsDevice[] screens = ge.getScreenDevices();       
Rectangle allScreenBounds = new Rectangle();  
for (GraphicsDevice screen : screens) {  
       Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();        
       allScreenBounds.width += screenBounds.width;  
       allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);
       allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x);
       allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y);
      } 
Robot robot = new Robot();
BufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds);
File file = new File(""C:\\Users\\Joe\\Desktop\\scr.png"");
if(!file.exists())
    file.createNewFile();
FileOutputStream fos = new FileOutputStream(file);
ImageIO.write( bufferedImage, ""png"", fos );
bufferedImage will contain a full screenshot, this was tested with three monitors","*******************usage scenario 1********************** 
----------usage scenario----------
Capture HTML Canvas as gif/jpg/png/pdf?
----------Explanation----------

----------Code Sample----------
var canvas = document.getElementById(""mycanvas"");
var img = canvas.toDataURL(""image/png"");

document.write('');
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
how to show alternate image if source image is not found? (onerror working in IE but not in mozilla)
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
HTML5 Canvas Resize (Downscale) Image High Quality?
----------Explanation----------
fiddle result : 
http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ 
fiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/
----------Code Sample----------
// scales the image by (float) scale < 1
// returns a canvas containing the scaled image.
function downScaleImage(img, scale) {
var imgCV = document.createElement('canvas');
imgCV.width = img.width;
imgCV.height = img.height;
var imgCtx = imgCV.getContext('2d');
imgCtx.drawImage(img, 0, 0);
return downScaleCanvas(imgCV, scale);
}

// scales the canvas by (float) scale < 1
// returns a new canvas containing the scaled image.
function downScaleCanvas(cv, scale) {
if (!(scale < 1) || !(scale > 0)) throw ('scale must be a positive number <1 ');
var sqScale = scale * scale; // square scale = area of source pixel within target
var sw = cv.width; // source image width
var sh = cv.height; // source image height
var tw = Math.floor(sw * scale); // target image width
var th = Math.floor(sh * scale); // target image height
var sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array
var tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array
var tX = 0, tY = 0; // rounded tx, ty
var w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y
// weight is weight of current source point within target.
// next weight is weight of current source point within next target's point.
var crossX = false; // does scaled px cross its current px right border ?
var crossY = false; // does scaled px cross its current px bottom border ?
var sBuffer = cv.getContext('2d').
getImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba
var tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb
var sR = 0, sG = 0, sB = 0; // source's current point r,g,b
/* untested !
var sA = 0; //source alpha */ 

for (sy = 0; sy < sh; sy++) {
ty = sy * scale; // y src position within target
tY = 0 | ty; // rounded : target pixel's y
yIndex = 3 * tY * tw; // line index within target array
crossY = (tY != (0 | ty + scale)); 
if (crossY) { // if pixel is crossing botton target pixel
wy = (tY + 1 - ty); // weight of point within target pixel
nwy = (ty + scale - tY - 1); // ... within y+1 target pixel
}
for (sx = 0; sx < sw; sx++, sIndex += 4) {
tx = sx * scale; // x src position within target
tX = 0 | ?tx; // rounded : target pixel's x
tIndex = yIndex + tX * 3; // target pixel index within target array
crossX = (tX != (0 | tx + scale));
if (crossX) { // if pixel is crossing target pixel's right
wx = (tX + 1 - tx); // weight of point within target pixel
nwx = (tx + scale - tX - 1); // ... within x+1 target pixel
}
sR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.
sG = sBuffer[sIndex + 1];
sB = sBuffer[sIndex + 2];

/* !! untested : handling alpha !!
sA = sBuffer[sIndex + 3];
if (!sA) continue;
if (sA != 0xFF) {
sR = (sR * sA) >> 8; // or use /256 instead ??
sG = (sG * sA) >> 8;
sB = (sB * sA) >> 8;
}
*/
if (!crossX && !crossY) { // pixel does not cross
// just add components weighted by squared scale.
tBuffer[tIndex ] += sR * sqScale;
tBuffer[tIndex + 1] += sG * sqScale;
tBuffer[tIndex + 2] += sB * sqScale;
} else if (crossX && !crossY) { // cross on X only
w = wx * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tX+1) px 
nw = nwx * scale
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
} else if (crossY && !crossX) { // cross on Y only
w = wy * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tY+1) px 
nw = nwy * scale
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
} else { // crosses both x and y : four target points involved
// add weighted component for current px
w = wx * wy;
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// for tX + 1; tY px
nw = nwx * wy;
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
// for tX ; tY + 1 px
nw = wx * nwy;
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
// for tX + 1 ; tY +1 px
nw = nwx * nwy;
tBuffer[tIndex + 3 * tw + 3] += sR * nw;
tBuffer[tIndex + 3 * tw + 4] += sG * nw;
tBuffer[tIndex + 3 * tw + 5] += sB * nw;
}
} // end for sx 
} // end for sy

// create result canvas
var resCV = document.createElement('canvas');
resCV.width = tw;
resCV.height = th;
var resCtx = resCV.getContext('2d');
var imgRes = resCtx.getImageData(0, 0, tw, th);
var tByteBuffer = imgRes.data;
// convert float32 array into a UInt8Clamped Array
var pxIndex = 0; // 
for (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {
tByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);
tByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);
tByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);
tByteBuffer[tIndex + 3] = 255;
}
// writing result to canvas.
resCtx.putImageData(imgRes, 0, 0);
return resCV;
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to check a uploaded file whether it is a image or other file?
----------Explanation----------
I'm assuming that you're running this in a servlet context. If it's affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .
----------Code Sample----------
String fileName = uploadedFile.getFileName();
String mimeType = getServletContext().getMimeType(fileName);
if (mimeType.startsWith(""image/"")) {
// It's an image.
}

try (InputStream input = uploadedFile.getInputStream()) {
try {
ImageIO.read(input).toString();
// It's an image (only BMP, GIF, JPG and PNG are recognized).
} catch (Exception e) {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
String mimeType = Magic.getMagicMatch(input, false).getMimeType();
if (mimeType.startsWith(""image/"")) {
// It's an image.
} else {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
Files.copy(input, new File(uploadFolder, fileName).toPath());
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java Switch Statement - Is ""or""/""and"" possible?
----------Explanation----------
You can use switch-case fall through by omitting the break; statement.
----------Code Sample----------
char c = /* whatever */;

switch(c) {
case 'a':
case 'A':
//get the 'A' image;
break;
case 'b':
case 'B':
//get the 'B' image;
break;
// (...)
case 'z':
case 'Z':
//get the 'Z' image;
break;
}

char c = Character.toUpperCase(/* whatever */);

switch(c) {
case 'A':
//get the 'A' image;
break;
case 'B':
//get the 'B' image;
break;
// (...)
case 'Z':
//get the 'Z' image;
break;
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How do you cache an image in Javascript
----------Explanation----------
So, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it's probably best to do it with javascript as it generally won't hold up the page load when done from javascript. You can do that like this:
----------Code Sample----------
function preloadImages(array) {
if (!preloadImages.list) {
preloadImages.list = [];
}
var list = preloadImages.list;
for (var i = 0; i < array.length; i++) {
var img = new Image();
img.onload = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = array[i];
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);

function preloadImages(array, waitForOtherResources, timeout) {
var loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;
if (!preloadImages.list) {
preloadImages.list = [];
}
if (!waitForOtherResources || document.readyState === 'complete') {
loadNow();
} else {
window.addEventListener(""load"", function() {
clearTimeout(timer);
loadNow();
});
// in case window.addEventListener doesn't get called (sometimes some resource gets stuck)
// then preload the images anyway after some timeout time
timer = setTimeout(loadNow, t);
}

function loadNow() {
if (!loaded) {
loaded = true;
for (var i = 0; i < imgs.length; i++) {
var img = new Image();
img.onload = img.onerror = img.onabort = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = imgs[i];
}
}
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);
preloadImages([""url99.jpg"", ""url98.jpg""], true);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Check if an image is loaded (no errors) in JavaScript
----------Explanation----------
Another option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here's an example of what I mean:
----------Code Sample----------
$("""")
.on('load', function() { console.log(""image loaded correctly""); })
.on('error', function() { console.log(""error loading image""); })
.attr(""src"", $(originalImage).attr(""src""))
;
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Unable to read JPEG image using ImageIO.read(File file)
----------Explanation----------
Read a CMYK image into RGB BufferedImage.
----------Code Sample----------
File f = new File(""/path/imagefile.jpg"");

//Find a suitable ImageReader
Iterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");
ImageReader reader = null;
while(readers.hasNext()) {
reader = (ImageReader)readers.next();
if(reader.canReadRaster()) {
break;
}
}

//Stream the image file (the original CMYK image)
ImageInputStream input = ImageIO.createImageInputStream(f); 
reader.setInput(input); 

//Read the image raster
Raster raster = reader.readRaster(0, null); 

//Create a new RGB image
BufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), 
BufferedImage.TYPE_4BYTE_ABGR); 

//Fill the new image with the old raster
bi.getRaster().setRect(raster);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to upload and store an image with google app engine (java)
----------Explanation----------
Declaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc
----------Code Sample----------
@Entity
public class MyImage {
@PrimaryKey
@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
private Long id;

@Persistent
private String name;

@Persistent
Blob image;

public MyImage() { }
public MyImage(String name, Blob image) {
this.name = name; 
this.image = image;
}

// JPA getters and setters and empty contructor
// ...
public Blob getImage() { return image; }
public void setImage(Blob image) { this.image = image; }
}

// Your upload handle would look like
public void doPost(HttpServletRequest req, HttpServletResponse res) {
// Get the image representation
ServletFileUpload upload = new ServletFileUpload();
FileItemIterator iter = upload.getItemIterator(req);
FileItemStream imageItem = iter.next();
InputStream imgStream = imageItem.openStream();

// construct our entity objects
Blob imageBlob = new Blob(IOUtils.toByteArray(imgStream));
MyImage myImage = new MyImage(imageItem.getName(), imageBlob);

// persist image
PersistenceManager pm = PMF.get().getPersistenceManager();
pm.makePersistent(myImage);
pm.close();

// respond to query
res.setContentType(""text/plain"");
res.getOutputStream().write(""OK!"".getBytes());
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Android Bitmap: Convert transparent pixels to a color
----------Explanation----------
If you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .
----------Code Sample----------
Bitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size
imageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want
Canvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image
canvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background
image.recycle(); // clear out old image
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Is it possible to apply CSS to half of a character?
----------Explanation----------
HTML
----------Code Sample----------
Now on GitHub as a Plugin!


enter image description here Feel free to fork and improve.



Demo | Download Zip | Half-Style.com (Redirects to GitHub)





Pure CSS for a Single Character

JavaScript used for automation accross text or multiple characters

Preserves Text Accessibility for screen readers for the blind or visually
impaired



Part1: Basic Solution


Half Style on text



Demo: http://jsfiddle.net/pd9yB/817/





This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.



Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.



Explanation for a single character:



Pure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.



For each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won't need to hard code it for every instance.



Explanation for any text:



Simply add textToHalfStyle class to the element containing the text.





CSS:



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: black; /* or transparent, any color */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    left:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: #f00;

}



Single Characters:



X

Y

Z

A





Automated:





Half-style, please.



jQuery(function($) {

    var text, chars, $el, i, output;



    // Iterate over all class occurences

    $('.textToHalfStyle').each(function(idx, el) {

        $el = $(el);

        text = $el.text();

        chars = text.split('');



        // Set the screen-reader text

        $el.html('' + text + '');



        // Reset output for appending

        output = '';



        // Iterate over all chars in the text

        for (i = 0; i < chars.length; i++) {

            // Create a styled element for each character and append to container

            output += '' + chars[i] + '';

        }



        // Write to DOM only once

        $el.append(output);

    });

});



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before { /* creates the top part */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the bottom part */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 100%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}



.halfStyle { /* base char and also the right 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the left 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    width: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



.halfStyle { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



body{

    background-color: black;

}



.textToHalfStyle{

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}



.halfStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}



jQuery(function($) {

    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;



    // Iterate over all class occurrences

    $('.textToHalfStyle').each(function(idx, halfstyle_el) {

        $halfstyle_el = $(halfstyle_el);

        halfstyle_style = $halfstyle_el.data('halfstyle');

        halfstyle_text = $halfstyle_el.text();

        halfstyle_chars = halfstyle_text.split('');



        // Set the screen-reader text

        $halfstyle_el.html('' + halfstyle_text + '');



        // Reset output for appending

        halfstyle_output = '';



        // Iterate over all chars in the text

        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {

            // Create a styled element for each character and append to container

            halfstyle_output += '' + halfstyle_chars[halfstyle_i] + '';

        }



        // Write to DOM only once

        $halfstyle_el.append(halfstyle_output);

    });

});



 /* start half-style hs-base */

 .halfStyle.hs-base {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #000; /* for demo purposes */

}

.halfStyle.hs-base:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    pointer-events: none; /* so the base char is selectable by mouse */

    overflow:hidden;

    color: #f00; /* for demo purposes */

}

 /* end half-style hs-base */



/* start half-style hs-horizontal-third */

.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}

/* end half-style hs-horizontal-third */



/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */

.halfStyle.hs-PeelingStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle.hs-PeelingStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}

/* end half-style hs-PeelingStyle */



/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/

.textToHalfStyle.hs-KevinGranger {

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle.hs-KevinGranger {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle.hs-KevinGranger:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}

/* end half-style hs-KevinGranger





    Half-style, please.






    Half-style, please.






    Half-style, please.






    Half-style, please.




*******************end of usage scenario 11*****************



*******************usage scenario 12**********************


----------usage scenario----------

Changing the image source using jQuery

----------Explanation----------

You can use jQuery's  attr()  function.  For example, if you img tag has an id attribute of 'my_image':

----------Code Sample----------





$(""#my_image"").attr(""src"",""second.jpg"");



$('#my_image').on({

    'click': function(){

        $('#my_image').attr('src','second.jpg');

    }

});



$('img').on({

    'click': function() {

         var src = ($(this).attr('src') === 'img1_on.jpg')

            ? 'img2_on.jpg'

            : 'img1_on.jpg';

         $(this).attr('src', src);

    }

});

*******************end of usage scenario 12*****************



*******************usage scenario 13**********************


----------usage scenario----------

Setting background-image using jQuery CSS property

----------Explanation----------

You probably want this (to make it like a normal CSS background-image declaration):

----------Code Sample----------

$('myOjbect').css('background-image', 'url(' + imageUrl + ')');

*******************end of usage scenario 13*****************



*******************usage scenario 14**********************


----------usage scenario----------

What is the best way to display millions of images in Java?

----------Explanation----------



----------Code Sample----------

Image tile = new Image(""tile.png"");



Group house = new Group();

house.setCache(true);

house.setCacheHint(CacheHint.SPEED);



Effect lighting = new Lighting();



for (int i = 0; i < houseWidth; i++) {

  // here is the critical part => don't do new ImageView(new Image(""tile.png""))

  ImageView tileView = new ImageView(tile));

  tileView.setEffect(lighting);

  tileView.setCache(true);

  tileView.setCacheHint(CacheHint.SPEED);



  house.add(tileView);  

}

*******************end of usage scenario 14*****************



*******************usage scenario 15**********************


----------usage scenario----------

How to flip BufferedImage in java

----------Explanation----------

Based on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .

----------Code Sample----------

import java.awt.Component;

import java.awt.Graphics2D;

import java.awt.GridLayout;

import java.awt.RenderingHints;

import java.awt.geom.AffineTransform;

import java.awt.image.BufferedImage;

import java.awt.image.ByteLookupTable;

import java.awt.image.LookupOp;

import java.awt.image.LookupTable;

import java.io.File;

import java.io.IOException;

import java.util.Arrays;



import javax.imageio.ImageIO;

import javax.swing.BorderFactory;

import javax.swing.ImageIcon;

import javax.swing.JFrame;

import javax.swing.JLabel;

import javax.swing.JPanel;

import javax.swing.SwingUtilities;



public class ImageFlipTest

{

    public static void main(String[] args)

    {

        SwingUtilities.invokeLater(new Runnable()

        {

            @Override

            public void run()

            {

                createAndShowGUI();

            }

        });

    }



    private static void createAndShowGUI()

    {

        JFrame frame = new JFrame();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(new GridLayout(1, 1));



        BufferedImage image = null;

        try

        {

            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));

        }

        catch (IOException e1)

        {

            e1.printStackTrace();

        }



        JPanel panel = new JPanel(new GridLayout(2,2));

        panel.add(createComponent(""Original"", image));

        panel.add(createComponent(""Flipped"", createFlipped(image)));

        panel.add(createComponent(""Rotated"", createRotated(image)));

        panel.add(createComponent(""Inverted"", createInverted(image)));



        frame.getContentPane().add(panel);

        frame.pack();

        frame.setLocationRelativeTo(null);

        frame.setVisible(true);

    }



    private static BufferedImage convertToARGB(BufferedImage image)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }    



    private static BufferedImage createFlipped(BufferedImage image)

    {

        AffineTransform at = new AffineTransform();

        at.concatenate(AffineTransform.getScaleInstance(1, -1));

        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));

        return createTransformed(image, at);

    }



    private static BufferedImage createRotated(BufferedImage image)

    {

        AffineTransform at = AffineTransform.getRotateInstance(

            Math.PI, image.getWidth()/2, image.getHeight()/2.0);

        return createTransformed(image, at);

    }



    private static BufferedImage createTransformed(

        BufferedImage image, AffineTransform at)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.transform(at);

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }



    private static BufferedImage createInverted(BufferedImage image)

    {

        if (image.getType() != BufferedImage.TYPE_INT_ARGB)

        {

            image = convertToARGB(image);

        }

        LookupTable lookup = new LookupTable(0, 4)

        {

            @Override

            public int[] lookupPixel(int[] src, int[] dest)

            {

                dest[0] = (int)(255-src[0]);

                dest[1] = (int)(255-src[1]);

                dest[2] = (int)(255-src[2]);

                return dest;

            }

        };

        LookupOp op = new LookupOp(lookup, new RenderingHints(null));

        return op.filter(image, null);

    }
","['""""""Share Your Experience: Is there a way to take a screenshot using Java and save it to some sort of image? Simple as the title states: Can you use only Java commands to take a screenshot and save it? Or, do I need to use an OS specific program to take the screenshot and then grab it off the clipboard? Believe it or not, you can actually use java.awt.Robot to ""create an image containing pixels read from the screen."" You can then write that image to a file on disk. I just tried it, and the whole thing ends up like:\n\nRectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()); BufferedImage capture = new Robot().createScreenCapture(screenRect); ImageIO.write(capture, ""bmp"", new File(args[0]));\n\nNOTE: This will only capture the primary monitor. See GraphicsConfiguration for multi-monitor support. David CitronDavid Citron\n\n4\n\nI wonder if this is what screen sharing applications like Elluminate (elluminate.com) use. it will be work without console if you will hardcode path to screenshot in your app. n\nRobot does not include the mouse in the screen capture. Is there a similar function which does the exact same thing, but DOES include the mouse? is there a way to capture the mouse cursor as well ?\n\nI never liked using Robot, so I made my own simple method for making screenshots of JFrame objects:\n\npublic static final void makeScreenshot(JFrame argFrame) { Rectangle rec = argFrame.getBounds(); BufferedImage bufferedImage = new BufferedImage(rec.width, rec.height, BufferedImage.TYPE_INT_ARGB); argFrame.paint(bufferedImage.getGraphics()); try { // Create temp file File temp = File.createTempFile(""screenshot"", "".png""); // Use the ImageIO API to write the bufferedImage to a temporary file ImageIO.write(bufferedImage, ""png"", temp); // Delete temp file when program exits temp.deleteOnExit(); } catch (IOException ioe) { ioe.printStackTrace(); } }\n\n1,DejanLekicDejanLekic\n\n6\n\nAny reason for why you\'re not liking Robot? \n\nThink of it simply as a matter of taste. It looks like this should have the advantage of working even if the target window is obscured before the screenshot is taken. â Brad Mace Jul 28, 2014 at 14:33\n\nOn the other hand, this gets only the contents of the window, whereas with Robot you can also get the window\'s frame and titlebar. \n\nFor HiDPI (Mac retina) displays this creates screenshots at half resolution. To fix that bufferedImage.getGraphics().scale(2, 2) before the argFrame.paint(bufferedImage.getGraphics()) call and use new BufferedImage(rec.width*2, rec.height*2, BufferedImage.TYPE_INT_ARGB) to create the BufferedImage\n\nIf you\'d like to capture all monitors, you can use the following code:\n\nGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] screens = ge.getScreenDevices(); Rectangle allScreenBounds = new Rectangle(); for (GraphicsDevice screen : screens) { Rectangle screenBounds = screen.getDefaultConfiguration().getBounds(); allScreenBounds.width += screenBounds.width; allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height); } Robot robot = new Robot(); BufferedImage screenShot = robot.createScreenCapture(allScreenBounds);\n\n7,2\n\nwould be better to calculate it this way\n\nThat answer solved my problem, thank you for linking it here! public void captureScreen(String fileName) throws Exception { Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize(); Rectangle screenRectangle = new Rectangle(screenSize); Robot robot = new Robot(); BufferedImage image = robot.createScreenCapture(screenRectangle); ImageIO.write(image, ""png"", new File(fileName)); }\n\nuser2503881user2503881\n\nGraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment(); GraphicsDevice[] screens = ge.getScreenDevices(); Rectangle allScreenBounds = new Rectangle(); for (GraphicsDevice screen : screens) { Rectangle screenBounds = screen.getDefaultConfiguration().getBounds(); allScreenBounds.width += screenBounds.width; allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height); allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x); allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y); } Robot robot = new Robot(); BufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds); File file = new File(""C:\\\\Users\\\\Joe\\\\Desktop\\\\scr.png""); if(!file.exists()) file.createNewFile(); FileOutputStream fos = new FileOutputStream(file); ImageIO.write( bufferedImage, ""png"", fos );\n\nbufferedImage will contain a full screenshot, this was tested with three monitors\n\njoe pelletierjoe pelletier\n\nimport java.awt.Color; import java.awt.Dimension; import java.awt.Rectangle; import java.awt.Robot; import java.awt.Toolkit; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import java.awt.image.BufferedImage; import java.io.File; import javax.imageio.ImageIO; import javax.swing.*; public class HelloWorldFrame extends JFrame implements ActionListener { JButton b; public HelloWorldFrame() { this.setVisible(true); this.setLayout(null); b = new JButton(""Click Here""); b.setBounds(380, 290, 120, 60); b.setBackground(Color.red); b.setVisible(true); b.addActionListener(this); add(b); setSize(1000, 700); } public void actionPerformed(ActionEvent e) { if (e.getSource() == b) { this.dispose(); try { Thread.sleep(1000); Toolkit tk = Toolkit.getDefaultToolkit(); Dimension d = tk.getScreenSize(); Rectangle rec = new Rectangle(0, 0, d.width, d.height); Robot ro = new Robot(); BufferedImage img = ro.createScreenCapture(rec); File f = new File(""myimage.jpg"");//set appropriate path ImageIO.write(img, ""jpg"", f); } catch (Exception ex) { System.out.println(ex.getMessage()); } } } public static void main(String[] args) { HelloWorldFrame obj = new HelloWorldFrame(); } }\n\nNilesh JadavNilesh Jadav\n\n1\n\nI did a benchmark and this one is the slowest, also has the greatest loss and biggest file size. Sorry,\n\nâ Liam Larsen Jul 1, 2017 at 8:47\n\nYou can use java.awt.Robot to achieve this task. below is the code of server, which saves the captured screenshot as image in your Directory. import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import java.net.ServerSocket; import java.net.Socket; import java.net.SocketTimeoutException; import java.sql.SQLException; import java.text.DateFormat; import java.text.SimpleDateFormat; import java.util.Date; import javax.imageio.ImageIO; public class ServerApp extends Thread { private ServerSocket serverSocket=null; private static Socket server = null; private Date date = null; private static final String DIR_NAME = ""screenshots""; public ServerApp() throws IOException, ClassNotFoundException, Exception{ serverSocket = new ServerSocket(61000); serverSocket.setSoTimeout(180000); } public void run() { while(true) { try { server = serverSocket.accept(); date = new Date(); DateFormat dateFormat = new SimpleDateFormat(""_yyMMdd_HHmmss""); String fileName = server.getInetAddress().getHostName().replace(""."", ""-""); System.out.println(fileName); BufferedImage img=ImageIO.read(ImageIO.createImageInputStream(server.getInputStream())); ImageIO.write(img, ""png"", new File(""D:\\\\screenshots\\\\""+fileName+dateFormat.format(date)+"".png"")); System.out.println(""Image received!!!!""); //lblimg.setIcon(img); } catch(SocketTimeoutException st) { System.out.println(""Socket timed out!""+st.toString()); //createLogFile(""[stocktimeoutexception]""+stExp.getMessage()); break; } catch(IOException e) { e.printStackTrace(); break; } catch(Exception ex) { System.out.println(ex); } } } public static void main(String [] args) throws IOException, SQLException, ClassNotFoundException, Exception{ ServerApp serverApp = new ServerApp(); serverApp.createDirectory(DIR_NAME); Thread thread = new Thread(serverApp); thread.start(); } private void createDirectory(String dirName) { File newDir = new File(""D:\\\\""+dirName); if(!newDir.exists()){ boolean isCreated = newDir.mkdir(); } } }\n\nAnd this is Client code which is running on thread and after some minutes it is capturing the screenshot of user screen. package com.viremp.client; import java.awt.AWTException; import java.awt.Dimension; import java.awt.Rectangle; import java.awt.Robot; import java.awt.Toolkit; import java.awt.image.BufferedImage; import java.io.IOException; import java.net.Socket; import java.util.Random; import javax.imageio.ImageIO; public class ClientApp implements Runnable { private static long nextTime = 0; private static ClientApp clientApp = null; private String serverName = ""192.168.100.18""; //loop back ip private int portNo = 61000; //private Socket serverSocket = null; /** * @param args * @throws InterruptedException */ public static void main(String[] args) throws InterruptedException { clientApp = new ClientApp(); clientApp.getNextFreq(); Thread thread = new Thread(clientApp); thread.start(); } private void getNextFreq() { long currentTime = System.currentTimeMillis(); Random random = new Random(); long value = random.nextInt(180000); //1800000 nextTime = currentTime + value; //return currentTime+value; } @Override public void run() { while(true){ if(nextTime < System.currentTimeMillis()){ System.out.println("" get screen shot ""); try { clientApp.sendScreen(); clientApp.getNextFreq(); } catch (AWTException e) { // TODO Auto-generated catch block System.out.println("" err""+e); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } catch(Exception e){ e.printStackTrace(); } } //System.out.println("" statrted ....""); } } private void sendScreen()throws AWTException, IOException { Socket serverSocket = new Socket(serverName, portNo); Toolkit toolkit = Toolkit.getDefaultToolkit(); Dimension dimensions = toolkit.getScreenSize(); Robot robot = new Robot(); // Robot class BufferedImage screenshot = robot.createScreenCapture(new Rectangle(dimensions)); ImageIO.write(screenshot,""png"",serverSocket.getOutputStream()); serverSocket.close(); } }\n\nMuhammad YawarMuhammad Yawar\n\nToolkit returns pixels based on PPI, as a result, a screenshot is not created for the entire screen when using PPI> 100% in Windows. I propose to do this:\n\nDisplayMode displayMode = GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()[0].getDisplayMode(); Rectangle screenRectangle = new Rectangle(displayMode.getWidth(), displayMode.getHeight()); BufferedImage screenShot = new Robot().createScreenCapture(screenRectangle);\n\n""""""']",0,0.6,0.5
awt,Image,"Java- Write Text onto Image, then Write to Output File",None,None,"It's easy, just get the Graphics object from the image and draw your string onto the image. This example (and output image) is doing that:

public static void main(String[] args) throws Exception {
    final BufferedImage image = ImageIO.read(new URL(
        ""http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png""));

    Graphics g = image.getGraphics();
    g.setFont(g.getFont().deriveFont(30f));
    g.drawString(""Hello World!"", 100, 100);
    g.dispose();

    ImageIO.write(image, ""png"", new File(""test.png""));
}","*******************usage scenario 1********************** 
----------usage scenario----------
Capture HTML Canvas as gif/jpg/png/pdf?
----------Explanation----------

----------Code Sample----------
var canvas = document.getElementById(""mycanvas"");
var img = canvas.toDataURL(""image/png"");

document.write('');
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
how to show alternate image if source image is not found? (onerror working in IE but not in mozilla)
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
HTML5 Canvas Resize (Downscale) Image High Quality?
----------Explanation----------
fiddle result : 
http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ 
fiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/
----------Code Sample----------
// scales the image by (float) scale < 1
// returns a canvas containing the scaled image.
function downScaleImage(img, scale) {
var imgCV = document.createElement('canvas');
imgCV.width = img.width;
imgCV.height = img.height;
var imgCtx = imgCV.getContext('2d');
imgCtx.drawImage(img, 0, 0);
return downScaleCanvas(imgCV, scale);
}

// scales the canvas by (float) scale < 1
// returns a new canvas containing the scaled image.
function downScaleCanvas(cv, scale) {
if (!(scale < 1) || !(scale > 0)) throw ('scale must be a positive number <1 ');
var sqScale = scale * scale; // square scale = area of source pixel within target
var sw = cv.width; // source image width
var sh = cv.height; // source image height
var tw = Math.floor(sw * scale); // target image width
var th = Math.floor(sh * scale); // target image height
var sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array
var tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array
var tX = 0, tY = 0; // rounded tx, ty
var w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y
// weight is weight of current source point within target.
// next weight is weight of current source point within next target's point.
var crossX = false; // does scaled px cross its current px right border ?
var crossY = false; // does scaled px cross its current px bottom border ?
var sBuffer = cv.getContext('2d').
getImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba
var tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb
var sR = 0, sG = 0, sB = 0; // source's current point r,g,b
/* untested !
var sA = 0; //source alpha */ 

for (sy = 0; sy < sh; sy++) {
ty = sy * scale; // y src position within target
tY = 0 | ty; // rounded : target pixel's y
yIndex = 3 * tY * tw; // line index within target array
crossY = (tY != (0 | ty + scale)); 
if (crossY) { // if pixel is crossing botton target pixel
wy = (tY + 1 - ty); // weight of point within target pixel
nwy = (ty + scale - tY - 1); // ... within y+1 target pixel
}
for (sx = 0; sx < sw; sx++, sIndex += 4) {
tx = sx * scale; // x src position within target
tX = 0 | ?tx; // rounded : target pixel's x
tIndex = yIndex + tX * 3; // target pixel index within target array
crossX = (tX != (0 | tx + scale));
if (crossX) { // if pixel is crossing target pixel's right
wx = (tX + 1 - tx); // weight of point within target pixel
nwx = (tx + scale - tX - 1); // ... within x+1 target pixel
}
sR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.
sG = sBuffer[sIndex + 1];
sB = sBuffer[sIndex + 2];

/* !! untested : handling alpha !!
sA = sBuffer[sIndex + 3];
if (!sA) continue;
if (sA != 0xFF) {
sR = (sR * sA) >> 8; // or use /256 instead ??
sG = (sG * sA) >> 8;
sB = (sB * sA) >> 8;
}
*/
if (!crossX && !crossY) { // pixel does not cross
// just add components weighted by squared scale.
tBuffer[tIndex ] += sR * sqScale;
tBuffer[tIndex + 1] += sG * sqScale;
tBuffer[tIndex + 2] += sB * sqScale;
} else if (crossX && !crossY) { // cross on X only
w = wx * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tX+1) px 
nw = nwx * scale
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
} else if (crossY && !crossX) { // cross on Y only
w = wy * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tY+1) px 
nw = nwy * scale
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
} else { // crosses both x and y : four target points involved
// add weighted component for current px
w = wx * wy;
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// for tX + 1; tY px
nw = nwx * wy;
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
// for tX ; tY + 1 px
nw = wx * nwy;
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
// for tX + 1 ; tY +1 px
nw = nwx * nwy;
tBuffer[tIndex + 3 * tw + 3] += sR * nw;
tBuffer[tIndex + 3 * tw + 4] += sG * nw;
tBuffer[tIndex + 3 * tw + 5] += sB * nw;
}
} // end for sx 
} // end for sy

// create result canvas
var resCV = document.createElement('canvas');
resCV.width = tw;
resCV.height = th;
var resCtx = resCV.getContext('2d');
var imgRes = resCtx.getImageData(0, 0, tw, th);
var tByteBuffer = imgRes.data;
// convert float32 array into a UInt8Clamped Array
var pxIndex = 0; // 
for (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {
tByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);
tByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);
tByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);
tByteBuffer[tIndex + 3] = 255;
}
// writing result to canvas.
resCtx.putImageData(imgRes, 0, 0);
return resCV;
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to check a uploaded file whether it is a image or other file?
----------Explanation----------
I'm assuming that you're running this in a servlet context. If it's affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .
----------Code Sample----------
String fileName = uploadedFile.getFileName();
String mimeType = getServletContext().getMimeType(fileName);
if (mimeType.startsWith(""image/"")) {
// It's an image.
}

try (InputStream input = uploadedFile.getInputStream()) {
try {
ImageIO.read(input).toString();
// It's an image (only BMP, GIF, JPG and PNG are recognized).
} catch (Exception e) {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
String mimeType = Magic.getMagicMatch(input, false).getMimeType();
if (mimeType.startsWith(""image/"")) {
// It's an image.
} else {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
Files.copy(input, new File(uploadFolder, fileName).toPath());
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java Switch Statement - Is ""or""/""and"" possible?
----------Explanation----------
You can use switch-case fall through by omitting the break; statement.
----------Code Sample----------
char c = /* whatever */;

switch(c) {
case 'a':
case 'A':
//get the 'A' image;
break;
case 'b':
case 'B':
//get the 'B' image;
break;
// (...)
case 'z':
case 'Z':
//get the 'Z' image;
break;
}

char c = Character.toUpperCase(/* whatever */);

switch(c) {
case 'A':
//get the 'A' image;
break;
case 'B':
//get the 'B' image;
break;
// (...)
case 'Z':
//get the 'Z' image;
break;
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How do you cache an image in Javascript
----------Explanation----------
So, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it's probably best to do it with javascript as it generally won't hold up the page load when done from javascript. You can do that like this:
----------Code Sample----------
function preloadImages(array) {
if (!preloadImages.list) {
preloadImages.list = [];
}
var list = preloadImages.list;
for (var i = 0; i < array.length; i++) {
var img = new Image();
img.onload = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = array[i];
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);

function preloadImages(array, waitForOtherResources, timeout) {
var loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;
if (!preloadImages.list) {
preloadImages.list = [];
}
if (!waitForOtherResources || document.readyState === 'complete') {
loadNow();
} else {
window.addEventListener(""load"", function() {
clearTimeout(timer);
loadNow();
});
// in case window.addEventListener doesn't get called (sometimes some resource gets stuck)
// then preload the images anyway after some timeout time
timer = setTimeout(loadNow, t);
}

function loadNow() {
if (!loaded) {
loaded = true;
for (var i = 0; i < imgs.length; i++) {
var img = new Image();
img.onload = img.onerror = img.onabort = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = imgs[i];
}
}
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);
preloadImages([""url99.jpg"", ""url98.jpg""], true);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Check if an image is loaded (no errors) in JavaScript
----------Explanation----------
Another option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here's an example of what I mean:
----------Code Sample----------
$("""")
.on('load', function() { console.log(""image loaded correctly""); })
.on('error', function() { console.log(""error loading image""); })
.attr(""src"", $(originalImage).attr(""src""))
;
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Unable to read JPEG image using ImageIO.read(File file)
----------Explanation----------
Read a CMYK image into RGB BufferedImage.
----------Code Sample----------
File f = new File(""/path/imagefile.jpg"");

//Find a suitable ImageReader
Iterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");
ImageReader reader = null;
while(readers.hasNext()) {
reader = (ImageReader)readers.next();
if(reader.canReadRaster()) {
break;
}
}

//Stream the image file (the original CMYK image)
ImageInputStream input = ImageIO.createImageInputStream(f); 
reader.setInput(input); 

//Read the image raster
Raster raster = reader.readRaster(0, null); 

//Create a new RGB image
BufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), 
BufferedImage.TYPE_4BYTE_ABGR); 

//Fill the new image with the old raster
bi.getRaster().setRect(raster);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to upload and store an image with google app engine (java)
----------Explanation----------
Declaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc
----------Code Sample----------
@Entity
public class MyImage {
@PrimaryKey
@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
private Long id;

@Persistent
private String name;

@Persistent
Blob image;

public MyImage() { }
public MyImage(String name, Blob image) {
this.name = name; 
this.image = image;
}

// JPA getters and setters and empty contructor
// ...
public Blob getImage() { return image; }
public void setImage(Blob image) { this.image = image; }
}

// Your upload handle would look like
public void doPost(HttpServletRequest req, HttpServletResponse res) {
// Get the image representation
ServletFileUpload upload = new ServletFileUpload();
FileItemIterator iter = upload.getItemIterator(req);
FileItemStream imageItem = iter.next();
InputStream imgStream = imageItem.openStream();

// construct our entity objects
Blob imageBlob = new Blob(IOUtils.toByteArray(imgStream));
MyImage myImage = new MyImage(imageItem.getName(), imageBlob);

// persist image
PersistenceManager pm = PMF.get().getPersistenceManager();
pm.makePersistent(myImage);
pm.close();

// respond to query
res.setContentType(""text/plain"");
res.getOutputStream().write(""OK!"".getBytes());
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Android Bitmap: Convert transparent pixels to a color
----------Explanation----------
If you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .
----------Code Sample----------
Bitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size
imageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want
Canvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image
canvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background
image.recycle(); // clear out old image
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Is it possible to apply CSS to half of a character?
----------Explanation----------
HTML
----------Code Sample----------
Now on GitHub as a Plugin!


enter image description here Feel free to fork and improve.



Demo | Download Zip | Half-Style.com (Redirects to GitHub)





Pure CSS for a Single Character

JavaScript used for automation accross text or multiple characters

Preserves Text Accessibility for screen readers for the blind or visually
impaired



Part1: Basic Solution


Half Style on text



Demo: http://jsfiddle.net/pd9yB/817/





This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.



Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.



Explanation for a single character:



Pure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.



For each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won't need to hard code it for every instance.



Explanation for any text:



Simply add textToHalfStyle class to the element containing the text.





CSS:



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: black; /* or transparent, any color */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    left:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: #f00;

}



Single Characters:



X

Y

Z

A





Automated:





Half-style, please.



jQuery(function($) {

    var text, chars, $el, i, output;



    // Iterate over all class occurences

    $('.textToHalfStyle').each(function(idx, el) {

        $el = $(el);

        text = $el.text();

        chars = text.split('');



        // Set the screen-reader text

        $el.html('' + text + '');



        // Reset output for appending

        output = '';



        // Iterate over all chars in the text

        for (i = 0; i < chars.length; i++) {

            // Create a styled element for each character and append to container

            output += '' + chars[i] + '';

        }



        // Write to DOM only once

        $el.append(output);

    });

});



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before { /* creates the top part */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the bottom part */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 100%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}



.halfStyle { /* base char and also the right 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the left 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    width: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



.halfStyle { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



body{

    background-color: black;

}



.textToHalfStyle{

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}



.halfStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}



jQuery(function($) {

    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;



    // Iterate over all class occurrences

    $('.textToHalfStyle').each(function(idx, halfstyle_el) {

        $halfstyle_el = $(halfstyle_el);

        halfstyle_style = $halfstyle_el.data('halfstyle');

        halfstyle_text = $halfstyle_el.text();

        halfstyle_chars = halfstyle_text.split('');



        // Set the screen-reader text

        $halfstyle_el.html('' + halfstyle_text + '');



        // Reset output for appending

        halfstyle_output = '';



        // Iterate over all chars in the text

        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {

            // Create a styled element for each character and append to container

            halfstyle_output += '' + halfstyle_chars[halfstyle_i] + '';

        }



        // Write to DOM only once

        $halfstyle_el.append(halfstyle_output);

    });

});



 /* start half-style hs-base */

 .halfStyle.hs-base {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #000; /* for demo purposes */

}

.halfStyle.hs-base:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    pointer-events: none; /* so the base char is selectable by mouse */

    overflow:hidden;

    color: #f00; /* for demo purposes */

}

 /* end half-style hs-base */



/* start half-style hs-horizontal-third */

.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}

/* end half-style hs-horizontal-third */



/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */

.halfStyle.hs-PeelingStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle.hs-PeelingStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}

/* end half-style hs-PeelingStyle */



/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/

.textToHalfStyle.hs-KevinGranger {

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle.hs-KevinGranger {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle.hs-KevinGranger:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}

/* end half-style hs-KevinGranger





    Half-style, please.






    Half-style, please.






    Half-style, please.






    Half-style, please.




*******************end of usage scenario 11*****************



*******************usage scenario 12**********************


----------usage scenario----------

Changing the image source using jQuery

----------Explanation----------

You can use jQuery's  attr()  function.  For example, if you img tag has an id attribute of 'my_image':

----------Code Sample----------





$(""#my_image"").attr(""src"",""second.jpg"");



$('#my_image').on({

    'click': function(){

        $('#my_image').attr('src','second.jpg');

    }

});



$('img').on({

    'click': function() {

         var src = ($(this).attr('src') === 'img1_on.jpg')

            ? 'img2_on.jpg'

            : 'img1_on.jpg';

         $(this).attr('src', src);

    }

});

*******************end of usage scenario 12*****************



*******************usage scenario 13**********************


----------usage scenario----------

Setting background-image using jQuery CSS property

----------Explanation----------

You probably want this (to make it like a normal CSS background-image declaration):

----------Code Sample----------

$('myOjbect').css('background-image', 'url(' + imageUrl + ')');

*******************end of usage scenario 13*****************



*******************usage scenario 14**********************


----------usage scenario----------

What is the best way to display millions of images in Java?

----------Explanation----------



----------Code Sample----------

Image tile = new Image(""tile.png"");



Group house = new Group();

house.setCache(true);

house.setCacheHint(CacheHint.SPEED);



Effect lighting = new Lighting();



for (int i = 0; i < houseWidth; i++) {

  // here is the critical part => don't do new ImageView(new Image(""tile.png""))

  ImageView tileView = new ImageView(tile));

  tileView.setEffect(lighting);

  tileView.setCache(true);

  tileView.setCacheHint(CacheHint.SPEED);



  house.add(tileView);  

}

*******************end of usage scenario 14*****************



*******************usage scenario 15**********************


----------usage scenario----------

How to flip BufferedImage in java

----------Explanation----------

Based on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .

----------Code Sample----------

import java.awt.Component;

import java.awt.Graphics2D;

import java.awt.GridLayout;

import java.awt.RenderingHints;

import java.awt.geom.AffineTransform;

import java.awt.image.BufferedImage;

import java.awt.image.ByteLookupTable;

import java.awt.image.LookupOp;

import java.awt.image.LookupTable;

import java.io.File;

import java.io.IOException;

import java.util.Arrays;



import javax.imageio.ImageIO;

import javax.swing.BorderFactory;

import javax.swing.ImageIcon;

import javax.swing.JFrame;

import javax.swing.JLabel;

import javax.swing.JPanel;

import javax.swing.SwingUtilities;



public class ImageFlipTest

{

    public static void main(String[] args)

    {

        SwingUtilities.invokeLater(new Runnable()

        {

            @Override

            public void run()

            {

                createAndShowGUI();

            }

        });

    }



    private static void createAndShowGUI()

    {

        JFrame frame = new JFrame();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(new GridLayout(1, 1));



        BufferedImage image = null;

        try

        {

            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));

        }

        catch (IOException e1)

        {

            e1.printStackTrace();

        }



        JPanel panel = new JPanel(new GridLayout(2,2));

        panel.add(createComponent(""Original"", image));

        panel.add(createComponent(""Flipped"", createFlipped(image)));

        panel.add(createComponent(""Rotated"", createRotated(image)));

        panel.add(createComponent(""Inverted"", createInverted(image)));



        frame.getContentPane().add(panel);

        frame.pack();

        frame.setLocationRelativeTo(null);

        frame.setVisible(true);

    }



    private static BufferedImage convertToARGB(BufferedImage image)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }    



    private static BufferedImage createFlipped(BufferedImage image)

    {

        AffineTransform at = new AffineTransform();

        at.concatenate(AffineTransform.getScaleInstance(1, -1));

        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));

        return createTransformed(image, at);

    }



    private static BufferedImage createRotated(BufferedImage image)

    {

        AffineTransform at = AffineTransform.getRotateInstance(

            Math.PI, image.getWidth()/2, image.getHeight()/2.0);

        return createTransformed(image, at);

    }



    private static BufferedImage createTransformed(

        BufferedImage image, AffineTransform at)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.transform(at);

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }



    private static BufferedImage createInverted(BufferedImage image)

    {

        if (image.getType() != BufferedImage.TYPE_INT_ARGB)

        {

            image = convertToARGB(image);

        }

        LookupTable lookup = new LookupTable(0, 4)

        {

            @Override

            public int[] lookupPixel(int[] src, int[] dest)

            {

                dest[0] = (int)(255-src[0]);

                dest[1] = (int)(255-src[1]);

                dest[2] = (int)(255-src[2]);

                return dest;

            }

        };

        LookupOp op = new LookupOp(lookup, new RenderingHints(null));

        return op.filter(image, null);

    }
","['""""""Write text onto image in Java\n\nIs there a Java library to write text to images, same as PHP\'s GD library. TheGuyNextDoorTheGuyNextDoor\n\n7,import java.awt.Color; import java.awt.Font; import java.awt.Graphics; import java.awt.image.BufferedImage; import java.io.File; import java.io.IOException; import javax.imageio.ImageIO; public class Testing { public static void main(String arg[]) throws IOException { String key = ""Sample""; BufferedImage bufferedImage = new BufferedImage(170, 30, BufferedImage.TYPE_INT_RGB); Graphics graphics = bufferedImage.getGraphics(); graphics.setColor(Color.LIGHT_GRAY); graphics.fillRect(0, 0, 200, 50); graphics.setColor(Color.BLACK); graphics.setFont(new Font(""Arial Black"", Font.BOLD, 20)); graphics.drawString(key, 10, 25); ImageIO.write(bufferedImage, ""jpg"", new File( ""C:/Users/admin/desktop/image.jpg"")); System.out.println(""Image Created""); } }\n\nPerumal RamasamyPerumal Ramasamy\n\nSure. First load the image, probably using a method of ImageIO.""""""', '""""""Thanks for any help! 3\n\nwere the size of your console and the size of your JTeaxtArea the same? if not, then probably its because you need \\r\\n for windows new line\n\nEclipse Console and JTextArea is 750x400 px. If I have to add \\r\\n, how do I do for input from JTextArea? Is it possible to identify line breaks? Text from a JTextArea will have \\n characters for newlines, regardless of the platform it is running on. You will want to replace those characters with the platform-specific newline as you write it to the file (for Windows, this is \\r\\n, as others have mentioned). I think the best way to do that is to wrap the text into a BufferedReader, which can be used to iterate over the lines, and then use a PrintWriter to write each line out to a file using the platform-specific newline. There is a shorter solution involving string.replace(...) (see comment by Unbeli), but it is slower and requires more memory. Here is my solution - now made even simpler thanks to new features in Java 8:\n\npublic static void main(String[] args) throws IOException { String string = ""This is lengthy string that contains many words. So\\nI am wrapping it.""; System.out.println(string); File file = new File(""C:/Users/User/Desktop/text.txt""); writeToFile(string, file); } private static void writeToFile(String string, File file) throws IOException { try ( BufferedReader reader = new BufferedReader(new StringReader(string)); PrintWriter writer = new PrintWriter(new FileWriter(file)); ) { reader.lines().forEach(line -> writer.println(line)); } }\n\n9,3\n\nuhm, stacking all these readers to do simple replacement? string.replace(""\\\\n"", System.getProperty(""line.separator""));\n\n@unbeli, Replacement is quick if the String is short, for very lengthier strings, the above approach holds good. I have tested it though. @unbeli - String.replace() requires creating a new object, which temporarily doubles the memory requirement, so it\'s not ideal for large amounts of data. Though granted, with the data coming from a JTextArea, I can\'t imagine the string would be terribly large, so it would probably work just as well for the most part\n\nâ Kevin K Feb 8, 2012 at 20:46\n\nPlease see the following question on how to appropriately handle newlines. How do I get a platform-dependent new line character? Basically you want to use\n\nString newLineChar = System.getProperty(""line.separator"");\n\nand then use the newLineChar instead of ""\\n""\n\n2,I just ran your program, and adding a carriage return (\\r) before your newline (\\n) did the trick for me. If you want to get a system independent line separator, one can be found in the system propery line.separator\n\nString separator = System.getProperty(""line.separator""); String string = ""This is lengthy string that contains many words. So"" + separator + ""I am wrapping it."";\n\nnicholas.hauschildnicholas.hauschild\n\n2\n\nI am getting String from JTextArea, do I have to manually identify the line breaks and insert line.separator? Is that the only way?""""""']",0,0.333333333,0.291666667
sql,Connection,How to connect SQLite with Java?,None,"Most common way to construct:
String url = É;
Connection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");
Based on 78 examples","connection = DriverManager.getConnection(""jdbc:sqlite:D:\\testdb.db"");
Instead of this put

connection = DriverManager.getConnection(""jdbc:sqlite:D:\\testdb"");",None,"['""""""How to connect SQLite with Java? I am using one simple code to access the SQLite database from Java application . My code is\n\nimport java.sql.Connection; import java.sql.DriverManager; import java.sql.ResultSet; import java.sql.Statement; public class ConnectSQLite { public static void main(String[] args) { Connection connection = null; ResultSet resultSet = null; Statement statement = null; try { Class.forName(""org.sqlite.JDBC""); connection = DriverManager.getConnection(""jdbc:sqlite:D:\\\\testdb.db""); statement = connection.createStatement(); resultSet = statement .executeQuery(""SELECT EMPNAME FROM EMPLOYEEDETAILS""); while (resultSet.next()) { System.out.println(""EMPLOYEE NAME:"" + resultSet.getString(""EMPNAME"")); } } catch (Exception e) { e.printStackTrace(); } finally { try { resultSet.close(); statement.close(); connection.close(); } catch (Exception e) { e.printStackTrace(); } } } }\n\nBut this code gives one exception like\n\njava.lang.ClassNotFoundException: org.sqlite.JDBC\n\nHow can I slove this,please help me. 9,RajapandianRajapandian\n\n9,1\n\nI guess you are not putting SQLite jar in classpath\n\n\n\nYou need to have a SQLite JDBC driver in your classpath. Taro L. Saito (xerial) forked the Zentus project and now maintains it under the name sqlite-jdbc. It bundles the native drivers for major platforms so you don\'t need to configure them separately.""""""']",0,0.5,1
awt,Image,Resize image while keeping aspect ratio in Java,None,None,"I use these two methods to scale images, where max is the bigger dimension of your destination image. For 100x100 image it will be 100, for 200x300 image it will be 300.

    public static BufferedImage scale(InputStream is, int max) {
    Image image = null;
    try {
        image = ImageIO.read(is);
    } catch (IOException e) {
        e.printStackTrace();
    }
    int width = image.getWidth(null);
    int height = image.getHeight(null);
    double dWidth = 0;
    double dHeight = 0;
    if (width == height) {
        dWidth = max;
        dHeight = max;
    } 
    else if (width > height) {
        dWidth = max;
        dHeight = ((double) height / (double) width) * max;
    }
    else {
        dHeight = max;
        dWidth = ((double) width / (double) height) * max;
    }
    image = image.getScaledInstance((int) dWidth, (int) dHeight, Image.SCALE_SMOOTH);
    BufferedImage bImage = toBufferedImage(image);
    return bImage;

}

public static BufferedImage toBufferedImage(Image img)
{
    if (img instanceof BufferedImage)
    {
        return (BufferedImage) img;
    }

    BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);

    Graphics2D bGr = bimage.createGraphics();
    bGr.drawImage(img, 0, 0, null);
    bGr.dispose();

    return bimage;
}","*******************usage scenario 1********************** 
----------usage scenario----------
Capture HTML Canvas as gif/jpg/png/pdf?
----------Explanation----------

----------Code Sample----------
var canvas = document.getElementById(""mycanvas"");
var img = canvas.toDataURL(""image/png"");

document.write('');
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
how to show alternate image if source image is not found? (onerror working in IE but not in mozilla)
----------Explanation----------

----------Code Sample----------



*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
HTML5 Canvas Resize (Downscale) Image High Quality?
----------Explanation----------
fiddle result : 
http://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ 
fiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/
----------Code Sample----------
// scales the image by (float) scale < 1
// returns a canvas containing the scaled image.
function downScaleImage(img, scale) {
var imgCV = document.createElement('canvas');
imgCV.width = img.width;
imgCV.height = img.height;
var imgCtx = imgCV.getContext('2d');
imgCtx.drawImage(img, 0, 0);
return downScaleCanvas(imgCV, scale);
}

// scales the canvas by (float) scale < 1
// returns a new canvas containing the scaled image.
function downScaleCanvas(cv, scale) {
if (!(scale < 1) || !(scale > 0)) throw ('scale must be a positive number <1 ');
var sqScale = scale * scale; // square scale = area of source pixel within target
var sw = cv.width; // source image width
var sh = cv.height; // source image height
var tw = Math.floor(sw * scale); // target image width
var th = Math.floor(sh * scale); // target image height
var sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array
var tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array
var tX = 0, tY = 0; // rounded tx, ty
var w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y
// weight is weight of current source point within target.
// next weight is weight of current source point within next target's point.
var crossX = false; // does scaled px cross its current px right border ?
var crossY = false; // does scaled px cross its current px bottom border ?
var sBuffer = cv.getContext('2d').
getImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba
var tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb
var sR = 0, sG = 0, sB = 0; // source's current point r,g,b
/* untested !
var sA = 0; //source alpha */ 

for (sy = 0; sy < sh; sy++) {
ty = sy * scale; // y src position within target
tY = 0 | ty; // rounded : target pixel's y
yIndex = 3 * tY * tw; // line index within target array
crossY = (tY != (0 | ty + scale)); 
if (crossY) { // if pixel is crossing botton target pixel
wy = (tY + 1 - ty); // weight of point within target pixel
nwy = (ty + scale - tY - 1); // ... within y+1 target pixel
}
for (sx = 0; sx < sw; sx++, sIndex += 4) {
tx = sx * scale; // x src position within target
tX = 0 | ?tx; // rounded : target pixel's x
tIndex = yIndex + tX * 3; // target pixel index within target array
crossX = (tX != (0 | tx + scale));
if (crossX) { // if pixel is crossing target pixel's right
wx = (tX + 1 - tx); // weight of point within target pixel
nwx = (tx + scale - tX - 1); // ... within x+1 target pixel
}
sR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.
sG = sBuffer[sIndex + 1];
sB = sBuffer[sIndex + 2];

/* !! untested : handling alpha !!
sA = sBuffer[sIndex + 3];
if (!sA) continue;
if (sA != 0xFF) {
sR = (sR * sA) >> 8; // or use /256 instead ??
sG = (sG * sA) >> 8;
sB = (sB * sA) >> 8;
}
*/
if (!crossX && !crossY) { // pixel does not cross
// just add components weighted by squared scale.
tBuffer[tIndex ] += sR * sqScale;
tBuffer[tIndex + 1] += sG * sqScale;
tBuffer[tIndex + 2] += sB * sqScale;
} else if (crossX && !crossY) { // cross on X only
w = wx * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tX+1) px 
nw = nwx * scale
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
} else if (crossY && !crossX) { // cross on Y only
w = wy * scale;
// add weighted component for current px
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// add weighted component for next (tY+1) px 
nw = nwy * scale
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
} else { // crosses both x and y : four target points involved
// add weighted component for current px
w = wx * wy;
tBuffer[tIndex ] += sR * w;
tBuffer[tIndex + 1] += sG * w;
tBuffer[tIndex + 2] += sB * w;
// for tX + 1; tY px
nw = nwx * wy;
tBuffer[tIndex + 3] += sR * nw;
tBuffer[tIndex + 4] += sG * nw;
tBuffer[tIndex + 5] += sB * nw;
// for tX ; tY + 1 px
nw = wx * nwy;
tBuffer[tIndex + 3 * tw ] += sR * nw;
tBuffer[tIndex + 3 * tw + 1] += sG * nw;
tBuffer[tIndex + 3 * tw + 2] += sB * nw;
// for tX + 1 ; tY +1 px
nw = nwx * nwy;
tBuffer[tIndex + 3 * tw + 3] += sR * nw;
tBuffer[tIndex + 3 * tw + 4] += sG * nw;
tBuffer[tIndex + 3 * tw + 5] += sB * nw;
}
} // end for sx 
} // end for sy

// create result canvas
var resCV = document.createElement('canvas');
resCV.width = tw;
resCV.height = th;
var resCtx = resCV.getContext('2d');
var imgRes = resCtx.getImageData(0, 0, tw, th);
var tByteBuffer = imgRes.data;
// convert float32 array into a UInt8Clamped Array
var pxIndex = 0; // 
for (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {
tByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);
tByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);
tByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);
tByteBuffer[tIndex + 3] = 255;
}
// writing result to canvas.
resCtx.putImageData(imgRes, 0, 0);
return resCV;
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
How to check a uploaded file whether it is a image or other file?
----------Explanation----------
I'm assuming that you're running this in a servlet context. If it's affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .
----------Code Sample----------
String fileName = uploadedFile.getFileName();
String mimeType = getServletContext().getMimeType(fileName);
if (mimeType.startsWith(""image/"")) {
// It's an image.
}

try (InputStream input = uploadedFile.getInputStream()) {
try {
ImageIO.read(input).toString();
// It's an image (only BMP, GIF, JPG and PNG are recognized).
} catch (Exception e) {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
String mimeType = Magic.getMagicMatch(input, false).getMimeType();
if (mimeType.startsWith(""image/"")) {
// It's an image.
} else {
// It's not an image.
}
}

try (InputStream input = uploadedFile.getInputStream()) {
Files.copy(input, new File(uploadFolder, fileName).toPath());
}
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Java Switch Statement - Is ""or""/""and"" possible?
----------Explanation----------
You can use switch-case fall through by omitting the break; statement.
----------Code Sample----------
char c = /* whatever */;

switch(c) {
case 'a':
case 'A':
//get the 'A' image;
break;
case 'b':
case 'B':
//get the 'B' image;
break;
// (...)
case 'z':
case 'Z':
//get the 'Z' image;
break;
}

char c = Character.toUpperCase(/* whatever */);

switch(c) {
case 'A':
//get the 'A' image;
break;
case 'B':
//get the 'B' image;
break;
// (...)
case 'Z':
//get the 'Z' image;
break;
}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
How do you cache an image in Javascript
----------Explanation----------
So, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it's probably best to do it with javascript as it generally won't hold up the page load when done from javascript. You can do that like this:
----------Code Sample----------
function preloadImages(array) {
if (!preloadImages.list) {
preloadImages.list = [];
}
var list = preloadImages.list;
for (var i = 0; i < array.length; i++) {
var img = new Image();
img.onload = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = array[i];
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);

function preloadImages(array, waitForOtherResources, timeout) {
var loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;
if (!preloadImages.list) {
preloadImages.list = [];
}
if (!waitForOtherResources || document.readyState === 'complete') {
loadNow();
} else {
window.addEventListener(""load"", function() {
clearTimeout(timer);
loadNow();
});
// in case window.addEventListener doesn't get called (sometimes some resource gets stuck)
// then preload the images anyway after some timeout time
timer = setTimeout(loadNow, t);
}

function loadNow() {
if (!loaded) {
loaded = true;
for (var i = 0; i < imgs.length; i++) {
var img = new Image();
img.onload = img.onerror = img.onabort = function() {
var index = list.indexOf(this);
if (index !== -1) {
// remove image from the array once it's loaded
// for memory consumption reasons
list.splice(index, 1);
}
}
list.push(img);
img.src = imgs[i];
}
}
}
}

preloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);
preloadImages([""url99.jpg"", ""url98.jpg""], true);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Check if an image is loaded (no errors) in JavaScript
----------Explanation----------
Another option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here's an example of what I mean:
----------Code Sample----------
$("""")
.on('load', function() { console.log(""image loaded correctly""); })
.on('error', function() { console.log(""error loading image""); })
.attr(""src"", $(originalImage).attr(""src""))
;
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
Unable to read JPEG image using ImageIO.read(File file)
----------Explanation----------
Read a CMYK image into RGB BufferedImage.
----------Code Sample----------
File f = new File(""/path/imagefile.jpg"");

//Find a suitable ImageReader
Iterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");
ImageReader reader = null;
while(readers.hasNext()) {
reader = (ImageReader)readers.next();
if(reader.canReadRaster()) {
break;
}
}

//Stream the image file (the original CMYK image)
ImageInputStream input = ImageIO.createImageInputStream(f); 
reader.setInput(input); 

//Read the image raster
Raster raster = reader.readRaster(0, null); 

//Create a new RGB image
BufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), 
BufferedImage.TYPE_4BYTE_ABGR); 

//Fill the new image with the old raster
bi.getRaster().setRect(raster);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
How to upload and store an image with google app engine (java)
----------Explanation----------
Declaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc
----------Code Sample----------
@Entity
public class MyImage {
@PrimaryKey
@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)
private Long id;

@Persistent
private String name;

@Persistent
Blob image;

public MyImage() { }
public MyImage(String name, Blob image) {
this.name = name; 
this.image = image;
}

// JPA getters and setters and empty contructor
// ...
public Blob getImage() { return image; }
public void setImage(Blob image) { this.image = image; }
}

// Your upload handle would look like
public void doPost(HttpServletRequest req, HttpServletResponse res) {
// Get the image representation
ServletFileUpload upload = new ServletFileUpload();
FileItemIterator iter = upload.getItemIterator(req);
FileItemStream imageItem = iter.next();
InputStream imgStream = imageItem.openStream();

// construct our entity objects
Blob imageBlob = new Blob(IOUtils.toByteArray(imgStream));
MyImage myImage = new MyImage(imageItem.getName(), imageBlob);

// persist image
PersistenceManager pm = PMF.get().getPersistenceManager();
pm.makePersistent(myImage);
pm.close();

// respond to query
res.setContentType(""text/plain"");
res.getOutputStream().write(""OK!"".getBytes());
}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
Android Bitmap: Convert transparent pixels to a color
----------Explanation----------
If you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .
----------Code Sample----------
Bitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size
imageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want
Canvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image
canvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background
image.recycle(); // clear out old image
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
Is it possible to apply CSS to half of a character?
----------Explanation----------
HTML
----------Code Sample----------
Now on GitHub as a Plugin!


enter image description here Feel free to fork and improve.



Demo | Download Zip | Half-Style.com (Redirects to GitHub)





Pure CSS for a Single Character

JavaScript used for automation accross text or multiple characters

Preserves Text Accessibility for screen readers for the blind or visually
impaired



Part1: Basic Solution


Half Style on text



Demo: http://jsfiddle.net/pd9yB/817/





This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.



Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.



Explanation for a single character:



Pure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.



For each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won't need to hard code it for every instance.



Explanation for any text:



Simply add textToHalfStyle class to the element containing the text.





CSS:



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: black; /* or transparent, any color */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    left:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: #f00;

}



Single Characters:



X

Y

Z

A





Automated:





Half-style, please.



jQuery(function($) {

    var text, chars, $el, i, output;



    // Iterate over all class occurences

    $('.textToHalfStyle').each(function(idx, el) {

        $el = $(el);

        text = $el.text();

        chars = text.split('');



        // Set the screen-reader text

        $el.html('' + text + '');



        // Reset output for appending

        output = '';



        // Iterate over all chars in the text

        for (i = 0; i < chars.length; i++) {

            // Create a styled element for each character and append to container

            output += '' + chars[i] + '';

        }



        // Write to DOM only once

        $el.append(output);

    });

});



.halfStyle {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

}

.halfStyle:before { /* creates the top part */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the bottom part */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 100%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}



.halfStyle { /* base char and also the right 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent; /* hide the base character */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f; /* for demo purposes */

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the left 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    width: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #af0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



.halfStyle { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}



body{

    background-color: black;

}



.textToHalfStyle{

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}



.halfStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}



jQuery(function($) {

    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;



    // Iterate over all class occurrences

    $('.textToHalfStyle').each(function(idx, halfstyle_el) {

        $halfstyle_el = $(halfstyle_el);

        halfstyle_style = $halfstyle_el.data('halfstyle');

        halfstyle_text = $halfstyle_el.text();

        halfstyle_chars = halfstyle_text.split('');



        // Set the screen-reader text

        $halfstyle_el.html('' + halfstyle_text + '');



        // Reset output for appending

        halfstyle_output = '';



        // Iterate over all chars in the text

        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {

            // Create a styled element for each character and append to container

            halfstyle_output += '' + halfstyle_chars[halfstyle_i] + '';

        }



        // Write to DOM only once

        $halfstyle_el.append(halfstyle_output);

    });

});



 /* start half-style hs-base */

 .halfStyle.hs-base {

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #000; /* for demo purposes */

}

.halfStyle.hs-base:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    pointer-events: none; /* so the base char is selectable by mouse */

    overflow:hidden;

    color: #f00; /* for demo purposes */

}

 /* end half-style hs-base */



/* start half-style hs-horizontal-third */

.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */

    position:relative;

    display:inline-block;

    font-size:80px; /* or any font size will work */

    color: transparent;

    overflow:hidden;

    white-space: pre; /* to preserve the spaces from collapsing */

    color: #f0f;

    text-shadow: 2px 2px 0px #0af; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */

    display:block;

    z-index:2;

    position:absolute;

    top:0;

    height: 33.33%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #f00; /* for demo purposes */

    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */

}

.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */

    display:block;

    position:absolute;

    z-index:1;

    top:0;

    height: 66.66%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    pointer-events: none; /* so the base char is selectable by mouse */

    color: #000; /* for demo purposes */

    text-shadow: 2px 2px 0px #af0; /* for demo purposes */

}

/* end half-style hs-horizontal-third */



/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */

.halfStyle.hs-PeelingStyle {

    position: relative;

    display: inline-block;

    font-size: 68px;

    color: rgba(0, 0, 0, 0.8);

    overflow: hidden;

    white-space: pre;

    transform: rotate(4deg);

    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);

}

.halfStyle.hs-PeelingStyle:before { /* creates the left part */

    display: block;

    z-index: 1;

    position: absolute;

    top: -0.5px;

    left: -3px;

    width: 100%;

    content: attr(data-content);

    overflow: hidden;

    pointer-events: none;

    color: #FFF;

    transform: rotate(-4deg);

    text-shadow: 0px 0px 1px #000;

}

/* end half-style hs-PeelingStyle */



/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/

.textToHalfStyle.hs-KevinGranger {

    display:block;

    margin: 200px 0 0 0;

    text-align:center;

}



.halfStyle.hs-KevinGranger {

    font-family: 'Libre Baskerville', serif;

    position:relative;

    display:inline-block;

    width:1;

    font-size:70px;

    color: black;

    overflow:hidden;

    white-space: pre;

    text-shadow: 1px 2px 0 white;

}

.halfStyle.hs-KevinGranger:before {

    display:block;

    z-index:1;

    position:absolute;

    top:0;

    width: 50%;

    content: attr(data-content); /* dynamic content for the pseudo element */

    overflow:hidden;

    color: white;

}

/* end half-style hs-KevinGranger





    Half-style, please.






    Half-style, please.






    Half-style, please.






    Half-style, please.




*******************end of usage scenario 11*****************



*******************usage scenario 12**********************


----------usage scenario----------

Changing the image source using jQuery

----------Explanation----------

You can use jQuery's  attr()  function.  For example, if you img tag has an id attribute of 'my_image':

----------Code Sample----------





$(""#my_image"").attr(""src"",""second.jpg"");



$('#my_image').on({

    'click': function(){

        $('#my_image').attr('src','second.jpg');

    }

});



$('img').on({

    'click': function() {

         var src = ($(this).attr('src') === 'img1_on.jpg')

            ? 'img2_on.jpg'

            : 'img1_on.jpg';

         $(this).attr('src', src);

    }

});

*******************end of usage scenario 12*****************



*******************usage scenario 13**********************


----------usage scenario----------

Setting background-image using jQuery CSS property

----------Explanation----------

You probably want this (to make it like a normal CSS background-image declaration):

----------Code Sample----------

$('myOjbect').css('background-image', 'url(' + imageUrl + ')');

*******************end of usage scenario 13*****************



*******************usage scenario 14**********************


----------usage scenario----------

What is the best way to display millions of images in Java?

----------Explanation----------



----------Code Sample----------

Image tile = new Image(""tile.png"");



Group house = new Group();

house.setCache(true);

house.setCacheHint(CacheHint.SPEED);



Effect lighting = new Lighting();



for (int i = 0; i < houseWidth; i++) {

  // here is the critical part => don't do new ImageView(new Image(""tile.png""))

  ImageView tileView = new ImageView(tile));

  tileView.setEffect(lighting);

  tileView.setCache(true);

  tileView.setCacheHint(CacheHint.SPEED);



  house.add(tileView);  

}

*******************end of usage scenario 14*****************



*******************usage scenario 15**********************


----------usage scenario----------

How to flip BufferedImage in java

----------Explanation----------

Based on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .

----------Code Sample----------

import java.awt.Component;

import java.awt.Graphics2D;

import java.awt.GridLayout;

import java.awt.RenderingHints;

import java.awt.geom.AffineTransform;

import java.awt.image.BufferedImage;

import java.awt.image.ByteLookupTable;

import java.awt.image.LookupOp;

import java.awt.image.LookupTable;

import java.io.File;

import java.io.IOException;

import java.util.Arrays;



import javax.imageio.ImageIO;

import javax.swing.BorderFactory;

import javax.swing.ImageIcon;

import javax.swing.JFrame;

import javax.swing.JLabel;

import javax.swing.JPanel;

import javax.swing.SwingUtilities;



public class ImageFlipTest

{

    public static void main(String[] args)

    {

        SwingUtilities.invokeLater(new Runnable()

        {

            @Override

            public void run()

            {

                createAndShowGUI();

            }

        });

    }



    private static void createAndShowGUI()

    {

        JFrame frame = new JFrame();

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.getContentPane().setLayout(new GridLayout(1, 1));



        BufferedImage image = null;

        try

        {

            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));

        }

        catch (IOException e1)

        {

            e1.printStackTrace();

        }



        JPanel panel = new JPanel(new GridLayout(2,2));

        panel.add(createComponent(""Original"", image));

        panel.add(createComponent(""Flipped"", createFlipped(image)));

        panel.add(createComponent(""Rotated"", createRotated(image)));

        panel.add(createComponent(""Inverted"", createInverted(image)));



        frame.getContentPane().add(panel);

        frame.pack();

        frame.setLocationRelativeTo(null);

        frame.setVisible(true);

    }



    private static BufferedImage convertToARGB(BufferedImage image)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }    



    private static BufferedImage createFlipped(BufferedImage image)

    {

        AffineTransform at = new AffineTransform();

        at.concatenate(AffineTransform.getScaleInstance(1, -1));

        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));

        return createTransformed(image, at);

    }



    private static BufferedImage createRotated(BufferedImage image)

    {

        AffineTransform at = AffineTransform.getRotateInstance(

            Math.PI, image.getWidth()/2, image.getHeight()/2.0);

        return createTransformed(image, at);

    }



    private static BufferedImage createTransformed(

        BufferedImage image, AffineTransform at)

    {

        BufferedImage newImage = new BufferedImage(

            image.getWidth(), image.getHeight(),

            BufferedImage.TYPE_INT_ARGB);

        Graphics2D g = newImage.createGraphics();

        g.transform(at);

        g.drawImage(image, 0, 0, null);

        g.dispose();

        return newImage;

    }



    private static BufferedImage createInverted(BufferedImage image)

    {

        if (image.getType() != BufferedImage.TYPE_INT_ARGB)

        {

            image = convertToARGB(image);

        }

        LookupTable lookup = new LookupTable(0, 4)

        {

            @Override

            public int[] lookupPixel(int[] src, int[] dest)

            {

                dest[0] = (int)(255-src[0]);

                dest[1] = (int)(255-src[1]);

                dest[2] = (int)(255-src[2]);

                return dest;

            }

        };

        LookupOp op = new LookupOp(lookup, new RenderingHints(null));

        return op.filter(image, null);

    }
","['""""""Resize image, maintain aspect ratio\n\nI have an image which I resize:\n\nif((width != null) || (height != null)) { try{ // Scale image on disk BufferedImage originalImage = ImageIO.read(file); int type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType(); BufferedImage resizedImageJpg = resizeImage(originalImage, type, 200, 200); ImageIO.write(resizedImageJpg, ""jpg"", file); } catch(IOException e) { System.out.println(e.getMessage()); } }\n\nThis is how I resize the image:\n\nprivate static BufferedImage resizeImage(BufferedImage originalImage, int type, Integer imgWidth, Integer imgHeight) { var resizedImage = new BufferedImage(imgWidth, imgHeight, type); Graphics2D g = resizedImage.createGraphics(); g.drawImage(originalImage, 0, 0, imgWidth, imgHeight, null); g.dispose(); return resizedImage; }\n\nNow the problem is, I also need to maintain aspect ratio. That is, I need the new 200/200 image to contain the new image scaled. Something like this:\n\nI tried some things but they didn\'t work out as expected. Any help is appreciated. 3,Dimension imgSize = new Dimension(500, 100); Dimension boundary = new Dimension(200, 200);\n\nFunction to return the new size depending on the boundary:\n\npublic static Dimension getScaledDimension(Dimension imgSize, Dimension boundary) { int original_width = imgSize.width; int original_height = imgSize.height; int bound_width = boundary.width; int bound_height = boundary.height; int new_width = original_width; int new_height = original_height; // first check if we need to scale width if (original_width > bound_width) { //scale width to fit new_width = bound_width; //scale height to maintain aspect ratio new_height = (new_width * original_height) / original_width; } // then check if we need to scale even with the new height if (new_height > bound_height) { //scale height to fit instead new_height = bound_height; //scale width to maintain aspect ratio new_width = (new_height * original_width) / original_height; } return new Dimension(new_width, new_height); }\n\nIn case anyone also needs the image resizing code, here is a decent solution. If you\'re unsure about the above solution, there are different ways to achieve the same result. 8,9\n\nI used the same logic to resize bitmaps in android :)\n\n answer is correct except for when no scaling is required (or more specifically when the original width is smaller than the boundary). Initializing new_width and new_height to to original_width and original_height corrects the problem. \n\nI know this is for java, but I converted this to js in case anyone else needs function getDimensions(originalWidth,originalHeight,newWidth,newHeight){ var dimensions = {}; dimensions.width = originalWidth; dimensions.height = originalHeight; if(originalWidth > newWidth){ dimensions.width = newWidth; dimensions.height = (dimensions.width * originalHeight)/originalWidth; } if(dimensions.height > newHeight){ dimensions.height = newHeight; dimensions.width = (dimensions.height * originalWidth) / originalHeight; } return dimensions; }\n\nThis does not work if target dimension is bigger. so \'scale\' should be changed into \'shrink\' for this method. This solution worked for me, until I needed to resize an image to a boundary larger than the image itself. Perhaps this makes more sense. â Cardinal System Jan 23, 2019 at 20:55\n\nTranslated from here:\n\nDimension getScaledDimension(Dimension imageSize, Dimension boundary) { double widthRatio = boundary.getWidth() / imageSize.getWidth(); double heightRatio = boundary.getHeight() / imageSize.getHeight(); double ratio = Math.min(widthRatio, heightRatio); return new Dimension((int) (imageSize.width * ratio), (int) (imageSize.height * ratio)); }\n\nYou can also use imgscalr to resize images while maintaining aspect ratio:\n\nBufferedImage resizeMe = ImageIO.read(new File(""orig.jpg"")); Dimension newMaxSize = new Dimension(255, 255); BufferedImage resizedImg = Scalr.resize(resizeMe, Method.QUALITY, newMaxSize.width, newMaxSize.height);\n\nMatthias BraunMatthias Braun\n\n2\n\nThis should be the accepted answer, Code is smaller and works for smaller images as well! Thank you! \n\nI dropped Scalr.java into my project and this example worked perfectly--without any drama.\n\nYou will want to check out Image.getScaledInstance(), and more in this answer: How to improve the performance of g.drawImage() method for resizing images\n\nBufferedImage bufferedImage = ImageIO.read(file);\n\nprivate BufferedImage resizeAndCrop(BufferedImage bufferedImage, Integer width, Integer height) { Mode mode = (double) width / (double) height >= (double) bufferedImage.getWidth() / (double) bufferedImage.getHeight() ? Scalr.Mode.FIT_TO_WIDTH : Scalr.Mode.FIT_TO_HEIGHT; bufferedImage = Scalr.resize(bufferedImage, Scalr.Method.ULTRA_QUALITY, mode, width, height); int x = 0; int y = 0; if (mode == Scalr.Mode.FIT_TO_WIDTH) { y = (bufferedImage.getHeight() - height) / 2; } else if (mode == Scalr.Mode.FIT_TO_HEIGHT) { x = (bufferedImage.getWidth() - width) / 2; } bufferedImage = Scalr.crop(bufferedImage, x, y, width, height); return bufferedImage; }\n\nUsing Scalr library:\n\n<dependency> <groupId>org.imgscalr</groupId> <artifactId>imgscalr-lib</artifactId> <version>4.2</version> </dependency>\n\nJustinas JakavonisJustinas Jakavonis\n\n8,Here\'s a small piece of code that I wrote, it resizes the image to fit the container while keeping the image\'s original aspect ratio. It takes in as parameters the container\'s width, height and the image.""""""']",0,0.7111111,0.75
swing,JLabel,How to resize JLabel ImageIcon?,None,"Most common ways to construct:
JLabel label1 = new JLabel();
Based on 31 examples
 
String s = É;
JLabel l = new JLabel(s);
Based on 30 examples","Try this :

ImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // load the image to a imageIcon
Image image = imageIcon.getImage(); // transform it 
Image newimg = image.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
imageIcon = new ImageIcon(newimg);  // transform it back","*******************usage scenario 1********************** 
----------usage scenario----------
Java GUI: Sharing values across different JFrames
----------Explanation----------

----------Code Sample----------
import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.*;

// TwoWindows is the Application 
public class TwoWindows {
// shared state ( model ) 
private int clickCount = 0;

// UI
private List toUpdate = new ArrayList();

// listener ( listens for clicks on buttons kind of controller )
private ActionListener actionListener = new ActionListener() {

// Each time update the UI 
public void actionPerformed( ActionEvent e ) {
clickCount++; 
for( JLabel label : toUpdate ) {
label.setText( ""Count: "" + ( clickCount ) );
}
}
};

// Createsa winddow with a label and a button
public void showWindow( String named ) {
JFrame f = new JFrame( named );
f.add( createButtonAndLabel() );
f.pack();
f.setVisible( true );
}

// Creates the label and button and adds this.actionListener
// to each button. 
private JComponent createButtonAndLabel() {
JPanel panel = new JPanel();
JLabel label = new JLabel(""Count: 0"");
JButton clickMe = new JButton(""Click me"");
// adding the label to a ""view"" list.
toUpdate.add( label );
// adding the listener to each button 
clickMe.addActionListener( actionListener );
panel.add( label );
panel.add( clickMe );
return panel;
}

// Run the app
public static void main( String [] args ) {
TwoWindows t = new TwoWindows();
t.showWindow(""A"");
t.showWindow(""B"");
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
dragging a jlabel around the screen
----------Explanation----------
Addition: You've probably left this thread, but if you come back, or for the benefit of others, I wanted to clarify what I meant by using a JLayeredPane by posting an example.
----------Code Sample----------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class DragLabelOnLayeredPane extends JLayeredPane {
public static final int WIDTH = 680;
public static final int HEIGHT = 480;
private static final int GRID_ROWS = 8;
private static final int GRID_COLS = 6;
private static final int GAP = 3;
private static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT);
private static final Dimension LABEL_SIZE = new Dimension(60, 40);
private GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP);
private JPanel backingPanel = new JPanel(gridlayout);
private JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS];
private JLabel redLabel = new JLabel(""Red"", SwingConstants.CENTER);
private JLabel blueLabel = new JLabel(""Blue"", SwingConstants.CENTER);

public DragLabelOnLayeredPane() {
backingPanel.setSize(LAYERED_PANE_SIZE);
backingPanel.setLocation(2 * GAP, 2 * GAP);
backingPanel.setBackground(Color.black);
for (int row = 0; row < GRID_ROWS; row++) {
for (int col = 0; col < GRID_COLS; col++) {
panelGrid[row][col] = new JPanel(new GridBagLayout());
backingPanel.add(panelGrid[row][col]);
}
}

redLabel.setOpaque(true);
redLabel.setBackground(Color.red.brighter().brighter());
redLabel.setPreferredSize(LABEL_SIZE);
panelGrid[4][3].add(redLabel);

blueLabel.setOpaque(true);
blueLabel.setBackground(Color.blue.brighter().brighter());
blueLabel.setPreferredSize(LABEL_SIZE);
panelGrid[1][1].add(blueLabel);

backingPanel.setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));
setPreferredSize(LAYERED_PANE_SIZE);
add(backingPanel, JLayeredPane.DEFAULT_LAYER);
MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
addMouseListener(myMouseAdapter);
addMouseMotionListener(myMouseAdapter);
}

private class MyMouseAdapter extends MouseAdapter {
private JLabel dragLabel = null;
private int dragLabelWidthDiv2;
private int dragLabelHeightDiv2;
private JPanel clickedPanel = null;

@Override
public void mousePressed(MouseEvent me) {
clickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
Component[] components = clickedPanel.getComponents();
if (components.length == 0) {
return;
}
// if we click on jpanel that holds a jlabel
if (components[0] instanceof JLabel) {

// remove label from panel
dragLabel = (JLabel) components[0];
clickedPanel.remove(dragLabel);
clickedPanel.revalidate();
clickedPanel.repaint();

dragLabelWidthDiv2 = dragLabel.getWidth() / 2;
dragLabelHeightDiv2 = dragLabel.getHeight() / 2;

int x = me.getPoint().x - dragLabelWidthDiv2;
int y = me.getPoint().y - dragLabelHeightDiv2;
dragLabel.setLocation(x, y);
add(dragLabel, JLayeredPane.DRAG_LAYER);
repaint();
}
}

@Override
public void mouseDragged(MouseEvent me) {
if (dragLabel == null) {
return;
}
int x = me.getPoint().x - dragLabelWidthDiv2;
int y = me.getPoint().y - dragLabelHeightDiv2;
dragLabel.setLocation(x, y);
repaint();
}

@Override
public void mouseReleased(MouseEvent me) {
if (dragLabel == null) {
return;
}
remove(dragLabel); // remove dragLabel for drag layer of JLayeredPane
JPanel droppedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
if (droppedPanel == null) {
// if off the grid, return label to home
clickedPanel.add(dragLabel);
clickedPanel.revalidate();
} else {
int r = -1;
int c = -1;
searchPanelGrid: for (int row = 0; row < panelGrid.length; row++) {
for (int col = 0; col < panelGrid[row].length; col++) {
if (panelGrid[row][col] == droppedPanel) {
r = row;
c = col;
break searchPanelGrid;
}
}
}

if (r == -1 || c == -1) {
// if off the grid, return label to home
clickedPanel.add(dragLabel);
clickedPanel.revalidate();
} else {
droppedPanel.add(dragLabel);
droppedPanel.revalidate();
}
}

repaint();
dragLabel = null;
}
}

private static void createAndShowUI() {
JFrame frame = new JFrame(""DragLabelOnLayeredPane"");
frame.getContentPane().add(new DragLabelOnLayeredPane());
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}

public static void main(String[] args) {
java.awt.EventQueue.invokeLater(new Runnable() {
public void run() {
createAndShowUI();
}
});
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Which layout can do this?
----------Explanation----------
You don't need a layout manager which specifically supports this. You can calculate the x, y positions yourself with some fairly simple trigonometry, then use a regular layout such as SpringLayout .
----------Code Sample----------
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

public class CircleLayout {

/**
* Calculate x,y positions of n labels positioned in
* a circle around a central point. Assumes AWT coordinate
* system where origin (0,0) is top left.
* @param args
*/
public static void main(String[] args) {
int n = 6; //Number of labels
int radius = 100;
Point centre = new Point(200,200);

double angle = Math.toRadians(360/n);
List points = new ArrayList();
points.add(centre);

//Add points
for (int i=0; i double theta = i*angle;
int dx = (int)(radius * Math.sin(theta));
int dy = (int)(-radius * Math.cos(theta));
Point p = new Point(centre.x + dx, centre.y + dy);
points.add(p);
}

draw(points);
}

private static void draw(List points) {
JFrame frame = new JFrame(""Labels in a circle"");
frame.setSize(500, 500);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel panel = new JPanel();;
SpringLayout layout = new SpringLayout();

int count = 0;
for (Point point : points) {
JLabel label = new JLabel(""Point "" + count);
panel.add(label);
count++;
layout.putConstraint(SpringLayout.WEST, label, point.x, SpringLayout.WEST, panel);
layout.putConstraint(SpringLayout.NORTH, label, point.y, SpringLayout.NORTH, panel);
}

panel.setLayout(layout);

frame.add(panel);
frame.setVisible(true);

}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Multiline text in JLabel
----------Explanation----------
You can do it by putting HTML in the code, so:
----------Code Sample----------
JFrame frame = new JFrame();
frame.setLayout(new GridLayout());
JLabel label = new JLabel(""First line
Second line"");
frame.add(label);
frame.pack();
frame.setVisible(true);
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Unicode characters in javax.swing only display when using the default font-size
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TestUnicodeFont {

public static void main(String[] args) {
new TestUnicodeFont();
}

public TestUnicodeFont() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public class TestPane extends JPanel {

public TestPane() {
setLayout(new GridBagLayout());
GridBagConstraints gbc = new GridBagConstraints();
gbc.gridwidth = GridBagConstraints.REMAINDER;
JLabel normal = new JLabel(""Normal - ?"");
JLabel byCode = new JLabel(""Normal code - \u2109"");

JLabel normalLarger = new JLabel(""Large - ?"");
normalLarger.setFont(normalLarger.getFont().deriveFont(48f));
JLabel byCodeLatger = new JLabel(""Large code - \u2109"");
byCodeLatger.setFont(byCodeLatger.getFont().deriveFont(48f));

add(normal, gbc);
add(byCode, gbc);
add(normalLarger, gbc);
add(byCodeLatger, gbc);
}
}

}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Label will not update with the flow
----------Explanation----------
You're shadowing your tieLabel variable by re-declaring it in the class. By doing this, the local variable declared in the constructor is initialized, but the field declared in the class remains null:
----------Code Sample----------
public class GamePanel extends JPanel {
private JButton rockButton, paperButton, scissorsButton;

// all these variables are null and remain null
private JLabel userLabel, computerLabel, resultLabel, winLabel, tieLabel,
loseLabel;

// ...

public GamePanel() {

// ...

// ***** shadowing vars here
JButton rockButton = new JButton(rockButtonText);
JButton paperButton = new JButton(paperButtonText);
JButton scissorsButton = new JButton(scissorsButtonText);

//...

// *** and here
JLabel userLabel = new JLabel(""User:"");
JLabel computerLabel = new JLabel(""Computer:"");
JLabel winLabel = new JLabel(""Win: "" + winInt);
JLabel tieLabel = new JLabel(""Tie: "" + tieInt);
JLabel loseLabel = new JLabel(""Lose:"" + loseInt);

public GamePanel() {

// ...

rockButton = new JButton(rockButtonText);
paperButton = new JButton(paperButtonText);
scissorsButton = new JButton(scissorsButtonText);

//...

userLabel = new JLabel(""User:"");
computerLabel = new JLabel(""Computer:"");
winLabel = new JLabel(""Win: "" + winInt);
tieLabel = new JLabel(""Tie: "" + tieInt);
loseLabel = new JLabel(""Lose:"" + loseInt);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Java: How do I pass variables from JButton ActionListener to main class?
----------Explanation----------
Make a class, instance variable available for the numGenerator to access directly...
----------Code Sample----------
public class Main{
public static void main(String[] args){
new Main();
}

// This variable will be visible to the inner class numGenerator
private JLabel output;

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator());
}

public class numGenerator implements ActionListener{
public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
output.setText(Integer.toString(num));

}
}
}

public class Main{
public static void main(String[] args){
new Main();
}

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator(output));
}

public class numGenerator implements ActionListener{
private JLabel label;

public numGenerator(JLabel label) {
this.label = label;
}

public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
if (label != null) {
label.setText(Integer.toString(num));
}

}
}
}

public class Main{
public static void main(String[] args){
new Main();
}

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

final JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator(new NumberGeneratorListener() {
public void numberGenerated(int number) {
output.setText(Integer.toString(number));
}
}));
}

public interface NumberGeneratorListener {
public void numberGenerated(int number);
}

public class numGenerator implements ActionListener{
private NumberGeneratorListener listener;

public numGenerator(NumberGeneratorListener listener) {
this.listener = listener;
}

public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
if (listener != null) {
listener.numberGenerated(num);
}

}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to align a JLabel to the bottom of a JPanel
----------Explanation----------
You could use BorderLayout and add the label to the PAGE_END position of the container
----------Code Sample----------
setLayout(new BorderLayout());
add(itemLabel, BorderLayout.PAGE_END);

JLabel itemLabel = new JLabel(""ccc"", JLabel.CENTER);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Can't move JLabel on JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager2;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Monopoly {

public static void main(String[] args) {
new Monopoly();
}

public Monopoly() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
ex.printStackTrace();
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(new MonopolyBoard());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public class MonopolyBoard extends JPanel {

private List players;

public MonopolyBoard() {
setLayout(new MonopolyBoardLayout());

players = new ArrayList<>(2);
try {
players.add(makePlayer(""/Dog.png""));
players.add(makePlayer(""/Car.png""));

for (JLabel player : players) {
add(player, new Integer(0));
}
} catch (IOException exp) {
exp.printStackTrace();
}

Timer timer = new Timer(1000, new ActionListener() {
private int count = 0;
private Random rnd = new Random();

@Override
public void actionPerformed(ActionEvent e) {
int playerIndex = count % players.size();
JLabel player = players.get(playerIndex);

MonopolyBoardLayout layout = (MonopolyBoardLayout) getLayout();
int position = layout.getPosition(player);

position += rnd.nextInt(5) + 1;
if (position > 35) {
position -= 35;
}

layout.setPosition(player, position);

revalidate();
repaint();
count++;
}
});
timer.start();
}

protected JLabel makePlayer(String path) throws IOException {
JLabel label = new JLabel(new ImageIcon(ImageIO.read(getClass().getResource(path))), JLabel.CENTER);
return label;
}

@Override
protected void paintComponent(Graphics g) {
super.paintComponent(g);
Graphics2D g2d = (Graphics2D) g.create();
int width = getWidth();
int height = getHeight();

for (int index = 0; index < 36; index++) {
Rectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);
g2d.draw(bounds);
}

g2d.dispose();
}

}

public static class MonopolyBoardLayoutHelper {

private static Map mapBoardCells;

static {
mapBoardCells = new HashMap<>(25);

mapBoardCells.put(10, new Point(0, 8));
mapBoardCells.put(11, new Point(0, 7));
mapBoardCells.put(12, new Point(0, 6));
mapBoardCells.put(13, new Point(0, 5));
mapBoardCells.put(14, new Point(0, 4));
mapBoardCells.put(15, new Point(0, 3));
mapBoardCells.put(16, new Point(0, 2));
mapBoardCells.put(17, new Point(0, 1));
mapBoardCells.put(18, new Point(0, 0));

mapBoardCells.put(0, new Point(9, 9));
mapBoardCells.put(1, new Point(8, 9));
mapBoardCells.put(2, new Point(7, 9));
mapBoardCells.put(3, new Point(6, 9));
mapBoardCells.put(4, new Point(5, 9));
mapBoardCells.put(5, new Point(4, 9));
mapBoardCells.put(6, new Point(3, 9));
mapBoardCells.put(7, new Point(2, 9));
mapBoardCells.put(8, new Point(1, 9));
mapBoardCells.put(9, new Point(0, 9));

mapBoardCells.put(19, new Point(1, 0));
mapBoardCells.put(20, new Point(2, 0));
mapBoardCells.put(21, new Point(3, 0));
mapBoardCells.put(22, new Point(4, 0));
mapBoardCells.put(23, new Point(5, 0));
mapBoardCells.put(24, new Point(6, 0));
mapBoardCells.put(25, new Point(7, 0));
mapBoardCells.put(26, new Point(8, 0));
mapBoardCells.put(27, new Point(9, 0));

mapBoardCells.put(28, new Point(9, 1));
mapBoardCells.put(29, new Point(9, 2));
mapBoardCells.put(30, new Point(9, 3));
mapBoardCells.put(31, new Point(9, 4));
mapBoardCells.put(32, new Point(9, 5));
mapBoardCells.put(33, new Point(9, 6));
mapBoardCells.put(34, new Point(9, 7));
mapBoardCells.put(35, new Point(9, 8));

}

public static Rectangle getCellBounds(int index, int width, int height) {
Rectangle bounds = new Rectangle(0, 0, 0, 0);
int size = Math.min(width, height);
int cellSize = size / 10;

int xOffset = (width - size) / 2;
int yOffset = (height - size) / 2;

Point point = mapBoardCells.get(index);
if (point != null) {

int x = xOffset + (point.x * cellSize);
int y = yOffset + (point.y * cellSize);
bounds = new Rectangle(x, y, cellSize, cellSize);

}

return bounds;

}

}

public static class MonopolyBoardLayout implements LayoutManager2 {

public static final int DEFAULT_CELL_SIZE = 64;

private Map cellConstraints;

public MonopolyBoardLayout() {
cellConstraints = new HashMap<>(5);
}

public Integer getPosition(Component comp) {
return cellConstraints.get(comp);
}

public void setPosition(Component comp, int position) {
cellConstraints.put(comp, position);
}

@Override
public void addLayoutComponent(Component comp, Object constraints) {
if (constraints instanceof Integer) {
int cell = (int) constraints;
if (cell >= 0 && cell <= 35) {
cellConstraints.put(comp, cell);
} else {
throw new IllegalArgumentException(constraints + "" is not within the bounds of a valid cell reference (0-35)"");
}
} else {
throw new IllegalArgumentException(constraints + "" is not a valid cell reference (integer within 0-35)"");
}
}

@Override
public Dimension maximumLayoutSize(Container target) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public float getLayoutAlignmentX(Container target) {
return 0.5f;
}

@Override
public float getLayoutAlignmentY(Container target) {
return 0.5f;
}

@Override
public void invalidateLayout(Container target) {
}

@Override
public void addLayoutComponent(String name, Component comp) {
}

@Override
public void removeLayoutComponent(Component comp) {
cellConstraints.remove(comp);
}

@Override
public Dimension preferredLayoutSize(Container parent) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public Dimension minimumLayoutSize(Container parent) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public void layoutContainer(Container parent) {
int width = parent.getWidth();
int height = parent.getHeight();

Map> components = new HashMap<>(25);

for (Component child : parent.getComponents()) {
Integer cell = cellConstraints.get(child);
if (cell != null) {
List children = components.get(cell);
if (children == null) {
children = new ArrayList<>(4);
components.put(cell, children);
}
children.add(child);
} else {
child.setBounds(0, 0, 0, 0);
}
}

for (Map.Entry> entry : components.entrySet()) {
int index = entry.getKey();
Rectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);
List comp = entry.getValue();
int xDelta = 0;
int yDelta = 0;
int availableWidth = bounds.width;
int availableHeight = bounds.height;
switch (comp.size()) {
case 2:
availableWidth /= 2;
xDelta = availableWidth;
break;
case 3:
case 4:
availableWidth /= 2;
xDelta = availableWidth;
availableHeight /= 2;
yDelta = availableHeight;
break;
}
int x = bounds.x;
int y = bounds.y;
for (int count = 0; count < comp.size() && count < 4; count++) {
Component child = comp.get(count);
child.setSize(availableWidth, availableHeight);
child.setLocation(x, y);

x += xDelta;
if (x >= bounds.x + bounds.width) {
x = bounds.x;
y += yDelta;
}
}
}

}

}

}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
How Do I Make These JLabels of JButtons invisible
----------Explanation----------
Edit 
For example, a bad code example as a proof of concept. Try compiling and running this.
----------Code Sample----------
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.EnumMap;
import java.util.Map;

import javax.swing.*;

@SuppressWarnings(""serial"")
public class Checkers extends JPanel {
public static final int SIDE_LENGTH = 60;
public static final int ROW_COUNT = 8;
private static final String ROW = ""row"";
private static final String COLUMN = ""column"";
private static final Color LIGHT_COLOR = new Color(210, 180, 140);
private static final Color DARK_COLOR = new Color(107, 68, 35);
private Map checkerIconMap = new EnumMap(
Checker.class);
private JLabel[][] labelGrid = new JLabel[ROW_COUNT][ROW_COUNT];
private Checker[][] checkerGrid = new Checker[ROW_COUNT][ROW_COUNT];

public Checkers() {
for (Checker checker : Checker.values()) {
checkerIconMap.put(checker, createCheckerIcon(checker));
}
setLayout(new GridLayout(ROW_COUNT, ROW_COUNT));

for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
checkerGrid[row][col] = Checker.EMPTY;
JLabel gridCell = new JLabel(checkerIconMap.get(Checker.EMPTY));
gridCell.setOpaque(true);
gridCell.putClientProperty(ROW, row);
gridCell.putClientProperty(COLUMN, col);
Color c = row % 2 == col % 2 ? LIGHT_COLOR : DARK_COLOR;
gridCell.setBackground(c);
add(gridCell);
labelGrid[row][col] = gridCell;
}
}

for (int i = 0; i < labelGrid.length / 2 - 1; i++) {
for (int j = 0; j < labelGrid.length / 2; j++) {
int row = i;
int col = j * 2;
col += row % 2 == 0 ? 1 : 0;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.BLACK));
checkerGrid[row][col] = Checker.BLACK;

row = ROW_COUNT - row - 1;
col = ROW_COUNT - col - 1;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.RED));
checkerGrid[row][col] = Checker.RED;
}
}

MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
addMouseListener(myMouseAdapter);
addMouseMotionListener(myMouseAdapter);
}

private Icon createCheckerIcon(Checker checker) {
BufferedImage img = new BufferedImage(SIDE_LENGTH, SIDE_LENGTH,
BufferedImage.TYPE_INT_ARGB);
Graphics2D g2 = img.createGraphics();
g2.setColor(checker.getColor());
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
RenderingHints.VALUE_ANTIALIAS_ON);
int x = 3;
int y = x;
int width = SIDE_LENGTH - 2 * x;
int height = width;
g2.fillOval(x, y, width, height);
g2.dispose();

return new ImageIcon(img);
}

private class MyMouseAdapter extends MouseAdapter {
private int selectedRow = -1;
private int selectedCol = -1;
private Checker selectedChecker = null;
private JPanel glassPane = null;
private Point p = null;
private JLabel movingLabel = new JLabel(checkerIconMap.get(Checker.EMPTY));

public MyMouseAdapter() {
movingLabel.setSize(movingLabel.getPreferredSize());
movingLabel.setVisible(false);
}

@Override
public void mousePressed(MouseEvent e) {
p = e.getPoint();
for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
JLabel gridCell = labelGrid[row][col];
if (gridCell == getComponentAt(p)) {
if (checkerGrid[row][col] != Checker.EMPTY) {
selectedRow = row;
selectedCol = col;
selectedChecker = checkerGrid[row][col];
checkerGrid[row][col] = Checker.EMPTY;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.EMPTY));

JRootPane rootPane = SwingUtilities.getRootPane(Checkers.this);
glassPane = (JPanel) rootPane.getGlassPane();
glassPane.setVisible(true);
glassPane.setLayout(null);
movingLabel.setIcon(checkerIconMap.get(selectedChecker));
movingLabel.setVisible(true);
glassPane.add(movingLabel);
int x = p.x - SIDE_LENGTH / 2;
int y = p.y - SIDE_LENGTH / 2;
movingLabel.setLocation(x, y);
}
}
}
}
}

@Override
public void mouseReleased(MouseEvent e) {
if (selectedChecker == null) {
return;
}

p = e.getPoint();
if (!Checkers.this.contains(p)) {
// if mouse releases and is totally off of the grid
returnCheckerToOriginalCell();
clearGlassPane();
return;
}

for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
JLabel gridCell = labelGrid[row][col];
if (gridCell == getComponentAt(p)) {
if (isMoveLegal(row, col)) {
checkerGrid[row][col] = selectedChecker;
labelGrid[row][col].setIcon(checkerIconMap.get(selectedChecker));

// todo: check for jumped pieces...
} else {
// illegal move
returnCheckerToOriginalCell();
}
}
}
}
clearGlassPane();
}

// this code would go in the model class
private boolean isMoveLegal(int row, int col) {
if (checkerGrid[row][col] != Checker.EMPTY) {
// trying to put a checker on another checker
returnCheckerToOriginalCell();
} else if (row == selectedRow && col == selectedCol) {
// trying to put checker back in same position
returnCheckerToOriginalCell();
} else if (row % 2 == col % 2) {
// invalid square
returnCheckerToOriginalCell();
} else {
// TODO: more logic needs to go here to test for a legal move
// and to remove jumped pieces

return true;
}
return false;
}

@Override
public void mouseDragged(MouseEvent e) {
if (selectedChecker == null || p == null) {
return;
}
p = e.getPoint();
int x = p.x - SIDE_LENGTH / 2;
int y = p.y - SIDE_LENGTH / 2;
movingLabel.setLocation(x, y);
}

private void clearGlassPane() {
glassPane.setVisible(false);
movingLabel.setVisible(false);
selectedChecker = null;
p = null;
selectedCol = -1;
selectedRow = -1;
}

private void returnCheckerToOriginalCell() {
checkerGrid[selectedRow][selectedCol] = selectedChecker;
labelGrid[selectedRow][selectedCol].setIcon(checkerIconMap.get(selectedChecker));
}
}

private static void createAndShowGui() {
Checkers mainPanel = new Checkers();

JFrame frame = new JFrame(""JLabelGrid"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class CheckerModel {

}

enum Checker {
EMPTY(new Color(0, 0, 0, 0)), RED(Color.red), BLACK(Color.black);
private Color color;

private Checker(Color color) {
this.color = color;
}

public Color getColor() {
return color;
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
design panel with GridBagLayout properly
----------Explanation----------
Here's the code. This is what is meant by a short, self-contained, runnable example of the solution.
----------Code Sample----------
package com.ggl.testing;

import java.awt.Component;
import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class StudentDataEditor implements Runnable {

private static final Insets normalInsets = new Insets(10, 10, 0, 10);
private static final Insets topInsets = new Insets(30, 10, 0, 10);

private Student student;

public static void main(String[] args) {
SwingUtilities.invokeLater(new StudentDataEditor());
}

public StudentDataEditor() {
this.student = new Student(""00000017108"", ""Sutandi"",
""Information Systems"", 2);
}

@Override
public void run() {
JFrame frame = new JFrame(""Student Data Editor"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(createMainPanel());
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

private JPanel createMainPanel() {
JPanel panel = new JPanel();
panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

panel.add(createTitlePanel());
panel.add(createStudentPanel());
panel.add(createMPPanel());
panel.add(Box.createVerticalStrut(30));
panel.add(createEmailPanel());
panel.add(Box.createVerticalStrut(10));

return panel;
}

private JPanel createTitlePanel() {
JPanel panel = new JPanel();

JLabel titleLabel = new JLabel(""CEK NILAI"");
titleLabel.setFont(titleLabel.getFont().deriveFont(24F));

panel.add(titleLabel);

return panel;
}

private JPanel createStudentPanel() {
JPanel panel = new JPanel();
panel.setLayout(new GridBagLayout());

int gridy = 0;

JLabel idLabel = new JLabel(""ID:"");
addComponent(panel, idLabel, 0, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JTextField idTextField = new JTextField(15);
idTextField.setEditable(false);
idTextField.setText(student.getId());
addComponent(panel, idTextField, 1, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JLabel jurusanLabel = new JLabel(""Jurusan:"");
addComponent(panel, jurusanLabel, 2, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JTextField jurusanTextField = new JTextField(15);
jurusanTextField.setEditable(false);
jurusanTextField.setText(student.getJurusan());
ad","['""""""How to resize JLabel ImageIcon? I'm making a Java Swing application that has the following layout (MigLayout):\n\n[icon][icon][icon][....] where icon = jlabel and the user can add more icons\n\nWhen the user adds or removes icons, the others should shrink or grow. My question is really straightforward: I have a JLabel which contains an ImageIcon; how can I resize this icon? """"""', '""""""is FlowLayout ??? (defalut Layout is there isn\'t defined anything) download.oracle.com/javase/tutorial/uiswing/layout/index.html, are you know download.oracle.com/javase/tutorial/uiswing/components/â¦\n\n\n\nImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // load the image to a imageIcon Image image = imageIcon.getImage(); // transform it Image newimg = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way imageIcon = new ImageIcon(newimg); // transform it back\n\ntrolologuytrolologuy\n\n2,0\n\nResizing the icon is not straightforward. You need to use Java\'s graphics 2D to scale the image. The first parameter is a Image class which you can easily get from ImageIcon class. You can use ImageIcon class to load your image file and then simply call getter method to get the image. private Image getScaledImage(Image srcImg, int w, int h){ BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB); Graphics2D g2 = resizedImg.createGraphics(); g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); g2.drawImage(srcImg, 0, 0, w, h, null); g2.dispose(); return resizedImg; }\n\nSuken ShahSuken Shah\n\n1,0\n\nImageIcon imageIcon = new ImageIcon(new ImageIcon(""icon.png"").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)); label.setIcon(imageIcon);\n\nFrom: Resize a picture to fit a JLabel\n\nuser4718768user4718768\n\nThis will keep the right aspect ratio. public ImageIcon scaleImage(ImageIcon icon, int w, int h) { int nw = icon.getIconWidth(); int nh = icon.getIconHeight(); if(icon.getIconWidth() > w) { nw = w; nh = (nw * icon.getIconHeight()) / icon.getIconWidth(); } if(nh > h) { nh = h; nw = (icon.getIconWidth() * nh) / icon.getIconHeight(); } return new ImageIcon(icon.getImage().getScaledInstance(nw, nh, Image.SCALE_DEFAULT)); }\n\nKyle PhillipsKyle Phillips\n\nOne (quick & dirty) way to resize images it to use HTML & specify the new size in the image element. This even works for animated images with transparency. Andrew ThompsonAndrew Thompson\n\nI agree this code works, to size an ImageIcon from a file for display while keeping the aspect ratio I have used the below. /* * source File of image, maxHeight pixels of height available, maxWidth pixels of width available * @return an ImageIcon for adding to a label */ public ImageIcon rescaleImage(File source,int maxHeight, int maxWidth) { int newHeight = 0, newWidth = 0; // Variables for the new height and width int priorHeight = 0, priorWidth = 0; BufferedImage image = null; ImageIcon sizeImage; try { image = ImageIO.read(source); // get the image } catch (Exception e) { e.printStackTrace(); System.out.println(""Picture upload attempted & failed""); } sizeImage = new ImageIcon(image); if(sizeImage != null) { priorHeight = sizeImage.getIconHeight(); priorWidth = sizeImage.getIconWidth(); } // Calculate the correct new height and width if((float)priorHeight/(float)priorWidth > (float)maxHeight/(float)maxWidth) { newHeight = maxHeight; newWidth = (int)(((float)priorWidth/(float)priorHeight)*(float)newHeight); } else { newWidth = maxWidth; newHeight = (int)(((float)priorHeight/(float)priorWidth)*(float)newWidth); } // Resize the image // 1. Create a new Buffered Image and Graphic2D object BufferedImage resizedImg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB); Graphics2D g2 = resizedImg.createGraphics(); // 2. Use the Graphic object to draw a new image to the image in the buffer g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); g2.drawImage(image, 0, 0, newWidth, newHeight, null); g2.dispose(); // 3. Convert the buffered image into an ImageIcon for return return (new ImageIcon(resizedImg)); }\n\nI found that there is a minor edit to this fix from trolologuy on the last line of code, you will need to implement a new ImageIcon to get the code to compile properly (Yes I know this is 10 years ago). I found this to be an easy fix for a one off issue, but Suken Shah and Mr. Polywhirl have a better fix overall. ImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // assign image to a new ImageIcon Image image = imageIcon.getImage(); // transform it Image newimg = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH); // scale it smoothly ImageIcon newImageIcon = new ImageIcon(newimg); // assign to a new ImageIcon instance\n\n""""""']",0,0.571428571,0.954545455
swing,JPanel,Java JPanel resize Image,"<p>If you are using JPanels  then are probably working with Swing.
<p>The image is now a swing component.
It becomes subject to layout conditions like any other component.</p>
Level; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.
<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.
<p>I think there is no need to subclass of anything.
You can set an image into a Jlabel.
So  resize the Jlabel then fill it with an image.
<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>
<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>
There shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>
If you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.
For a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>
<p><code>JPanel</code> is almost always the wrong class to subclass.
<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.
Not really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.
<p>I m doing something very similar in a private project I m working on.
Thus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.
<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.
This reduces the amount of flashing done while you generate your images  and you can thread it.
<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.
<p>But for your scenario (just show the whole image every time).
You need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).
<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>
generally you add padding with the layout manager you are using.
There are cases that you can just expand the border of the <code>JPanel</code>.</p>
<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>
method which seems to be what you re looking for.</p>
Since it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>
This will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>
<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.
Obviously put and remove are not supported.
<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>
LinkedHashMap contains values based on the key.</p> </li> <li><p>
<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>
may be the simplest.
<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>
Once key with value is created  we are not overriding its value.</li> </ul>
@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.
@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.
If key already available then  we are not overriding its value.
<p>If you know the KEY s are fixed then you can use EnumMap.
http://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.
It seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.
Note that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>
<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= 
<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).
<p>Also when using EnumMap there should be no collisions which can be more efficient.
<p>I really find that using enumMap makes for clean readable code.
<p>LinkedHashMap is used for maintaing insertion order.
The LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.
<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>
<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.
<p>Yes  it is most definitely possible to do this.
<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.
If you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>","Most common way to construct:
JPanel panel = new JPanel();
Based on 51 examples","You can resize an image like this,

Image new_image = old_image.getScaledInstance( new_width, new_height,  java.awt.Image.SCALE_SMOOTH ) ;
To make sure the ball does not exceed the maximum size,

if(prevImage.getWidth(null) >= max_width || prevImage.getHeight(null) >= max_height)
{
    System.out.println(""MAX Size reached !"");
}
else
{
    // increase the size
    Image new_image = old_image.getScaledInstance( new_width, new_height,  java.awt.Image.SCALE_SMOOTH ) ;
}","*******************usage scenario 1********************** 
----------usage scenario----------
Java GUI: Sharing values across different JFrames
----------Explanation----------

----------Code Sample----------
import javax.swing.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.util.*;

// TwoWindows is the Application 
public class TwoWindows {
// shared state ( model ) 
private int clickCount = 0;

// UI
private List toUpdate = new ArrayList();

// listener ( listens for clicks on buttons kind of controller )
private ActionListener actionListener = new ActionListener() {

// Each time update the UI 
public void actionPerformed( ActionEvent e ) {
clickCount++; 
for( JLabel label : toUpdate ) {
label.setText( ""Count: "" + ( clickCount ) );
}
}
};

// Createsa winddow with a label and a button
public void showWindow( String named ) {
JFrame f = new JFrame( named );
f.add( createButtonAndLabel() );
f.pack();
f.setVisible( true );
}

// Creates the label and button and adds this.actionListener
// to each button. 
private JComponent createButtonAndLabel() {
JPanel panel = new JPanel();
JLabel label = new JLabel(""Count: 0"");
JButton clickMe = new JButton(""Click me"");
// adding the label to a ""view"" list.
toUpdate.add( label );
// adding the listener to each button 
clickMe.addActionListener( actionListener );
panel.add( label );
panel.add( clickMe );
return panel;
}

// Run the app
public static void main( String [] args ) {
TwoWindows t = new TwoWindows();
t.showWindow(""A"");
t.showWindow(""B"");
}
}
*******************end of usage scenario 1***************** 

*******************usage scenario 2********************** 
----------usage scenario----------
dragging a jlabel around the screen
----------Explanation----------
Addition: You've probably left this thread, but if you come back, or for the benefit of others, I wanted to clarify what I meant by using a JLayeredPane by posting an example.
----------Code Sample----------
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class DragLabelOnLayeredPane extends JLayeredPane {
public static final int WIDTH = 680;
public static final int HEIGHT = 480;
private static final int GRID_ROWS = 8;
private static final int GRID_COLS = 6;
private static final int GAP = 3;
private static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT);
private static final Dimension LABEL_SIZE = new Dimension(60, 40);
private GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP);
private JPanel backingPanel = new JPanel(gridlayout);
private JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS];
private JLabel redLabel = new JLabel(""Red"", SwingConstants.CENTER);
private JLabel blueLabel = new JLabel(""Blue"", SwingConstants.CENTER);

public DragLabelOnLayeredPane() {
backingPanel.setSize(LAYERED_PANE_SIZE);
backingPanel.setLocation(2 * GAP, 2 * GAP);
backingPanel.setBackground(Color.black);
for (int row = 0; row < GRID_ROWS; row++) {
for (int col = 0; col < GRID_COLS; col++) {
panelGrid[row][col] = new JPanel(new GridBagLayout());
backingPanel.add(panelGrid[row][col]);
}
}

redLabel.setOpaque(true);
redLabel.setBackground(Color.red.brighter().brighter());
redLabel.setPreferredSize(LABEL_SIZE);
panelGrid[4][3].add(redLabel);

blueLabel.setOpaque(true);
blueLabel.setBackground(Color.blue.brighter().brighter());
blueLabel.setPreferredSize(LABEL_SIZE);
panelGrid[1][1].add(blueLabel);

backingPanel.setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));
setPreferredSize(LAYERED_PANE_SIZE);
add(backingPanel, JLayeredPane.DEFAULT_LAYER);
MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
addMouseListener(myMouseAdapter);
addMouseMotionListener(myMouseAdapter);
}

private class MyMouseAdapter extends MouseAdapter {
private JLabel dragLabel = null;
private int dragLabelWidthDiv2;
private int dragLabelHeightDiv2;
private JPanel clickedPanel = null;

@Override
public void mousePressed(MouseEvent me) {
clickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
Component[] components = clickedPanel.getComponents();
if (components.length == 0) {
return;
}
// if we click on jpanel that holds a jlabel
if (components[0] instanceof JLabel) {

// remove label from panel
dragLabel = (JLabel) components[0];
clickedPanel.remove(dragLabel);
clickedPanel.revalidate();
clickedPanel.repaint();

dragLabelWidthDiv2 = dragLabel.getWidth() / 2;
dragLabelHeightDiv2 = dragLabel.getHeight() / 2;

int x = me.getPoint().x - dragLabelWidthDiv2;
int y = me.getPoint().y - dragLabelHeightDiv2;
dragLabel.setLocation(x, y);
add(dragLabel, JLayeredPane.DRAG_LAYER);
repaint();
}
}

@Override
public void mouseDragged(MouseEvent me) {
if (dragLabel == null) {
return;
}
int x = me.getPoint().x - dragLabelWidthDiv2;
int y = me.getPoint().y - dragLabelHeightDiv2;
dragLabel.setLocation(x, y);
repaint();
}

@Override
public void mouseReleased(MouseEvent me) {
if (dragLabel == null) {
return;
}
remove(dragLabel); // remove dragLabel for drag layer of JLayeredPane
JPanel droppedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());
if (droppedPanel == null) {
// if off the grid, return label to home
clickedPanel.add(dragLabel);
clickedPanel.revalidate();
} else {
int r = -1;
int c = -1;
searchPanelGrid: for (int row = 0; row < panelGrid.length; row++) {
for (int col = 0; col < panelGrid[row].length; col++) {
if (panelGrid[row][col] == droppedPanel) {
r = row;
c = col;
break searchPanelGrid;
}
}
}

if (r == -1 || c == -1) {
// if off the grid, return label to home
clickedPanel.add(dragLabel);
clickedPanel.revalidate();
} else {
droppedPanel.add(dragLabel);
droppedPanel.revalidate();
}
}

repaint();
dragLabel = null;
}
}

private static void createAndShowUI() {
JFrame frame = new JFrame(""DragLabelOnLayeredPane"");
frame.getContentPane().add(new DragLabelOnLayeredPane());
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}

public static void main(String[] args) {
java.awt.EventQueue.invokeLater(new Runnable() {
public void run() {
createAndShowUI();
}
});
}
}
*******************end of usage scenario 2***************** 

*******************usage scenario 3********************** 
----------usage scenario----------
Which layout can do this?
----------Explanation----------
You don't need a layout manager which specifically supports this. You can calculate the x, y positions yourself with some fairly simple trigonometry, then use a regular layout such as SpringLayout .
----------Code Sample----------
import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SpringLayout;

public class CircleLayout {

/**
* Calculate x,y positions of n labels positioned in
* a circle around a central point. Assumes AWT coordinate
* system where origin (0,0) is top left.
* @param args
*/
public static void main(String[] args) {
int n = 6; //Number of labels
int radius = 100;
Point centre = new Point(200,200);

double angle = Math.toRadians(360/n);
List points = new ArrayList();
points.add(centre);

//Add points
for (int i=0; i double theta = i*angle;
int dx = (int)(radius * Math.sin(theta));
int dy = (int)(-radius * Math.cos(theta));
Point p = new Point(centre.x + dx, centre.y + dy);
points.add(p);
}

draw(points);
}

private static void draw(List points) {
JFrame frame = new JFrame(""Labels in a circle"");
frame.setSize(500, 500);
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

JPanel panel = new JPanel();;
SpringLayout layout = new SpringLayout();

int count = 0;
for (Point point : points) {
JLabel label = new JLabel(""Point "" + count);
panel.add(label);
count++;
layout.putConstraint(SpringLayout.WEST, label, point.x, SpringLayout.WEST, panel);
layout.putConstraint(SpringLayout.NORTH, label, point.y, SpringLayout.NORTH, panel);
}

panel.setLayout(layout);

frame.add(panel);
frame.setVisible(true);

}
}
*******************end of usage scenario 3***************** 

*******************usage scenario 4********************** 
----------usage scenario----------
Multiline text in JLabel
----------Explanation----------
You can do it by putting HTML in the code, so:
----------Code Sample----------
JFrame frame = new JFrame();
frame.setLayout(new GridLayout());
JLabel label = new JLabel(""First line
Second line"");
frame.add(label);
frame.pack();
frame.setVisible(true);
*******************end of usage scenario 4***************** 

*******************usage scenario 5********************** 
----------usage scenario----------
Unicode characters in javax.swing only display when using the default font-size
----------Explanation----------

----------Code Sample----------
import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class TestUnicodeFont {

public static void main(String[] args) {
new TestUnicodeFont();
}

public TestUnicodeFont() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setLayout(new BorderLayout());
frame.add(new TestPane());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public class TestPane extends JPanel {

public TestPane() {
setLayout(new GridBagLayout());
GridBagConstraints gbc = new GridBagConstraints();
gbc.gridwidth = GridBagConstraints.REMAINDER;
JLabel normal = new JLabel(""Normal - ?"");
JLabel byCode = new JLabel(""Normal code - \u2109"");

JLabel normalLarger = new JLabel(""Large - ?"");
normalLarger.setFont(normalLarger.getFont().deriveFont(48f));
JLabel byCodeLatger = new JLabel(""Large code - \u2109"");
byCodeLatger.setFont(byCodeLatger.getFont().deriveFont(48f));

add(normal, gbc);
add(byCode, gbc);
add(normalLarger, gbc);
add(byCodeLatger, gbc);
}
}

}
*******************end of usage scenario 5***************** 

*******************usage scenario 6********************** 
----------usage scenario----------
Label will not update with the flow
----------Explanation----------
You're shadowing your tieLabel variable by re-declaring it in the class. By doing this, the local variable declared in the constructor is initialized, but the field declared in the class remains null:
----------Code Sample----------
public class GamePanel extends JPanel {
private JButton rockButton, paperButton, scissorsButton;

// all these variables are null and remain null
private JLabel userLabel, computerLabel, resultLabel, winLabel, tieLabel,
loseLabel;

// ...

public GamePanel() {

// ...

// ***** shadowing vars here
JButton rockButton = new JButton(rockButtonText);
JButton paperButton = new JButton(paperButtonText);
JButton scissorsButton = new JButton(scissorsButtonText);

//...

// *** and here
JLabel userLabel = new JLabel(""User:"");
JLabel computerLabel = new JLabel(""Computer:"");
JLabel winLabel = new JLabel(""Win: "" + winInt);
JLabel tieLabel = new JLabel(""Tie: "" + tieInt);
JLabel loseLabel = new JLabel(""Lose:"" + loseInt);

public GamePanel() {

// ...

rockButton = new JButton(rockButtonText);
paperButton = new JButton(paperButtonText);
scissorsButton = new JButton(scissorsButtonText);

//...

userLabel = new JLabel(""User:"");
computerLabel = new JLabel(""Computer:"");
winLabel = new JLabel(""Win: "" + winInt);
tieLabel = new JLabel(""Tie: "" + tieInt);
loseLabel = new JLabel(""Lose:"" + loseInt);
*******************end of usage scenario 6***************** 

*******************usage scenario 7********************** 
----------usage scenario----------
Java: How do I pass variables from JButton ActionListener to main class?
----------Explanation----------
Make a class, instance variable available for the numGenerator to access directly...
----------Code Sample----------
public class Main{
public static void main(String[] args){
new Main();
}

// This variable will be visible to the inner class numGenerator
private JLabel output;

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator());
}

public class numGenerator implements ActionListener{
public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
output.setText(Integer.toString(num));

}
}
}

public class Main{
public static void main(String[] args){
new Main();
}

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator(output));
}

public class numGenerator implements ActionListener{
private JLabel label;

public numGenerator(JLabel label) {
this.label = label;
}

public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
if (label != null) {
label.setText(Integer.toString(num));
}

}
}
}

public class Main{
public static void main(String[] args){
new Main();
}

public Main() {
JFrame mainFrame = new JFrame(""Experiment"");
mainFrame.setSize(500,500);
mainFrame.setVisible(true);

Panel panel = new Panel();
mainFrame.getContentPane().add(panel);

final JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); 
panel.add(output); 

JButton numGenerator = new JButton(""Generate Number"");
panel.add(numGenerator);
numGenerator.addActionListener(new numGenerator(new NumberGeneratorListener() {
public void numberGenerated(int number) {
output.setText(Integer.toString(number));
}
}));
}

public interface NumberGeneratorListener {
public void numberGenerated(int number);
}

public class numGenerator implements ActionListener{
private NumberGeneratorListener listener;

public numGenerator(NumberGeneratorListener listener) {
this.listener = listener;
}

public void actionPerformed(ActionEvent e){

Random dice = new Random();
int num = dice.nextInt(3);
if (listener != null) {
listener.numberGenerated(num);
}

}
}
}
*******************end of usage scenario 7***************** 

*******************usage scenario 8********************** 
----------usage scenario----------
How to align a JLabel to the bottom of a JPanel
----------Explanation----------
You could use BorderLayout and add the label to the PAGE_END position of the container
----------Code Sample----------
setLayout(new BorderLayout());
add(itemLabel, BorderLayout.PAGE_END);

JLabel itemLabel = new JLabel(""ccc"", JLabel.CENTER);
*******************end of usage scenario 8***************** 

*******************usage scenario 9********************** 
----------usage scenario----------
Can't move JLabel on JPanel
----------Explanation----------

----------Code Sample----------
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager2;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

public class Monopoly {

public static void main(String[] args) {
new Monopoly();
}

public Monopoly() {
EventQueue.invokeLater(new Runnable() {
@Override
public void run() {
try {
UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
ex.printStackTrace();
}

JFrame frame = new JFrame(""Testing"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(new MonopolyBoard());
frame.pack();
frame.setLocationRelativeTo(null);
frame.setVisible(true);
}
});
}

public class MonopolyBoard extends JPanel {

private List players;

public MonopolyBoard() {
setLayout(new MonopolyBoardLayout());

players = new ArrayList<>(2);
try {
players.add(makePlayer(""/Dog.png""));
players.add(makePlayer(""/Car.png""));

for (JLabel player : players) {
add(player, new Integer(0));
}
} catch (IOException exp) {
exp.printStackTrace();
}

Timer timer = new Timer(1000, new ActionListener() {
private int count = 0;
private Random rnd = new Random();

@Override
public void actionPerformed(ActionEvent e) {
int playerIndex = count % players.size();
JLabel player = players.get(playerIndex);

MonopolyBoardLayout layout = (MonopolyBoardLayout) getLayout();
int position = layout.getPosition(player);

position += rnd.nextInt(5) + 1;
if (position > 35) {
position -= 35;
}

layout.setPosition(player, position);

revalidate();
repaint();
count++;
}
});
timer.start();
}

protected JLabel makePlayer(String path) throws IOException {
JLabel label = new JLabel(new ImageIcon(ImageIO.read(getClass().getResource(path))), JLabel.CENTER);
return label;
}

@Override
protected void paintComponent(Graphics g) {
super.paintComponent(g);
Graphics2D g2d = (Graphics2D) g.create();
int width = getWidth();
int height = getHeight();

for (int index = 0; index < 36; index++) {
Rectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);
g2d.draw(bounds);
}

g2d.dispose();
}

}

public static class MonopolyBoardLayoutHelper {

private static Map mapBoardCells;

static {
mapBoardCells = new HashMap<>(25);

mapBoardCells.put(10, new Point(0, 8));
mapBoardCells.put(11, new Point(0, 7));
mapBoardCells.put(12, new Point(0, 6));
mapBoardCells.put(13, new Point(0, 5));
mapBoardCells.put(14, new Point(0, 4));
mapBoardCells.put(15, new Point(0, 3));
mapBoardCells.put(16, new Point(0, 2));
mapBoardCells.put(17, new Point(0, 1));
mapBoardCells.put(18, new Point(0, 0));

mapBoardCells.put(0, new Point(9, 9));
mapBoardCells.put(1, new Point(8, 9));
mapBoardCells.put(2, new Point(7, 9));
mapBoardCells.put(3, new Point(6, 9));
mapBoardCells.put(4, new Point(5, 9));
mapBoardCells.put(5, new Point(4, 9));
mapBoardCells.put(6, new Point(3, 9));
mapBoardCells.put(7, new Point(2, 9));
mapBoardCells.put(8, new Point(1, 9));
mapBoardCells.put(9, new Point(0, 9));

mapBoardCells.put(19, new Point(1, 0));
mapBoardCells.put(20, new Point(2, 0));
mapBoardCells.put(21, new Point(3, 0));
mapBoardCells.put(22, new Point(4, 0));
mapBoardCells.put(23, new Point(5, 0));
mapBoardCells.put(24, new Point(6, 0));
mapBoardCells.put(25, new Point(7, 0));
mapBoardCells.put(26, new Point(8, 0));
mapBoardCells.put(27, new Point(9, 0));

mapBoardCells.put(28, new Point(9, 1));
mapBoardCells.put(29, new Point(9, 2));
mapBoardCells.put(30, new Point(9, 3));
mapBoardCells.put(31, new Point(9, 4));
mapBoardCells.put(32, new Point(9, 5));
mapBoardCells.put(33, new Point(9, 6));
mapBoardCells.put(34, new Point(9, 7));
mapBoardCells.put(35, new Point(9, 8));

}

public static Rectangle getCellBounds(int index, int width, int height) {
Rectangle bounds = new Rectangle(0, 0, 0, 0);
int size = Math.min(width, height);
int cellSize = size / 10;

int xOffset = (width - size) / 2;
int yOffset = (height - size) / 2;

Point point = mapBoardCells.get(index);
if (point != null) {

int x = xOffset + (point.x * cellSize);
int y = yOffset + (point.y * cellSize);
bounds = new Rectangle(x, y, cellSize, cellSize);

}

return bounds;

}

}

public static class MonopolyBoardLayout implements LayoutManager2 {

public static final int DEFAULT_CELL_SIZE = 64;

private Map cellConstraints;

public MonopolyBoardLayout() {
cellConstraints = new HashMap<>(5);
}

public Integer getPosition(Component comp) {
return cellConstraints.get(comp);
}

public void setPosition(Component comp, int position) {
cellConstraints.put(comp, position);
}

@Override
public void addLayoutComponent(Component comp, Object constraints) {
if (constraints instanceof Integer) {
int cell = (int) constraints;
if (cell >= 0 && cell <= 35) {
cellConstraints.put(comp, cell);
} else {
throw new IllegalArgumentException(constraints + "" is not within the bounds of a valid cell reference (0-35)"");
}
} else {
throw new IllegalArgumentException(constraints + "" is not a valid cell reference (integer within 0-35)"");
}
}

@Override
public Dimension maximumLayoutSize(Container target) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public float getLayoutAlignmentX(Container target) {
return 0.5f;
}

@Override
public float getLayoutAlignmentY(Container target) {
return 0.5f;
}

@Override
public void invalidateLayout(Container target) {
}

@Override
public void addLayoutComponent(String name, Component comp) {
}

@Override
public void removeLayoutComponent(Component comp) {
cellConstraints.remove(comp);
}

@Override
public Dimension preferredLayoutSize(Container parent) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public Dimension minimumLayoutSize(Container parent) {
return new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);
}

@Override
public void layoutContainer(Container parent) {
int width = parent.getWidth();
int height = parent.getHeight();

Map> components = new HashMap<>(25);

for (Component child : parent.getComponents()) {
Integer cell = cellConstraints.get(child);
if (cell != null) {
List children = components.get(cell);
if (children == null) {
children = new ArrayList<>(4);
components.put(cell, children);
}
children.add(child);
} else {
child.setBounds(0, 0, 0, 0);
}
}

for (Map.Entry> entry : components.entrySet()) {
int index = entry.getKey();
Rectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);
List comp = entry.getValue();
int xDelta = 0;
int yDelta = 0;
int availableWidth = bounds.width;
int availableHeight = bounds.height;
switch (comp.size()) {
case 2:
availableWidth /= 2;
xDelta = availableWidth;
break;
case 3:
case 4:
availableWidth /= 2;
xDelta = availableWidth;
availableHeight /= 2;
yDelta = availableHeight;
break;
}
int x = bounds.x;
int y = bounds.y;
for (int count = 0; count < comp.size() && count < 4; count++) {
Component child = comp.get(count);
child.setSize(availableWidth, availableHeight);
child.setLocation(x, y);

x += xDelta;
if (x >= bounds.x + bounds.width) {
x = bounds.x;
y += yDelta;
}
}
}

}

}

}
*******************end of usage scenario 9***************** 

*******************usage scenario 10********************** 
----------usage scenario----------
How Do I Make These JLabels of JButtons invisible
----------Explanation----------
Edit 
For example, a bad code example as a proof of concept. Try compiling and running this.
----------Code Sample----------
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.util.EnumMap;
import java.util.Map;

import javax.swing.*;

@SuppressWarnings(""serial"")
public class Checkers extends JPanel {
public static final int SIDE_LENGTH = 60;
public static final int ROW_COUNT = 8;
private static final String ROW = ""row"";
private static final String COLUMN = ""column"";
private static final Color LIGHT_COLOR = new Color(210, 180, 140);
private static final Color DARK_COLOR = new Color(107, 68, 35);
private Map checkerIconMap = new EnumMap(
Checker.class);
private JLabel[][] labelGrid = new JLabel[ROW_COUNT][ROW_COUNT];
private Checker[][] checkerGrid = new Checker[ROW_COUNT][ROW_COUNT];

public Checkers() {
for (Checker checker : Checker.values()) {
checkerIconMap.put(checker, createCheckerIcon(checker));
}
setLayout(new GridLayout(ROW_COUNT, ROW_COUNT));

for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
checkerGrid[row][col] = Checker.EMPTY;
JLabel gridCell = new JLabel(checkerIconMap.get(Checker.EMPTY));
gridCell.setOpaque(true);
gridCell.putClientProperty(ROW, row);
gridCell.putClientProperty(COLUMN, col);
Color c = row % 2 == col % 2 ? LIGHT_COLOR : DARK_COLOR;
gridCell.setBackground(c);
add(gridCell);
labelGrid[row][col] = gridCell;
}
}

for (int i = 0; i < labelGrid.length / 2 - 1; i++) {
for (int j = 0; j < labelGrid.length / 2; j++) {
int row = i;
int col = j * 2;
col += row % 2 == 0 ? 1 : 0;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.BLACK));
checkerGrid[row][col] = Checker.BLACK;

row = ROW_COUNT - row - 1;
col = ROW_COUNT - col - 1;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.RED));
checkerGrid[row][col] = Checker.RED;
}
}

MyMouseAdapter myMouseAdapter = new MyMouseAdapter();
addMouseListener(myMouseAdapter);
addMouseMotionListener(myMouseAdapter);
}

private Icon createCheckerIcon(Checker checker) {
BufferedImage img = new BufferedImage(SIDE_LENGTH, SIDE_LENGTH,
BufferedImage.TYPE_INT_ARGB);
Graphics2D g2 = img.createGraphics();
g2.setColor(checker.getColor());
g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
RenderingHints.VALUE_ANTIALIAS_ON);
int x = 3;
int y = x;
int width = SIDE_LENGTH - 2 * x;
int height = width;
g2.fillOval(x, y, width, height);
g2.dispose();

return new ImageIcon(img);
}

private class MyMouseAdapter extends MouseAdapter {
private int selectedRow = -1;
private int selectedCol = -1;
private Checker selectedChecker = null;
private JPanel glassPane = null;
private Point p = null;
private JLabel movingLabel = new JLabel(checkerIconMap.get(Checker.EMPTY));

public MyMouseAdapter() {
movingLabel.setSize(movingLabel.getPreferredSize());
movingLabel.setVisible(false);
}

@Override
public void mousePressed(MouseEvent e) {
p = e.getPoint();
for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
JLabel gridCell = labelGrid[row][col];
if (gridCell == getComponentAt(p)) {
if (checkerGrid[row][col] != Checker.EMPTY) {
selectedRow = row;
selectedCol = col;
selectedChecker = checkerGrid[row][col];
checkerGrid[row][col] = Checker.EMPTY;
labelGrid[row][col].setIcon(checkerIconMap.get(Checker.EMPTY));

JRootPane rootPane = SwingUtilities.getRootPane(Checkers.this);
glassPane = (JPanel) rootPane.getGlassPane();
glassPane.setVisible(true);
glassPane.setLayout(null);
movingLabel.setIcon(checkerIconMap.get(selectedChecker));
movingLabel.setVisible(true);
glassPane.add(movingLabel);
int x = p.x - SIDE_LENGTH / 2;
int y = p.y - SIDE_LENGTH / 2;
movingLabel.setLocation(x, y);
}
}
}
}
}

@Override
public void mouseReleased(MouseEvent e) {
if (selectedChecker == null) {
return;
}

p = e.getPoint();
if (!Checkers.this.contains(p)) {
// if mouse releases and is totally off of the grid
returnCheckerToOriginalCell();
clearGlassPane();
return;
}

for (int row = 0; row < labelGrid.length; row++) {
for (int col = 0; col < labelGrid[row].length; col++) {
JLabel gridCell = labelGrid[row][col];
if (gridCell == getComponentAt(p)) {
if (isMoveLegal(row, col)) {
checkerGrid[row][col] = selectedChecker;
labelGrid[row][col].setIcon(checkerIconMap.get(selectedChecker));

// todo: check for jumped pieces...
} else {
// illegal move
returnCheckerToOriginalCell();
}
}
}
}
clearGlassPane();
}

// this code would go in the model class
private boolean isMoveLegal(int row, int col) {
if (checkerGrid[row][col] != Checker.EMPTY) {
// trying to put a checker on another checker
returnCheckerToOriginalCell();
} else if (row == selectedRow && col == selectedCol) {
// trying to put checker back in same position
returnCheckerToOriginalCell();
} else if (row % 2 == col % 2) {
// invalid square
returnCheckerToOriginalCell();
} else {
// TODO: more logic needs to go here to test for a legal move
// and to remove jumped pieces

return true;
}
return false;
}

@Override
public void mouseDragged(MouseEvent e) {
if (selectedChecker == null || p == null) {
return;
}
p = e.getPoint();
int x = p.x - SIDE_LENGTH / 2;
int y = p.y - SIDE_LENGTH / 2;
movingLabel.setLocation(x, y);
}

private void clearGlassPane() {
glassPane.setVisible(false);
movingLabel.setVisible(false);
selectedChecker = null;
p = null;
selectedCol = -1;
selectedRow = -1;
}

private void returnCheckerToOriginalCell() {
checkerGrid[selectedRow][selectedCol] = selectedChecker;
labelGrid[selectedRow][selectedCol].setIcon(checkerIconMap.get(selectedChecker));
}
}

private static void createAndShowGui() {
Checkers mainPanel = new Checkers();

JFrame frame = new JFrame(""JLabelGrid"");
frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
frame.getContentPane().add(mainPanel);
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

public static void main(String[] args) {
SwingUtilities.invokeLater(new Runnable() {
public void run() {
createAndShowGui();
}
});
}
}

class CheckerModel {

}

enum Checker {
EMPTY(new Color(0, 0, 0, 0)), RED(Color.red), BLACK(Color.black);
private Color color;

private Checker(Color color) {
this.color = color;
}

public Color getColor() {
return color;
}
}
*******************end of usage scenario 10***************** 

*******************usage scenario 11********************** 
----------usage scenario----------
design panel with GridBagLayout properly
----------Explanation----------
Here's the code. This is what is meant by a short, self-contained, runnable example of the solution.
----------Code Sample----------
package com.ggl.testing;

import java.awt.Component;
import java.awt.Container;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

public class StudentDataEditor implements Runnable {

private static final Insets normalInsets = new Insets(10, 10, 0, 10);
private static final Insets topInsets = new Insets(30, 10, 0, 10);

private Student student;

public static void main(String[] args) {
SwingUtilities.invokeLater(new StudentDataEditor());
}

public StudentDataEditor() {
this.student = new Student(""00000017108"", ""Sutandi"",
""Information Systems"", 2);
}

@Override
public void run() {
JFrame frame = new JFrame(""Student Data Editor"");
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.add(createMainPanel());
frame.pack();
frame.setLocationByPlatform(true);
frame.setVisible(true);
}

private JPanel createMainPanel() {
JPanel panel = new JPanel();
panel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));

panel.add(createTitlePanel());
panel.add(createStudentPanel());
panel.add(createMPPanel());
panel.add(Box.createVerticalStrut(30));
panel.add(createEmailPanel());
panel.add(Box.createVerticalStrut(10));

return panel;
}

private JPanel createTitlePanel() {
JPanel panel = new JPanel();

JLabel titleLabel = new JLabel(""CEK NILAI"");
titleLabel.setFont(titleLabel.getFont().deriveFont(24F));

panel.add(titleLabel);

return panel;
}

private JPanel createStudentPanel() {
JPanel panel = new JPanel();
panel.setLayout(new GridBagLayout());

int gridy = 0;

JLabel idLabel = new JLabel(""ID:"");
addComponent(panel, idLabel, 0, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JTextField idTextField = new JTextField(15);
idTextField.setEditable(false);
idTextField.setText(student.getId());
addComponent(panel, idTextField, 1, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JLabel jurusanLabel = new JLabel(""Jurusan:"");
addComponent(panel, jurusanLabel, 2, gridy, 1, 1, topInsets,
GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);

JTextField jurusanTextField = new JTextField(15);
jurusanTextField.setEditable(false);
jurusanTextField.setText(student.getJurusan());
ad","['"""""" Image resizing and displaying in a JPanel or a JLabel without loss of quality\n\nI\'m developing a java program to capture employee images at the time of registration using a webcam. I can obtain the picture without any problem, and save it in my C: drive but upon retrieval of the image only a part of the image is displayed on the label. Is there a way of re sizing the JPEG before saving it? or before displaying it? like shrinking it without a quality loss. okay guys...""""""', '""""""is FlowLayout ??? (defalut Layout is there isn\'t defined anything) download.oracle.com/javase/tutorial/uiswing/layout/index.html, are you know download.oracle.com/javase/tutorial/uiswing/components/\n\nImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // load the image to a imageIcon Image image = imageIcon.getImage(); // transform it Image newimg = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way imageIcon = new ImageIcon(newimg); // transform it back\n\ntrolologuytrolologuy\n\n2,0\n\nResizing the icon is not straightforward. You need to use Java\'s graphics 2D to scale the image. The first parameter is a Image class which you can easily get from ImageIcon class. You can use ImageIcon class to load your image file and then simply call getter method to get the image. private Image getScaledImage(Image srcImg, int w, int h){ BufferedImage resizedImg = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB); Graphics2D g2 = resizedImg.createGraphics(); g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); g2.drawImage(srcImg, 0, 0, w, h, null); g2.dispose(); return resizedImg; }\n\nSuken ShahSuken Shah\n\n1,0\n\nImageIcon imageIcon = new ImageIcon(new ImageIcon(""icon.png"").getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT)); label.setIcon(imageIcon);\n\nFrom: Resize a picture to fit a JLabel\n\nuser4718768user4718768\n\nThis will keep the right aspect ratio. public ImageIcon scaleImage(ImageIcon icon, int w, int h) { int nw = icon.getIconWidth(); int nh = icon.getIconHeight(); if(icon.getIconWidth() > w) { nw = w; nh = (nw * icon.getIconHeight()) / icon.getIconWidth(); } if(nh > h) { nh = h; nw = (icon.getIconWidth() * nh) / icon.getIconHeight(); } return new ImageIcon(icon.getImage().getScaledInstance(nw, nh, Image.SCALE_DEFAULT)); }\n\nKyle PhillipsKyle Phillips\n\nOne (quick & dirty) way to resize images it to use HTML & specify the new size in the image element. This even works for animated images with transparency. Andrew ThompsonAndrew Thompson\n\nI agree this code works, to size an ImageIcon from a file for display while keeping the aspect ratio I have used the below. /* * source File of image, maxHeight pixels of height available, maxWidth pixels of width available * @return an ImageIcon for adding to a label */ public ImageIcon rescaleImage(File source,int maxHeight, int maxWidth) { int newHeight = 0, newWidth = 0; // Variables for the new height and width int priorHeight = 0, priorWidth = 0; BufferedImage image = null; ImageIcon sizeImage; try { image = ImageIO.read(source); // get the image } catch (Exception e) { e.printStackTrace(); System.out.println(""Picture upload attempted & failed""); } sizeImage = new ImageIcon(image); if(sizeImage != null) { priorHeight = sizeImage.getIconHeight(); priorWidth = sizeImage.getIconWidth(); } // Calculate the correct new height and width if((float)priorHeight/(float)priorWidth > (float)maxHeight/(float)maxWidth) { newHeight = maxHeight; newWidth = (int)(((float)priorWidth/(float)priorHeight)*(float)newHeight); } else { newWidth = maxWidth; newHeight = (int)(((float)priorHeight/(float)priorWidth)*(float)newWidth); } // Resize the image // 1. Create a new Buffered Image and Graphic2D object BufferedImage resizedImg = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_RGB); Graphics2D g2 = resizedImg.createGraphics(); // 2. Use the Graphic object to draw a new image to the image in the buffer g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR); g2.drawImage(image, 0, 0, newWidth, newHeight, null); g2.dispose(); // 3. Convert the buffered image into an ImageIcon for return return (new ImageIcon(resizedImg)); }\n\nI found that there is a minor edit to this fix from trolologuy on the last line of code, you will need to implement a new ImageIcon to get the code to compile properly (Yes I know this is 10 years ago). I found this to be an easy fix for a one off issue, but Suken Shah and Mr. Polywhirl have a better fix overall. ImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // assign image to a new ImageIcon Image image = imageIcon.getImage(); // transform it Image newimg = image.getScaledInstance(120, 120, java.awt.Image.SCALE_SMOOTH); // scale it smoothly ImageIcon newImageIcon = new ImageIcon(newimg); // assign to a new ImageIcon instance\n\n""""""']",0,0.8888888,1