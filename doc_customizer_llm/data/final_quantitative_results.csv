Package,Java API,Question,SISE,CROKAGE,SISE_context_relevancy,CROKAGE_context_relevancy
applet,Applet,Loading and displaying local Images in Java Applet,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],"['It\'s likely the image can\'t be accessed from its current context, remember, applets normally run in a very tight security sandbox which prevents them from accessing files on the local/client file system.\n\nYou either need to load the images from the server the applet is been loaded from (using getDocument/CodeBase or a relative URL), or based on your example, as embedded an resource, for example\n\ntileset_terrain = ImageIO.read(getClass().getResource(""/res/tileset_terrain.png""));\nThis assumes that the image is included within the Jar file under the /res directory.\n\nIf the image resides on the server from which the applet is been load, you could also use\n\ntry {\n    URL url = new URL(getCodeBase(), ""res/tileset_terrain.png"");\n    img = ImageIO.read(url);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nTake a look at Reading/Loading images and What Applets Can and Cannot Do for more details.']",0.166666667,0.153846154
applet,Applet,Classloader in Applet: Cant access files,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],"['Classloader hierarchy\nWhenever a new JVM is started the bootstrap classloader is responsible to load key Java classes (from java.lang package) and other runtime classes to the memory first. The bootstrap classloader is a parent of all other classloaders. Consequently, it is the only one without a parent.\n\nNext comes the extension classloader. It has the bootstrap classloader as parent and is responsible for loading classes from all .jar files kept in the java.ext.dirs path‚Äìthese are available regardless of the JVM‚Äôs classpath.\n\nThe third and most important classloader from a developer‚Äôs perspective is the system classpath classloader, which is an immediate child of the extension classloader. It loads classes from directories and jar files specified by the CLASSPATH environment variable, java.class.path system property or -classpath command line option.\n\nClassloader hierarchy\n\nClassLoader Namespace\n\nIn Java a class is uniquely identified using ClassLoader + Class as the same class may be loaded by two different class loaders.\n\nClass A loaded by ClassLoader A != Class A loaded by ClassLoader B\nHow is it helpful?\n\nIt is helpful for defining different protection and access policies for different classloaders. Take an example of applet which is loaded using a different classloader, you would not want a third party application all access to your resources. So for security its important to maintain different namespaces.']",0.166666667,0.111111111
applet,Applet,How to access a file in a Java Applet?,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],"['You need to wrap your code in AccessController.doPrivileged, like:\n\npublic class InJava extends Applet{\n\n  public void sayHello() {\n\n    final String parametro = getParameter(""parametro"");\n\n    FileInputStream fis =  AccessController.doPrivileged(new PrivilegedAction<FileInputStream>() {\n      public FileInputStream run() {\n        try  {\n          retrun new FileInputStream(parametro);\n        } catch (IOException e)  {\n          // handle exception\n        }\n      }\n    });\n  }\nMake sure that your applet jar(s) are signed, and that you understand all other consequences of running an applet.']",0.166666667,0.333333333
swing,JPanel,how to set JFrame background transparent but JPanel or JLabel Background opaque?,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],"['I found another solution.\n\nSet the background color of your frame to\n\n// Set the frame background color to a transparent color\nyourFrameHere.setBackground(new Color(0, 0, 0, 0));\nAnd remember to set the opacity off of the contentpane (your JPanel or other component)\n\n// turn off opacity of the content pane\nyourContentPaneHere.setOpaque(false);']",0.072463768,0.571428571
swing,JPanel,How to set a transparent background of JPanel?,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],"[""You could use setOpaque() to make the background of the JPanel transparent, but then you couldn't draw over the rectangles that you wanted to make transparent.\n\nSo another way of doing it would be to make a BufferedImage and draw the rectangles on that image and then add that BufferedImage to the JPanel.\n\nimport java.awt.AlphaComposite;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.image.BufferedImage;\nimport java.beans.Transient;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.AbstractAction;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.KeyStroke;\n\n\npublic class Showcase extends JFrame {\n\n    BufferedImage img;\n\n    public static void main(String[] args) {\n        Showcase window = new Showcase();\n    }\n\n    public Showcase() {\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        final JPanel contentPane = new JPanel();\n        contentPane.setBackground(Color.CYAN);\n        setContentPane(contentPane);\n\n\n        final TestPane tP = new TestPane();\n        contentPane.add(tP);\n\n        // make new buffered image\n        img = new BufferedImage(tP.getPreferredSize().width, \n                tP.getPreferredSize().height, BufferedImage.TYPE_INT_ARGB);\n\n        setVisible(true);\n        pack();\n    }\n\n    @Override\n    public Dimension getPreferredSize() {\n        return new Dimension(500, 300);\n    }\n\n    public class TestPane extends JPanel{\n\n        @Override\n        protected void paintComponent(Graphics g) {              \n            Graphics2D g2 = (Graphics2D) g;\n\n            Graphics2D imgG2 = img.createGraphics();\n\n            // make img background transparent\n            imgG2.setBackground(new Color(0,0,0,0));\n\n            imgG2.setColor(Color.red);\n            imgG2.fillRect(0, 0, 100, 100);\n\n            imgG2.clearRect(0, 0, 50, 50);\n\n            imgG2.dispose();\n\n            // draw buffered image to jpanel\n            g2.drawImage(img, 0, 0, null);\n\n            g2.dispose();\n\n            super.paintComponent(g);   \n        }\n\n        @Override\n        @Transient\n        public Dimension getPreferredSize() {\n            return new Dimension(100, 100);\n        }\n    }\n}""]",0.072463768,0.015151515
swing,JPanel,How to make JFrame background and JPanel transparent with only image showing,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],"['I try it on my computer and image is showing up on icon. If you want show the image on background try this :\n\nimport java.awt.Image;\nimport java.awt.Toolkit;\nimport javax.swing.*;\n\n        public class Caine extends JFrame{\n        //the pictures\n        ImageIcon guy = new ImageIcon(""tester.gif"");\n        JLabel pn = new JLabel(guy);\n        JPanel panel = new JPanel();\n\n        Caine(){\n            super(""Photuris Lucicrescens"");\n\n            //Important\n            setSize(700,600);\n            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            add(panel);\n            setVisible(true);\n            JLabel im = new JLabel(new ImageIcon(""iconImage.gif""));\n            setIconImage(customIcon);\n            panel.add(im);\n            add(pn);\n        }\n        }']",0.072463768,0.041666667
swing,JFrame,java: How to add Transparent Gradient Background to JFrame,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['I found another solution.\n\nSet the background color of your frame to\n\n// Set the frame background color to a transparent color\nyourFrameHere.setBackground(new Color(0, 0, 0, 0));\nAnd remember to set the opacity off of the contentpane (your JPanel or other component)\n\n// turn off opacity of the content pane\nyourContentPaneHere.setOpaque(false);']",0.4666666,0.142857143
swing,JFrame,Swing: Obtain Image of JFrame,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['I believe you are looking for internal frames.\n\nFor the background image bit, sublass JPanel, override its paintComponent() method, and blit your image there. Then set an instance of that panel as your JFrame\'s content pane.\n\npublic class BackgroundPanel extends JPanel {\n    private BufferedImage bgImg;\n\n    public BackgroundPanel() {\n        try {\n            bgImg = ImageIO.read(BackgroundPanel.class.getResourceAsStream(\n                    ""mybackgroundimage.png""));\n        } catch (IOException ex) {\n            System.err.println(""Could not load background image!"");\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        if (bgImg != null) {\n            g.drawImage(bgImg, 0, 0, null);\n        }\n    }\n}\n\npublic class MyJFrame extends JFrame {\n\n    public MyJFrame() {\n        setContentPane(new BackgroundPanel());\n    }\n\n}']",0.4666666,0.148148148
swing,JFrame,Transparent JFrame background,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['You should make content pane transparent too.\n\nframe.setUndecorated(true);\nframe.getContentPane().setBackground(new Color(1.0f,1.0f,1.0f,0.0f));\nframe.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));']",0.4666666,0.2
io,Serializable,Java Serializable Object to Byte Array,['<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.\nThe Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>\n<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.\n<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.\n<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>\n<p>Serialization provides default functionality to store and later recreate the object.\nIn default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>\nBut if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.\nThe Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().\nWhile working with Externalizable we should remember that the default constructer should be public else the code will throw exception.\nHere if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.\nWe can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).\nWe can observe as we are not setting the value of passWord so it s null.</p> <p>\n<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>\nIncompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >\nYou can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.\n<p>Serialization uses certain default behaviors to store and later recreate the object.\n<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.\nA Java object is only serializable.\nMost of the java class are serializable</em>.</p>\n<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.\nFor serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.\nThe Serializable interface is defined to identify classes which implement the serializable protocol:</p>\nThe serialization interface has no methods or fields and serves only to identify the semantics of being serializable.\nFor serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>\nThe values of the non-transient and non-static fields of the class get serialized.</li> </ul>\n<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.\nThe Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>\nProgrammer has to take care of which objects to be serialized.\nAs a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>\nWhen an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.\n<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>\n<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).\nThis is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>\n<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.\nFor (a contrived) example  you may wish to record boolean true as  Y  and false as  N .\n<p>The Externalizable interface was not actually provided to optimize the serialization process performance!\nbut to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>\n<p>When considering options for improving performance  don t forget custom serialization.\nYou can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.\n<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>\nWe can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.\nWe can define custom validation or business rules inside read/write methods.\nplease check in/out object case of Externalizable.\nWhere as Outstream/Instream are tightly bind to classes.\nWe can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>\n<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.\nallows the implementer to decide how an object is serialized  where as <code>Serializable</code>\n<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.\n<p>Serialization can also lead to security problems.\nBy being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>\n<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>\nNet people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>\n<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.\nI have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.\n<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>\n<p>Not everything is genuinely serializable.\nYou could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>\n<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.\nSerialization is a very dangerous mechanism  especially in its default implementation.\nHence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>\n<p>Serialization adds constraints and potential problems since structure compatibility is not insured.\nSo the effort you d spend making the class serializble properly dwarves the cost of adding the interface.\n<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.\nFor many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>\n<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.\n<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>\n<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.\nFor simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>\n<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>\n<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>\nOther languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.\nAn Object should default to be serializable.\n<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.'],['If the object array contains Serializable objects then you can use java.io.ObjectOutputStream\n\nObjectOutputStream out = new ObjectOutputStream(anyOutputStream);\nout.writeObject(objectArray);\n‚Ä¶'],0.158415842,0.25
io,Serializable,JSONObject Not Serializable?,['<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.\nThe Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>\n<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.\n<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.\n<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>\n<p>Serialization provides default functionality to store and later recreate the object.\nIn default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>\nBut if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.\nThe Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().\nWhile working with Externalizable we should remember that the default constructer should be public else the code will throw exception.\nHere if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.\nWe can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).\nWe can observe as we are not setting the value of passWord so it s null.</p> <p>\n<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>\nIncompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >\nYou can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.\n<p>Serialization uses certain default behaviors to store and later recreate the object.\n<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.\nA Java object is only serializable.\nMost of the java class are serializable</em>.</p>\n<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.\nFor serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.\nThe Serializable interface is defined to identify classes which implement the serializable protocol:</p>\nThe serialization interface has no methods or fields and serves only to identify the semantics of being serializable.\nFor serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>\nThe values of the non-transient and non-static fields of the class get serialized.</li> </ul>\n<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.\nThe Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>\nProgrammer has to take care of which objects to be serialized.\nAs a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>\nWhen an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.\n<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>\n<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).\nThis is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>\n<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.\nFor (a contrived) example  you may wish to record boolean true as  Y  and false as  N .\n<p>The Externalizable interface was not actually provided to optimize the serialization process performance!\nbut to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>\n<p>When considering options for improving performance  don t forget custom serialization.\nYou can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.\n<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>\nWe can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.\nWe can define custom validation or business rules inside read/write methods.\nplease check in/out object case of Externalizable.\nWhere as Outstream/Instream are tightly bind to classes.\nWe can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>\n<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.\nallows the implementer to decide how an object is serialized  where as <code>Serializable</code>\n<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.\n<p>Serialization can also lead to security problems.\nBy being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>\n<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>\nNet people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>\n<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.\nI have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.\n<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>\n<p>Not everything is genuinely serializable.\nYou could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>\n<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.\nSerialization is a very dangerous mechanism  especially in its default implementation.\nHence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>\n<p>Serialization adds constraints and potential problems since structure compatibility is not insured.\nSo the effort you d spend making the class serializble properly dwarves the cost of adding the interface.\n<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.\nFor many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>\n<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.\n<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>\n<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.\nFor simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>\n<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>\n<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>\nOther languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.\nAn Object should default to be serializable.\n<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.'],"['Call toString on the JSONObject, and then serialize the string. JSONObject itself is not serializable.\n\nString jsonString = jsonObject.toString();']",0.04950495,0.333333333
io,InputStream,Convert InputStream to byte array in Java,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],"['I use this.\n\npublic static byte[] toByteArray(InputStream is) throws IOException {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        try {\n            byte[] b = new byte[4096];\n            int n = 0;\n            while ((n = is.read(b)) != -1) {\n                output.write(b, 0, n);\n            }\n            return output.toByteArray();\n        } finally {\n            output.close();\n        }\n    }']",0.242424242,0.366666667
io,InputStream,Java: InputStream too slow to read huge files,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],"['I would try this\n\n// create the file so we have something to read.\nfinal String fileName = ""1.2.fasta"";\nFileOutputStream fos = new FileOutputStream(fileName);\nfos.write(new byte[54 * 1024 * 1024]);\nfos.close();\n\n// read the file in one hit.\nlong start = System.nanoTime();\nFileChannel fc = new FileInputStream(fileName).getChannel();\nByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\nwhile (bb.remaining() > 0)\n    bb.getLong();\nlong time = System.nanoTime() - start;\nSystem.out.printf(""Took %.3f seconds to read %.1f MB%n"", time / 1e9, fc.size() / 1e6);\nfc.close();\n((DirectBuffer) bb).cleaner().clean();\nprints\n\nTook 0.016 seconds to read 56.6 MB']",0.151515152,0.147619048
io,InputStream,Loading images using an InputStream,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],"['If you are using PDFBox 2.0.0 or above\n\nPDDocument document = PDDocument.load(new File(""filePath"")); //filePath is the path to your .pdf\nPDFRenderer pdfRenderer = new PDFRenderer(document);\n\nfor(int i=0; i<document.getPages().getCount(); i++){\n    BufferedImage bim = pdfRenderer.renderImage(i, 1.0f, ImageType.RGB); //Get bufferedImage for page ""i"" with scale 1\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    ImageIO.write(bim, ""jpg"", os);\n    InputStream is = new ByteArrayInputStream(os.toByteArray());\n    //Do whatever you need with the inputstream\n}\ndocument.close()']",0.151515152,0.5
io,InputStream,How do I read bytes from InputStream?,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],['Try this( IOUtils is commons-io)\n\nbyte[] bytes = IOUtils.toByteArray(instream);'],0.151515152,1
io,FileInputStream,FileInputStream read until last 128 bytes of file,['Don t use FileInputStream</strong> as a parameter or variable type.\nUse the abstract base class  in this case InputStream instead.</p>\n<p>But it will work only within your IDE  not in runnable JAR.\n<p>Don t make the mistake of relying upon or needlessly converting/losing endline characters.\nDon t forget to use the proper character encoding to interpres the stream.</p>\n<p>If you want to make this a little more efficient  you can use arrays of characters instead  but to be honest  looping over the characters can be still quite fast.</p>'],"['This should work.\n\nInputStream is = Context.openFileInput(someFileName);\nByteArrayOutputStream bos = new ByteArrayOutputStream();\nbyte[] b = new byte[1024];\nwhile ((int bytesRead = is.read(b)) != -1) {\n   bos.write(b, 0, bytesRead);\n}\nbyte[] bytes = bos.toByteArray();']",0.555555556,0.111111111
lang,Object,Converting json from a file to a java Object,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['This simple example works like a charm:\nDTOs\n\npublic class SampleDTO \n{\n   private String name;\n   private InnerDTO inner;\n   // getters/setters\n}\n\npublic class InnerDTO \n{\n   private int number;\n   private String str; \n   // getters/setters  \n}  \nGson\n\n  BufferedReader br = new BufferedReader(new FileReader(""/tmp/test.json""));\n  SampleDTO sample = new Gson().fromJson(br, SampleDTO.class);  \nJackson\n\n  InputStream inJson = SampleDTO.class.getResourceAsStream(""/test.json"");\n  SampleDTO sample = new ObjectMapper().readValue(inJson, SampleDTO.class);\nJSON (test.json)\n\n{\n   ""name"" : ""Mike"",\n   ""inner"": {\n      ""number"" : 5,\n      ""str"" : ""Simple!""\n   }\n}']",0.333333333,0.3
lang,Object,Java/JAXB: Unmarshall XML attributes to specific Java Object attributes,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['You may create a separate classes to represent structure of your XML:\n\npublic class Section {\n    @XmlAttribute\n    public String name;\n    @XmlElement(name = ""value"")\n    public List<Value> values;\n}\n\npublic class Value {\n    @XmlAttribute\n    public String name;\n    @XmlValue\n    public String value;\n}\nand then use an XmlAdapter to perform conversion:\n\npublic class OptionsAdapter extends XmlAdapter<Section, Options> {\n    public Options unmarshal(Section s) {\n        if (""default_options"".equals(s.name)) {\n            ...\n        } else if (...) {\n            ...\n        }\n        ...\n    }\n    ...\n}\n\n@XmlElement\npublic class Configuration {\n    @XmlElement(name = ""section"")\n    @XmlJavaTypeAdapter(OptionsAdapter.class)\n    public List<Options> options;\n}\n\npublic class DefaultOptions extends Options { ... }\npublic class CustomOptions extends Options { ... }']",0.333333333,0.264705882
lang,Object,Inserting Java Object to MongoDB Collection Using Java,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['You can convert your java object into json string using the gson library and then insert it in mongodb.\n\nEg:\n\nGson gson = new Gson();\nString json = gson.toJson(Employee);    \nBasicDBObject basicDBObject = new BasicDBObject(""Name"", json );          \nDBCollection dbCollection = db.getCollection(""NameColl"");          \ndbCollection.save(basicDBObject);    ']",0.333333333,1
lang,Object,Java - getting max value from an arraylist of Objects?,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['You can use Java 8 Streams :\n\nArrayList<ArrayList<String>> allChains = new ArrayList<>();\nallChains.add (new ArrayList<String>(Arrays.asList (""apple"", ""b"", ""c"")));\nallChains.add (new ArrayList<String>(Arrays.asList (""a"")));\nallChains.add (new ArrayList<String>(Arrays.asList (""a"",""b"",""c"",""d"")));\n\nArrayList<String> longest = allChains.stream()\n                                     .max(Comparator.comparingInt(ArrayList::size))\n                                     .get();\n\nSystem.out.println (longest);\nOutput:\n\n[a, b, c, d]']",0.6,0.230769231
lang,String,Finding Largest String in ArrayList,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Please try these code . Here i am trying with get() to access the ArrayList elements, which is working correctly.\n\nimport java.util.Scanner;                  \nimport java.util.ArrayList;\n\nclass ArraylistString\n{\n    public static void main(String args[])\n    {\n        ArrayList<String> Str = new ArrayList<String>();\n        Str.add(""Jim Bob"");\n        Str.add(""Bobby Jones"");\n        Str.add(""Rob Stiles"");\n        int largestString = Str.get(0).length();\n        int index = 0;\n\n        for(int i = 0; i < Str.size(); i++)\n        {\n            if(Str.get(i).length() > largestString)\n            {\n                largestString = Str.get(i).length();\n                                index = i;\n            }\n        }\n        System.out.println(""Index "" + index + "" ""+ Str.get(index) + "" "" + ""is the largest and is size "" + largestString);  \n\n    }\n\n}']",0.208333333,0.035714286
lang,String,Strings written to file do not preserve line breaks,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['When you use readline() the line breaks are removed. You have to re-insert them with\n\nsb = sb.append(line).append(""\\n"");']",0.208333333,0.5
lang,String,Converting an int to a binary string representation in Java?,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Convert Integer to Binary:\n\nimport java.util.Scanner;\n\npublic class IntegerToBinary {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner( System.in );\n\n        System.out.println(""Enter Integer: "");\n        String integerString =input.nextLine();\n\n        System.out.println(""Binary Number: ""+Integer.toBinaryString(Integer.parseInt(integerString)));\n    }\n\n}\nOutput:\n\nEnter Integer:\n\n10\n\nBinary Number: 1010']",0.208333333,0.071428571
lang,String,How to convert binary string value to decimal,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>‚Äö√§‚Ä¢</code> to yield an extended alphabet <code>≈í¬£  := ≈í¬£ ‚Äö√†‚Ñ¢ {‚Äö√§‚Ä¢}</code>.</p> <p>Let <code>≈í¬±</code> be a symbol and X a uniformly distributed random variable over <code>≈í¬£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>≈í¬™ = floor[32/log‚Äö√á√á(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Use Integer.parseInt (see javadoc), that converts your String to int using base two:\n\nint decimalValue = Integer.parseInt(c, 2);']",0.208333333,1
lang,Thread,How to make a Java thread wait for another threads output?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],"['You can use Thread.join() to do that:\n\nThread[] threads = new Thread[numOfThreads];\nfor (int i = 0; i < threads.length; i++) {\n    threads[i] = new Thread(new Runnable() {\n        public void run() {\n            System.out.println(""xxx"");\n        }\n    });\n    threads[i].start();\n}\n\nfor (int i = 0; i < threads.length; i++) {\n    try {\n        threads[i].join();\n    } catch (InterruptedException e) {\n    }\n}\nFor your solution\n\nThread[] threads = new Thread[3];\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\n\nfor (int i = 0; i < threads.length; i++) {\n    try {\n        threads[i].join();\n    } catch (InterruptedException e) {\n    }\n}']",0.224489796,0.230769231
lang,Thread,When does Javas Thread.sleep throw InterruptedException?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],"['In this solution, I defined an interface Interruptible, and a method ignoreInterruption which converts an Interruptible to a Runnable:\n\npublic class Foo {\n\n  public static void main(String... args) {\n    new Thread(ignoreInterruption(Foo::bar)).start();\n    new Thread(ignoreInterruption(() -> Foo.baz(1, 2, 3))).start();\n  }\n\n  static void bar() throws InterruptedException {\n    // do something\n    Thread.sleep(1000);\n  }\n\n  static void baz(int a, int b, int c) throws InterruptedException {\n    // do something\n    Thread.sleep(1000);\n  }  \n\n  interface Interruptible {\n    public void run() throws InterruptedException;\n  }\n\n  static Runnable ignoreInterruption(Interruptible interruptible) {\n    return () -> { \n      try {\n        interruptible.run();\n      }\n      catch(InterruptedException ie) {\n        // ignored\n      }\n    };\n  }\n\n}']",0.142857143,0.133333333
lang,Thread,Java: Thread.currentThread().sleep(x) vs. Thread.sleep(x),['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],"['The Thread.interrupt() method interrupts the specific Thread that the instance references to:\n\nThread x = getSomeThreadInstance();\nx.interrupt();\nThe x variable can refer to any thread instance.\n\nThe Thread.currentThread().interrupt() method is the same as before, but applied to the current Thread, interrupting only the current thread of execution. It is equivalent to:\n\nThread x = Thread.currentThread();\nx.interrupt();\nAbout Thread.sleep() and Thread.currentThread().sleep() there is no difference. sleep() is a static method on the Thread class, and makes no difference on the way you call it. Calling it causes the current thread of execution to pause for the indicated amount of time.\n\nNonetheless, one should not call static method on an instance, which means static method should be called in a static way.']",0.163265306,0.071428571
lang,Thread,How a thread should close itself in Java?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor ‚Äö√Ñ√¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on ‚Äö√Ñ√¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesn‚Äö√Ñ√¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time ‚Äö√Ñ√Æ context switches  even just   to the OS and back  aren‚Äö√Ñ√¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],['You can add a method like this as any blocking IO operation will throw an IOException:-\n\npublic void close() throws IOException {\n    this.socket.close();\n}\nFrom the javadoc:-\n\nCloses this socket. Any thread currently blocked in accept() will throw a SocketException.'],0.102040816,0.142857143
net,Socket,Java sending and receiving file (byte[]) over sockets,['Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>\n<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.\nBuffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>\n<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.\n<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.\nServers with threadpools  or with threads handling more than one connection each  now become possible.\nIf only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.\nWith non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.\nA <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>\nSelectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.\npattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>\n<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>\nI don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>'],"['Take a look at the tutorial on Reading from and Writing to a Socket.\n\nTo write a byte array to a socket you would:\n\nbyte[] message = ...;\nSocket socket=new Socket(ipAddress, port);\nOutputStream socketOutputStream = socket.getOutputStream();\nsocketOutputStream.write(message);\nSimilarly, to read, you would use socket.getInputStream.']",0.3125,0.571428571
net,Socket,Sending compressed JPG image over socket,['Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>\n<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.\nBuffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>\n<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.\n<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.\nServers with threadpools  or with threads handling more than one connection each  now become possible.\nIf only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.\nWith non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.\nA <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>\nSelectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.\npattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>\n<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>\nI don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>'],"['Actually the code looks ok. Here\'s a complete code, that works fine on my machine:\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.net.*;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\n\npublic class Server {\n  public static void main(String[] args) throws Exception {\n    BufferedImage screencapture = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));\n    try (ServerSocket serv = new ServerSocket(25000)) {\n      System.out.println(""waiting..."");\n      try (Socket socket = serv.accept()) {\n        System.out.println(""client connected"");\n        ImageIO.write(screencapture, ""jpg"", socket.getOutputStream());\n        System.out.println(""sent"");\n      }\n    }\n  }\n}\n\nclass Client {\n  public static void main(String[] args) throws Exception {\n    try(Socket socket = new Socket(""localhost"", 25000)){\n      BufferedImage image = ImageIO.read(socket.getInputStream());\n      JLabel label = new JLabel(new ImageIcon(image));\n      JFrame f = new JFrame(""vnc"");\n      f.getContentPane().add(label);\n      f.pack();\n      f.setVisible(true);\n    }\n  }\n}\nThough this will only work if you close the socket after sending the images. It will fail if you\'ll just try to send a few images over the same socket. See https://stackoverflow.com/a/6973863/211205.']",0.3125,0.024390244
sql,Connection,Authentication during connection to MongoDB server instance using Java,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"[""Following on from Bob Kuhar's accepted answer, in Mongo3 the mechanism has change to SHA1 from challenge response as shown in the code snippet. I need to update the code snippet as follows:\n\n...\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoCredential;\nimport com.mongodb.ServerAddress;\n...\n\n// Manage the mongo db connection...\nList<ServerAddress> seeds = new ArrayList<ServerAddress>();\nseeds.add( new ServerAddress(configuration.getMongoHost(), configuration.getMongoPort() ));\nList<MongoCredential> credentials = new ArrayList<MongoCredential>();\ncredentials.add(\n    MongoCredential.createScramSha1Credential(\n        configuration.getMongoUser(),\n        configuration.getMongoDb(),\n        configuration.getMongoPassword().toCharArray()\n    )\n);\nMongoClient mongo = new MongoClient( seeds, credentials );""]",0.333333333,0.25
sql,Connection,How to get database url from java.sql.Connection?,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],['I believe you can use the DatabaseMetaData object from the Connection and then get the URL. Try:\n\nDatabaseMetaData dmd = connection.getMetaData();\nString url = dmd.getURL();'],0.333333333,1
sql,Connection,How to get database schema name when using oracle jdbc connection?,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['You can get schema name using\n\nConnection conn = \nDriverManager.getConnection(""jdbc:oracle:thin:@server:port:SID"",prop);    \nDatabaseMetaData databaseMetaData = conn.getMetaData();\nSystem.out.println(""schema name >>>> ""+databaseMetaData.getUserName());']",0.333333333,0.2
sql,Connection,Connect Java to a MySQL database,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['To create database through Java code, you must use executeUpdate(sql) instead of executeQuery(sql); and connect to the mysql database as root:\n\nconnection =  DriverManager.getConnection(\n    ""jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull"",\n    ""root"", ""root""\n);\nStatement st = connection.createStatement();\nst.executeUpdate(sql);\nst.close();']",0.333333333,0.25
sql,Connection,Should you set up database connection properties in server.xml or context.xml,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['A connection pool operates by performing the work of creating connections ahead of time. In the case of a JDBC connection pool, a pool of Connection objects is created at the time the application server starts. The client can access the connection object in connection pool and return the object to pool once the db work is completed.\n\nContext.xml\n\n   <Resource name=""jdbc/TestDB"" auth=""Container"" type=""javax.sql.DataSource"" \nmaxActive=""100"" maxIdle=""30"" maxWait=""10000"" username=""root"" password="""" \ndriverClassName=""com.mysql.jdbc.Driver""               \nurl=""jdbc:mysql://localhost:3306/cdcol""/>\n//This should be added in the servers context,xml file. For example if you are using apache server then the context.xml will be found in C:\\apache-tomcat-6.0.26\\conf\\Context.xml\n\nweb.xml\n\n  <resource-ref>\n      <description>DB Connection</description>\n      <res-ref-name>jdbc/TestDB</res-ref-name>\n      <res-type>javax.sql.DataSource</res-type>\n      <res-auth>Container</res-auth>\n  </resource-ref>\n//This should be added in the web.xml of the local project. (Not in server\'s web.xml).\n\nContext ctx=new InitialContext();\n          Context envContext = (Context)ctx.lookup(""java:comp/env"");\n          DataSource ds=(DataSource)envContext.lookup(""jdbc/TestDB"");//TestDB is the Database Name\n          con=ds.getConnection();\n          stmt = con.createStatement();']",0.333333333,0.041666667
sql,ResultSet,HSQLDB delete row(s) from JDBC resultset,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],"['Specify the cursor holdability in the code:\n\nc.prepareStatement(select,\n     ResultSet.TYPE_SCROLL_INSENSITIVE,\n     ResultSet.CONCUR_UPDATABLE,\n     ResultSet.HOLD_CURSORS_OVER_COMMIT);\nThe problem seems to be that HSQLDB JDBC driver uses ResultSet.CLOSE_CURSOS_AT_COMMIT as the default value.']",0.131578947,0.333333333
sql,ResultSet,How to programmatically create a Java ResultSet from custom data with no database,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],"['Why you are getting ""Closed resultset:next"" error, see here:\n\nWhy am I getting ResultSet is closed error when I never closed any\n\nI suppose you are not using some ORM framework like Hibernate.\n\nIn this case, map the resultset data in the DAO or build an object mapper yourself, which maps the ResultSet to a some Data Transfer Object. Then pass this object to the createExcel() method.\n\nSomething like this:\n\nResultSet rs = myDao.getResult();\nList<ExcelDto> excelDtos = new ArrayList<>();\nExcelDto excelDto;\nwhile (rs.next()) {      \n    excelDto = new ExcelDto();    \n    dto.setXCol(rs.getString(""XColumn""))\n    excelDtos.add(dto);  \n}\nexcelCreator.createExcel(excelDtos);\nThen in the excelCreator you can work with an ArrayList instead of ResultSet.']",0.131578947,0.875
sql,ResultSet,Retrieve column names from java.sql.ResultSet,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],"['You can use the the ResultSetMetaData (http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html) object for that, like this:\n\nResultSet rs = stmt.executeQuery(""SELECT * FROM table"");\nResultSetMetaData rsmd = rs.getMetaData();\nString firstColumnName = rsmd.getColumnName(1);']",0.131578947,0.25
util,ArrayList,How to sort a Map by Value (ArrayList) size in Java?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],"[""If you are using java-8, here's also a way to do this:\n\nList<String> keys = unsortedMap.entrySet()\n                   .stream()\n                   .sorted((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()))\n                   .map(Map.Entry::getKey)\n                   .collect(Collectors.toList());\nSystem.out.println(keys); //[C, A, B]\nWhat it does is:\n\nget a Stream of the entries of your map\nsort the entries by the the size of each arraylist\nmap each entry to its corresponding key\ncollect the result in a List\nIf you want you could also write the sorted line as :\n\n.sorted(Comparator.comparing(e -> e.getValue().size(), Comparator.reverseOrder()))""]",0.04950495,0.428571429
util,ArrayList,How to convert comma-separated String to ArrayList?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],"['Here is another one for converting CSV to ArrayList:\n\nString str=""string,with,comma"";\nArrayList aList= new ArrayList(Arrays.asList(str.split("","")));\nfor(int i=0;i<aList.size();i++)\n{\n    System.out.println("" -->""+aList.get(i));\n}\nPrints you\n\n-->string\n-->with\n-->comma']",0.04950495,0.818181818
util,ArrayList,How to get ArrayList<Integer> and Scanner to play nice?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],['Your problem is here :\n\n while(scan.hasNextInt()){  <-- This will loop untill you enter any non integer value\n     list.add(scan.nextInt());\n  }\nYou just have to enter a character say e.g q once you finished entering all the integer values and then your program will print expected results.\n\nSample Input :14 17 18 33 54 1 4 6 q'],0.089108911,0.166666667
util,Map,JAXB java.util.Map to key value pairs,['<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>\n<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.\n<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>\n<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>\nactually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>\nIf you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.\nThat means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>\nUsing a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();\nAs of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>\n(By the way  a map can t contain twice the same value  your second put will overwrite the first one.\nmap is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>\nIf you want your map to never change  you should after the initialization wrap your map by <code>Collections.\nThe map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.\nAlso  the key and the value of each entry is immutable  cannot be changed.\nSee the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>\nPass an existing map  get back an immutable copy of that map.</p> <p>\nFor efficiency  if the passed map is already truly immutable  the <code>copyOf</code>\nmethod produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.\nIf the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.\nWe see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>\nAn alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>\nThe utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>'],"['I\'m still working on a better solution but using MOXy JAXB, I\'ve been able to handle the following XML:\n\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<root>\n   <mapProperty>\n      <map>\n         <key>value</key>\n         <key2>value2</key2>\n      </map>\n   </mapProperty>\n</root>\nYou need to use an @XmlJavaTypeAdapter on your Map property:\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\n@XmlRootElement\npublic class Root {\n\n    private Map<String, String> mapProperty;\n\n    public Root() {\n        mapProperty = new HashMap<String, String>();\n    }\n\n    @XmlJavaTypeAdapter(MapAdapter.class)\n    public Map<String, String> getMapProperty() {\n        return mapProperty;\n    }\n\n    public void setMapProperty(Map<String, String> map) {\n        this.mapProperty = map;\n    }\n\n}\nThe implementation of the XmlAdapter is as follows:\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\npublic class MapAdapter extends XmlAdapter<AdaptedMap, Map<String, String>> {\n\n    @Override\n    public AdaptedMap marshal(Map<String, String> map) throws Exception {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        Document document = db.newDocument();\n        Element rootElement = document.createElement(""map"");\n        document.appendChild(rootElement);\n\n        for(Entry<String,String> entry : map.entrySet()) {\n            Element mapElement = document.createElement(entry.getKey());\n            mapElement.setTextContent(entry.getValue());\n            rootElement.appendChild(mapElement);\n        }\n\n        AdaptedMap adaptedMap = new AdaptedMap();\n        adaptedMap.setValue(document);\n        return adaptedMap;\n    }\n\n    @Override\n    public Map<String, String> unmarshal(AdaptedMap adaptedMap) throws Exception {\n        Map<String, String> map = new HashMap<String, String>();\n        Element rootElement = (Element) adaptedMap.getValue();\n        NodeList childNodes = rootElement.getChildNodes();\n        for(int x=0,size=childNodes.getLength(); x<size; x++) {\n            Node childNode = childNodes.item(x);\n            if(childNode.getNodeType() == Node.ELEMENT_NODE) {\n                map.put(childNode.getLocalName(), childNode.getTextContent());\n            }\n        }\n        return map;\n    }\n\n}\nThe AdpatedMap class is where all the magic happens, we will use a DOM to represent the content. We will trick JAXB intro dealing with a DOM through the combination of @XmlAnyElement and a property of type Object:\n\nimport javax.xml.bind.annotation.XmlAnyElement;\n\npublic class AdaptedMap {\n\n    private Object value;\n\n    @XmlAnyElement\n    public Object getValue() {\n        return value;\n    }\n\n    public void setValue(Object value) {\n        this.value = value;\n    }\n\n}\nThis solution requires the MOXy JAXB implementation. You can configure the JAXB runtime to use the MOXy implementation by adding a file named jaxb.properties in with your model classes with the following entry:\n\njavax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory\nThe following demo code can be used to verify the code:\n\nimport java.io.File;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\n\npublic class Demo {\n\n    public static void main(String[] args) throws Exception {\n        JAXBContext jc = JAXBContext.newInstance(Root.class);\n\n        Unmarshaller unmarshaller = jc.createUnmarshaller();\n        Root root = (Root) unmarshaller.unmarshal(new File(""src/forum74/input.xml""));\n\n        Marshaller marshaller = jc.createMarshaller();\n        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        marshaller.marshal(root, System.out);\n    }\n}']",0.178571429,0.009615385
util,Map,serialize json object which extends map,['<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>\n<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.\n<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>\n<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>\nactually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>\nIf you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.\nThat means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>\nUsing a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();\nAs of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>\n(By the way  a map can t contain twice the same value  your second put will overwrite the first one.\nmap is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>\nIf you want your map to never change  you should after the initialization wrap your map by <code>Collections.\nThe map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.\nAlso  the key and the value of each entry is immutable  cannot be changed.\nSee the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>\nPass an existing map  get back an immutable copy of that map.</p> <p>\nFor efficiency  if the passed map is already truly immutable  the <code>copyOf</code>\nmethod produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.\nIf the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.\nWe see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>\nAn alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>\nThe utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>'],"['I came up with this solution:\n\npublic class ArrayToMapDeserializer extends JsonDeserializer<SortedMap<Object, Object>>\n    implements ContextualDeserializer {\n\n    private Class<?> keyAs;\n\n    private Class<?> contentAs;\n\n    @Override\n    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException {\n        return this.deserialize(p, ctxt, new HashMap<>());\n    }\n\n    @Override\n    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt,\n        Map<Object, Object> intoValue) throws IOException, JsonProcessingException {\n        JsonNode node = p.readValueAsTree();\n        ObjectCodec codec = p.getCodec();\n        if (node.isArray()) {\n            node.forEach(entry -> {\n                try {\n                    JsonNode keyNode = entry.get(0);\n                    JsonNode valueNode = entry.get(1);\n                    intoValue.put(keyNode.traverse(codec).readValueAs(this.keyAs),\n                        valueNode.traverse(codec).readValueAs(this.contentAs));\n                } catch (NullPointerException | IOException e) {\n                    // skip entry\n                }\n            });\n        }\n        return intoValue;\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException {\n        JsonDeserialize jsonDeserialize = property.getAnnotation(JsonDeserialize.class);\n        this.keyAs = jsonDeserialize.keyAs();\n        this.contentAs = jsonDeserialize.contentAs();\n        return this;\n    }\n\n}\nwhich can be used like this:\n\npublic class Baz {\n\n    @JsonSerialize(using = MapToArraySerializer.class)\n    @JsonDeserialize(using = ArrayToMapDeserializer.class,\n        keyAs = Foo.class, contentAs = Bar.class)\n    Map<Foo, Bar> map;\n\n}']",0.178571429,0.46
awt,Image,Take a screenshot and save as Image in Java,['nan'],"['Use Robot#createScreenCapture().\n\nBufferedImage image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));\nImageIO.write(image, ""png"", new File(""/screenshot.png""));']",0,0.2
awt,Image,Is there a way to take a screenshot using Java and save it to some sort of Image?,['nan'],"['GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();  \nGraphicsDevice[] screens = ge.getScreenDevices();       \nRectangle allScreenBounds = new Rectangle();  \nfor (GraphicsDevice screen : screens) {  \n       Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();        \n       allScreenBounds.width += screenBounds.width;  \n       allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);\n       allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x);\n       allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y);\n      } \nRobot robot = new Robot();\nBufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds);\nFile file = new File(""C:\\\\Users\\\\Joe\\\\Desktop\\\\scr.png"");\nif(!file.exists())\n    file.createNewFile();\nFileOutputStream fos = new FileOutputStream(file);\nImageIO.write( bufferedImage, ""png"", fos );\nbufferedImage will contain a full screenshot, this was tested with three monitors']",0,0.3
awt,Image,"Java- Write Text onto Image, then Write to Output File",['nan'],"['It\'s easy, just get the Graphics object from the image and draw your string onto the image. This example (and output image) is doing that:\n\npublic static void main(String[] args) throws Exception {\n    final BufferedImage image = ImageIO.read(new URL(\n        ""http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png""));\n\n    Graphics g = image.getGraphics();\n    g.setFont(g.getFont().deriveFont(30f));\n    g.drawString(""Hello World!"", 100, 100);\n    g.dispose();\n\n    ImageIO.write(image, ""png"", new File(""test.png""));\n}']",0,0.333333333
sql,Connection,How to connect SQLite with Java?,nan,nan,nan,nan
awt,Image,Resize image while keeping aspect ratio in Java,nan,nan,nan,nan
swing,JLabel,How to resize JLabel ImageIcon?,nan,nan,nan,nan
swing,JPanel,Java JPanel resize Image,nan,nan,nan,nan