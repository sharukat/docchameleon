Package,Java API,Question,SISE,JADEITE,CROKAGE,ADECK,DocChameleon_explanation,DocChameleon_code,SISE_relevancy,JADEITE_relevancy,CROKAGE_relevancy,ADECK_relevancy,DocChameleon_explanation_relevancy,DocChameleon_code_relevancy
applet,Applet,Loading and displaying local Images in Java Applet,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],['Most common way to construct:\nClass appletClass = Ã‰;\nApplet realApplet = (Applet)appletClass.newInstance();\nBased on 10 examples'],"['It\'s likely the image can\'t be accessed from its current context, remember, applets normally run in a very tight security sandbox which prevents them from accessing files on the local/client file system.\n\nYou either need to load the images from the server the applet is been loaded from (using getDocument/CodeBase or a relative URL), or based on your example, as embedded an resource, for example\n\ntileset_terrain = ImageIO.read(getClass().getResource(""/res/tileset_terrain.png""));\nThis assumes that the image is included within the Jar file under the /res directory.\n\nIf the image resides on the server from which the applet is been load, you could also use\n\ntry {\n    URL url = new URL(getCodeBase(), ""res/tileset_terrain.png"");\n    img = ImageIO.read(url);\n} catch (IOException e) {\n    e.printStackTrace();\n}\nTake a look at Reading/Loading images and What Applets Can and Cannot Do for more details.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow to specify correctly codebase and archive in Java applet?\n----------Explanation----------\nI suggest the following solution : \n\n\nPlace myjar.jar in the http://myurl.com/classes folder; \nAssuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:\n----------Code Sample----------\n\n\ntype=""application/x-java-applet;jpi-version=6"" \narchive=""myjar.jar"" \ncodebase=""http://myurl.com/classes"">\nno applet\n\n\n\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava graphics JApplet\n----------Explanation----------\nA JPanel with no components has a default size of 0x0. Try this source:\n----------Code Sample----------\n// \nimport java.awt.*;\n\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Shape extends JApplet {\n\n/**\n*\n*/\nprivate static final long serialVersionUID = 1L;\n\n// making the radiobuttons for the shape choices\nJRadioButton squareButton = new JRadioButton(""Square"",true);\nJRadioButton ovalButton = new JRadioButton(""Oval"",false);\nJRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);\nJRadioButton triangleButton = new JRadioButton(""Triangle"",false);\n\n// making radiobuttons for the color choices\nJRadioButton redButton = new JRadioButton(""Red"",true);\nJRadioButton blueButton = new JRadioButton(""Blue"",false);\nJRadioButton greenButton = new JRadioButton(""Green"",false);\nJRadioButton yellowButton = new JRadioButton(""Yellow"",false);\n\n// making buttons draw and animate\nJButton drawButton = new JButton(""Draw!"");\nJButton animateButton = new JButton(""Animate!"");\n\n// making JTextFields for length and width\nJTextField lengthField = new JTextField(""Enter a length"",15);\nJTextField widthField = new JTextField(""Enter a width"",15);\n\n// making JPanel, in which the radiobuttons will go01\nJPanel shapePanel = new JPanel();\nJPanel colorPanel = new JPanel();\nJPanel buttonPanel = new JPanel();\nJPanel textPanel = new JPanel();\ndrawPanel dPanel;\n\nButtonGroup shapeGroup = new ButtonGroup();\nButtonGroup colorGroup = new ButtonGroup();\n\n// variables that will dictates the shape, size and color\nint length = 200;\nint width = 200;\nColor color = Color.RED;\nString shape = ""square"";\n\npublic void init() {\nsetLayout(new FlowLayout()); // setting layout for the applet\n// This is set by HTML!\n//setSize(680,480);\n\n// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5\nshapePanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""\nshapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));\n\n// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5\ncolorPanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""\ncolorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));\n\n// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5\nbuttonPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding a color border\nbuttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));\n\n// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5\ntextPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding some attributes for lengthField and widthField\nlengthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nlengthField.setForeground(new Color(150,150,150));\n\nwidthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nwidthField.setForeground(new Color(150,150,150));\n\n// using shapegroup to organize the JRadioButtons\nshapeGroup.add(squareButton);\nshapeGroup.add(ovalButton);\nshapeGroup.add(rectangleButton);\nshapeGroup.add(triangleButton);\n\n// using colorgroup to organize the color radiobuttons\ncolorGroup.add(redButton);\ncolorGroup.add(blueButton);\ncolorGroup.add(greenButton);\ncolorGroup.add(yellowButton);\n\n// add the shape buttons to the panel so they appear in a square form\nshapePanel.add(squareButton);\nshapePanel.add(ovalButton);\nshapePanel.add(rectangleButton);\nshapePanel.add(triangleButton);\n\n// adding color buttons to the color panel\ncolorPanel.add(redButton);\ncolorPanel.add(blueButton);\ncolorPanel.add(greenButton);\ncolorPanel.add(yellowButton);\n\n// adding jbuttons\nbuttonPanel.add(drawButton);\nbuttonPanel.add(animateButton);\n\n// adding textfields to the textPanel\ntextPanel.add(lengthField);\ntextPanel.add(widthField);\n\ndPanel = new drawPanel();\ndPanel.setPreferredSize(new Dimension(500,300));\n\n// adding panels to the applet\nadd(shapePanel);\nadd(colorPanel);\nadd(buttonPanel);\nadd(textPanel);\nadd(dPanel);\n\n// adding focus listener to lengthField and widthField\nlengthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nlengthField.setText("""");\nlengthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\nwidthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nwidthField.setText("""");\nwidthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\ndrawButton.addActionListener(new drawListener());\n\n}\n\n// when the person presses paint, this will be executed to paint the specific shape, color with the width and length\nclass drawListener implements ActionListener {\npublic void actionPerformed(ActionEvent e) {\n\nint mylength = 5;\nint mywidth = 5;\n\ntry {\nmylength = Integer.parseInt(lengthField.getText());;\nmywidth = Integer.parseInt(widthField.getText());;\n}catch(Exception ex) {\nJOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);\n}\n\nif((mylength > 200 || mylength < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid length message"", JOptionPane.ERROR_MESSAGE);\n}else if((mywidth > 200 || mywidth < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid width message"", JOptionPane.ERROR_MESSAGE);\n}else {\nlength = mylength;\nwidth = mywidth;\n\n// checking which color button is selected\nif(redButton.isSelected()) {\ncolor = Color.RED;\n}else if(blueButton.isSelected()) {\ncolor = Color.BLUE;\n}else if(greenButton.isSelected()) {\ncolor = Color.GREEN;\n}else if(yellowButton.isSelected()) {\ncolor = Color.YELLOW;\n}\n\n// checking which shape has been selected\nif(rectangleButton.isSelected()) {\nshape = ""rectangle"";\n}else if(triangleButton.isSelected()) {\nshape = ""triangle"";\n}else if(ovalButton.isSelected()) {\nshape = ""oval"";\n}else if(squareButton.isSelected()) {\nshape = ""square"";\n}\n\n//System.out.printf(""%3d %3d %s %s \\n"",length,width,shape,color);\n\n}\n\n}\n}\n\n// This will be used to do the painting\nclass drawPanel extends JPanel {\nprivate static final long serialVersionUID = 1L;\n\n//Paint Method\npublic void paintComponent(Graphics g){\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setColor(Color.black);\n\ng2.drawString(""My awesome string"", 200, 200);\n}\n\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\ndraw figure in java applet- init(), paint() and repaint()\n----------Explanation----------\n\n----------Code Sample----------\n/* */\nimport java.awt.*;\nimport java.applet.Applet;\n\npublic class DrawPoly extends Applet {\n\nPolygon poly;\n\n// init(Graphics) is not an applet method\n//public void init(Graphics g){\n@Override\npublic void init() {\n// this declaration is creating a variable local\n// to the init() method\n//Polygon poly=new Polygon();\npoly=new Polygon();\npoly.addPoint(60,100);\n// at least add a 2nd point!\npoly.addPoint(160,60);\n}\n\npublic void paint(Graphics g) {\nGraphics2D gg;\ngg=(Graphics2D) g;\nSystem.out.println(""number is""+ poly.npoints);\n// the Polygon is never painted!\ngg.setColor(Color.BLACK);\ngg.drawPolygon(poly);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nCan you sign a Java applet but keep it in the sandbox (NOT give it full access to user\'s computer)?\n----------Explanation----------\nPut the Permissions and Codebase attributes in your manifest file:\n----------Code Sample----------\nPermissions: sandbox\nCodebase: *.myserver.com\njar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such\n\n\n\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava applet doesn\'t works on IE8\n----------Explanation----------\n\n----------Code Sample----------\nbasic: Applet loaded.\nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Finished applet teardown\n\nbasic: Applet loaded. \nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Applet started\nbasic: Told clients applet is started\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nCreating Java applet using external JARS\n----------Explanation----------\nAdd a reference to them to the archive attribute of the applet element.\n----------Code Sample----------\n\n\ncodebase=""classes"" \ncode=""applet/MyApplet.class"" \nwidth=350 \nheight=200 \narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\n\ncode=""applet/MyApplet.class"" \n\ncode=""applet.MyApplet"" \n\narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\ncodebase=""classes""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to call Applet method from javascript\n----------Explanation----------\nThe problem is the IF statement check:\n----------Code Sample----------\ndocument.CityChoice.City[0].checked == true\n\nfunction selectedCity() \n{\ndocument.SimpleMessageApplet.setMessage(""Hello""); \n}\n\n\n\n\n\nThis is the Applet\n\n\n\n Boston\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Label;\n\n/**\n*\n* @author hmmmmm\n*/\npublic class MessageApplet extends Applet {\n\nprivate Label m_mess;\n\npublic void init() {\nsetBackground(Color.lightGray);\nsetLayout(new BorderLayout());\nm_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);\nadd(BorderLayout.CENTER, m_mess);\nm_mess.setBackground(Color.red);\n}\n\npublic void setMessage(String message) {\nm_mess.setText(""Selection : "" + message);\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nGetting Java Application to Run as an Applet or Standalone\n----------Explanation----------\nYou could define the class Robot as your applet:\n----------Code Sample----------\npublic class Robot extends JApplet {\n\npublic void init() {\n...\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Applet Demo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setSize(500, 400);\nJApplet applet = new Robot();\napplet.init();\napplet.start();\nframe.add(applet);\nframe.setVisible(true);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow do I package up an applet with multiple .jar libraries?\n----------Explanation----------\nYou can specify multiple jars in the archive attribute:\n----------Code Sample----------\narchive=""ZuveApplet.jar,thing.jar,anotherThing.jar""\nheight=""1000"" width=""1000""/>\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nlaunching java applet\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n\n\n\n\n\n// you can set optional parameters here \n\n\n\n\n\n\n\n// you can set optional parameters here \n\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nget an applet into the web browser\n----------Explanation----------\nCode\n----------Code Sample----------\n//\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\n/** This was terrible code. You should take it back to whoever gave\nit to you, and throw it at them. Never get code from them again. */\npublic class myApplet extends JApplet implements ActionListener{\n\nprivate JLabel titleLabel;\nprivate JLabel usuarioLabel;\nprivate JLabel passwordLabel;\nprivate JPanel textPanel;\nprivate JPanel panelForTextFields;\nprivate JTextField usuarioField;\nprivate JPasswordField passwordField;\nprivate JButton loginButton;\n\npublic JPanel createContentPane (){\nSystem.out.println(""1"");\n// We create a bottom JPanel to place everything on.\nJPanel totalGUI = new JPanel();\n// Use LAYOUTS!\ntotalGUI.setLayout(new FlowLayout());\n\ntitleLabel = new JLabel(""Login"");\ntotalGUI.add(titleLabel);\n\n// Creation of a Panel to contain the JLabels\ntextPanel = new JPanel();\ntotalGUI.add(textPanel);\n\n// Usuario Label\nusuarioLabel = new JLabel(""User"");\ntextPanel.add(usuarioLabel);\n\n// Password nuevo Label\npasswordLabel = new JLabel(""Password"");\npasswordLabel.setHorizontalAlignment(4);\ntextPanel.add(passwordLabel);\n\n// TextFields Panel Container\npanelForTextFields = new JPanel();\ntotalGUI.add(panelForTextFields);\n\n// Password viejo Textfield\nusuarioField = new JTextField(8);\npanelForTextFields.add(usuarioField);\n\n// Password nuevo Textfield\npasswordField = new JPasswordField(8);\npanelForTextFields.add(passwordField);\n\n// Button for Logging in\nloginButton = new JButton(""Restore"");\nloginButton.addActionListener(this);\ntotalGUI.add(loginButton);\ntotalGUI.setOpaque(true);\n\nreturn totalGUI;\n}\n\npublic void actionPerformed(ActionEvent e) {\n//restores password\n}\n\nprivate void createAndShowGUI() {\nadd( createContentPane() );\nvalidate();\n}\n\npublic void init (){\nSystem.out.println(""Applet initializing"");\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGUI();\n}\n});\n}\n}\n\nprompt>appetviewer myApplet.java\nApplet initializing\n1\nprompt>\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nIs it possible to get data from Java Applet on to PHP or MySQL?\n----------Explanation----------\nLet\'s say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.\n----------Code Sample----------\nimport netscape.javascript.*;\nimport java.applet.*;\nimport java.awt.*;\nclass MyApplet extends Applet {\npublic void init() {\n\n// requesting the JSObject\nJSObject win = JSObject.getWindow(this);\n\n// here you call a javascript function\nwin.call(""myJavscriptFunction"", null);\n\n// if you wish to pass an argument to the javascript function,\n// do the following\nString myString = ""World!"";\nfinal Object[] args = { myString }; \nwin.call(""myJavascriptFunction2()"", args);\n}\n}\n\n height=""200"" align=""baseline"" code=""XYZApp.class""\ncodebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true\npluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">\n\n\n\n\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nJava Embedding Into HTML\n----------Explanation----------\n\n----------Code Sample----------\nclassid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""\nstyle=""height: 500px; width: 700px;"">\n\n\ntype=""application/x-java-applet""\nheight=""500"" width=""700"">\n\n\n\n\n\n\n\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow can I run .jar file on web page?\n----------Explanation----------\nAlso the main method is the entry point for Java applications. Use init() for Applets:\n----------Code Sample----------\n// imports...\n\nclass test extends Applet {\npublic void init() {\ntry{\nProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Main"", ""/v"", ""Start Page"", ""/d"", ""\\""http://www.google.com/\\"""", ""/f""});\npb.start();\n}catch(IOException e){\ne.printStackTrace();\n}\n}\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nAdding a main class to an applet\n----------Explanation----------\nHere is code from a working application. Note how the applet methods are called:\n----------Code Sample----------\nJFrame frame = new JFrame();\nframe.setSize(400, 300);\n\nfinal Applet applet = new MyCustomApplet();\n\nframe.getContentPane().add(applet);\nframe.addWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent we) {\napplet.stop();\napplet.destroy();\nSystem.exit(0);\n}\n});\n\nframe.setVisible(true);\napplet.init();\napplet.start();\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nEmbed a 3rd-party JApplet in a Swing GUI & pass it parameters\n----------Explanation----------\nImplement an AppletStub & set it as the stub of the applet instance. E.G.\n----------Code Sample----------\n/*\n\n\n\n*/\nimport java.applet.*;\nimport javax.swing.*;\nimport java.net.URL;\nimport java.util.HashMap;\n\npublic class ParamApplet extends JApplet {\n\npublic void init() {\nString param = getParameter(""param"");\nSystem.out.println(""parameter: "" + param);\nadd(new JLabel(param));\n}\n\npublic static void main(String[] args) {\nApplicationAppletStub stub = new ApplicationAppletStub();\nstub.addParameter(args[0], args[1]);\nParamApplet pa = new ParamApplet();\npa.setStub(stub);\n\npa.init();\npa.start();\npa.setPreferredSize(new java.awt.Dimension(200,200));\nJOptionPane.showMessageDialog(null, pa);\n}\n}\n\nclass ApplicationAppletStub implements AppletStub {\n\nHashMap params = new HashMap();\n\npublic void appletResize(int width, int height) {}\npublic AppletContext getAppletContext() {\nreturn null;\n}\n\npublic URL getDocumentBase() {\nreturn null;\n}\n\npublic URL getCodeBase() {\nreturn null;\n}\n\npublic boolean isActive() {\nreturn true;\n}\n\npublic String getParameter(String name) {\nreturn params.get(name);\n}\n\npublic void addParameter(String name, String value) {\nparams.put(name, value);\n}\n}\n\nprompt>java ParamApplet param ""apples & oranges""\nparameter: apples & oranges\n\nprompt>java ParamApplet param 42\nparameter: 42\n\nprompt>\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nSelf-Locking an Javacard Applet\n----------Explanation----------\nThus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:\n----------Code Sample----------\nGPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);\n\npublic class LockableApplet extends Applet {\n\n[... applet installation / instantiation code ...]\n\nprivate static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;\nprivate static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;\n\npublic boolean select() {\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nreturn false;\n}\n\nreturn true;\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n}\n\n[... applet logic code ...]\n\n} \n}\n\nGPSystem.setCardContentState(APPLICATION_STATE_LOCKED);\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nJavaCard: How can an applet\'s instance call a method in another instance\'s context?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;\n\nimport javacard.framework.*;\n\n/**\n* The master and slave AID should only differ in the last byte; the master should end with the \'m\' ASCII character.\n* This applet is for demonstration purposes only.\n* \n* @author owlstead@stackoverflow\n*/\npublic class SharingApplet extends Applet {\n\npublic interface SharedArray extends Shareable {\npublic byte[] getSharedArray();\n}\n\npublic static class SharedArrayImpl implements SharedArray {\nprivate byte[] sharedArray;\n\npublic SharedArrayImpl(final byte[] arrayToShare) {\nthis.sharedArray = arrayToShare;\n}\n\npublic byte[] getSharedArray() {\nreturn sharedArray;\n}\n}\n\nprivate static final short MAX_AID_SIZE = 16;\nprivate static final short START = 0;\nprivate static final byte SHARABLE_PARAM = 0;\nprivate static final byte PARAM_SHARED_ARRAY = 0;\n\npublic static void install(byte[] bArray, short bOffset, byte bLength) {\nfinal byte aidLength = bArray[bOffset++];\nfinal byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];\nfinal boolean isMaster = lastAIDByte == \'m\';\nfinal SharingApplet applet = new SharingApplet(isMaster);\napplet.register(bArray, bOffset, aidLength);\napplet.setMasterAID();\n}\n\n// if null, it is not the master\nprivate final SharedArray sharedArray;\nprivate AID masterAID;\n\npublic SharingApplet(final boolean isMaster) {\nif (isMaster) {\nfinal byte[] sa = new byte[] { \'m\' };\nsharedArray = new SharedArrayImpl(sa);\n} else {\nsharedArray = null;\n}\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nbyte[] buf = apdu.getBuffer();\nswitch (buf[ISO7816.OFFSET_INS]) {\ncase (byte) 0x00: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\n} else {\ntheSharedArray = sharedArray;\n}\nfinal byte[] sa = theSharedArray.getSharedArray();\nUtil.arrayCopy(sa, START, buf, START, (short) sa.length);\napdu.setOutgoingAndSend(START, (short) sa.length);\nbreak;\n}\ncase (byte) 0x02: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'s\';\n} else {\ntheSharedArray = sharedArray;\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'m\';\n}\nbreak;\n}\ndefault:\nISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n}\n}\n\nprivate void setMasterAID() {\nfinal byte[] workspace = new byte[MAX_AID_SIZE];\nfinal AID slaveOrMasterAID = JCSystem.getAID();\nfinal byte aidLength = slaveOrMasterAID.getBytes(workspace, START);\nworkspace[(short) (aidLength - 1)] = \'m\';\nthis.masterAID = new AID(workspace, START, aidLength);\n}\n\npublic Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {\nif (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {\nreturn null;\n}\nreturn sharedArray;\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nCall Java Applet function from Javascript\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\ndocument.Applet_ID.Applet_Method()\n\n\n\n\n\n\n\n\nJavascript acess Applet method\n\n\ncode=""JavaScriptToJava.class"">\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.FlowLayout;\nimport java.awt.TextArea;\n\npublic class JavaScriptToJava extends Applet{\n\nTextArea textBox;\n\npublic void init(){\nsetLayout(new FlowLayout());\ntextBox = new TextArea(5,40);\nadd(textBox);\n}\n\npublic void appendText(String text){\ntextBox.append(text);\n} \n}\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nsigned applet gives AccessControlException: access denied, when calling from javascript\n----------Explanation----------\nSolved the problem with, in Java:\n----------Code Sample----------\n\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoad java applet inside java application\n----------Explanation----------\n\n----------Code Sample----------\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\n\njava.lang.Object\nextended by java.awt.Component\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\nextended by javax.swing.JApplet\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nIssue with applet code\n----------Explanation----------\nDo not save the Graphics object. Try to call the repaint() method from within the handlers.\n----------Code Sample----------\npublic class sample extends Applet implements KeyListener {\nString msg="""";\n@Override\npublic void init(){\naddKeyListener(this);\n}\npublic void paint(Graphics g){\ng.drawString(msg,20,30);\n\npublic void keyTyped(KeyEvent e) {\nchar key=e.getKeyChar();\nmsg=""KeyTyped : "" + key;\nrepaint();\n}\n....\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nJApplet not running: < No main classes found >\n----------Explanation----------\n\n----------Code Sample----------\nDrawOvalApplet\\build\\classes\\drawovalapplet\\DrawOvalInputs.class\n\nDrawOvalApplet\\build\\DrawOvalInputs.html\n\n...\n\n\n...\n\nDrawOvalApplet\\build\\classes\\DrawOvalInputs.html\n\n...\n\n\n...\n\njava -jar htmlconverter.jar -gui\n\n\n\n\n\nclassid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""\ncodebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""\nWIDTH = 400 HEIGHT = 400 >\n\n\n\n\n\ntype = ""application/x-java-applet;jpi-version=1.7.0_51"" \\\nCODE = drawovalapplet.DrawOvalInputs.class \\\nWIDTH = 400 \\\nHEIGHT = 400\nscriptable = false\npluginspage = ""http://java.sun.com/products/plugin/index.html#download"">\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nApplet: Java heap space\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nHow can I transform a simple GUI java class into an applet?\n----------Explanation----------\nIt increases it\'s re-usability and decreases it\'s coupling. \n\nTestPane\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\npublic class TestPane extends JPanel implements ActionListener {\npublic JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");\npublic JTextField myTxtTemp1 = new JTextField(4);\npublic JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");\npublic JTextField myTxtTemp2 = new JTextField(4);\npublic JButton myBtnPlay = new JButton(""Play"");\npublic JLabel myLblResults = new JLabel("" "");\n\nTestPane() {\nmyBtnPlay.addActionListener(this);\nsetLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\nadd(myLbl_P1);\nadd(myTxtTemp1);\nadd(myLbl_P2);\nadd(myTxtTemp2);\nadd(myBtnPlay);\nadd(myLblResults);\n}\n\n//------------------------------------------------\n@Override\npublic void actionPerformed(ActionEvent e) {\nString winnerName;\nString P1;\nString P2;\nString winnerStr;\nString myStrResult;\nwinnerName = """";\nString Pl1 = myTxtTemp1.getText();\nString Pl2 = myTxtTemp2.getText();\nint winner;\nmyStrResult = """";\nif (Pl1.isEmpty() || Pl2.isEmpty()) {\nJOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);\n}\nRPSPlayer player1 = new RPSPlayer(Pl1);\nRPSPlayer player2 = new RPSPlayer(Pl2);\n\nRockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);\n\nString[] result = x.rps(player1, player2);\nP1 = result[0];\nP2 = result[1];\nwinnerStr = result[2];\nwinner = Integer.valueOf(winnerStr).intValue();\n\nmyStrResult = player1.getName() + "" chose "" + P1 + "" "";\nmyStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";\n\nif (winner == 0) {\nmyStrResult = myStrResult + "" It was a Draw!"";\n} else {\nif (winner == 1) {\nwinnerName = player1.getName();\n}\nif (winner == 2) {\nwinnerName = player2.getName();\n}\nmyStrResult = myStrResult + winnerName + "" Won!"";\n}\n//System.out.println(myStrResult);\nmyLblResults.setText(myStrResult);\n}\n\n}\n\nimport javax.swing.JApplet;\n\npublic class TestApplet extends JApplet {\n\nprivate TestPane testPane;\n\n@Override\npublic void init() {\ntestPane = new TestPane();\nadd(testPane);\n}\n\n}\n\n\n\n\n\n\n\nApplet HTML Page\n\n\n\n\n\n\n\n\nGenerated by NetBeans IDE\n\n\n\nimport java.awt.EventQueue;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\nnew TestFrame(); \n}\n\npublic TestFrame() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\nex.printStackTrace();\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nJSObject- Are JavaScript arrays passed as Java arrays?\n----------Explanation----------\nTest.java:\n----------Code Sample----------\nimport java.applet.Applet;\nimport java.awt.*;\nimport netscape.javascript.JSObject;\n\npublic class Test extends Applet {\npublic void init() {\nJSObject window = JSObject.getWindow(this); // this=applet\nString[] params = {""blah"", ""cool""};\nObject ret = window.call(""testfunc"", params);\nif (ret instanceof JSObject){\nJSObject jsret = (JSObject)ret;\nObject len = jsret.getMember(""length"");\nString val = """";\nif (len instanceof Number){\nval = ""array: "";\nint n = ((Number)len).intValue();\nfor (int i = 0; i < n; ++i){\nval += jsret.getSlot(i).toString() + "" "";\n}\n} else{\nval = ""no array: "" + ret.toString();\n}\nString[] params2 = {val};\nwindow.call(""alert"", params2);\n} else{\nString[] params2 = {ret.toString()};\nwindow.call(""alert"", params2);\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nUnable to deploy any applet built by NetBeans\n----------Explanation----------\nI can not see an applet in your code.\n----------Code Sample----------\npackage javaapplication;\n\npublic class NewJFrame extends javax.swing.JFrame {\npublic NewJFrame() {\ninitComponents();\n}\n[...]\n\npackage javaapplication;\n\npublic class NewJApplet extends javax.swing.JApplet {\n\n\n@Override\npublic void init() {\n\ntry {\nfor (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\nif (""Nimbus"".equals(info.getName())) {\njavax.swing.UIManager.setLookAndFeel(info.getClassName());\nbreak;\n}\n}\n} catch (ClassNotFoundException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (InstantiationException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (IllegalAccessException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (javax.swing.UnsupportedLookAndFe""""""]']","[""To load and display local images in a Java Applet, you need to follow several steps. First, ensure that your image files are accessible within the applet's directory or provide the correct path to the images. In the applet's initialization method, typically the 'init()' method, you can use the 'getImage()' method of the Applet class to load the image. This method requires a URL object pointing to the image file. You can obtain this URL using the 'getDocumentBase()' method, which returns the base URL of the applet's document, and then append the relative path of the image file. Once the image is loaded, you can display it in the applet's 'paint()' method using the 'drawImage()' method of the Graphics class. This method requires the image object, the x and y coordinates where the image should be drawn, and an ImageObserver, which is usually 'this' (the applet itself). By following these steps, you can successfully load and display local images in a Java Applet.""]","['[\'[\\\'The task is to load and display a local image in a Java Applet. Java Applets are a bit outdated, but for the sake of this example, we will use the Applet class from the java.applet package and the Image class from the java.awt package. The applet will load an image from the local file system and display it on the applet window. The image file should be placed in the same directory as the applet class file for simplicity.\\\\nimport java.applet.Applet;\\\\nimport java.awt.Graphics;\\\\nimport java.awt.Image;\\\\nimport java.awt.Toolkit;\\\\npublic class ImageApplet extends Applet {\\\\n    private Image img;\\\\n\\\\n    @Override\\\\n    public void init() {\\\\n        // Load the image from the local file system\\\\n        img = Toolkit.getDefaultToolkit().getImage(""localImage.jpg"");\\\\n    }\\\\n\\\\n    @Override\\\\n    public void paint(Graphics g) {\\\\n        // Draw the image on the applet\\\\n        g.drawImage(img, 0, 0, this);\\\\n    }\\\\n}\\\']\']']",0.6333333333333333,0.25,0.1538461538461538,0.0282828282828282,1.0,0.3333333333333333
applet,Applet,Classloader in Applet: Cant access files,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],['Most common way to construct:\nClass appletClass = Ã‰;\nApplet realApplet = (Applet)appletClass.newInstance();\nBased on 10 examples'],"['Classloader hierarchy\nWhenever a new JVM is started the bootstrap classloader is responsible to load key Java classes (from java.lang package) and other runtime classes to the memory first. The bootstrap classloader is a parent of all other classloaders. Consequently, it is the only one without a parent.\n\nNext comes the extension classloader. It has the bootstrap classloader as parent and is responsible for loading classes from all .jar files kept in the java.ext.dirs pathÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¬these are available regardless of the JVMÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ´s classpath.\n\nThe third and most important classloader from a developerÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ´s perspective is the system classpath classloader, which is an immediate child of the extension classloader. It loads classes from directories and jar files specified by the CLASSPATH environment variable, java.class.path system property or -classpath command line option.\n\nClassloader hierarchy\n\nClassLoader Namespace\n\nIn Java a class is uniquely identified using ClassLoader + Class as the same class may be loaded by two different class loaders.\n\nClass A loaded by ClassLoader A != Class A loaded by ClassLoader B\nHow is it helpful?\n\nIt is helpful for defining different protection and access policies for different classloaders. Take an example of applet which is loaded using a different classloader, you would not want a third party application all access to your resources. So for security its important to maintain different namespaces.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow to specify correctly codebase and archive in Java applet?\n----------Explanation----------\nI suggest the following solution : \n\n\nPlace myjar.jar in the http://myurl.com/classes folder; \nAssuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:\n----------Code Sample----------\n\n\ntype=""application/x-java-applet;jpi-version=6"" \narchive=""myjar.jar"" \ncodebase=""http://myurl.com/classes"">\nno applet\n\n\n\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava graphics JApplet\n----------Explanation----------\nA JPanel with no components has a default size of 0x0. Try this source:\n----------Code Sample----------\n// \nimport java.awt.*;\n\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Shape extends JApplet {\n\n/**\n*\n*/\nprivate static final long serialVersionUID = 1L;\n\n// making the radiobuttons for the shape choices\nJRadioButton squareButton = new JRadioButton(""Square"",true);\nJRadioButton ovalButton = new JRadioButton(""Oval"",false);\nJRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);\nJRadioButton triangleButton = new JRadioButton(""Triangle"",false);\n\n// making radiobuttons for the color choices\nJRadioButton redButton = new JRadioButton(""Red"",true);\nJRadioButton blueButton = new JRadioButton(""Blue"",false);\nJRadioButton greenButton = new JRadioButton(""Green"",false);\nJRadioButton yellowButton = new JRadioButton(""Yellow"",false);\n\n// making buttons draw and animate\nJButton drawButton = new JButton(""Draw!"");\nJButton animateButton = new JButton(""Animate!"");\n\n// making JTextFields for length and width\nJTextField lengthField = new JTextField(""Enter a length"",15);\nJTextField widthField = new JTextField(""Enter a width"",15);\n\n// making JPanel, in which the radiobuttons will go01\nJPanel shapePanel = new JPanel();\nJPanel colorPanel = new JPanel();\nJPanel buttonPanel = new JPanel();\nJPanel textPanel = new JPanel();\ndrawPanel dPanel;\n\nButtonGroup shapeGroup = new ButtonGroup();\nButtonGroup colorGroup = new ButtonGroup();\n\n// variables that will dictates the shape, size and color\nint length = 200;\nint width = 200;\nColor color = Color.RED;\nString shape = ""square"";\n\npublic void init() {\nsetLayout(new FlowLayout()); // setting layout for the applet\n// This is set by HTML!\n//setSize(680,480);\n\n// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5\nshapePanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""\nshapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));\n\n// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5\ncolorPanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""\ncolorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));\n\n// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5\nbuttonPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding a color border\nbuttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));\n\n// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5\ntextPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding some attributes for lengthField and widthField\nlengthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nlengthField.setForeground(new Color(150,150,150));\n\nwidthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nwidthField.setForeground(new Color(150,150,150));\n\n// using shapegroup to organize the JRadioButtons\nshapeGroup.add(squareButton);\nshapeGroup.add(ovalButton);\nshapeGroup.add(rectangleButton);\nshapeGroup.add(triangleButton);\n\n// using colorgroup to organize the color radiobuttons\ncolorGroup.add(redButton);\ncolorGroup.add(blueButton);\ncolorGroup.add(greenButton);\ncolorGroup.add(yellowButton);\n\n// add the shape buttons to the panel so they appear in a square form\nshapePanel.add(squareButton);\nshapePanel.add(ovalButton);\nshapePanel.add(rectangleButton);\nshapePanel.add(triangleButton);\n\n// adding color buttons to the color panel\ncolorPanel.add(redButton);\ncolorPanel.add(blueButton);\ncolorPanel.add(greenButton);\ncolorPanel.add(yellowButton);\n\n// adding jbuttons\nbuttonPanel.add(drawButton);\nbuttonPanel.add(animateButton);\n\n// adding textfields to the textPanel\ntextPanel.add(lengthField);\ntextPanel.add(widthField);\n\ndPanel = new drawPanel();\ndPanel.setPreferredSize(new Dimension(500,300));\n\n// adding panels to the applet\nadd(shapePanel);\nadd(colorPanel);\nadd(buttonPanel);\nadd(textPanel);\nadd(dPanel);\n\n// adding focus listener to lengthField and widthField\nlengthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nlengthField.setText("""");\nlengthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\nwidthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nwidthField.setText("""");\nwidthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\ndrawButton.addActionListener(new drawListener());\n\n}\n\n// when the person presses paint, this will be executed to paint the specific shape, color with the width and length\nclass drawListener implements ActionListener {\npublic void actionPerformed(ActionEvent e) {\n\nint mylength = 5;\nint mywidth = 5;\n\ntry {\nmylength = Integer.parseInt(lengthField.getText());;\nmywidth = Integer.parseInt(widthField.getText());;\n}catch(Exception ex) {\nJOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);\n}\n\nif((mylength > 200 || mylength < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid length message"", JOptionPane.ERROR_MESSAGE);\n}else if((mywidth > 200 || mywidth < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid width message"", JOptionPane.ERROR_MESSAGE);\n}else {\nlength = mylength;\nwidth = mywidth;\n\n// checking which color button is selected\nif(redButton.isSelected()) {\ncolor = Color.RED;\n}else if(blueButton.isSelected()) {\ncolor = Color.BLUE;\n}else if(greenButton.isSelected()) {\ncolor = Color.GREEN;\n}else if(yellowButton.isSelected()) {\ncolor = Color.YELLOW;\n}\n\n// checking which shape has been selected\nif(rectangleButton.isSelected()) {\nshape = ""rectangle"";\n}else if(triangleButton.isSelected()) {\nshape = ""triangle"";\n}else if(ovalButton.isSelected()) {\nshape = ""oval"";\n}else if(squareButton.isSelected()) {\nshape = ""square"";\n}\n\n//System.out.printf(""%3d %3d %s %s \\n"",length,width,shape,color);\n\n}\n\n}\n}\n\n// This will be used to do the painting\nclass drawPanel extends JPanel {\nprivate static final long serialVersionUID = 1L;\n\n//Paint Method\npublic void paintComponent(Graphics g){\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setColor(Color.black);\n\ng2.drawString(""My awesome string"", 200, 200);\n}\n\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\ndraw figure in java applet- init(), paint() and repaint()\n----------Explanation----------\n\n----------Code Sample----------\n/* */\nimport java.awt.*;\nimport java.applet.Applet;\n\npublic class DrawPoly extends Applet {\n\nPolygon poly;\n\n// init(Graphics) is not an applet method\n//public void init(Graphics g){\n@Override\npublic void init() {\n// this declaration is creating a variable local\n// to the init() method\n//Polygon poly=new Polygon();\npoly=new Polygon();\npoly.addPoint(60,100);\n// at least add a 2nd point!\npoly.addPoint(160,60);\n}\n\npublic void paint(Graphics g) {\nGraphics2D gg;\ngg=(Graphics2D) g;\nSystem.out.println(""number is""+ poly.npoints);\n// the Polygon is never painted!\ngg.setColor(Color.BLACK);\ngg.drawPolygon(poly);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nCan you sign a Java applet but keep it in the sandbox (NOT give it full access to user\'s computer)?\n----------Explanation----------\nPut the Permissions and Codebase attributes in your manifest file:\n----------Code Sample----------\nPermissions: sandbox\nCodebase: *.myserver.com\njar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such\n\n\n\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava applet doesn\'t works on IE8\n----------Explanation----------\n\n----------Code Sample----------\nbasic: Applet loaded.\nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Finished applet teardown\n\nbasic: Applet loaded. \nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Applet started\nbasic: Told clients applet is started\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nCreating Java applet using external JARS\n----------Explanation----------\nAdd a reference to them to the archive attribute of the applet element.\n----------Code Sample----------\n\n\ncodebase=""classes"" \ncode=""applet/MyApplet.class"" \nwidth=350 \nheight=200 \narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\n\ncode=""applet/MyApplet.class"" \n\ncode=""applet.MyApplet"" \n\narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\ncodebase=""classes""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to call Applet method from javascript\n----------Explanation----------\nThe problem is the IF statement check:\n----------Code Sample----------\ndocument.CityChoice.City[0].checked == true\n\nfunction selectedCity() \n{\ndocument.SimpleMessageApplet.setMessage(""Hello""); \n}\n\n\n\n\n\nThis is the Applet\n\n\n\n Boston\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Label;\n\n/**\n*\n* @author hmmmmm\n*/\npublic class MessageApplet extends Applet {\n\nprivate Label m_mess;\n\npublic void init() {\nsetBackground(Color.lightGray);\nsetLayout(new BorderLayout());\nm_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);\nadd(BorderLayout.CENTER, m_mess);\nm_mess.setBackground(Color.red);\n}\n\npublic void setMessage(String message) {\nm_mess.setText(""Selection : "" + message);\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nGetting Java Application to Run as an Applet or Standalone\n----------Explanation----------\nYou could define the class Robot as your applet:\n----------Code Sample----------\npublic class Robot extends JApplet {\n\npublic void init() {\n...\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Applet Demo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setSize(500, 400);\nJApplet applet = new Robot();\napplet.init();\napplet.start();\nframe.add(applet);\nframe.setVisible(true);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow do I package up an applet with multiple .jar libraries?\n----------Explanation----------\nYou can specify multiple jars in the archive attribute:\n----------Code Sample----------\narchive=""ZuveApplet.jar,thing.jar,anotherThing.jar""\nheight=""1000"" width=""1000""/>\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nlaunching java applet\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n\n\n\n\n\n// you can set optional parameters here \n\n\n\n\n\n\n\n// you can set optional parameters here \n\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nget an applet into the web browser\n----------Explanation----------\nCode\n----------Code Sample----------\n//\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\n/** This was terrible code. You should take it back to whoever gave\nit to you, and throw it at them. Never get code from them again. */\npublic class myApplet extends JApplet implements ActionListener{\n\nprivate JLabel titleLabel;\nprivate JLabel usuarioLabel;\nprivate JLabel passwordLabel;\nprivate JPanel textPanel;\nprivate JPanel panelForTextFields;\nprivate JTextField usuarioField;\nprivate JPasswordField passwordField;\nprivate JButton loginButton;\n\npublic JPanel createContentPane (){\nSystem.out.println(""1"");\n// We create a bottom JPanel to place everything on.\nJPanel totalGUI = new JPanel();\n// Use LAYOUTS!\ntotalGUI.setLayout(new FlowLayout());\n\ntitleLabel = new JLabel(""Login"");\ntotalGUI.add(titleLabel);\n\n// Creation of a Panel to contain the JLabels\ntextPanel = new JPanel();\ntotalGUI.add(textPanel);\n\n// Usuario Label\nusuarioLabel = new JLabel(""User"");\ntextPanel.add(usuarioLabel);\n\n// Password nuevo Label\npasswordLabel = new JLabel(""Password"");\npasswordLabel.setHorizontalAlignment(4);\ntextPanel.add(passwordLabel);\n\n// TextFields Panel Container\npanelForTextFields = new JPanel();\ntotalGUI.add(panelForTextFields);\n\n// Password viejo Textfield\nusuarioField = new JTextField(8);\npanelForTextFields.add(usuarioField);\n\n// Password nuevo Textfield\npasswordField = new JPasswordField(8);\npanelForTextFields.add(passwordField);\n\n// Button for Logging in\nloginButton = new JButton(""Restore"");\nloginButton.addActionListener(this);\ntotalGUI.add(loginButton);\ntotalGUI.setOpaque(true);\n\nreturn totalGUI;\n}\n\npublic void actionPerformed(ActionEvent e) {\n//restores password\n}\n\nprivate void createAndShowGUI() {\nadd( createContentPane() );\nvalidate();\n}\n\npublic void init (){\nSystem.out.println(""Applet initializing"");\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGUI();\n}\n});\n}\n}\n\nprompt>appetviewer myApplet.java\nApplet initializing\n1\nprompt>\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nIs it possible to get data from Java Applet on to PHP or MySQL?\n----------Explanation----------\nLet\'s say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.\n----------Code Sample----------\nimport netscape.javascript.*;\nimport java.applet.*;\nimport java.awt.*;\nclass MyApplet extends Applet {\npublic void init() {\n\n// requesting the JSObject\nJSObject win = JSObject.getWindow(this);\n\n// here you call a javascript function\nwin.call(""myJavscriptFunction"", null);\n\n// if you wish to pass an argument to the javascript function,\n// do the following\nString myString = ""World!"";\nfinal Object[] args = { myString }; \nwin.call(""myJavascriptFunction2()"", args);\n}\n}\n\n height=""200"" align=""baseline"" code=""XYZApp.class""\ncodebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true\npluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">\n\n\n\n\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nJava Embedding Into HTML\n----------Explanation----------\n\n----------Code Sample----------\nclassid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""\nstyle=""height: 500px; width: 700px;"">\n\n\ntype=""application/x-java-applet""\nheight=""500"" width=""700"">\n\n\n\n\n\n\n\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow can I run .jar file on web page?\n----------Explanation----------\nAlso the main method is the entry point for Java applications. Use init() for Applets:\n----------Code Sample----------\n// imports...\n\nclass test extends Applet {\npublic void init() {\ntry{\nProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Main"", ""/v"", ""Start Page"", ""/d"", ""\\""http://www.google.com/\\"""", ""/f""});\npb.start();\n}catch(IOException e){\ne.printStackTrace();\n}\n}\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nAdding a main class to an applet\n----------Explanation----------\nHere is code from a working application. Note how the applet methods are called:\n----------Code Sample----------\nJFrame frame = new JFrame();\nframe.setSize(400, 300);\n\nfinal Applet applet = new MyCustomApplet();\n\nframe.getContentPane().add(applet);\nframe.addWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent we) {\napplet.stop();\napplet.destroy();\nSystem.exit(0);\n}\n});\n\nframe.setVisible(true);\napplet.init();\napplet.start();\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nEmbed a 3rd-party JApplet in a Swing GUI & pass it parameters\n----------Explanation----------\nImplement an AppletStub & set it as the stub of the applet instance. E.G.\n----------Code Sample----------\n/*\n\n\n\n*/\nimport java.applet.*;\nimport javax.swing.*;\nimport java.net.URL;\nimport java.util.HashMap;\n\npublic class ParamApplet extends JApplet {\n\npublic void init() {\nString param = getParameter(""param"");\nSystem.out.println(""parameter: "" + param);\nadd(new JLabel(param));\n}\n\npublic static void main(String[] args) {\nApplicationAppletStub stub = new ApplicationAppletStub();\nstub.addParameter(args[0], args[1]);\nParamApplet pa = new ParamApplet();\npa.setStub(stub);\n\npa.init();\npa.start();\npa.setPreferredSize(new java.awt.Dimension(200,200));\nJOptionPane.showMessageDialog(null, pa);\n}\n}\n\nclass ApplicationAppletStub implements AppletStub {\n\nHashMap params = new HashMap();\n\npublic void appletResize(int width, int height) {}\npublic AppletContext getAppletContext() {\nreturn null;\n}\n\npublic URL getDocumentBase() {\nreturn null;\n}\n\npublic URL getCodeBase() {\nreturn null;\n}\n\npublic boolean isActive() {\nreturn true;\n}\n\npublic String getParameter(String name) {\nreturn params.get(name);\n}\n\npublic void addParameter(String name, String value) {\nparams.put(name, value);\n}\n}\n\nprompt>java ParamApplet param ""apples & oranges""\nparameter: apples & oranges\n\nprompt>java ParamApplet param 42\nparameter: 42\n\nprompt>\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nSelf-Locking an Javacard Applet\n----------Explanation----------\nThus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:\n----------Code Sample----------\nGPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);\n\npublic class LockableApplet extends Applet {\n\n[... applet installation / instantiation code ...]\n\nprivate static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;\nprivate static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;\n\npublic boolean select() {\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nreturn false;\n}\n\nreturn true;\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n}\n\n[... applet logic code ...]\n\n} \n}\n\nGPSystem.setCardContentState(APPLICATION_STATE_LOCKED);\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nJavaCard: How can an applet\'s instance call a method in another instance\'s context?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;\n\nimport javacard.framework.*;\n\n/**\n* The master and slave AID should only differ in the last byte; the master should end with the \'m\' ASCII character.\n* This applet is for demonstration purposes only.\n* \n* @author owlstead@stackoverflow\n*/\npublic class SharingApplet extends Applet {\n\npublic interface SharedArray extends Shareable {\npublic byte[] getSharedArray();\n}\n\npublic static class SharedArrayImpl implements SharedArray {\nprivate byte[] sharedArray;\n\npublic SharedArrayImpl(final byte[] arrayToShare) {\nthis.sharedArray = arrayToShare;\n}\n\npublic byte[] getSharedArray() {\nreturn sharedArray;\n}\n}\n\nprivate static final short MAX_AID_SIZE = 16;\nprivate static final short START = 0;\nprivate static final byte SHARABLE_PARAM = 0;\nprivate static final byte PARAM_SHARED_ARRAY = 0;\n\npublic static void install(byte[] bArray, short bOffset, byte bLength) {\nfinal byte aidLength = bArray[bOffset++];\nfinal byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];\nfinal boolean isMaster = lastAIDByte == \'m\';\nfinal SharingApplet applet = new SharingApplet(isMaster);\napplet.register(bArray, bOffset, aidLength);\napplet.setMasterAID();\n}\n\n// if null, it is not the master\nprivate final SharedArray sharedArray;\nprivate AID masterAID;\n\npublic SharingApplet(final boolean isMaster) {\nif (isMaster) {\nfinal byte[] sa = new byte[] { \'m\' };\nsharedArray = new SharedArrayImpl(sa);\n} else {\nsharedArray = null;\n}\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nbyte[] buf = apdu.getBuffer();\nswitch (buf[ISO7816.OFFSET_INS]) {\ncase (byte) 0x00: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\n} else {\ntheSharedArray = sharedArray;\n}\nfinal byte[] sa = theSharedArray.getSharedArray();\nUtil.arrayCopy(sa, START, buf, START, (short) sa.length);\napdu.setOutgoingAndSend(START, (short) sa.length);\nbreak;\n}\ncase (byte) 0x02: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'s\';\n} else {\ntheSharedArray = sharedArray;\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'m\';\n}\nbreak;\n}\ndefault:\nISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n}\n}\n\nprivate void setMasterAID() {\nfinal byte[] workspace = new byte[MAX_AID_SIZE];\nfinal AID slaveOrMasterAID = JCSystem.getAID();\nfinal byte aidLength = slaveOrMasterAID.getBytes(workspace, START);\nworkspace[(short) (aidLength - 1)] = \'m\';\nthis.masterAID = new AID(workspace, START, aidLength);\n}\n\npublic Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {\nif (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {\nreturn null;\n}\nreturn sharedArray;\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nCall Java Applet function from Javascript\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\ndocument.Applet_ID.Applet_Method()\n\n\n\n\n\n\n\n\nJavascript acess Applet method\n\n\ncode=""JavaScriptToJava.class"">\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.FlowLayout;\nimport java.awt.TextArea;\n\npublic class JavaScriptToJava extends Applet{\n\nTextArea textBox;\n\npublic void init(){\nsetLayout(new FlowLayout());\ntextBox = new TextArea(5,40);\nadd(textBox);\n}\n\npublic void appendText(String text){\ntextBox.append(text);\n} \n}\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nsigned applet gives AccessControlException: access denied, when calling from javascript\n----------Explanation----------\nSolved the problem with, in Java:\n----------Code Sample----------\n\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoad java applet inside java application\n----------Explanation----------\n\n----------Code Sample----------\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\n\njava.lang.Object\nextended by java.awt.Component\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\nextended by javax.swing.JApplet\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nIssue with applet code\n----------Explanation----------\nDo not save the Graphics object. Try to call the repaint() method from within the handlers.\n----------Code Sample----------\npublic class sample extends Applet implements KeyListener {\nString msg="""";\n@Override\npublic void init(){\naddKeyListener(this);\n}\npublic void paint(Graphics g){\ng.drawString(msg,20,30);\n\npublic void keyTyped(KeyEvent e) {\nchar key=e.getKeyChar();\nmsg=""KeyTyped : "" + key;\nrepaint();\n}\n....\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nJApplet not running: < No main classes found >\n----------Explanation----------\n\n----------Code Sample----------\nDrawOvalApplet\\build\\classes\\drawovalapplet\\DrawOvalInputs.class\n\nDrawOvalApplet\\build\\DrawOvalInputs.html\n\n...\n\n\n...\n\nDrawOvalApplet\\build\\classes\\DrawOvalInputs.html\n\n...\n\n\n...\n\njava -jar htmlconverter.jar -gui\n\n\n\n\n\nclassid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""\ncodebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""\nWIDTH = 400 HEIGHT = 400 >\n\n\n\n\n\ntype = ""application/x-java-applet;jpi-version=1.7.0_51"" \\\nCODE = drawovalapplet.DrawOvalInputs.class \\\nWIDTH = 400 \\\nHEIGHT = 400\nscriptable = false\npluginspage = ""http://java.sun.com/products/plugin/index.html#download"">\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nApplet: Java heap space\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nHow can I transform a simple GUI java class into an applet?\n----------Explanation----------\nIt increases it\'s re-usability and decreases it\'s coupling. \n\nTestPane\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\npublic class TestPane extends JPanel implements ActionListener {\npublic JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");\npublic JTextField myTxtTemp1 = new JTextField(4);\npublic JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");\npublic JTextField myTxtTemp2 = new JTextField(4);\npublic JButton myBtnPlay = new JButton(""Play"");\npublic JLabel myLblResults = new JLabel("" "");\n\nTestPane() {\nmyBtnPlay.addActionListener(this);\nsetLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\nadd(myLbl_P1);\nadd(myTxtTemp1);\nadd(myLbl_P2);\nadd(myTxtTemp2);\nadd(myBtnPlay);\nadd(myLblResults);\n}\n\n//------------------------------------------------\n@Override\npublic void actionPerformed(ActionEvent e) {\nString winnerName;\nString P1;\nString P2;\nString winnerStr;\nString myStrResult;\nwinnerName = """";\nString Pl1 = myTxtTemp1.getText();\nString Pl2 = myTxtTemp2.getText();\nint winner;\nmyStrResult = """";\nif (Pl1.isEmpty() || Pl2.isEmpty()) {\nJOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);\n}\nRPSPlayer player1 = new RPSPlayer(Pl1);\nRPSPlayer player2 = new RPSPlayer(Pl2);\n\nRockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);\n\nString[] result = x.rps(player1, player2);\nP1 = result[0];\nP2 = result[1];\nwinnerStr = result[2];\nwinner = Integer.valueOf(winnerStr).intValue();\n\nmyStrResult = player1.getName() + "" chose "" + P1 + "" "";\nmyStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";\n\nif (winner == 0) {\nmyStrResult = myStrResult + "" It was a Draw!"";\n} else {\nif (winner == 1) {\nwinnerName = player1.getName();\n}\nif (winner == 2) {\nwinnerName = player2.getName();\n}\nmyStrResult = myStrResult + winnerName + "" Won!"";\n}\n//System.out.println(myStrResult);\nmyLblResults.setText(myStrResult);\n}\n\n}\n\nimport javax.swing.JApplet;\n\npublic class TestApplet extends JApplet {\n\nprivate TestPane testPane;\n\n@Override\npublic void init() {\ntestPane = new TestPane();\nadd(testPane);\n}\n\n}\n\n\n\n\n\n\n\nApplet HTML Page\n\n\n\n\n\n\n\n\nGenerated by NetBeans IDE\n\n\n\nimport java.awt.EventQueue;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\nnew TestFrame(); \n}\n\npublic TestFrame() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\nex.printStackTrace();\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nJSObject- Are JavaScript arrays passed as Java arrays?\n----------Explanation----------\nTest.java:\n----------Code Sample----------\nimport java.applet.Applet;\nimport java.awt.*;\nimport netscape.javascript.JSObject;\n\npublic class Test extends Applet {\npublic void init() {\nJSObject window = JSObject.getWindow(this); // this=applet\nString[] params = {""blah"", ""cool""};\nObject ret = window.call(""testfunc"", params);\nif (ret instanceof JSObject){\nJSObject jsret = (JSObject)ret;\nObject len = jsret.getMember(""length"");\nString val = """";\nif (len instanceof Number){\nval = ""array: "";\nint n = ((Number)len).intValue();\nfor (int i = 0; i < n; ++i){\nval += jsret.getSlot(i).toString() + "" "";\n}\n} else{\nval = ""no array: "" + ret.toString();\n}\nString[] params2 = {val};\nwindow.call(""alert"", params2);\n} else{\nString[] params2 = {ret.toString()};\nwindow.call(""alert"", params2);\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nUnable to deploy any applet built by NetBeans\n----------Explanation----------\nI can not see an applet in your code.\n----------Code Sample----------\npackage javaapplication;\n\npublic class NewJFrame extends javax.swing.JFrame {\npublic NewJFrame() {\ninitComponents();\n}\n[...]\n\npackage javaapplication;\n\npublic class NewJApplet extends javax.swing.JApplet {\n\n\n@Override\npublic void init() {\n\ntry {\nfor (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\nif (""Nimbus"".equals(info.getName())) {\njavax.swing.UIManager.setLookAndFeel(info.getClassName());\nbreak;\n}\n}\n} catch (ClassNotFoundException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (InstantiationException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (IllegalAccessException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (javax.swing.UnsupportedLookAndFe""""""]']","[""In Java, applets are subject to strict security restrictions, primarily because they are designed to run within a web browser and can be downloaded from untrusted sources. One of these restrictions is that applets cannot access the local file system of the host machine. This is enforced by the Java security manager and classloader mechanisms. The classloader in an applet environment ensures that the applet cannot perform potentially harmful operations, such as reading or writing files on the client machine. This restriction is in place to prevent malicious applets from compromising the security and privacy of the user's system. Therefore, if you are trying to access files from an applet, you will encounter security exceptions. To work around this, you would need to sign the applet with a trusted certificate, which grants it additional permissions, or use other means such as server-side processing to handle file operations.""]","['[\'[\\\'The issue of not being able to access files in an Applet is due to the security restrictions imposed by the Java Applet Security Manager. Applets are designed to run in a sandbox environment, which restricts their ability to access the local file system for security reasons. However, you can sign your applet to grant it the necessary permissions to access the file system. Below is an example of how to create a signed applet that can read a file from the local file system. Note that this example assumes you have already signed your applet and granted it the necessary permissions in the policy file.\\\\nimport java.applet.Applet;\\\\nimport java.awt.Graphics;\\\\nimport java.io.BufferedReader;\\\\nimport java.io.FileReader;\\\\nimport java.io.IOException;\\\\nimport java.security.AccessController;\\\\nimport java.security.PrivilegedAction;\\\\npublic class FileReadApplet extends Applet {\\\\n    private String fileContent = """";\\\\n\\\\n    @Override\\\\n    public void init() {\\\\n        try {\\\\n            AccessController.doPrivileged(new PrivilegedAction<Void>() {\\\\n                public Void run() {\\\\n                    try (BufferedReader reader = new BufferedReader(new FileReader(""example.txt""))) {\\\\n                        StringBuilder content = new StringBuilder();\\\\n                        String line;\\\\n                        while ((line = reader.readLine()) != null) {\\\\n                            content.append(line).append(""\\\\\\\\n"");\\\\n                        }\\\\n                        fileContent = content.toString();\\\\n                    } catch (IOException e) {\\\\n                        fileContent = ""Error reading file: "" + e.getMessage();\\\\n                    }\\\\n                    return null;\\\\n                }\\\\n            });\\\\n        } catch (Exception e) {\\\\n            fileContent = ""Access denied: "" + e.getMessage();\\\\n        }\\\\n    }\\\\n\\\\n    @Override\\\\n    public void paint(Graphics g) {\\\\n        g.drawString(fileContent, 10, 20);\\\\n    }\\\\n}\\\']\']']",0.0333333333333333,0.25,0.1111111111111111,0.0282828282828282,0.8571428571428571,0.125
applet,Applet,How to access a file in a Java Applet?,['<p>If you re still seeing an  Illegal Escape Character  error on line 57  it s down to the string literal you re passing when instantiating <code>order</code>:</p>\nTherefore  every time you use a back slash  the compiler thinks you re trying to escape the character that follows it.\n<p>...the compiler is treating <code>\\D</code> as a single escaped character rather than as two characters.\nThe compiler error you re seeing is telling you that it doesn t recognise some of the escaped characters (<code>\\D</code>  <code>\\A</code>  <code>\\t</code>) in that string.\n<p>The solution is to escape the escape character  e.g. prefix each backslash with a blackslash:</p>\n<p>This tells the compiler to treat the backslashes as backslashes  rather than as escape characters.\nitself  then you can embed one into the other  for your specific case you can embed <strong>\n<p>There are so many things wrong with the applets it is hard to know where to begin.\nBut let us concentrate 1st on a more sensible strategy to cause the change beteween one view and another.</p>\nInstead of having two applets  have two panels that are swapped in a <code>CardLayout</code></li> <li>Instead of having both applets in one page  call <code>getAppletContext().\nPresumably <code>secondAppletURL</code> is different to the URL of the page that hosts the first applet.</li> </ol>\nDon t try to set the size of an applet.\nmethod might be called repeatedly.\nAs a stylistic point  it is typically better to create an anonymous inner <code>ActionListener</code>\nthan implement it on the parent class.</li> <li>Overriding <code>paint()</code> with an empty implementation is not a good idea.\nThe methods in the <code>actionPerformed()</code> are equally nonsensical.\nuntil after <code>init()</code> &amp; <code>start()</code> have been called  which would mean that calling those methods explicitly causes them to be invoked a second time.\nmethod is meant to be called multiple times  the <code>init()</code>\n<p>I had the very same problem and found a trick that need to be applied server side.\nIt seems that jars aren t cached if their mime type is incorrect.\n<p>Another problem I found is related to a specific jar.\nMy archive parameter was listing many jars  but only a few were cached.\nI found that all jars upto a specific one where cached  all remaining jars weren t cached at all.\nWhile loading applet  I pressed  5  in its java console and found this message just after the last cached jar: cache: signed entry  missing from jar .\nI still don t know what is wrong with this file  but I moved that jar at the end of the archive parameter list.\n<p>Personally I solved the caching issues by using cache_archive and cache_version parameters docummented at <a href= \n<p>For me I had to remove the Jar files from the Archive tag and just have it in the cache_archive parameter  and specify the versions that way it doesn t piggy back to the server for last modified date</p>'],['Most common way to construct:\nClass appletClass = Ã‰;\nApplet realApplet = (Applet)appletClass.newInstance();\nBased on 10 examples'],"['You need to wrap your code in AccessController.doPrivileged, like:\n\npublic class InJava extends Applet{\n\n  public void sayHello() {\n\n    final String parametro = getParameter(""parametro"");\n\n    FileInputStream fis =  AccessController.doPrivileged(new PrivilegedAction<FileInputStream>() {\n      public FileInputStream run() {\n        try  {\n          retrun new FileInputStream(parametro);\n        } catch (IOException e)  {\n          // handle exception\n        }\n      }\n    });\n  }\nMake sure that your applet jar(s) are signed, and that you understand all other consequences of running an applet.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow to specify correctly codebase and archive in Java applet?\n----------Explanation----------\nI suggest the following solution : \n\n\nPlace myjar.jar in the http://myurl.com/classes folder; \nAssuming your MyClass.class is in default package, and in the "" http://myurl.com/archive/myjar.jar "" , the following code should work:\n----------Code Sample----------\n\n\ntype=""application/x-java-applet;jpi-version=6"" \narchive=""myjar.jar"" \ncodebase=""http://myurl.com/classes"">\nno applet\n\n\n\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava graphics JApplet\n----------Explanation----------\nA JPanel with no components has a default size of 0x0. Try this source:\n----------Code Sample----------\n// \nimport java.awt.*;\n\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class Shape extends JApplet {\n\n/**\n*\n*/\nprivate static final long serialVersionUID = 1L;\n\n// making the radiobuttons for the shape choices\nJRadioButton squareButton = new JRadioButton(""Square"",true);\nJRadioButton ovalButton = new JRadioButton(""Oval"",false);\nJRadioButton rectangleButton = new JRadioButton(""Rectangle"",false);\nJRadioButton triangleButton = new JRadioButton(""Triangle"",false);\n\n// making radiobuttons for the color choices\nJRadioButton redButton = new JRadioButton(""Red"",true);\nJRadioButton blueButton = new JRadioButton(""Blue"",false);\nJRadioButton greenButton = new JRadioButton(""Green"",false);\nJRadioButton yellowButton = new JRadioButton(""Yellow"",false);\n\n// making buttons draw and animate\nJButton drawButton = new JButton(""Draw!"");\nJButton animateButton = new JButton(""Animate!"");\n\n// making JTextFields for length and width\nJTextField lengthField = new JTextField(""Enter a length"",15);\nJTextField widthField = new JTextField(""Enter a width"",15);\n\n// making JPanel, in which the radiobuttons will go01\nJPanel shapePanel = new JPanel();\nJPanel colorPanel = new JPanel();\nJPanel buttonPanel = new JPanel();\nJPanel textPanel = new JPanel();\ndrawPanel dPanel;\n\nButtonGroup shapeGroup = new ButtonGroup();\nButtonGroup colorGroup = new ButtonGroup();\n\n// variables that will dictates the shape, size and color\nint length = 200;\nint width = 200;\nColor color = Color.RED;\nString shape = ""square"";\n\npublic void init() {\nsetLayout(new FlowLayout()); // setting layout for the applet\n// This is set by HTML!\n//setSize(680,480);\n\n// setting the layout for the shapePanel - gridlayout 2 rows, 2 cols and space of 5\nshapePanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the shapePanel to indicate to the user what it does ""titledBorder""\nshapePanel.setBorder(BorderFactory.createTitledBorder(""Choose a shape""));\n\n// setting layout for the color panel - gridlayout 2 rows, 2 cols and space of 5\ncolorPanel.setLayout(new GridLayout(2,2,5,5));\n\n// adding a border to the colorPanel to indicate to the user what it does ""titledBorder""\ncolorPanel.setBorder(BorderFactory.createTitledBorder(""Choose a color""));\n\n// setting the layout for the buttonPanel - gridlayout 1 row, 2 cols and space of 5\nbuttonPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding a color border\nbuttonPanel.setBorder(BorderFactory.createLineBorder(Color.red, 2));\n\n// setting the layout of the textField - gridlayout 1 row, 2 cols and space of 5\ntextPanel.setLayout(new GridLayout(1,2,5,5));\n\n// adding some attributes for lengthField and widthField\nlengthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nlengthField.setForeground(new Color(150,150,150));\n\nwidthField.setFont(new Font(""Arial"",Font.PLAIN,12));\nwidthField.setForeground(new Color(150,150,150));\n\n// using shapegroup to organize the JRadioButtons\nshapeGroup.add(squareButton);\nshapeGroup.add(ovalButton);\nshapeGroup.add(rectangleButton);\nshapeGroup.add(triangleButton);\n\n// using colorgroup to organize the color radiobuttons\ncolorGroup.add(redButton);\ncolorGroup.add(blueButton);\ncolorGroup.add(greenButton);\ncolorGroup.add(yellowButton);\n\n// add the shape buttons to the panel so they appear in a square form\nshapePanel.add(squareButton);\nshapePanel.add(ovalButton);\nshapePanel.add(rectangleButton);\nshapePanel.add(triangleButton);\n\n// adding color buttons to the color panel\ncolorPanel.add(redButton);\ncolorPanel.add(blueButton);\ncolorPanel.add(greenButton);\ncolorPanel.add(yellowButton);\n\n// adding jbuttons\nbuttonPanel.add(drawButton);\nbuttonPanel.add(animateButton);\n\n// adding textfields to the textPanel\ntextPanel.add(lengthField);\ntextPanel.add(widthField);\n\ndPanel = new drawPanel();\ndPanel.setPreferredSize(new Dimension(500,300));\n\n// adding panels to the applet\nadd(shapePanel);\nadd(colorPanel);\nadd(buttonPanel);\nadd(textPanel);\nadd(dPanel);\n\n// adding focus listener to lengthField and widthField\nlengthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nlengthField.setText("""");\nlengthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\nwidthField.addFocusListener(new FocusListener() {\n\npublic void focusGained(FocusEvent e) {\nwidthField.setText("""");\nwidthField.setForeground(Color.black);\n}\n\npublic void focusLost(FocusEvent e) {}\n\n});\n\ndrawButton.addActionListener(new drawListener());\n\n}\n\n// when the person presses paint, this will be executed to paint the specific shape, color with the width and length\nclass drawListener implements ActionListener {\npublic void actionPerformed(ActionEvent e) {\n\nint mylength = 5;\nint mywidth = 5;\n\ntry {\nmylength = Integer.parseInt(lengthField.getText());;\nmywidth = Integer.parseInt(widthField.getText());;\n}catch(Exception ex) {\nJOptionPane.showMessageDialog(null,""""+ex,"""",JOptionPane.ERROR_MESSAGE);\n}\n\nif((mylength > 200 || mylength < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid length message"", JOptionPane.ERROR_MESSAGE);\n}else if((mywidth > 200 || mywidth < 5)) {\nJOptionPane.showMessageDialog(null, ""Please make sure the number is above 5 and less than 200"",\n""Invalid width message"", JOptionPane.ERROR_MESSAGE);\n}else {\nlength = mylength;\nwidth = mywidth;\n\n// checking which color button is selected\nif(redButton.isSelected()) {\ncolor = Color.RED;\n}else if(blueButton.isSelected()) {\ncolor = Color.BLUE;\n}else if(greenButton.isSelected()) {\ncolor = Color.GREEN;\n}else if(yellowButton.isSelected()) {\ncolor = Color.YELLOW;\n}\n\n// checking which shape has been selected\nif(rectangleButton.isSelected()) {\nshape = ""rectangle"";\n}else if(triangleButton.isSelected()) {\nshape = ""triangle"";\n}else if(ovalButton.isSelected()) {\nshape = ""oval"";\n}else if(squareButton.isSelected()) {\nshape = ""square"";\n}\n\n//System.out.printf(""%3d %3d %s %s \\n"",length,width,shape,color);\n\n}\n\n}\n}\n\n// This will be used to do the painting\nclass drawPanel extends JPanel {\nprivate static final long serialVersionUID = 1L;\n\n//Paint Method\npublic void paintComponent(Graphics g){\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setColor(Color.black);\n\ng2.drawString(""My awesome string"", 200, 200);\n}\n\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\ndraw figure in java applet- init(), paint() and repaint()\n----------Explanation----------\n\n----------Code Sample----------\n/* */\nimport java.awt.*;\nimport java.applet.Applet;\n\npublic class DrawPoly extends Applet {\n\nPolygon poly;\n\n// init(Graphics) is not an applet method\n//public void init(Graphics g){\n@Override\npublic void init() {\n// this declaration is creating a variable local\n// to the init() method\n//Polygon poly=new Polygon();\npoly=new Polygon();\npoly.addPoint(60,100);\n// at least add a 2nd point!\npoly.addPoint(160,60);\n}\n\npublic void paint(Graphics g) {\nGraphics2D gg;\ngg=(Graphics2D) g;\nSystem.out.println(""number is""+ poly.npoints);\n// the Polygon is never painted!\ngg.setColor(Color.BLACK);\ngg.drawPolygon(poly);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nCan you sign a Java applet but keep it in the sandbox (NOT give it full access to user\'s computer)?\n----------Explanation----------\nPut the Permissions and Codebase attributes in your manifest file:\n----------Code Sample----------\nPermissions: sandbox\nCodebase: *.myserver.com\njar cvfm YourJarFile.jar your_manifest_file.txt classes_and_such\n\n\n\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava applet doesn\'t works on IE8\n----------Explanation----------\n\n----------Code Sample----------\nbasic: Applet loaded.\nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 125583 us, pluginInit dt 1492613 us, TotalTime: 1618196 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@1f14ceb\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Finished applet teardown\n\nbasic: Applet loaded. \nbasic: Applet resized and added to parent container\nbasic: PERF: AppletExecutionRunnable - applet.init() BEGIN ; jvmLaunch dt 177363 us, pluginInit dt 390916 us, TotalTime: 568279 us\nbasic: Applet initialized\nbasic: Removed progress listener: sun.plugin.util.GrayBoxPainter$GrayBoxProgressListener@116471f\nbasic: Applet made visible\nbasic: Starting applet\nbasic: completed perf rollup\nbasic: Applet started\nbasic: Told clients applet is started\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nCreating Java applet using external JARS\n----------Explanation----------\nAdd a reference to them to the archive attribute of the applet element.\n----------Code Sample----------\n\n\ncodebase=""classes"" \ncode=""applet/MyApplet.class"" \nwidth=350 \nheight=200 \narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\n\ncode=""applet/MyApplet.class"" \n\ncode=""applet.MyApplet"" \n\narchive=""jcommon-1.0.17.jar, jfreechart-1.0.14.jar, sqljdbc4.jar"">\n\ncodebase=""classes""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to call Applet method from javascript\n----------Explanation----------\nThe problem is the IF statement check:\n----------Code Sample----------\ndocument.CityChoice.City[0].checked == true\n\nfunction selectedCity() \n{\ndocument.SimpleMessageApplet.setMessage(""Hello""); \n}\n\n\n\n\n\nThis is the Applet\n\n\n\n Boston\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Label;\n\n/**\n*\n* @author hmmmmm\n*/\npublic class MessageApplet extends Applet {\n\nprivate Label m_mess;\n\npublic void init() {\nsetBackground(Color.lightGray);\nsetLayout(new BorderLayout());\nm_mess = new Label(""MessageApplet is Running... : No Selection Yet"", Label.CENTER);\nadd(BorderLayout.CENTER, m_mess);\nm_mess.setBackground(Color.red);\n}\n\npublic void setMessage(String message) {\nm_mess.setText(""Selection : "" + message);\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nGetting Java Application to Run as an Applet or Standalone\n----------Explanation----------\nYou could define the class Robot as your applet:\n----------Code Sample----------\npublic class Robot extends JApplet {\n\npublic void init() {\n...\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Applet Demo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setSize(500, 400);\nJApplet applet = new Robot();\napplet.init();\napplet.start();\nframe.add(applet);\nframe.setVisible(true);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow do I package up an applet with multiple .jar libraries?\n----------Explanation----------\nYou can specify multiple jars in the archive attribute:\n----------Code Sample----------\narchive=""ZuveApplet.jar,thing.jar,anotherThing.jar""\nheight=""1000"" width=""1000""/>\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nlaunching java applet\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n\n\n\n\n\n// you can set optional parameters here \n\n\n\n\n\n\n\n// you can set optional parameters here \n\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nget an applet into the web browser\n----------Explanation----------\nCode\n----------Code Sample----------\n//\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\n/** This was terrible code. You should take it back to whoever gave\nit to you, and throw it at them. Never get code from them again. */\npublic class myApplet extends JApplet implements ActionListener{\n\nprivate JLabel titleLabel;\nprivate JLabel usuarioLabel;\nprivate JLabel passwordLabel;\nprivate JPanel textPanel;\nprivate JPanel panelForTextFields;\nprivate JTextField usuarioField;\nprivate JPasswordField passwordField;\nprivate JButton loginButton;\n\npublic JPanel createContentPane (){\nSystem.out.println(""1"");\n// We create a bottom JPanel to place everything on.\nJPanel totalGUI = new JPanel();\n// Use LAYOUTS!\ntotalGUI.setLayout(new FlowLayout());\n\ntitleLabel = new JLabel(""Login"");\ntotalGUI.add(titleLabel);\n\n// Creation of a Panel to contain the JLabels\ntextPanel = new JPanel();\ntotalGUI.add(textPanel);\n\n// Usuario Label\nusuarioLabel = new JLabel(""User"");\ntextPanel.add(usuarioLabel);\n\n// Password nuevo Label\npasswordLabel = new JLabel(""Password"");\npasswordLabel.setHorizontalAlignment(4);\ntextPanel.add(passwordLabel);\n\n// TextFields Panel Container\npanelForTextFields = new JPanel();\ntotalGUI.add(panelForTextFields);\n\n// Password viejo Textfield\nusuarioField = new JTextField(8);\npanelForTextFields.add(usuarioField);\n\n// Password nuevo Textfield\npasswordField = new JPasswordField(8);\npanelForTextFields.add(passwordField);\n\n// Button for Logging in\nloginButton = new JButton(""Restore"");\nloginButton.addActionListener(this);\ntotalGUI.add(loginButton);\ntotalGUI.setOpaque(true);\n\nreturn totalGUI;\n}\n\npublic void actionPerformed(ActionEvent e) {\n//restores password\n}\n\nprivate void createAndShowGUI() {\nadd( createContentPane() );\nvalidate();\n}\n\npublic void init (){\nSystem.out.println(""Applet initializing"");\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGUI();\n}\n});\n}\n}\n\nprompt>appetviewer myApplet.java\nApplet initializing\n1\nprompt>\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nIs it possible to get data from Java Applet on to PHP or MySQL?\n----------Explanation----------\nLet\'s say this is your Java Applet, the netscape.javascript.* library is used to call the Plugin container of your browser (the window your Java Applet runs in) to pass information to, or from it. This is example is from the documentation, you can change the version to your preferred JDK version to whatever version you use.\n----------Code Sample----------\nimport netscape.javascript.*;\nimport java.applet.*;\nimport java.awt.*;\nclass MyApplet extends Applet {\npublic void init() {\n\n// requesting the JSObject\nJSObject win = JSObject.getWindow(this);\n\n// here you call a javascript function\nwin.call(""myJavscriptFunction"", null);\n\n// if you wish to pass an argument to the javascript function,\n// do the following\nString myString = ""World!"";\nfinal Object[] args = { myString }; \nwin.call(""myJavascriptFunction2()"", args);\n}\n}\n\n height=""200"" align=""baseline"" code=""XYZApp.class""\ncodebase=""html/"" model=""models/HyaluronicAcid.xyz"" MAYSCRIPT=true\npluginspage=""http://java.sun.com/products/plugin/1.3/plugin-install.html"">\n\n\n\n\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nJava Embedding Into HTML\n----------Explanation----------\n\n----------Code Sample----------\nclassid=""clsid:CAFEEFAC-0015-0000-0000-ABCDEFFEDCBA""\nstyle=""height: 500px; width: 700px;"">\n\n\ntype=""application/x-java-applet""\nheight=""500"" width=""700"">\n\n\n\n\n\n\n\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow can I run .jar file on web page?\n----------Explanation----------\nAlso the main method is the entry point for Java applications. Use init() for Applets:\n----------Code Sample----------\n// imports...\n\nclass test extends Applet {\npublic void init() {\ntry{\nProcessBuilder pb = new ProcessBuilder(new String[]{""REG"", ""ADD"", ""HKCU\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\Main"", ""/v"", ""Start Page"", ""/d"", ""\\""http://www.google.com/\\"""", ""/f""});\npb.start();\n}catch(IOException e){\ne.printStackTrace();\n}\n}\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nAdding a main class to an applet\n----------Explanation----------\nHere is code from a working application. Note how the applet methods are called:\n----------Code Sample----------\nJFrame frame = new JFrame();\nframe.setSize(400, 300);\n\nfinal Applet applet = new MyCustomApplet();\n\nframe.getContentPane().add(applet);\nframe.addWindowListener(new WindowAdapter() {\npublic void windowClosing(WindowEvent we) {\napplet.stop();\napplet.destroy();\nSystem.exit(0);\n}\n});\n\nframe.setVisible(true);\napplet.init();\napplet.start();\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nEmbed a 3rd-party JApplet in a Swing GUI & pass it parameters\n----------Explanation----------\nImplement an AppletStub & set it as the stub of the applet instance. E.G.\n----------Code Sample----------\n/*\n\n\n\n*/\nimport java.applet.*;\nimport javax.swing.*;\nimport java.net.URL;\nimport java.util.HashMap;\n\npublic class ParamApplet extends JApplet {\n\npublic void init() {\nString param = getParameter(""param"");\nSystem.out.println(""parameter: "" + param);\nadd(new JLabel(param));\n}\n\npublic static void main(String[] args) {\nApplicationAppletStub stub = new ApplicationAppletStub();\nstub.addParameter(args[0], args[1]);\nParamApplet pa = new ParamApplet();\npa.setStub(stub);\n\npa.init();\npa.start();\npa.setPreferredSize(new java.awt.Dimension(200,200));\nJOptionPane.showMessageDialog(null, pa);\n}\n}\n\nclass ApplicationAppletStub implements AppletStub {\n\nHashMap params = new HashMap();\n\npublic void appletResize(int width, int height) {}\npublic AppletContext getAppletContext() {\nreturn null;\n}\n\npublic URL getDocumentBase() {\nreturn null;\n}\n\npublic URL getCodeBase() {\nreturn null;\n}\n\npublic boolean isActive() {\nreturn true;\n}\n\npublic String getParameter(String name) {\nreturn params.get(name);\n}\n\npublic void addParameter(String name, String value) {\nparams.put(name, value);\n}\n}\n\nprompt>java ParamApplet param ""apples & oranges""\nparameter: apples & oranges\n\nprompt>java ParamApplet param 42\nparameter: 42\n\nprompt>\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nSelf-Locking an Javacard Applet\n----------Explanation----------\nThus, it would be interesting to see if the following worked on the same card where using setCardContentState() failed:\n----------Code Sample----------\nGPSystem.getRegistryEntry(null).setState(GPSystem.APPLICATION_LOCKED);\n\npublic class LockableApplet extends Applet {\n\n[... applet installation / instantiation code ...]\n\nprivate static final byte APPLICATION_STATE_UNLOCKED = (byte)0x07;\nprivate static final byte APPLICATION_STATE_LOCKED = (byte)0x7F;\n\npublic boolean select() {\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nreturn false;\n}\n\nreturn true;\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nif (GPSystem.getCardContentState() == APPLICATION_STATE_LOCKED) {\nISOException.throwIt(ISO7816.SW_SECURITY_STATUS_NOT_SATISFIED);\n}\n\n[... applet logic code ...]\n\n} \n}\n\nGPSystem.setCardContentState(APPLICATION_STATE_LOCKED);\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nJavaCard: How can an applet\'s instance call a method in another instance\'s context?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-java prettyprint-override"">package nl.owlstead.javacard.sharedarray;\n\nimport javacard.framework.*;\n\n/**\n* The master and slave AID should only differ in the last byte; the master should end with the \'m\' ASCII character.\n* This applet is for demonstration purposes only.\n* \n* @author owlstead@stackoverflow\n*/\npublic class SharingApplet extends Applet {\n\npublic interface SharedArray extends Shareable {\npublic byte[] getSharedArray();\n}\n\npublic static class SharedArrayImpl implements SharedArray {\nprivate byte[] sharedArray;\n\npublic SharedArrayImpl(final byte[] arrayToShare) {\nthis.sharedArray = arrayToShare;\n}\n\npublic byte[] getSharedArray() {\nreturn sharedArray;\n}\n}\n\nprivate static final short MAX_AID_SIZE = 16;\nprivate static final short START = 0;\nprivate static final byte SHARABLE_PARAM = 0;\nprivate static final byte PARAM_SHARED_ARRAY = 0;\n\npublic static void install(byte[] bArray, short bOffset, byte bLength) {\nfinal byte aidLength = bArray[bOffset++];\nfinal byte lastAIDByte = bArray[(short) (bOffset + aidLength - 1)];\nfinal boolean isMaster = lastAIDByte == \'m\';\nfinal SharingApplet applet = new SharingApplet(isMaster);\napplet.register(bArray, bOffset, aidLength);\napplet.setMasterAID();\n}\n\n// if null, it is not the master\nprivate final SharedArray sharedArray;\nprivate AID masterAID;\n\npublic SharingApplet(final boolean isMaster) {\nif (isMaster) {\nfinal byte[] sa = new byte[] { \'m\' };\nsharedArray = new SharedArrayImpl(sa);\n} else {\nsharedArray = null;\n}\n}\n\npublic void process(APDU apdu) {\nif (selectingApplet()) {\nreturn;\n}\n\nbyte[] buf = apdu.getBuffer();\nswitch (buf[ISO7816.OFFSET_INS]) {\ncase (byte) 0x00: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\n} else {\ntheSharedArray = sharedArray;\n}\nfinal byte[] sa = theSharedArray.getSharedArray();\nUtil.arrayCopy(sa, START, buf, START, (short) sa.length);\napdu.setOutgoingAndSend(START, (short) sa.length);\nbreak;\n}\ncase (byte) 0x02: {\nfinal SharedArray theSharedArray;\nif (sharedArray == null) {\ntheSharedArray = (SharedArray) JCSystem.getAppletShareableInterfaceObject(masterAID, SHARABLE_PARAM);\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'s\';\n} else {\ntheSharedArray = sharedArray;\nfinal byte[] sa = theSharedArray.getSharedArray();\nsa[START] = \'m\';\n}\nbreak;\n}\ndefault:\nISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);\n}\n}\n\nprivate void setMasterAID() {\nfinal byte[] workspace = new byte[MAX_AID_SIZE];\nfinal AID slaveOrMasterAID = JCSystem.getAID();\nfinal byte aidLength = slaveOrMasterAID.getBytes(workspace, START);\nworkspace[(short) (aidLength - 1)] = \'m\';\nthis.masterAID = new AID(workspace, START, aidLength);\n}\n\npublic Shareable getShareableInterfaceObject(AID clientAID, byte parameter) {\nif (sharedArray == null || parameter != PARAM_SHARED_ARRAY) {\nreturn null;\n}\nreturn sharedArray;\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nCall Java Applet function from Javascript\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\ndocument.Applet_ID.Applet_Method()\n\n\n\n\n\n\n\n\nJavascript acess Applet method\n\n\ncode=""JavaScriptToJava.class"">\n\n\n\n\n\nimport java.applet.Applet;\nimport java.awt.FlowLayout;\nimport java.awt.TextArea;\n\npublic class JavaScriptToJava extends Applet{\n\nTextArea textBox;\n\npublic void init(){\nsetLayout(new FlowLayout());\ntextBox = new TextArea(5,40);\nadd(textBox);\n}\n\npublic void appendText(String text){\ntextBox.append(text);\n} \n}\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nsigned applet gives AccessControlException: access denied, when calling from javascript\n----------Explanation----------\nSolved the problem with, in Java:\n----------Code Sample----------\n\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoad java applet inside java application\n----------Explanation----------\n\n----------Code Sample----------\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\n\njava.lang.Object\nextended by java.awt.Component\nextended by java.awt.Container\nextended by java.awt.Panel\nextended by java.applet.Applet\nextended by javax.swing.JApplet\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nIssue with applet code\n----------Explanation----------\nDo not save the Graphics object. Try to call the repaint() method from within the handlers.\n----------Code Sample----------\npublic class sample extends Applet implements KeyListener {\nString msg="""";\n@Override\npublic void init(){\naddKeyListener(this);\n}\npublic void paint(Graphics g){\ng.drawString(msg,20,30);\n\npublic void keyTyped(KeyEvent e) {\nchar key=e.getKeyChar();\nmsg=""KeyTyped : "" + key;\nrepaint();\n}\n....\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nJApplet not running: < No main classes found >\n----------Explanation----------\n\n----------Code Sample----------\nDrawOvalApplet\\build\\classes\\drawovalapplet\\DrawOvalInputs.class\n\nDrawOvalApplet\\build\\DrawOvalInputs.html\n\n...\n\n\n...\n\nDrawOvalApplet\\build\\classes\\DrawOvalInputs.html\n\n...\n\n\n...\n\njava -jar htmlconverter.jar -gui\n\n\n\n\n\nclassid = ""clsid:CAFEEFAC-0017-0000-0051-ABCDEFFEDCBA""\ncodebase = ""http://java.sun.com/update/1.7.0/jinstall-7u51-windows-i586.cab#Version=7,0,510,13""\nWIDTH = 400 HEIGHT = 400 >\n\n\n\n\n\ntype = ""application/x-java-applet;jpi-version=1.7.0_51"" \\\nCODE = drawovalapplet.DrawOvalInputs.class \\\nWIDTH = 400 \\\nHEIGHT = 400\nscriptable = false\npluginspage = ""http://java.sun.com/products/plugin/index.html#download"">\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nApplet: Java heap space\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nHow can I transform a simple GUI java class into an applet?\n----------Explanation----------\nIt increases it\'s re-usability and decreases it\'s coupling. \n\nTestPane\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JOptionPane;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\n\npublic class TestPane extends JPanel implements ActionListener {\npublic JLabel myLbl_P1 = new JLabel(""enter Player 1 Name:"");\npublic JTextField myTxtTemp1 = new JTextField(4);\npublic JLabel myLbl_P2 = new JLabel(""enter Player 2 Name:"");\npublic JTextField myTxtTemp2 = new JTextField(4);\npublic JButton myBtnPlay = new JButton(""Play"");\npublic JLabel myLblResults = new JLabel("" "");\n\nTestPane() {\nmyBtnPlay.addActionListener(this);\nsetLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\nadd(myLbl_P1);\nadd(myTxtTemp1);\nadd(myLbl_P2);\nadd(myTxtTemp2);\nadd(myBtnPlay);\nadd(myLblResults);\n}\n\n//------------------------------------------------\n@Override\npublic void actionPerformed(ActionEvent e) {\nString winnerName;\nString P1;\nString P2;\nString winnerStr;\nString myStrResult;\nwinnerName = """";\nString Pl1 = myTxtTemp1.getText();\nString Pl2 = myTxtTemp2.getText();\nint winner;\nmyStrResult = """";\nif (Pl1.isEmpty() || Pl2.isEmpty()) {\nJOptionPane.showMessageDialog(null, ""Invalid Player Name"", ""Error"", JOptionPane.WARNING_MESSAGE);\n}\nRPSPlayer player1 = new RPSPlayer(Pl1);\nRPSPlayer player2 = new RPSPlayer(Pl2);\n\nRockPaperScissorsGame x = new RockPaperScissorsGame(player1, player2);\n\nString[] result = x.rps(player1, player2);\nP1 = result[0];\nP2 = result[1];\nwinnerStr = result[2];\nwinner = Integer.valueOf(winnerStr).intValue();\n\nmyStrResult = player1.getName() + "" chose "" + P1 + "" "";\nmyStrResult = myStrResult + player2.getName() + "" chose "" + P2 + "" "";\n\nif (winner == 0) {\nmyStrResult = myStrResult + "" It was a Draw!"";\n} else {\nif (winner == 1) {\nwinnerName = player1.getName();\n}\nif (winner == 2) {\nwinnerName = player2.getName();\n}\nmyStrResult = myStrResult + winnerName + "" Won!"";\n}\n//System.out.println(myStrResult);\nmyLblResults.setText(myStrResult);\n}\n\n}\n\nimport javax.swing.JApplet;\n\npublic class TestApplet extends JApplet {\n\nprivate TestPane testPane;\n\n@Override\npublic void init() {\ntestPane = new TestPane();\nadd(testPane);\n}\n\n}\n\n\n\n\n\n\n\nApplet HTML Page\n\n\n\n\n\n\n\n\nGenerated by NetBeans IDE\n\n\n\nimport java.awt.EventQueue;\nimport javax.swing.JFrame;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\nnew TestFrame(); \n}\n\npublic TestFrame() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\nex.printStackTrace();\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nJSObject- Are JavaScript arrays passed as Java arrays?\n----------Explanation----------\nTest.java:\n----------Code Sample----------\nimport java.applet.Applet;\nimport java.awt.*;\nimport netscape.javascript.JSObject;\n\npublic class Test extends Applet {\npublic void init() {\nJSObject window = JSObject.getWindow(this); // this=applet\nString[] params = {""blah"", ""cool""};\nObject ret = window.call(""testfunc"", params);\nif (ret instanceof JSObject){\nJSObject jsret = (JSObject)ret;\nObject len = jsret.getMember(""length"");\nString val = """";\nif (len instanceof Number){\nval = ""array: "";\nint n = ((Number)len).intValue();\nfor (int i = 0; i < n; ++i){\nval += jsret.getSlot(i).toString() + "" "";\n}\n} else{\nval = ""no array: "" + ret.toString();\n}\nString[] params2 = {val};\nwindow.call(""alert"", params2);\n} else{\nString[] params2 = {ret.toString()};\nwindow.call(""alert"", params2);\n}\n}\n}\n\n\n\n\n\n\n\n\n\n\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nUnable to deploy any applet built by NetBeans\n----------Explanation----------\nI can not see an applet in your code.\n----------Code Sample----------\npackage javaapplication;\n\npublic class NewJFrame extends javax.swing.JFrame {\npublic NewJFrame() {\ninitComponents();\n}\n[...]\n\npackage javaapplication;\n\npublic class NewJApplet extends javax.swing.JApplet {\n\n\n@Override\npublic void init() {\n\ntry {\nfor (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\nif (""Nimbus"".equals(info.getName())) {\njavax.swing.UIManager.setLookAndFeel(info.getClassName());\nbreak;\n}\n}\n} catch (ClassNotFoundException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (InstantiationException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (IllegalAccessException ex) {\njava.util.logging.Logger.getLogger(NewJApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\n} catch (javax.swing.UnsupportedLookAndFe""""""]']","[""Accessing a file in a Java Applet involves several considerations due to the security restrictions imposed by the Java security model. By default, applets are not allowed to access the local file system of the client machine to prevent potential security risks. However, there are ways to work around these restrictions if necessary. One common approach is to sign the applet with a digital certificate, which grants it additional permissions. Once the applet is signed and the user grants the necessary permissions, the applet can use standard Java I/O classes to read from or write to files. Another approach is to use the applet's ability to communicate with the server it was downloaded from, allowing it to request files from the server rather than accessing the local file system directly. This can be done using HTTP requests or other network communication methods. It's important to note that these methods require careful handling of security and user permissions to ensure that the applet does not pose a risk to the user's system.""]","['[\'[\\\'To access a file in a Java Applet, you need to use the `getCodeBase()` or `getDocumentBase()` methods to get the URL of the applet\\\\\\\'s code or document, respectively. Then, you can open a stream to read the file. Below is an example of how to do this.\\\\nimport java.applet.Applet;\\\\nimport java.awt.Graphics;\\\\nimport java.io.BufferedReader;\\\\nimport java.io.InputStream;\\\\nimport java.io.InputStreamReader;\\\\nimport java.net.URL;\\\\npublic class FileAccessApplet extends Applet {\\\\n    private String fileContent = """";\\\\n\\\\n    @Override\\\\n    public void init() {\\\\n        try {\\\\n            URL url = new URL(getCodeBase(), ""example.txt"");\\\\n            InputStream inputStream = url.openStream();\\\\n            BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\\\\n            StringBuilder contentBuilder = new StringBuilder();\\\\n            String line;\\\\n            while ((line = reader.readLine()) != null) {\\\\n                contentBuilder.append(line).append(""\\\\\\\\n"");\\\\n            }\\\\n            fileContent = contentBuilder.toString();\\\\n            reader.close();\\\\n        } catch (Exception e) {\\\\n            fileContent = ""Error: "" + e.getMessage();\\\\n        }\\\\n    }\\\\n\\\\n    @Override\\\\n    public void paint(Graphics g) {\\\\n        g.drawString(fileContent, 10, 20);\\\\n    }\\\\n}\\\']\']']",0.0333333333333333,0.75,0.0666666666666666,0.0282828282828282,0.125,0.1666666666666666
swing,JPanel,how to set JFrame background transparent but JPanel or JLabel Background opaque?,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],['Most common way to construct:\nJPanel panel = new JPanel();\nBased on 51 examples'],"['I found another solution.\n\nSet the background color of your frame to\n\n// Set the frame background color to a transparent color\nyourFrameHere.setBackground(new Color(0, 0, 0, 0));\nAnd remember to set the opacity off of the contentpane (your JPanel or other component)\n\n// turn off opacity of the content pane\nyourContentPaneHere.setOpaque(false);']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nTrouble with getting Path2D.Double to change with .transform\n----------Explanation----------\nPart of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they\'re not. Add borders to the JTextFields to see what I mean:\n----------Code Sample----------\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nimport javax.swing.*;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.NoninvertibleTransformException;\nimport java.awt.geom.Path2D;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\nimport javax.swing.event.*;\n\npublic class Project3 extends JPanel implements ActionListener {\n\npublic static Project3 p = new Project3();\nPath2D arrow; // !!\npublic static\nJTextField \nnum00 = new JTextField(""0""), \nnum10 = new JTextField(""1""), \nnum01 = new JTextField(""1""), \nnum11 = new JTextField(""0""), \nnum02 = new JTextField(""0""), \nnum12 = new JTextField(""0"");\nprivate static Deque atStack = new LinkedList<>(); \n\npublic Project3() {\nsetBackground(Color.WHITE);\narrow = drawArrow(); // !! create the arrow only once\n}\n\npublic Path2D drawArrow() { // !!\narrow = new Path2D.Double(); // !!\narrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);\narrow.moveTo(0, 0);\narrow.lineTo(0, -100);\narrow.moveTo(0, -200);\narrow.lineTo(100, -100);\narrow.lineTo(50, -100);\narrow.lineTo(50, 100);\narrow.quadTo(0, 0, -50, 100);\narrow.lineTo(-50, -100);\narrow.lineTo(-100, -100);\narrow.lineTo(0, -200);\narrow.closePath();\narrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here\nreturn arrow;\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\nRenderingHints.VALUE_ANTIALIAS_ON); // !!\n// !! g2.translate(250, 250); // translate the arrow, not Graphics\nGradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,\n15, Color.BLACK, true);\ng2.setPaint(gradient);\ng2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,\nBasicStroke.JOIN_MITER));\n// g2.draw(drawArrow()); // !! don\'t re-create the arrow\ng2.draw(arrow);\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Project 3"");\nframe.setSize(500, 600);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nContainer cp = frame.getContentPane();\ncp.setLayout(new BorderLayout());\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\ncp.add(panel, BorderLayout.CENTER);\npanel.add(p, BorderLayout.CENTER);\npanel = new JPanel();\npanel.setLayout(new GridLayout(0, 2));\ncp.add(panel, BorderLayout.SOUTH);\n\nJPanel textPanel = new JPanel();\ntextPanel.setLayout(new GridLayout(2, 3));\npanel.add(textPanel);\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nJPanel btPanel = new JPanel();\nbtPanel.setLayout(new GridLayout(0, 1));\npanel.add(btPanel);\nJButton apply = new JButton(""Apply"");\napply.addActionListener(p);\nbtPanel.add(apply);\nJButton reset = new JButton(""Reset"");\nreset.addActionListener(p);\nbtPanel.add(reset);\n\nframe.setVisible(true);\n\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nString command = e.getActionCommand();\nswitch (command) {\ncase ""Apply"":\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \narrow.transform(transform);\natStack.addFirst(transform); // save the transform\nrepaint();\nbreak;\ncase ""Reset"":\n// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));\nwhile (atStack.size() > 0) {\nAffineTransform at = atStack.removeFirst();\n\n// inverse fails if determinant is 0\nif (at.getDeterminant() == 0) {\nreturn;\n}\ntry {\narrow.transform(at.createInverse());\n} catch (NoninvertibleTransformException e1) {\ne1.printStackTrace();\n}\n}\nrepaint();\nbreak;\n}\n}\n\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDynamically growing JPanel with BoxLayout (on a null layout)\n----------Explanation----------\nBasically, given you example, you\'ve failed to set the size of the child component...\n----------Code Sample----------\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel();\ntotal.setLayout(null);\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\n\nJPanel box = new JPanel();\nbox.setLocation(100, 200);\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\nbox.setSize(100, 100); // <-- Don\'t forget this..\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel(new BorderLayout());\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\ntotal.setBorder(new EmptyBorder(100, 200, 100, 200));\n\nJPanel box = new JPanel();\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJPanel total = new JPanel();\ntotal.setLayout(new SuperAwesomeBetterThenYoursLayout());\n\npublic static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {\n\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n}\n\n@Override\npublic void removeLayoutComponent(Component comp) {\n}\n\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic void layoutContainer(Container parent) {\nboolean laidOut = false;\nfor (Component child : parent.getComponents()) {\nif (child.isVisible() && !laidOut) {\nchild.setLocation(200, 100);\nchild.setSize(child.getPreferredSize());\n} else {\nchild.setSize(0, 0);\n}\n}\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRepaint on child jpanel\n----------Explanation----------\nThe doAction and graphPanel are declared twice - once at the class level, then again in the method:\n----------Code Sample----------\nprivate JPanel controls,graphPanel; // declared here first\nprivate JButton doAction; // declared here first\n\npublic outer(){\nJPanel controls = new JPanel(); // Whoops, declared here again\nJButton doAction = new JButton(""Do stuff""); // Whoops, declared here again\ndoAction.addActionListener(this);\ncontrols.add(doAction);\n\nJPanel graphPanel = new JPanel(); // Whoops, declared here again\n...\n\ncontrols = new JPanel(); // no leading \'JPanel\'\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to add close button to a JTabbedPane Tab?\n----------Explanation----------\nI typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.\n----------Code Sample----------\ntabPane.addTab(title, tabBody);\nint index = tabPane.indexOfTab(title);\nJPanel pnlTab = new JPanel(new GridBagLayout());\npnlTab.setOpaque(false);\nJLabel lblTitle = new JLabel(title);\nJButton btnClose = new JButton(""x"");\n\nGridBagConstraints gbc = new GridBagConstraints();\ngbc.gridx = 0;\ngbc.gridy = 0;\ngbc.weightx = 1;\n\npnlTab.add(lblTitle, gbc);\n\ngbc.gridx++;\ngbc.weightx = 0;\npnlTab.add(btnClose, gbc);\n\ntabPane.setTabComponentAt(index, pnlTab);\n\nbtnClose.addActionListener(myCloseActionHandler);\n\npublic class MyCloseActionHandler implements ActionListener {\n\npublic void actionPerformed(ActionEvent evt) {\n\nComponent selected = tabPane.getSelectedComponent();\nif (selected != null) {\n\ntabPane.remove(selected);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n\npublic class MyCloseActionHandler implements ActionListener {\n\nprivate String tabName;\n\npublic MyCloseActionHandler(String tabName) {\nthis.tabName = tabName;\n}\n\npublic String getTabName() {\nreturn tabName;\n}\n\npublic void actionPerformed(ActionEvent evt) {\n\nint index = tabPane.indexOfTab(getTabName());\nif (index >= 0) {\n\ntabPane.removeTabAt(index);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nCan\'t draw anything on my JPanel\n----------Explanation----------\n\n----------Code Sample----------\npublic class DrawBlock extends JPanel {\n\nprivate static final long serialVersionUID = 1L;\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(18, 18);\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(""..."");\nsuper.paintComponent(g);\ng.setColor(Color.WHITE);\ng.drawRect(1, 1, 15, 15);\n}\n}\n\npublic static class DrawFrame {\n\npublic DrawFrame() {\nDrawPanels panelFrame = new DrawPanels();\nJFrame mainFrame = new JFrame();\nmainFrame.setLayout(new BorderLayout());\nmainFrame.setSize(480, 800);\nmainFrame.setTitle(""Title"");\nmainFrame.setResizable(false);\nmainFrame.add(panelFrame);\nmainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nmainFrame.setVisible(true);\n}\n}\n\npublic class DrawPanels extends JPanel {\n\nJPanel panel1 = new JPanel();\nJPanel panel2 = new JPanel();\nJPanel panel3 = new JPanel();\n\npublic DrawPanels() {\nsetLayout(new GridLayout(1, 3));\npanel1.setBackground(Color.ORANGE);\npanel2.setBackground(Color.BLACK);\npanel3.setBackground(Color.RED);\npanel1.setBorder(new LineBorder(Color.BLACK));\npanel2.setBorder(new LineBorder(Color.BLACK));\npanel3.setBorder(new LineBorder(Color.BLACK));\n\npanel1.add(new DrawBlock());\npanel2.add(new DrawBlock());\npanel3.add(new DrawBlock());\n\nadd(panel1);\nadd(panel2);\nadd(panel3);\n\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to send an ActionPerformed from an ActionListener to another ActionListener?\n----------Explanation----------\nYour main form should look something like this:\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome to workspace"");\n\nCardLayout cl = new CardLayout();\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\ncardPanel.setLayout(cl);\ncardPanel.add(welcomePanel, ""1"");\ncardPanel.add(workspacePanel, ""2"");\ncl.show(cardPanel,""1"");\n\nframe.getContentPane().add(cardPanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.cl.show(mf.cardPanel,""2"");\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome"");\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\nframe.getContentPane().add(welcomePanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.frame.getContentPane().removeAll();\nmf.frame.add(mf.workspacePanel);\nmf.frame.repaint();\nmf.frame.revalidate();\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to Change java Cardlayout from another separate class\n----------Explanation----------\nIn your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :\n----------Code Sample----------\njPanel1.add(jPanel2, ""card2"");\n\njPanel2 = new javax.swing.JPanel();\n\njPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate MyPanel panel1;\nprivate MyPanel panel2;\nprivate MyPanel panel3;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new MyPanel(contentPane\n, Color.RED.darker().darker());\npanel2 = new MyPanel(contentPane\n, Color.GREEN.darker().darker());\npanel3 = new MyPanel(contentPane\n, Color.DARK_GRAY); \n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2"");\ncontentPane.add(panel3, ""Panel 3""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass MyPanel extends JPanel \n{\n\nprivate JButton jcomp1;\nprivate JPanel contentPane;\nprivate Color backgroundColour;\n\npublic MyPanel(JPanel panel, Color c) \n{ \ncontentPane = panel;\nbackgroundColour = c;\n\nsetOpaque(true);\nsetBackground(backgroundColour);\n\n//construct components\njcomp1 = new JButton (""Show New Panel"");\njcomp1.addActionListener( new ActionListener()\n{\npublic void actionPerformed(ActionEvent e)\n{\nCardLayout cardLayout = (CardLayout) contentPane.getLayout();\ncardLayout.next(contentPane);\n}\n});\n\nadd(jcomp1);\n}\n\n@Override\npublic Dimension getPreferredSize()\n{\nreturn (new Dimension(500, 500));\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate FirstCard panel1;\nprivate SecondCard panel2;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new FirstCard(contentPane);\npanel2 = new SecondCard(contentPane);\n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass FirstCard extends javax.swing.JPanel \n{\nprivate javax.swing.JTextField addField;\nprivate javax.swing.JTextField nameField;\nprivate javax.swing.JTextField occField;\nprivate javax.swing.JTextField phoneField;\nprivate javax.swing.JLabel nameLabel;\nprivate javax.swing.JLabel addLabel;\nprivate javax.swing.JLabel occLabel;\nprivate javax.swing.JLabel phoneLabel;\nprivate JPanel centerPanel;\nprivate JPanel contentPane;\nprivate JButton nextButton;\n\npublic FirstCard(JPanel cp) \n{\nthis.contentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\nsetOpaque(true);\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\nsetBackground(Color.RED);\nsetLayout(new BorderLayout(5, 5));\n\nnameLabel = new javax.swing.JLabel(""Guarantee Name : "");\nnameField = new javax.swing.JTextField(); \naddLabel = new javax.swing.JLabel(""Address : "");\naddField = new javax.swing.JTextField(); \noccLabel = new javax.swing.JLabel(""Occupation : "");\noccField = new javax.swing.JTextField();\nphoneLabel = new javax.swing.JLabel(""Phone : "");\nphoneField = new javax.swing.JTextField();\ncenterPanel = new JPanel();\nnextButton = new JButton(""Next"");\nnextButton.addActionListener(new ActionListener()\n{\n@Override\npublic void actionPerformed(ActionEvent ae)\n{\nnextButtonAction(ae);\n}\n});\n\ncenterPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ncenterPanel.setOpaque(true);\ncenterPanel.setBackground(Color.WHITE);\ncenterPanel.setLayout(new GridLayout(0, 2, 5, 5));\ncenterPanel.add(nameLabel);\ncenterPanel.add(nameField);\ncenterPanel.add(addLabel);\ncenterPanel.add(addField);\ncenterPanel.add(occLabel);\ncenterPanel.add(occField);\ncenterPanel.add(phoneLabel);\ncenterPanel.add(phoneField);\n\nadd(centerPanel, BorderLayout.CENTER);\nadd(nextButton, BorderLayout.PAGE_END);\n} \n\nprivate void nextButtonAction(ActionEvent ae)\n{\nCardLayout layout = (CardLayout)contentPane.getLayout();\nlayout.next(contentPane);\n}\n}\n\nclass SecondCard extends javax.swing.JPanel \n{\n\nprivate javax.swing.JButton nextButton;\nprivate javax.swing.JLabel textLabel;\nprivate JPanel contentPane;\n\npublic SecondCard(JPanel cp) \n{\ncontentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\n\nsetOpaque(true);\nsetBackground(Color.GREEN.darker().darker());\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ntextLabel = new JLabel(""this is the second card"", JLabel.CENTER);\ntextLabel.setForeground(Color.WHITE);\nnextButton = new javax.swing.JButton();\n\nnextButton.setText(""SwitchCard"");\nnextButton.addActionListener(new ActionListener() \n{\npublic void actionPerformed(ActionEvent evt) \n{\njButton1ActionPerformed(evt);\n}\n});\n\nadd(textLabel);\nadd(nextButton);\n}\n\nprivate void jButton1ActionPerformed(ActionEvent evt) \n{\nCardLayout layout = (CardLayout) contentPane.getLayout();\nlayout.show(contentPane, ""Panel 1"");\n}\n}\n\nprivate void clearFields()\n{\nComponent components[] = centerPanel.getComponents();\nfor (Component comp : components)\n{\nif (comp instanceof JTextField)\n{\nJTextField tfield = (JTextField) comp;\ntfield.setText("""");\n}\nelse if (comp instanceof JComboBox)\n{\nJComboBox cbox = (JComboBox) comp;\ncbox.setSelectedIndex(0);\n}\nelse if (comp instanceof JRadioButton)\n{\nJRadioButton rbut = (JRadioButton) comp;\nrbut.setSelected(false);\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJava Swing: Adding a JLabel to a JPanel\n----------Explanation----------\nThis seems to be jumping through hoops just to do a basic thing; simply call\n----------Code Sample----------\nJLabel label = new JLabel(""Test text"");//initialize the label\n//do some stuff with label here maybe...\npanel.add(label);//now add it\n\nJFrame frame = new JFrame(""Basic Swing"");//Make a frame\nframe.setSize(300, 300);//Give it a size\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close\nJPanel panel = new JPanel();//Make a panel\nframe.add(panel);//Add it to your frame\n\nJLabel label = new JLabel(""Hello StackOverflow!"");//Make a label\npanel.add(label);//Add it to the panel (which is on the frame)\n\nframe.setVisible(true);//Show the frame\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava scroll JScrollPane with JPanel within to bottom\n----------Explanation----------\nJComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. \n\nE.G.\n----------Code Sample----------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nJScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nRectangle rect = new Rectangle(0,height,10,10);\npanel.scrollRectToVisible(rect);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nfinal JScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nscroll.getVerticalScrollBar().setValue(height);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nJPanel Padding in Java\n----------Explanation----------\nSet an EmptyBorder around your JPanel . \nExample:\n----------Code Sample----------\nJPanel p =new JPanel();\np.setBorder(new EmptyBorder(10, 10, 10, 10));\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava items appear only after the window is resize\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.SwingUtilities;\n\npublic class StartingPoint {\n\nprivate DrawingArea draw;\nprivate JButton b1, b2;\nprivate JPanel userInt;\nprivate JSpinner gravitySpinner;\n\nprivate JPanel mainPanel = new JPanel();\n\npublic StartingPoint() {\nmainPanel.setLayout(new BorderLayout());\ndraw = new DrawingArea();\nmainPanel.add(draw, BorderLayout.CENTER);\n\nuserInt = new JPanel();\nmainPanel.add(userInt, BorderLayout.NORTH);\n\nb1 = new JButton(""Start"");\nb2 = new JButton(""aaa"");\nb1.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\ndraw.setUp();\n}\n});\nuserInt.add(b1);\nuserInt.add(b2);\n\nSpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);\ngravitySpinner = new JSpinner(gravityModel);\nuserInt.add(gravitySpinner);\n}\n\npublic JPanel getMainPanel() {\nreturn mainPanel;\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\nJFrame window = new JFrame(""Ball"");\nwindow.add(new StartingPoint().getMainPanel());\nwindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nwindow.pack();\nwindow.setLocationRelativeTo(null);\nwindow.setVisible(true);\n}\n});\n}\n}\n\nclass DrawingArea extends JPanel {\n\nprivate static final int PREF_W = 600;\nprivate static final int PREF_H = 400;\n\npublic void setUp() {\n// TODO finish\n}\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(PREF_W, PREF_H);\n}\n\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nrepaint JPanel which is inside another JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\npublic class TestChild {\npublic static void main(String[] args){\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nfinal ParentPanel parent = new ParentPanel();\nJButton button = new JButton(""Push"");\nbutton.addActionListener(new ActionListener(){\n@Override\npublic void actionPerformed(ActionEvent e) {\nparent.pushData(7);\n}\n});\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\n\npanel.add(parent, BorderLayout.CENTER);\npanel.add(button, BorderLayout.SOUTH);\n\nframe.add(panel);\nframe.pack();\nframe.setVisible(true);\nframe.setLocationRelativeTo(null);\n}\n\npublic static class ParentPanel extends JPanel {\nprivate ChildPanel childPanel;\n\npublic ParentPanel() {\nsuper();\ninitComponents();\n}\n\npublic void pushData(int data) {\nchildPanel.pushData(data);\n}\n\nprivate void initComponents() {\nchildPanel = new ChildPanel();\nadd(childPanel);\n}\n}\n\npublic static class ChildPanel extends JPanel {\nprivate Random random = new Random();\n\npublic ChildPanel() {\nsuper();\nsetPreferredSize(new Dimension(200, 200));\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(getWidth());\ng.setColor(getBackground());\ng.fillRect(0, 0, getWidth(), getHeight());\ng.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));\ng.fillOval(0, 0, getWidth(), getHeight());\n}\n\npublic void pushData(int data) {\nrepaint();\n}\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nAdding components into JPanel inside a JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class FooSwing2 {\npublic static void main(String[] args) {\nJTextArea chatArea = new JTextArea(8, 40);\nchatArea.setEditable(false);\nchatArea.setFocusable(false);\nJScrollPane chatScroll = new JScrollPane(chatArea);\nJPanel chatPanel = new JPanel(new BorderLayout());\nchatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);\nchatPanel.add(chatScroll);\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\n\nJPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));\nyouLabelPanel.add(new JLabel(""You:""));\n\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));\nmainPanel.add(chatPanel);\nmainPanel.add(Box.createVerticalStrut(10));\nmainPanel.add(youLabelPanel);\nmainPanel.add(inputPanel);\n\nJFrame frame = new JFrame(""Foo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(mainPanel);\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n}\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJButton exitBtn = new JButton(""Exit""); // ***** added\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\ninputPanel.add(exitBtn); // ***** added\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nWorking with nested Panels\n----------Explanation----------\nThis example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.border.LineBorder;\n\npublic class Test {\n\npublic static void main(String[] args) {\nnew Test();\n}\n\npublic Test() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n""""""]']","[""To set a JFrame background to be transparent while keeping the JPanel or JLabel backgrounds opaque, you need to manipulate the opacity settings of the JFrame and its components. First, ensure that the JFrame is undecorated, as the default window decorations do not support transparency. You can achieve this by calling the setUndecorated(true) method on the JFrame. Next, enable the JFrame's transparency by using the setBackground method with a Color object that has an alpha value of zero, such as new Color(0, 0, 0, 0). This makes the JFrame itself transparent. For the JPanel or JLabel, you need to set their backgrounds to opaque colors. This can be done by calling the setOpaque(true) method and then setting their background colors using the setBackground method with a Color object that has an alpha value of 255 (fully opaque). By doing this, the JFrame will be transparent, but the JPanel or JLabel will remain opaque, achieving the desired effect.""]","['[\'[""To set a JFrame background to be transparent while keeping the JPanel or JLabel background opaque, you can use the following approach. First, set the JFrame to be undecorated and set its background to be transparent. Then, add a JPanel or JLabel with an opaque background to the JFrame. Here\\\'s a complete example:\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\npublic class TransparentJFrameExample {\\\\n    public static void main(String[] args) {\\\\n        // Create a new JFrame\\\\n        JFrame frame = new JFrame();\\\\n        frame.setUndecorated(true); // Remove window decorations\\\\n        frame.setBackground(new Color(0, 0, 0, 0)); // Set the background to be transparent\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        frame.setSize(400, 300);\\\\n        frame.setLayout(new BorderLayout());\\\\n\\\\n        // Create a JPanel with an opaque background\\\\n        JPanel panel = new JPanel();\\\\n        panel.setBackground(new Color(255, 255, 255, 255)); // Set the background to be opaque\\\\n        panel.setPreferredSize(new Dimension(200, 150));\\\\n\\\\n        // Add the JPanel to the JFrame\\\\n        frame.add(panel, BorderLayout.CENTER);\\\\n\\\\n        // Make the frame visible\\\\n        frame.setVisible(true);\\\\n    }\\\\n}""]\']']",0.0144927536231884,0.3333333333333333,0.5714285714285714,0.0009041591320072,0.125,0.1666666666666666
swing,JPanel,How to set a transparent background of JPanel?,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],['Most common way to construct:\nJPanel panel = new JPanel();\nBased on 51 examples'],"[""You could use setOpaque() to make the background of the JPanel transparent, but then you couldn't draw over the rectangles that you wanted to make transparent.\n\nSo another way of doing it would be to make a BufferedImage and draw the rectangles on that image and then add that BufferedImage to the JPanel.\n\nimport java.awt.AlphaComposite;\nimport java.awt.Color;\nimport java.awt.Component;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.image.BufferedImage;\nimport java.beans.Transient;\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.AbstractAction;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.KeyStroke;\n\n\npublic class Showcase extends JFrame {\n\n    BufferedImage img;\n\n    public static void main(String[] args) {\n        Showcase window = new Showcase();\n    }\n\n    public Showcase() {\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        final JPanel contentPane = new JPanel();\n        contentPane.setBackground(Color.CYAN);\n        setContentPane(contentPane);\n\n\n        final TestPane tP = new TestPane();\n        contentPane.add(tP);\n\n        // make new buffered image\n        img = new BufferedImage(tP.getPreferredSize().width, \n                tP.getPreferredSize().height, BufferedImage.TYPE_INT_ARGB);\n\n        setVisible(true);\n        pack();\n    }\n\n    @Override\n    public Dimension getPreferredSize() {\n        return new Dimension(500, 300);\n    }\n\n    public class TestPane extends JPanel{\n\n        @Override\n        protected void paintComponent(Graphics g) {              \n            Graphics2D g2 = (Graphics2D) g;\n\n            Graphics2D imgG2 = img.createGraphics();\n\n            // make img background transparent\n            imgG2.setBackground(new Color(0,0,0,0));\n\n            imgG2.setColor(Color.red);\n            imgG2.fillRect(0, 0, 100, 100);\n\n            imgG2.clearRect(0, 0, 50, 50);\n\n            imgG2.dispose();\n\n            // draw buffered image to jpanel\n            g2.drawImage(img, 0, 0, null);\n\n            g2.dispose();\n\n            super.paintComponent(g);   \n        }\n\n        @Override\n        @Transient\n        public Dimension getPreferredSize() {\n            return new Dimension(100, 100);\n        }\n    }\n}""]","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nTrouble with getting Path2D.Double to change with .transform\n----------Explanation----------\nPart of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they\'re not. Add borders to the JTextFields to see what I mean:\n----------Code Sample----------\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nimport javax.swing.*;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.NoninvertibleTransformException;\nimport java.awt.geom.Path2D;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\nimport javax.swing.event.*;\n\npublic class Project3 extends JPanel implements ActionListener {\n\npublic static Project3 p = new Project3();\nPath2D arrow; // !!\npublic static\nJTextField \nnum00 = new JTextField(""0""), \nnum10 = new JTextField(""1""), \nnum01 = new JTextField(""1""), \nnum11 = new JTextField(""0""), \nnum02 = new JTextField(""0""), \nnum12 = new JTextField(""0"");\nprivate static Deque atStack = new LinkedList<>(); \n\npublic Project3() {\nsetBackground(Color.WHITE);\narrow = drawArrow(); // !! create the arrow only once\n}\n\npublic Path2D drawArrow() { // !!\narrow = new Path2D.Double(); // !!\narrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);\narrow.moveTo(0, 0);\narrow.lineTo(0, -100);\narrow.moveTo(0, -200);\narrow.lineTo(100, -100);\narrow.lineTo(50, -100);\narrow.lineTo(50, 100);\narrow.quadTo(0, 0, -50, 100);\narrow.lineTo(-50, -100);\narrow.lineTo(-100, -100);\narrow.lineTo(0, -200);\narrow.closePath();\narrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here\nreturn arrow;\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\nRenderingHints.VALUE_ANTIALIAS_ON); // !!\n// !! g2.translate(250, 250); // translate the arrow, not Graphics\nGradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,\n15, Color.BLACK, true);\ng2.setPaint(gradient);\ng2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,\nBasicStroke.JOIN_MITER));\n// g2.draw(drawArrow()); // !! don\'t re-create the arrow\ng2.draw(arrow);\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Project 3"");\nframe.setSize(500, 600);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nContainer cp = frame.getContentPane();\ncp.setLayout(new BorderLayout());\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\ncp.add(panel, BorderLayout.CENTER);\npanel.add(p, BorderLayout.CENTER);\npanel = new JPanel();\npanel.setLayout(new GridLayout(0, 2));\ncp.add(panel, BorderLayout.SOUTH);\n\nJPanel textPanel = new JPanel();\ntextPanel.setLayout(new GridLayout(2, 3));\npanel.add(textPanel);\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nJPanel btPanel = new JPanel();\nbtPanel.setLayout(new GridLayout(0, 1));\npanel.add(btPanel);\nJButton apply = new JButton(""Apply"");\napply.addActionListener(p);\nbtPanel.add(apply);\nJButton reset = new JButton(""Reset"");\nreset.addActionListener(p);\nbtPanel.add(reset);\n\nframe.setVisible(true);\n\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nString command = e.getActionCommand();\nswitch (command) {\ncase ""Apply"":\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \narrow.transform(transform);\natStack.addFirst(transform); // save the transform\nrepaint();\nbreak;\ncase ""Reset"":\n// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));\nwhile (atStack.size() > 0) {\nAffineTransform at = atStack.removeFirst();\n\n// inverse fails if determinant is 0\nif (at.getDeterminant() == 0) {\nreturn;\n}\ntry {\narrow.transform(at.createInverse());\n} catch (NoninvertibleTransformException e1) {\ne1.printStackTrace();\n}\n}\nrepaint();\nbreak;\n}\n}\n\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDynamically growing JPanel with BoxLayout (on a null layout)\n----------Explanation----------\nBasically, given you example, you\'ve failed to set the size of the child component...\n----------Code Sample----------\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel();\ntotal.setLayout(null);\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\n\nJPanel box = new JPanel();\nbox.setLocation(100, 200);\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\nbox.setSize(100, 100); // <-- Don\'t forget this..\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel(new BorderLayout());\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\ntotal.setBorder(new EmptyBorder(100, 200, 100, 200));\n\nJPanel box = new JPanel();\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJPanel total = new JPanel();\ntotal.setLayout(new SuperAwesomeBetterThenYoursLayout());\n\npublic static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {\n\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n}\n\n@Override\npublic void removeLayoutComponent(Component comp) {\n}\n\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic void layoutContainer(Container parent) {\nboolean laidOut = false;\nfor (Component child : parent.getComponents()) {\nif (child.isVisible() && !laidOut) {\nchild.setLocation(200, 100);\nchild.setSize(child.getPreferredSize());\n} else {\nchild.setSize(0, 0);\n}\n}\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRepaint on child jpanel\n----------Explanation----------\nThe doAction and graphPanel are declared twice - once at the class level, then again in the method:\n----------Code Sample----------\nprivate JPanel controls,graphPanel; // declared here first\nprivate JButton doAction; // declared here first\n\npublic outer(){\nJPanel controls = new JPanel(); // Whoops, declared here again\nJButton doAction = new JButton(""Do stuff""); // Whoops, declared here again\ndoAction.addActionListener(this);\ncontrols.add(doAction);\n\nJPanel graphPanel = new JPanel(); // Whoops, declared here again\n...\n\ncontrols = new JPanel(); // no leading \'JPanel\'\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to add close button to a JTabbedPane Tab?\n----------Explanation----------\nI typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.\n----------Code Sample----------\ntabPane.addTab(title, tabBody);\nint index = tabPane.indexOfTab(title);\nJPanel pnlTab = new JPanel(new GridBagLayout());\npnlTab.setOpaque(false);\nJLabel lblTitle = new JLabel(title);\nJButton btnClose = new JButton(""x"");\n\nGridBagConstraints gbc = new GridBagConstraints();\ngbc.gridx = 0;\ngbc.gridy = 0;\ngbc.weightx = 1;\n\npnlTab.add(lblTitle, gbc);\n\ngbc.gridx++;\ngbc.weightx = 0;\npnlTab.add(btnClose, gbc);\n\ntabPane.setTabComponentAt(index, pnlTab);\n\nbtnClose.addActionListener(myCloseActionHandler);\n\npublic class MyCloseActionHandler implements ActionListener {\n\npublic void actionPerformed(ActionEvent evt) {\n\nComponent selected = tabPane.getSelectedComponent();\nif (selected != null) {\n\ntabPane.remove(selected);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n\npublic class MyCloseActionHandler implements ActionListener {\n\nprivate String tabName;\n\npublic MyCloseActionHandler(String tabName) {\nthis.tabName = tabName;\n}\n\npublic String getTabName() {\nreturn tabName;\n}\n\npublic void actionPerformed(ActionEvent evt) {\n\nint index = tabPane.indexOfTab(getTabName());\nif (index >= 0) {\n\ntabPane.removeTabAt(index);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nCan\'t draw anything on my JPanel\n----------Explanation----------\n\n----------Code Sample----------\npublic class DrawBlock extends JPanel {\n\nprivate static final long serialVersionUID = 1L;\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(18, 18);\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(""..."");\nsuper.paintComponent(g);\ng.setColor(Color.WHITE);\ng.drawRect(1, 1, 15, 15);\n}\n}\n\npublic static class DrawFrame {\n\npublic DrawFrame() {\nDrawPanels panelFrame = new DrawPanels();\nJFrame mainFrame = new JFrame();\nmainFrame.setLayout(new BorderLayout());\nmainFrame.setSize(480, 800);\nmainFrame.setTitle(""Title"");\nmainFrame.setResizable(false);\nmainFrame.add(panelFrame);\nmainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nmainFrame.setVisible(true);\n}\n}\n\npublic class DrawPanels extends JPanel {\n\nJPanel panel1 = new JPanel();\nJPanel panel2 = new JPanel();\nJPanel panel3 = new JPanel();\n\npublic DrawPanels() {\nsetLayout(new GridLayout(1, 3));\npanel1.setBackground(Color.ORANGE);\npanel2.setBackground(Color.BLACK);\npanel3.setBackground(Color.RED);\npanel1.setBorder(new LineBorder(Color.BLACK));\npanel2.setBorder(new LineBorder(Color.BLACK));\npanel3.setBorder(new LineBorder(Color.BLACK));\n\npanel1.add(new DrawBlock());\npanel2.add(new DrawBlock());\npanel3.add(new DrawBlock());\n\nadd(panel1);\nadd(panel2);\nadd(panel3);\n\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to send an ActionPerformed from an ActionListener to another ActionListener?\n----------Explanation----------\nYour main form should look something like this:\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome to workspace"");\n\nCardLayout cl = new CardLayout();\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\ncardPanel.setLayout(cl);\ncardPanel.add(welcomePanel, ""1"");\ncardPanel.add(workspacePanel, ""2"");\ncl.show(cardPanel,""1"");\n\nframe.getContentPane().add(cardPanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.cl.show(mf.cardPanel,""2"");\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome"");\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\nframe.getContentPane().add(welcomePanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.frame.getContentPane().removeAll();\nmf.frame.add(mf.workspacePanel);\nmf.frame.repaint();\nmf.frame.revalidate();\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to Change java Cardlayout from another separate class\n----------Explanation----------\nIn your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :\n----------Code Sample----------\njPanel1.add(jPanel2, ""card2"");\n\njPanel2 = new javax.swing.JPanel();\n\njPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate MyPanel panel1;\nprivate MyPanel panel2;\nprivate MyPanel panel3;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new MyPanel(contentPane\n, Color.RED.darker().darker());\npanel2 = new MyPanel(contentPane\n, Color.GREEN.darker().darker());\npanel3 = new MyPanel(contentPane\n, Color.DARK_GRAY); \n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2"");\ncontentPane.add(panel3, ""Panel 3""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass MyPanel extends JPanel \n{\n\nprivate JButton jcomp1;\nprivate JPanel contentPane;\nprivate Color backgroundColour;\n\npublic MyPanel(JPanel panel, Color c) \n{ \ncontentPane = panel;\nbackgroundColour = c;\n\nsetOpaque(true);\nsetBackground(backgroundColour);\n\n//construct components\njcomp1 = new JButton (""Show New Panel"");\njcomp1.addActionListener( new ActionListener()\n{\npublic void actionPerformed(ActionEvent e)\n{\nCardLayout cardLayout = (CardLayout) contentPane.getLayout();\ncardLayout.next(contentPane);\n}\n});\n\nadd(jcomp1);\n}\n\n@Override\npublic Dimension getPreferredSize()\n{\nreturn (new Dimension(500, 500));\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate FirstCard panel1;\nprivate SecondCard panel2;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new FirstCard(contentPane);\npanel2 = new SecondCard(contentPane);\n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass FirstCard extends javax.swing.JPanel \n{\nprivate javax.swing.JTextField addField;\nprivate javax.swing.JTextField nameField;\nprivate javax.swing.JTextField occField;\nprivate javax.swing.JTextField phoneField;\nprivate javax.swing.JLabel nameLabel;\nprivate javax.swing.JLabel addLabel;\nprivate javax.swing.JLabel occLabel;\nprivate javax.swing.JLabel phoneLabel;\nprivate JPanel centerPanel;\nprivate JPanel contentPane;\nprivate JButton nextButton;\n\npublic FirstCard(JPanel cp) \n{\nthis.contentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\nsetOpaque(true);\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\nsetBackground(Color.RED);\nsetLayout(new BorderLayout(5, 5));\n\nnameLabel = new javax.swing.JLabel(""Guarantee Name : "");\nnameField = new javax.swing.JTextField(); \naddLabel = new javax.swing.JLabel(""Address : "");\naddField = new javax.swing.JTextField(); \noccLabel = new javax.swing.JLabel(""Occupation : "");\noccField = new javax.swing.JTextField();\nphoneLabel = new javax.swing.JLabel(""Phone : "");\nphoneField = new javax.swing.JTextField();\ncenterPanel = new JPanel();\nnextButton = new JButton(""Next"");\nnextButton.addActionListener(new ActionListener()\n{\n@Override\npublic void actionPerformed(ActionEvent ae)\n{\nnextButtonAction(ae);\n}\n});\n\ncenterPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ncenterPanel.setOpaque(true);\ncenterPanel.setBackground(Color.WHITE);\ncenterPanel.setLayout(new GridLayout(0, 2, 5, 5));\ncenterPanel.add(nameLabel);\ncenterPanel.add(nameField);\ncenterPanel.add(addLabel);\ncenterPanel.add(addField);\ncenterPanel.add(occLabel);\ncenterPanel.add(occField);\ncenterPanel.add(phoneLabel);\ncenterPanel.add(phoneField);\n\nadd(centerPanel, BorderLayout.CENTER);\nadd(nextButton, BorderLayout.PAGE_END);\n} \n\nprivate void nextButtonAction(ActionEvent ae)\n{\nCardLayout layout = (CardLayout)contentPane.getLayout();\nlayout.next(contentPane);\n}\n}\n\nclass SecondCard extends javax.swing.JPanel \n{\n\nprivate javax.swing.JButton nextButton;\nprivate javax.swing.JLabel textLabel;\nprivate JPanel contentPane;\n\npublic SecondCard(JPanel cp) \n{\ncontentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\n\nsetOpaque(true);\nsetBackground(Color.GREEN.darker().darker());\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ntextLabel = new JLabel(""this is the second card"", JLabel.CENTER);\ntextLabel.setForeground(Color.WHITE);\nnextButton = new javax.swing.JButton();\n\nnextButton.setText(""SwitchCard"");\nnextButton.addActionListener(new ActionListener() \n{\npublic void actionPerformed(ActionEvent evt) \n{\njButton1ActionPerformed(evt);\n}\n});\n\nadd(textLabel);\nadd(nextButton);\n}\n\nprivate void jButton1ActionPerformed(ActionEvent evt) \n{\nCardLayout layout = (CardLayout) contentPane.getLayout();\nlayout.show(contentPane, ""Panel 1"");\n}\n}\n\nprivate void clearFields()\n{\nComponent components[] = centerPanel.getComponents();\nfor (Component comp : components)\n{\nif (comp instanceof JTextField)\n{\nJTextField tfield = (JTextField) comp;\ntfield.setText("""");\n}\nelse if (comp instanceof JComboBox)\n{\nJComboBox cbox = (JComboBox) comp;\ncbox.setSelectedIndex(0);\n}\nelse if (comp instanceof JRadioButton)\n{\nJRadioButton rbut = (JRadioButton) comp;\nrbut.setSelected(false);\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJava Swing: Adding a JLabel to a JPanel\n----------Explanation----------\nThis seems to be jumping through hoops just to do a basic thing; simply call\n----------Code Sample----------\nJLabel label = new JLabel(""Test text"");//initialize the label\n//do some stuff with label here maybe...\npanel.add(label);//now add it\n\nJFrame frame = new JFrame(""Basic Swing"");//Make a frame\nframe.setSize(300, 300);//Give it a size\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close\nJPanel panel = new JPanel();//Make a panel\nframe.add(panel);//Add it to your frame\n\nJLabel label = new JLabel(""Hello StackOverflow!"");//Make a label\npanel.add(label);//Add it to the panel (which is on the frame)\n\nframe.setVisible(true);//Show the frame\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava scroll JScrollPane with JPanel within to bottom\n----------Explanation----------\nJComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. \n\nE.G.\n----------Code Sample----------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nJScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nRectangle rect = new Rectangle(0,height,10,10);\npanel.scrollRectToVisible(rect);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nfinal JScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nscroll.getVerticalScrollBar().setValue(height);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nJPanel Padding in Java\n----------Explanation----------\nSet an EmptyBorder around your JPanel . \nExample:\n----------Code Sample----------\nJPanel p =new JPanel();\np.setBorder(new EmptyBorder(10, 10, 10, 10));\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava items appear only after the window is resize\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.SwingUtilities;\n\npublic class StartingPoint {\n\nprivate DrawingArea draw;\nprivate JButton b1, b2;\nprivate JPanel userInt;\nprivate JSpinner gravitySpinner;\n\nprivate JPanel mainPanel = new JPanel();\n\npublic StartingPoint() {\nmainPanel.setLayout(new BorderLayout());\ndraw = new DrawingArea();\nmainPanel.add(draw, BorderLayout.CENTER);\n\nuserInt = new JPanel();\nmainPanel.add(userInt, BorderLayout.NORTH);\n\nb1 = new JButton(""Start"");\nb2 = new JButton(""aaa"");\nb1.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\ndraw.setUp();\n}\n});\nuserInt.add(b1);\nuserInt.add(b2);\n\nSpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);\ngravitySpinner = new JSpinner(gravityModel);\nuserInt.add(gravitySpinner);\n}\n\npublic JPanel getMainPanel() {\nreturn mainPanel;\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\nJFrame window = new JFrame(""Ball"");\nwindow.add(new StartingPoint().getMainPanel());\nwindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nwindow.pack();\nwindow.setLocationRelativeTo(null);\nwindow.setVisible(true);\n}\n});\n}\n}\n\nclass DrawingArea extends JPanel {\n\nprivate static final int PREF_W = 600;\nprivate static final int PREF_H = 400;\n\npublic void setUp() {\n// TODO finish\n}\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(PREF_W, PREF_H);\n}\n\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nrepaint JPanel which is inside another JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\npublic class TestChild {\npublic static void main(String[] args){\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nfinal ParentPanel parent = new ParentPanel();\nJButton button = new JButton(""Push"");\nbutton.addActionListener(new ActionListener(){\n@Override\npublic void actionPerformed(ActionEvent e) {\nparent.pushData(7);\n}\n});\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\n\npanel.add(parent, BorderLayout.CENTER);\npanel.add(button, BorderLayout.SOUTH);\n\nframe.add(panel);\nframe.pack();\nframe.setVisible(true);\nframe.setLocationRelativeTo(null);\n}\n\npublic static class ParentPanel extends JPanel {\nprivate ChildPanel childPanel;\n\npublic ParentPanel() {\nsuper();\ninitComponents();\n}\n\npublic void pushData(int data) {\nchildPanel.pushData(data);\n}\n\nprivate void initComponents() {\nchildPanel = new ChildPanel();\nadd(childPanel);\n}\n}\n\npublic static class ChildPanel extends JPanel {\nprivate Random random = new Random();\n\npublic ChildPanel() {\nsuper();\nsetPreferredSize(new Dimension(200, 200));\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(getWidth());\ng.setColor(getBackground());\ng.fillRect(0, 0, getWidth(), getHeight());\ng.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));\ng.fillOval(0, 0, getWidth(), getHeight());\n}\n\npublic void pushData(int data) {\nrepaint();\n}\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nAdding components into JPanel inside a JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class FooSwing2 {\npublic static void main(String[] args) {\nJTextArea chatArea = new JTextArea(8, 40);\nchatArea.setEditable(false);\nchatArea.setFocusable(false);\nJScrollPane chatScroll = new JScrollPane(chatArea);\nJPanel chatPanel = new JPanel(new BorderLayout());\nchatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);\nchatPanel.add(chatScroll);\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\n\nJPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));\nyouLabelPanel.add(new JLabel(""You:""));\n\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));\nmainPanel.add(chatPanel);\nmainPanel.add(Box.createVerticalStrut(10));\nmainPanel.add(youLabelPanel);\nmainPanel.add(inputPanel);\n\nJFrame frame = new JFrame(""Foo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(mainPanel);\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n}\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJButton exitBtn = new JButton(""Exit""); // ***** added\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\ninputPanel.add(exitBtn); // ***** added\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nWorking with nested Panels\n----------Explanation----------\nThis example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.border.LineBorder;\n\npublic class Test {\n\npublic static void main(String[] args) {\nnew Test();\n}\n\npublic Test() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n""""""]']","[""To set a transparent background for a JPanel in Java, you need to understand how Swing components handle painting and transparency. By default, a JPanel is opaque, meaning it will paint its background and obscure any components behind it. To make a JPanel transparent, you need to set its opacity to false using the setOpaque(false) method. This tells the JPanel not to paint its background, allowing any components behind it to be visible. Additionally, you may need to override the paintComponent method if you want to customize the painting behavior further. In this method, you can call the super.paintComponent(g) to ensure that the JPanel's children are painted correctly. Remember that transparency in Swing can sometimes lead to performance issues, so use it judiciously.""]","['[\'[\\\'To set a transparent background for a JPanel in Java, you need to override its `paintComponent` method and set the panel to be non-opaque. This ensures that the panel does not paint its background, allowing the components behind it to be visible. Below is an example of how to achieve this.\\\\nimport javax.swing.JFrame;\\\\nimport javax.swing.JPanel;\\\\nimport java.awt.Graphics;\\\\nimport java.awt.Color;\\\\npublic class TransparentPanelExample {\\\\n    public static void main(String[] args) {\\\\n        JFrame frame = new JFrame(""Transparent JPanel Example"");\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        frame.setSize(400, 400);\\\\n        \\\\n        JPanel panel = new JPanel() {\\\\n            @Override\\\\n            protected void paintComponent(Graphics g) {\\\\n                super.paintComponent(g);\\\\n                // Custom painting code can go here\\\\n            }\\\\n        };\\\\n        panel.setOpaque(false); // Make the panel non-opaque\\\\n        \\\\n        frame.add(panel);\\\\n        frame.setVisible(true);\\\\n    }\\\\n}\\\']\']']",0.0144927536231884,1.0,0.0151515151515151,0.0009041591320072,1.0,0.25
swing,JPanel,How to make JFrame background and JPanel transparent with only image showing,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],['Most common way to construct:\nJPanel panel = new JPanel();\nBased on 51 examples'],"['I try it on my computer and image is showing up on icon. If you want show the image on background try this :\n\nimport java.awt.Image;\nimport java.awt.Toolkit;\nimport javax.swing.*;\n\n        public class Caine extends JFrame{\n        //the pictures\n        ImageIcon guy = new ImageIcon(""tester.gif"");\n        JLabel pn = new JLabel(guy);\n        JPanel panel = new JPanel();\n\n        Caine(){\n            super(""Photuris Lucicrescens"");\n\n            //Important\n            setSize(700,600);\n            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            add(panel);\n            setVisible(true);\n            JLabel im = new JLabel(new ImageIcon(""iconImage.gif""));\n            setIconImage(customIcon);\n            panel.add(im);\n            add(pn);\n        }\n        }']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nTrouble with getting Path2D.Double to change with .transform\n----------Explanation----------\nPart of your problem seems to be the order of your AffineTransform parameters. You may be assuming that your JTextFields are in the same form as the 2x3 matrix, but they\'re not. Add borders to the JTextFields to see what I mean:\n----------Code Sample----------\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nimport javax.swing.*;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.awt.geom.AffineTransform;\nimport java.awt.geom.GeneralPath;\nimport java.awt.geom.NoninvertibleTransformException;\nimport java.awt.geom.Path2D;\nimport java.util.Deque;\nimport java.util.LinkedList;\n\nimport javax.swing.event.*;\n\npublic class Project3 extends JPanel implements ActionListener {\n\npublic static Project3 p = new Project3();\nPath2D arrow; // !!\npublic static\nJTextField \nnum00 = new JTextField(""0""), \nnum10 = new JTextField(""1""), \nnum01 = new JTextField(""1""), \nnum11 = new JTextField(""0""), \nnum02 = new JTextField(""0""), \nnum12 = new JTextField(""0"");\nprivate static Deque atStack = new LinkedList<>(); \n\npublic Project3() {\nsetBackground(Color.WHITE);\narrow = drawArrow(); // !! create the arrow only once\n}\n\npublic Path2D drawArrow() { // !!\narrow = new Path2D.Double(); // !!\narrow.setWindingRule(GeneralPath.WIND_EVEN_ODD);\narrow.moveTo(0, 0);\narrow.lineTo(0, -100);\narrow.moveTo(0, -200);\narrow.lineTo(100, -100);\narrow.lineTo(50, -100);\narrow.lineTo(50, 100);\narrow.quadTo(0, 0, -50, 100);\narrow.lineTo(-50, -100);\narrow.lineTo(-100, -100);\narrow.lineTo(0, -200);\narrow.closePath();\narrow.transform(AffineTransform.getTranslateInstance(250, 250)); // !! shift it here\nreturn arrow;\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nGraphics2D g2 = (Graphics2D) g;\ng2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\nRenderingHints.VALUE_ANTIALIAS_ON); // !!\n// !! g2.translate(250, 250); // translate the arrow, not Graphics\nGradientPaint gradient = new GradientPaint(0, 0, Color.LIGHT_GRAY, 15,\n15, Color.BLACK, true);\ng2.setPaint(gradient);\ng2.setStroke(new BasicStroke(12, BasicStroke.CAP_ROUND,\nBasicStroke.JOIN_MITER));\n// g2.draw(drawArrow()); // !! don\'t re-create the arrow\ng2.draw(arrow);\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame(""Project 3"");\nframe.setSize(500, 600);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nContainer cp = frame.getContentPane();\ncp.setLayout(new BorderLayout());\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\ncp.add(panel, BorderLayout.CENTER);\npanel.add(p, BorderLayout.CENTER);\npanel = new JPanel();\npanel.setLayout(new GridLayout(0, 2));\ncp.add(panel, BorderLayout.SOUTH);\n\nJPanel textPanel = new JPanel();\ntextPanel.setLayout(new GridLayout(2, 3));\npanel.add(textPanel);\nnum00.setBorder(BorderFactory.createTitledBorder(""m00""));\nnum10.setBorder(BorderFactory.createTitledBorder(""m10""));\nnum01.setBorder(BorderFactory.createTitledBorder(""m01""));\nnum11.setBorder(BorderFactory.createTitledBorder(""m11""));\nnum02.setBorder(BorderFactory.createTitledBorder(""m02""));\nnum12.setBorder(BorderFactory.createTitledBorder(""m12""));\n\ntextPanel.add(num00);\ntextPanel.add(num10);\ntextPanel.add(num02);\ntextPanel.add(num01);\ntextPanel.add(num11);\ntextPanel.add(num12);\n\nJPanel btPanel = new JPanel();\nbtPanel.setLayout(new GridLayout(0, 1));\npanel.add(btPanel);\nJButton apply = new JButton(""Apply"");\napply.addActionListener(p);\nbtPanel.add(apply);\nJButton reset = new JButton(""Reset"");\nreset.addActionListener(p);\nbtPanel.add(reset);\n\nframe.setVisible(true);\n\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nString command = e.getActionCommand();\nswitch (command) {\ncase ""Apply"":\ndouble m00 = Double.parseDouble(num00.getText());\ndouble m10 = Double.parseDouble(num10.getText());\ndouble m01 = Double.parseDouble(num01.getText());\ndouble m11 = Double.parseDouble(num11.getText());\ndouble m02 = Double.parseDouble(num02.getText());\ndouble m12 = Double.parseDouble(num12.getText());\nAffineTransform transform = new AffineTransform(m00, m10, m01, m11,\nm02, m12); \narrow.transform(transform);\natStack.addFirst(transform); // save the transform\nrepaint();\nbreak;\ncase ""Reset"":\n// !! arrow.transform(new AffineTransform(1, 0, 0, 0, 1, 0));\nwhile (atStack.size() > 0) {\nAffineTransform at = atStack.removeFirst();\n\n// inverse fails if determinant is 0\nif (at.getDeterminant() == 0) {\nreturn;\n}\ntry {\narrow.transform(at.createInverse());\n} catch (NoninvertibleTransformException e1) {\ne1.printStackTrace();\n}\n}\nrepaint();\nbreak;\n}\n}\n\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDynamically growing JPanel with BoxLayout (on a null layout)\n----------Explanation----------\nBasically, given you example, you\'ve failed to set the size of the child component...\n----------Code Sample----------\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel();\ntotal.setLayout(null);\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\n\nJPanel box = new JPanel();\nbox.setLocation(100, 200);\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\nbox.setSize(100, 100); // <-- Don\'t forget this..\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJFrame f = new JFrame();\nf.setSize(500, 500);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel total = new JPanel(new BorderLayout());\ntotal.setSize(f.getWidth(), f.getHeight());\ntotal.setBackground(Color.green);\ntotal.setBorder(new EmptyBorder(100, 200, 100, 200));\n\nJPanel box = new JPanel();\nbox.setLayout(new BoxLayout(box, BoxLayout.Y_AXIS));\nbox.add(new JButton(""test""));\nbox.add(new JLabel(""hey""));\n\ntotal.add(box);\nf.add(total);\nf.setVisible(true);\n\nJPanel total = new JPanel();\ntotal.setLayout(new SuperAwesomeBetterThenYoursLayout());\n\npublic static class SuperAwesomeBetterThenYoursLayout implements LayoutManager {\n\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n}\n\n@Override\npublic void removeLayoutComponent(Component comp) {\n}\n\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(100, 300);\n}\n\n@Override\npublic void layoutContainer(Container parent) {\nboolean laidOut = false;\nfor (Component child : parent.getComponents()) {\nif (child.isVisible() && !laidOut) {\nchild.setLocation(200, 100);\nchild.setSize(child.getPreferredSize());\n} else {\nchild.setSize(0, 0);\n}\n}\n}\n\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRepaint on child jpanel\n----------Explanation----------\nThe doAction and graphPanel are declared twice - once at the class level, then again in the method:\n----------Code Sample----------\nprivate JPanel controls,graphPanel; // declared here first\nprivate JButton doAction; // declared here first\n\npublic outer(){\nJPanel controls = new JPanel(); // Whoops, declared here again\nJButton doAction = new JButton(""Do stuff""); // Whoops, declared here again\ndoAction.addActionListener(this);\ncontrols.add(doAction);\n\nJPanel graphPanel = new JPanel(); // Whoops, declared here again\n...\n\ncontrols = new JPanel(); // no leading \'JPanel\'\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to add close button to a JTabbedPane Tab?\n----------Explanation----------\nI typically create a JPanel, onto which I add a JLabel (for the title) and, depending on what I want to display, some kind of control that acts as the close action.\n----------Code Sample----------\ntabPane.addTab(title, tabBody);\nint index = tabPane.indexOfTab(title);\nJPanel pnlTab = new JPanel(new GridBagLayout());\npnlTab.setOpaque(false);\nJLabel lblTitle = new JLabel(title);\nJButton btnClose = new JButton(""x"");\n\nGridBagConstraints gbc = new GridBagConstraints();\ngbc.gridx = 0;\ngbc.gridy = 0;\ngbc.weightx = 1;\n\npnlTab.add(lblTitle, gbc);\n\ngbc.gridx++;\ngbc.weightx = 0;\npnlTab.add(btnClose, gbc);\n\ntabPane.setTabComponentAt(index, pnlTab);\n\nbtnClose.addActionListener(myCloseActionHandler);\n\npublic class MyCloseActionHandler implements ActionListener {\n\npublic void actionPerformed(ActionEvent evt) {\n\nComponent selected = tabPane.getSelectedComponent();\nif (selected != null) {\n\ntabPane.remove(selected);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n\npublic class MyCloseActionHandler implements ActionListener {\n\nprivate String tabName;\n\npublic MyCloseActionHandler(String tabName) {\nthis.tabName = tabName;\n}\n\npublic String getTabName() {\nreturn tabName;\n}\n\npublic void actionPerformed(ActionEvent evt) {\n\nint index = tabPane.indexOfTab(getTabName());\nif (index >= 0) {\n\ntabPane.removeTabAt(index);\n// It would probably be worthwhile getting the source\n// casting it back to a JButton and removing\n// the action handler reference ;)\n\n}\n\n}\n\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nCan\'t draw anything on my JPanel\n----------Explanation----------\n\n----------Code Sample----------\npublic class DrawBlock extends JPanel {\n\nprivate static final long serialVersionUID = 1L;\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(18, 18);\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(""..."");\nsuper.paintComponent(g);\ng.setColor(Color.WHITE);\ng.drawRect(1, 1, 15, 15);\n}\n}\n\npublic static class DrawFrame {\n\npublic DrawFrame() {\nDrawPanels panelFrame = new DrawPanels();\nJFrame mainFrame = new JFrame();\nmainFrame.setLayout(new BorderLayout());\nmainFrame.setSize(480, 800);\nmainFrame.setTitle(""Title"");\nmainFrame.setResizable(false);\nmainFrame.add(panelFrame);\nmainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nmainFrame.setVisible(true);\n}\n}\n\npublic class DrawPanels extends JPanel {\n\nJPanel panel1 = new JPanel();\nJPanel panel2 = new JPanel();\nJPanel panel3 = new JPanel();\n\npublic DrawPanels() {\nsetLayout(new GridLayout(1, 3));\npanel1.setBackground(Color.ORANGE);\npanel2.setBackground(Color.BLACK);\npanel3.setBackground(Color.RED);\npanel1.setBorder(new LineBorder(Color.BLACK));\npanel2.setBorder(new LineBorder(Color.BLACK));\npanel3.setBorder(new LineBorder(Color.BLACK));\n\npanel1.add(new DrawBlock());\npanel2.add(new DrawBlock());\npanel3.add(new DrawBlock());\n\nadd(panel1);\nadd(panel2);\nadd(panel3);\n\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to send an ActionPerformed from an ActionListener to another ActionListener?\n----------Explanation----------\nYour main form should look something like this:\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome to workspace"");\n\nCardLayout cl = new CardLayout();\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\ncardPanel.setLayout(cl);\ncardPanel.add(welcomePanel, ""1"");\ncardPanel.add(workspacePanel, ""2"");\ncl.show(cardPanel,""1"");\n\nframe.getContentPane().add(cardPanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.cl.show(mf.cardPanel,""2"");\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class MainFrame{\nJFrame frame = new JFrame(""Main frame"");\n\nJPanel welcomePanel = new JPanel();\nJPanel workspacePanel = new JPanel();\nJPanel cardPanel = new JPanel();\n\nJButton btnLogin = new JButton(""Login"");\nJLabel lblWelcome = new JLabel(""Welcome"");\n\nLoginRequest lr = new LoginRequest(this);\n\npublic MainFrame() {\nwelcomePanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nlr.setVisible(true);\n}\n});\n\nworkspacePanel.add(lblWelcome);\n\nframe.getContentPane().add(welcomePanel);\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.setPreferredSize(new Dimension(320,240));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String [] args){\nSwingUtilities.invokeLater(new Runnable() {\n@Override\npublic void run() {\nnew MainFrame();\n}\n});\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class LoginRequest extends JDialog{\n/**You can add, JTextFields, JLabel, JPasswordField..**/\nJPanel panel = new JPanel();\nJButton btnLogin = new JButton(""Login"");\n\npublic LoginRequest(final MainFrame mf) {\nsetTitle(""Login"");\npanel.add(btnLogin);\nbtnLogin.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\n//Put some login logic here\nmf.frame.getContentPane().removeAll();\nmf.frame.add(mf.workspacePanel);\nmf.frame.repaint();\nmf.frame.revalidate();\ndispose();\n}\n});\nadd(panel, BorderLayout.CENTER);\nsetModalityType(ModalityType.APPLICATION_MODAL);\nsetDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\npack();\nsetLocationByPlatform(true);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow to Change java Cardlayout from another separate class\n----------Explanation----------\nIn your provided code, you never added FirstCard and SecondCard , to the JPanel having layout set to CardLayout . Since what you writing is this :\n----------Code Sample----------\njPanel1.add(jPanel2, ""card2"");\n\njPanel2 = new javax.swing.JPanel();\n\njPanel2 = new SecondCard(passPanelWithCardLayoutAsArgument); // So that you can manoeuvre around b/w other JPanels\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate MyPanel panel1;\nprivate MyPanel panel2;\nprivate MyPanel panel3;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new MyPanel(contentPane\n, Color.RED.darker().darker());\npanel2 = new MyPanel(contentPane\n, Color.GREEN.darker().darker());\npanel3 = new MyPanel(contentPane\n, Color.DARK_GRAY); \n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2"");\ncontentPane.add(panel3, ""Panel 3""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass MyPanel extends JPanel \n{\n\nprivate JButton jcomp1;\nprivate JPanel contentPane;\nprivate Color backgroundColour;\n\npublic MyPanel(JPanel panel, Color c) \n{ \ncontentPane = panel;\nbackgroundColour = c;\n\nsetOpaque(true);\nsetBackground(backgroundColour);\n\n//construct components\njcomp1 = new JButton (""Show New Panel"");\njcomp1.addActionListener( new ActionListener()\n{\npublic void actionPerformed(ActionEvent e)\n{\nCardLayout cardLayout = (CardLayout) contentPane.getLayout();\ncardLayout.next(contentPane);\n}\n});\n\nadd(jcomp1);\n}\n\n@Override\npublic Dimension getPreferredSize()\n{\nreturn (new Dimension(500, 500));\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class CardLayoutExample\n{\nprivate JPanel contentPane;\nprivate FirstCard panel1;\nprivate SecondCard panel2;\n\nprivate void displayGUI()\n{\nJFrame frame = new JFrame(""Card Layout Example"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel contentPane = new JPanel();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\ncontentPane.setLayout(new CardLayout());\n\npanel1 = new FirstCard(contentPane);\npanel2 = new SecondCard(contentPane);\n\ncontentPane.add(panel1, ""Panel 1""); \ncontentPane.add(panel2, ""Panel 2""); \n\nframe.setContentPane(contentPane); \nframe.pack(); \nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String... args)\n{\nSwingUtilities.invokeLater(new Runnable()\n{\npublic void run()\n{\nnew CardLayoutExample().displayGUI();\n}\n});\n}\n}\n\nclass FirstCard extends javax.swing.JPanel \n{\nprivate javax.swing.JTextField addField;\nprivate javax.swing.JTextField nameField;\nprivate javax.swing.JTextField occField;\nprivate javax.swing.JTextField phoneField;\nprivate javax.swing.JLabel nameLabel;\nprivate javax.swing.JLabel addLabel;\nprivate javax.swing.JLabel occLabel;\nprivate javax.swing.JLabel phoneLabel;\nprivate JPanel centerPanel;\nprivate JPanel contentPane;\nprivate JButton nextButton;\n\npublic FirstCard(JPanel cp) \n{\nthis.contentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\nsetOpaque(true);\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\nsetBackground(Color.RED);\nsetLayout(new BorderLayout(5, 5));\n\nnameLabel = new javax.swing.JLabel(""Guarantee Name : "");\nnameField = new javax.swing.JTextField(); \naddLabel = new javax.swing.JLabel(""Address : "");\naddField = new javax.swing.JTextField(); \noccLabel = new javax.swing.JLabel(""Occupation : "");\noccField = new javax.swing.JTextField();\nphoneLabel = new javax.swing.JLabel(""Phone : "");\nphoneField = new javax.swing.JTextField();\ncenterPanel = new JPanel();\nnextButton = new JButton(""Next"");\nnextButton.addActionListener(new ActionListener()\n{\n@Override\npublic void actionPerformed(ActionEvent ae)\n{\nnextButtonAction(ae);\n}\n});\n\ncenterPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ncenterPanel.setOpaque(true);\ncenterPanel.setBackground(Color.WHITE);\ncenterPanel.setLayout(new GridLayout(0, 2, 5, 5));\ncenterPanel.add(nameLabel);\ncenterPanel.add(nameField);\ncenterPanel.add(addLabel);\ncenterPanel.add(addField);\ncenterPanel.add(occLabel);\ncenterPanel.add(occField);\ncenterPanel.add(phoneLabel);\ncenterPanel.add(phoneField);\n\nadd(centerPanel, BorderLayout.CENTER);\nadd(nextButton, BorderLayout.PAGE_END);\n} \n\nprivate void nextButtonAction(ActionEvent ae)\n{\nCardLayout layout = (CardLayout)contentPane.getLayout();\nlayout.next(contentPane);\n}\n}\n\nclass SecondCard extends javax.swing.JPanel \n{\n\nprivate javax.swing.JButton nextButton;\nprivate javax.swing.JLabel textLabel;\nprivate JPanel contentPane;\n\npublic SecondCard(JPanel cp) \n{\ncontentPane = cp;\ninitComponents();\n}\n\nprivate void initComponents() \n{\n\nsetOpaque(true);\nsetBackground(Color.GREEN.darker().darker());\nsetBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\ntextLabel = new JLabel(""this is the second card"", JLabel.CENTER);\ntextLabel.setForeground(Color.WHITE);\nnextButton = new javax.swing.JButton();\n\nnextButton.setText(""SwitchCard"");\nnextButton.addActionListener(new ActionListener() \n{\npublic void actionPerformed(ActionEvent evt) \n{\njButton1ActionPerformed(evt);\n}\n});\n\nadd(textLabel);\nadd(nextButton);\n}\n\nprivate void jButton1ActionPerformed(ActionEvent evt) \n{\nCardLayout layout = (CardLayout) contentPane.getLayout();\nlayout.show(contentPane, ""Panel 1"");\n}\n}\n\nprivate void clearFields()\n{\nComponent components[] = centerPanel.getComponents();\nfor (Component comp : components)\n{\nif (comp instanceof JTextField)\n{\nJTextField tfield = (JTextField) comp;\ntfield.setText("""");\n}\nelse if (comp instanceof JComboBox)\n{\nJComboBox cbox = (JComboBox) comp;\ncbox.setSelectedIndex(0);\n}\nelse if (comp instanceof JRadioButton)\n{\nJRadioButton rbut = (JRadioButton) comp;\nrbut.setSelected(false);\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJava Swing: Adding a JLabel to a JPanel\n----------Explanation----------\nThis seems to be jumping through hoops just to do a basic thing; simply call\n----------Code Sample----------\nJLabel label = new JLabel(""Test text"");//initialize the label\n//do some stuff with label here maybe...\npanel.add(label);//now add it\n\nJFrame frame = new JFrame(""Basic Swing"");//Make a frame\nframe.setSize(300, 300);//Give it a size\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);//Make it go away on close\nJPanel panel = new JPanel();//Make a panel\nframe.add(panel);//Add it to your frame\n\nJLabel label = new JLabel(""Hello StackOverflow!"");//Make a label\npanel.add(label);//Add it to the panel (which is on the frame)\n\nframe.setVisible(true);//Show the frame\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava scroll JScrollPane with JPanel within to bottom\n----------Explanation----------\nJComponent.scrollRectToVisible(Rectangle) . Call that on the JPanel instance. \n\nE.G.\n----------Code Sample----------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nJScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nRectangle rect = new Rectangle(0,height,10,10);\npanel.scrollRectToVisible(rect);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\nclass ScrollToNewLabel {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\nJPanel gui = new JPanel(new BorderLayout(3,3));\nfinal JPanel panel = new JPanel(new GridLayout(0,1));\nfinal JScrollPane scroll = new JScrollPane(panel);\nscroll.setPreferredSize(new Dimension(80,100));\ngui.add(scroll, BorderLayout.CENTER);\nJButton addLabel = new JButton(""Add Label"");\ngui.add(addLabel, BorderLayout.NORTH);\nActionListener listener = new ActionListener() {\nint counter = 0;\npublic void actionPerformed(ActionEvent ae) {\npanel.add(new JLabel(""Label "" + ++counter));\npanel.revalidate();\nint height = (int)panel.getPreferredSize().getHeight();\nscroll.getVerticalScrollBar().setValue(height);\n}\n};\naddLabel.addActionListener(listener);\nJOptionPane.showMessageDialog(null, gui);\n}\n});\n}\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nJPanel Padding in Java\n----------Explanation----------\nSet an EmptyBorder around your JPanel . \nExample:\n----------Code Sample----------\nJPanel p =new JPanel();\np.setBorder(new EmptyBorder(10, 10, 10, 10));\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava items appear only after the window is resize\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Dimension;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.JSpinner;\nimport javax.swing.SpinnerNumberModel;\nimport javax.swing.SwingUtilities;\n\npublic class StartingPoint {\n\nprivate DrawingArea draw;\nprivate JButton b1, b2;\nprivate JPanel userInt;\nprivate JSpinner gravitySpinner;\n\nprivate JPanel mainPanel = new JPanel();\n\npublic StartingPoint() {\nmainPanel.setLayout(new BorderLayout());\ndraw = new DrawingArea();\nmainPanel.add(draw, BorderLayout.CENTER);\n\nuserInt = new JPanel();\nmainPanel.add(userInt, BorderLayout.NORTH);\n\nb1 = new JButton(""Start"");\nb2 = new JButton(""aaa"");\nb1.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\ndraw.setUp();\n}\n});\nuserInt.add(b1);\nuserInt.add(b2);\n\nSpinnerNumberModel gravityModel = new SpinnerNumberModel(.9, .1, 2, .1);\ngravitySpinner = new JSpinner(gravityModel);\nuserInt.add(gravitySpinner);\n}\n\npublic JPanel getMainPanel() {\nreturn mainPanel;\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\nJFrame window = new JFrame(""Ball"");\nwindow.add(new StartingPoint().getMainPanel());\nwindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nwindow.pack();\nwindow.setLocationRelativeTo(null);\nwindow.setVisible(true);\n}\n});\n}\n}\n\nclass DrawingArea extends JPanel {\n\nprivate static final int PREF_W = 600;\nprivate static final int PREF_H = 400;\n\npublic void setUp() {\n// TODO finish\n}\n\n@Override\npublic Dimension getPreferredSize() {\nreturn new Dimension(PREF_W, PREF_H);\n}\n\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nrepaint JPanel which is inside another JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Graphics;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.util.Random;\n\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\n\npublic class TestChild {\npublic static void main(String[] args){\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nfinal ParentPanel parent = new ParentPanel();\nJButton button = new JButton(""Push"");\nbutton.addActionListener(new ActionListener(){\n@Override\npublic void actionPerformed(ActionEvent e) {\nparent.pushData(7);\n}\n});\n\nJPanel panel = new JPanel();\npanel.setLayout(new BorderLayout());\n\npanel.add(parent, BorderLayout.CENTER);\npanel.add(button, BorderLayout.SOUTH);\n\nframe.add(panel);\nframe.pack();\nframe.setVisible(true);\nframe.setLocationRelativeTo(null);\n}\n\npublic static class ParentPanel extends JPanel {\nprivate ChildPanel childPanel;\n\npublic ParentPanel() {\nsuper();\ninitComponents();\n}\n\npublic void pushData(int data) {\nchildPanel.pushData(data);\n}\n\nprivate void initComponents() {\nchildPanel = new ChildPanel();\nadd(childPanel);\n}\n}\n\npublic static class ChildPanel extends JPanel {\nprivate Random random = new Random();\n\npublic ChildPanel() {\nsuper();\nsetPreferredSize(new Dimension(200, 200));\n}\n\n@Override\npublic void paintComponent(Graphics g) {\nSystem.out.println(getWidth());\ng.setColor(getBackground());\ng.fillRect(0, 0, getWidth(), getHeight());\ng.setColor(Color.getHSBColor(random.nextFloat(), 0.9f, 1.0f));\ng.fillOval(0, 0, getWidth(), getHeight());\n}\n\npublic void pushData(int data) {\nrepaint();\n}\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nAdding components into JPanel inside a JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class FooSwing2 {\npublic static void main(String[] args) {\nJTextArea chatArea = new JTextArea(8, 40);\nchatArea.setEditable(false);\nchatArea.setFocusable(false);\nJScrollPane chatScroll = new JScrollPane(chatArea);\nJPanel chatPanel = new JPanel(new BorderLayout());\nchatPanel.add(new JLabel(""Chat:"", SwingConstants.LEFT), BorderLayout.PAGE_START);\nchatPanel.add(chatScroll);\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\n\nJPanel youLabelPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 0, 0));\nyouLabelPanel.add(new JLabel(""You:""));\n\nJPanel mainPanel = new JPanel();\nmainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.PAGE_AXIS));\nmainPanel.add(chatPanel);\nmainPanel.add(Box.createVerticalStrut(10));\nmainPanel.add(youLabelPanel);\nmainPanel.add(inputPanel);\n\nJFrame frame = new JFrame(""Foo"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(mainPanel);\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n}\n\nJTextField inputField = new JTextField(40);\nJButton sendBtn = new JButton(""Send"");\nJButton exitBtn = new JButton(""Exit""); // ***** added\nJPanel inputPanel = new JPanel();\ninputPanel.setLayout(new BoxLayout(inputPanel, BoxLayout.LINE_AXIS));\ninputPanel.add(inputField);\ninputPanel.add(sendBtn);\ninputPanel.add(exitBtn); // ***** added\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nWorking with nested Panels\n----------Explanation----------\nThis example uses GridBagLayout and weighty to adjust the space allocated to the top (2D/3D) views and the bottom views, but you should also take a look at overriding the getPreferredSize of the final components, to provide better hints to the layout managers.\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.EventQueue;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.border.LineBorder;\n\npublic class Test {\n\npublic static void main(String[] args) {\nnew Test();\n}\n\npublic Test() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n""""""]']","[""To make a JFrame background and JPanel transparent with only an image showing, you need to manipulate the opacity settings of both the JFrame and JPanel. First, ensure that the JFrame is set to be non-opaque by calling the setBackground method with a Color object that has an alpha value of zero. This makes the JFrame transparent. Next, for the JPanel, override its paintComponent method to draw the image. In this method, you can use the Graphics2D class to draw the image onto the JPanel. Additionally, set the JPanel's background to be non-opaque by calling setOpaque(false). This ensures that only the image is visible, and the rest of the JPanel remains transparent. By combining these steps, you achieve a transparent JFrame and JPanel with only the image showing.""]","['[\'[\\\'To make a JFrame background and JPanel transparent with only an image showing, we need to set the opacity of the JFrame and JPanel to false and override the paintComponent method of the JPanel to draw the image. Below is an example of how to achieve this.\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class TransparentFrameExample {\\\\n    public static void main(String[] args) {\\\\n        SwingUtilities.invokeLater(() -> {\\\\n            JFrame frame = new JFrame();\\\\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n            frame.setSize(800, 600);\\\\n            frame.setUndecorated(true); // Remove window decorations\\\\n            frame.setBackground(new Color(0, 0, 0, 0)); // Set background to be transparent\\\\n\\\\n            JPanel panel = new JPanel() {\\\\n                private BufferedImage image;\\\\n\\\\n                {\\\\n                    try {\\\\n                        image = ImageIO.read(new File(""path/to/your/image.png""));\\\\n                    } catch (IOException e) {\\\\n                        e.printStackTrace();\\\\n                    }\\\\n                    setOpaque(false); // Make the panel transparent\\\\n                }\\\\n\\\\n                @Override\\\\n                protected void paintComponent(Graphics g) {\\\\n                    super.paintComponent(g);\\\\n                    if (image != null) {\\\\n                        g.drawImage(image, 0, 0, getWidth(), getHeight(), this);\\\\n                    }\\\\n                }\\\\n            };\\\\n\\\\n            frame.add(panel);\\\\n            frame.setVisible(true);\\\\n        });\\\\n    }\\\\n}\\\']\']']",0.0144927536231884,1.0,0.0416666666666666,0.0009041591320072,0.125,0.2
swing,JFrame,java: How to add Transparent Gradient Background to JFrame,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['Most common ways to construct:\nJFrame frame = new JFrame(""HelloWorldSwing"");\nBased on 107 examples\n \nJFrame frame = new JFrame();\nBased on 87 examples']","['I found another solution.\n\nSet the background color of your frame to\n\n// Set the frame background color to a transparent color\nyourFrameHere.setBackground(new Color(0, 0, 0, 0));\nAnd remember to set the opacity off of the contentpane (your JPanel or other component)\n\n// turn off opacity of the content pane\nyourContentPaneHere.setOpaque(false);']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nDrawing an object using getGraphics() without extending JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new JPanel() {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n};\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new MyRectangleJPanel(); // changed this line\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\n/* A JPanel that overrides the paintComponent() method and draws a rectangle */\nclass MyRectangleJPanel extends JPanel {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nSwing: Obtain Image of JFrame\n----------Explanation----------\nComponentImageCapture.java\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Image;\nimport java.awt.Graphics;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.InputEvent;\n\nimport javax.swing.*;\n\nimport javax.swing.border.TitledBorder;\n\nimport javax.imageio.ImageIO;\n\nimport java.io.File;\n\n/**\nCreate a screenshot of a component.\n@author Andrew Thompson\n*/\nclass ComponentImageCapture {\n\nstatic final String HELP =\n""Type Ctrl-0 to get a screenshot of the current GUI.\\n"" +\n""The screenshot will be saved to the current "" +\n""directory as \'screenshot.png\'."";\n\npublic static BufferedImage getScreenShot(\nComponent component) {\n\nBufferedImage image = new BufferedImage(\ncomponent.getWidth(),\ncomponent.getHeight(),\nBufferedImage.TYPE_INT_RGB\n);\n// call the Component\'s paint method, using\n// the Graphics object of the image.\ncomponent.paint( image.getGraphics() ); // alternately use .printAll(..)\nreturn image;\n}\n\npublic static void main(String[] args) {\nRunnable r = new Runnable() {\npublic void run() {\nfinal JFrame f = new JFrame(""Test Screenshot"");\n\nJMenuItem screenshot =\nnew JMenuItem(""Screenshot"");\nscreenshot.setAccelerator(\nKeyStroke.getKeyStroke(\nKeyEvent.VK_0,\nInputEvent.CTRL_DOWN_MASK\n));\nscreenshot.addActionListener(\nnew ActionListener(){\npublic void actionPerformed(ActionEvent ae) {\nBufferedImage img = getScreenShot(\nf.getContentPane() );\nJOptionPane.showMessageDialog(\nnull,\nnew JLabel(\nnew ImageIcon(\nimg.getScaledInstance(\nimg.getWidth(null)/2,\nimg.getHeight(null)/2,\nImage.SCALE_SMOOTH )\n)));\ntry {\n// write the image as a PNG\nImageIO.write(\nimg,\n""png"",\nnew File(""screenshot.png""));\n} catch(Exception e) {\ne.printStackTrace();\n}\n}\n} );\nJMenu menu = new JMenu(""Other"");\nmenu.add(screenshot);\nJMenuBar mb = new JMenuBar();\nmb.add(menu);\nf.setJMenuBar(mb);\n\nJPanel p = new JPanel( new BorderLayout(5,5) );\np.setBorder( new TitledBorder(""Main GUI"") );\np.add( new JScrollPane(new JTree()),\nBorderLayout.WEST );\np.add( new JScrollPane( new JTextArea(HELP,10,30) ),\nBorderLayout.CENTER );\n\nf.setContentPane( p );\nf.pack();\nf.setLocationRelativeTo(null);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nf.setVisible(true);\n}\n};\nSwingUtilities.invokeLater(r);\n}\n} \n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport javax.swing.*;\n\npublic class LabelRenderTest {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\n\nString title = """"\n+ ""\nDo U C Me?\n\n""\n+ ""Here is a long string that will wrap. ""\n+ ""The effect we want is a multi-line label."";\n\nJFrame f = new JFrame(""Label Render Test"");\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nBufferedImage image = new BufferedImage(\n400,\n300,\nBufferedImage.TYPE_INT_RGB);\nGraphics2D imageGraphics = image.createGraphics();\nGradientPaint gp = new GradientPaint(\n20f,\n20f,\nColor.red,\n380f,\n280f,\nColor.orange);\nimageGraphics.setPaint(gp);\nimageGraphics.fillRect(0, 0, 400, 300);\n\nJLabel textLabel = new JLabel(title);\ntextLabel.setSize(textLabel.getPreferredSize());\n\nDimension d = textLabel.getPreferredSize();\nBufferedImage bi = new BufferedImage(\nd.width,\nd.height,\nBufferedImage.TYPE_INT_ARGB);\nGraphics g = bi.createGraphics();\ng.setColor(new Color(255, 255, 255, 128));\ng.fillRoundRect(\n0,\n0,\nbi.getWidth(f),\nbi.getHeight(f),\n15,\n10);\ng.setColor(Color.black);\ntextLabel.paint(g);\nGraphics g2 = image.getGraphics();\ng2.drawImage(bi, 20, 20, f);\n\nImageIcon ii = new ImageIcon(image);\nJLabel imageLabel = new JLabel(ii);\n\nf.getContentPane().add(imageLabel);\nf.pack();\nf.setLocationByPlatform(true);\n\nf.setVisible(true);\n}\n});\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nhow to visualize console java in JFrame/JPanel\n----------Explanation----------\nYou need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I\'ve used something like this for one of my programs:\n----------Code Sample----------\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport javax.swing.JTextArea;\nimport javax.swing.SwingUtilities;\n\npublic class TextAreaOutputStream extends OutputStream {\n\nprivate final JTextArea textArea;\nprivate final StringBuilder sb = new StringBuilder();\nprivate String title;\n\npublic TextAreaOutputStream(final JTextArea textArea, String title) {\nthis.textArea = textArea;\nthis.title = title;\nsb.append(title + ""> "");\n}\n\n@Override\npublic void flush() {\n}\n\n@Override\npublic void close() {\n}\n\n@Override\npublic void write(int b) throws IOException {\n\nif (b == \'\\r\')\nreturn;\n\nif (b == \'\\n\') {\nfinal String text = sb.toString() + ""\\n"";\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ntextArea.append(text);\n}\n});\nsb.setLength(0);\nsb.append(title + ""> "");\nreturn;\n}\n\nsb.append((char) b);\n}\n}\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.PrintStream;\nimport javax.swing.*;\n\n@SuppressWarnings(""serial"")\npublic class TextAreaOutputStreamTest extends JPanel {\n\nprivate JTextArea textArea = new JTextArea(15, 30);\nprivate TextAreaOutputStream taOutputStream = new TextAreaOutputStream(\ntextArea, ""Test"");\n\npublic TextAreaOutputStreamTest() {\nsetLayout(new BorderLayout());\nadd(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\nJScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\nSystem.setOut(new PrintStream(taOutputStream));\n\nint timerDelay = 1000;\nnew Timer(timerDelay , new ActionListener() {\nint count = 0;\n@Override\npublic void actionPerformed(ActionEvent arg0) {\n\n// though this outputs via System.out.println, it actually displays\n// in the JTextArea:\nSystem.out.println(""Count is now: "" + count + "" seconds"");\ncount++;\n}\n}).start();\n}\n\nprivate static void createAndShowGui() {\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.getContentPane().add(new TextAreaOutputStreamTest());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nUsing removeActionListener but not removing - JAVA\n----------Explanation----------\nFor example check this test code:\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class TestActionListeners extends JPanel {\nprivate JButton button = new JButton(""Button"");\n\npublic TestActionListeners() {\nadd(button);\n\nbutton.addActionListener(new Listener1());\n}\n\nprivate static void createAndShowGui() {\nTestActionListeners mainPanel = new TestActionListeners();\n\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass Listener1 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 1"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener1());\nbutton.addActionListener(new Listener2());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener1;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener1.class.hashCode();\n}\n}\n\nclass Listener2 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 2"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener2());\nbutton.addActionListener(new Listener1());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener2;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener2.class.hashCode();\n}\n}\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class DisableAButton extends JPanel {\nprivate JButton disableMeButton1 = new JButton(""Disable Me 1"");\nprivate JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));\n\npublic DisableAButton() {\ndisableMeButton1.addActionListener(new ActionListener() {\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nAbstractButton buttonSource = (AbstractButton) e.getSource();\nJOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");\n\nbuttonSource.setEnabled(false);\n}\n});\n\nadd(disableMeButton1);\nadd(disableMeButton2);\n}\n\nprivate static void createAndShowGui() {\nDisableAButton mainPanel = new DisableAButton();\n\nJFrame frame = new JFrame(""DisableAButton"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass DisableMe2Action extends AbstractAction {\npublic DisableMe2Action(String name) {\nsuper(name);\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nJComponent source = (JComponent) e.getSource();\nJOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");\n\nsetEnabled(false);\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava GUI: How to Set Focus on JButton in JPanel on JFrame?\n----------Explanation----------\nBasically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.\n----------Code Sample----------\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n\npackage sof;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\n// Launch the frame:\nJFrame frame = new JFrame();\nframe.setTitle(""Welcome!"");\nframe.setSize(520, 480);\nframe.setLocationRelativeTo(null);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n// Add the image:\nImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");\nJPanel heroShotPanel = new JPanel();\nJLabel heroShot = new JLabel(heroShotImage);\nheroShotPanel.add(heroShot);\n\n// Create a panel to hold the ""Start"" button:\nJPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\nJButton start = new JButton(""Start"");\nstart.setToolTipText(""Click to use library"");\n\nstart.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""I AM PRESSED"");\n}\n});\n\nsubmitPanel.add(start);\n\nframe.getContentPane().add(heroShotPanel, BorderLayout.NORTH);\nframe.getContentPane().add(submitPanel, BorderLayout.SOUTH);\nframe.setVisible(true);\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to draw simple 3D points(x,y,z) in java using Java3D API?\n----------Explanation----------\nAnother important thing:\n----------Code Sample----------\nsimpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);\nSimpleU.getViewer().getView().setBackClipDistance ( 300.0 );\n\nMouseRotate m1=new MouseRotate();\nMouseZoom m2=new MouseZoom();\nMouseTranslate m3=new MouseTranslate();\n\n//skipped imports relating with char limit in this post\npublic final class energon extends JPanel {\nint s = 0, count = 0;\n\npublic energon() {\n\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\n\nBranchGroup scene = createSceneGraph();\nscene.compile();\n\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n\n\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\n\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\n\nQuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nlsa.setNormals(0, normals);\nlsa.setCoordinates(0, pts);\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setGeometry(lsa);\nsh.setAppearance(app);\nsh.setPickable(true); \nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh);\n\nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\n//now you can use Shape3D-type sh as a 3D-surface-containing shape\n\n//skipping imports since char limit is reached in this answer\npublic final class energon extends JPanel {\nint s = 0, count = 0;\npublic energon() {\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\nBranchGroup scene = createSceneGraph();\nscene.compile();\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setAppearance(app);\nsh.setPickable(true);\nGeometryArray ga=null;\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh); \nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nadding progress bar to each table cell for file progress - Java\n----------Explanation----------\nAnd finally, notify the table of changes to the model so it will repaint itself.\n----------Code Sample----------\npublic class UpdateTable {\n\npublic static void main(String[] args) {\nnew UpdateTable();\n}\n\npublic UpdateTable() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nUpdatableTableModel model = new UpdatableTableModel();\n\nJTable table = new JTable();\ntable.setModel(model);\n\ntable.getColumn(""Status"").setCellRenderer(new ProgressCellRender());\n\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new JScrollPane(table));\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n\nFileFinderWorker worker = new FileFinderWorker(model);\nworker.execute();\n\n}\n});\n}\n\npublic class ProgressCellRender extends JProgressBar implements TableCellRenderer {\n\n@Override\npublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\nint progress = 0;\nif (value instanceof Float) {\nprogress = Math.round(((Float) value) * 100f);\n} else if (value instanceof Integer) {\nprogress = (int) value;\n}\nsetValue(progress);\nreturn this;\n}\n}\n\npublic class RowData {\n\nprivate File file;\nprivate String type;\nprivate long length;\nprivate float status;\n\npublic RowData(File file, String type) {\nthis.file = file;\nthis.type = type;\nthis.length = file.length();\nthis.status = 0f;\n}\n\npublic File getFile() {\nreturn file;\n}\n\npublic long getLength() {\nreturn length;\n}\n\npublic float getStatus() {\nreturn status;\n}\n\npublic String getType() {\nreturn type;\n}\n\npublic void setStatus(float status) {\nthis.status = status;\n}\n}\n\npublic class UpdatableTableModel extends AbstractTableModel {\n\nprivate List rows;\nprivate Map mapLookup;\n\npublic UpdatableTableModel() {\nrows = new ArrayList<>(25);\nmapLookup = new HashMap<>(25);\n}\n\n@Override\npublic int getRowCount() {\nreturn rows.size();\n}\n\n@Override\npublic int getColumnCount() {\nreturn 4;\n}\n\n@Override\npublic String getColumnName(int column) {\nString name = ""??"";\nswitch (column) {\ncase 0:\nname = ""File"";\nbreak;\ncase 1:\nname = ""File Type"";\nbreak;\ncase 2:\nname = ""Size"";\nbreak;\ncase 3:\nname = ""Status"";\nbreak;\n}\nreturn name;\n}\n\n@Override\npublic Object getValueAt(int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nObject value = null;\nswitch (columnIndex) {\ncase 0:\nvalue = rowData.getFile();\nbreak;\ncase 1:\nvalue = rowData.getType();\nbreak;\ncase 2:\nvalue = rowData.getLength();\nbreak;\ncase 3:\nvalue = rowData.getStatus();\nbreak;\n}\nreturn value;\n}\n\n@Override\npublic void setValueAt(Object aValue, int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nswitch (columnIndex) {\ncase 3:\nif (aValue instanceof Float) {\nrowData.setStatus((float) aValue);\n}\nbreak;\n}\n}\n\npublic void addFile(File file) {\nRowData rowData = new RowData(file, ""A File"");\nmapLookup.put(file, rowData);\nrows.add(rowData);\nfireTableRowsInserted(rows.size() - 1, rows.size() - 1);\n}\n\nprotected void updateStatus(File file, int progress) {\nRowData rowData = mapLookup.get(file);\nif (rowData != null) {\nint row = rows.indexOf(rowData);\nfloat p = (float) progress / 100f;\nsetValueAt(p, row, 3);\nfireTableCellUpdated(row, 3);\n}\n}\n}\n\npublic class FileFinderWorker extends SwingWorker, File> {\n\nprivate UpdatableTableModel model;\n\npublic FileFinderWorker(UpdatableTableModel model) {\nthis.model = model;\n}\n\n@Override\nprotected void process(List chunks) {\nfor (File file : chunks) {\nmodel.addFile(file);\n}\n}\n\n@Override\nprotected List doInBackground() throws Exception {\nFile files[] = new File(System.getProperty(""user.dir"")).listFiles();\nList lstFiles = new ArrayList<>(Arrays.asList(files));\nfor (File file : lstFiles) {\n// You could actually publish the entire array, but I\'m doing this\n// deliberatly ;)\npublish(file);\n}\nreturn lstFiles;\n}\n\n@Override\nprotected void done() {\ntry {\nList files = get();\nfor (File file : files) {\nnew FileReaderWorker(model, file).execute();\n}\n} catch (Exception exp) {\nexp.printStackTrace();\n}\n}\n}\n\npublic class FileReaderWorker extends SwingWorker {\n\nprivate File currentFile;\nprivate UpdatableTableModel model;\n\npublic FileReaderWorker(UpdatableTableModel model, File file) {\nthis.currentFile = file;\nthis.model = model;\n\naddPropertyChangeListener(new PropertyChangeListener() {\n@Override\npublic void propertyChange(PropertyChangeEvent evt) {\nif (evt.getPropertyName().equals(""progress"")) {\nFileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());\n}\n}\n});\n\n}\n\n@Override\nprotected File doInBackground() throws Exception {\nif (currentFile.isFile()) {\nsetProgress(0);\nlong fileLength = currentFile.length();\nBufferedReader reader = null;\nchar[] cbuf = new char[1024];\ntry {\nreader = new BufferedReader(new FileReader(currentFile));\nint bytesRead = -1;\nint totalBytesRead = 0;\nwhile ((bytesRead = reader.read(cbuf)) != -1) {\ntotalBytesRead += bytesRead;\nint progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);\nsetProgress(progress);\nThread.sleep(25);\n}\nsetProgress(100);\n} catch (Exception e) {\ne.printStackTrace();\nsetProgress(100);\n} finally {\ntry {\nreader.close();\n} catch (Exception e) {\n}\n}\n} else {\nsetProgress(100);\n}\nreturn currentFile;\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nIncreasing distance from top of JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate GridBagConstraints gbc;\n\npublic MainMenu() {\ngbc = new GridBagConstraints();\ngbc.insets = new Insets(15, 15, 15, 15);\ngbc.anchor = GridBagConstraints.FIRST_LINE_START;\n}\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new BorderLayout());\n\nmenuPanel = new JPanel(new GridBagLayout());\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButton = new JButton(""Play"");\ninstructionButton = new JButton(""Instructions"");\nscoreboardButton = new JButton(""Scoreboard"");\nexitButton = new JButton(""Exit"");\n\naddComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\n\ncontentPane.add(menuPanel);\n\nframe.setContentPane(contentPane);\nframe.pack();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(\ncontentPane.getHeight() - (contentPane.getHeight() / 4),\n20, 5, 20));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\nprivate void addComp(JPanel panel, JComponent comp,\nint gridx, int gridy,\nint gridwidth, int gridheight,\ndouble weightx, double weighty,\nint fill) {\ngbc.gridx = gridx;\ngbc.gridy = gridy;\ngbc.gridwidth = gridwidth;\ngbc.gridheight = gridheight;\ngbc.weightx = weightx;\ngbc.weighty = weighty;\ngbc.fill = fill;\n\npanel.add(comp, gbc);\n}\n\npublic static void main(String[] args) {\nRunnable runnable = new Runnable() {\n@Override\npublic void run() {\nnew MainMenu().displayGUI();\n}\n};\nEventQueue.invokeLater(runnable);\n}\n}\n\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new GridBagLayout());\n\nmenuPanel = new JPanel(new GridLayout(0, 1, 5, 5));\nmenuPanel.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButt""""""]']","['To add a transparent gradient background to a JFrame in Java, you need to understand a few key concepts: custom painting, transparency, and gradients. First, you need to create a custom JPanel or JComponent where you will override the paintComponent method. In this method, you can use the Graphics2D class to draw a gradient. The GradientPaint class in Java allows you to create a gradient effect by specifying two points and the colors at those points. To achieve transparency, you can use the AlphaComposite class, which allows you to set the transparency level of your drawing. Once you have your custom component with the gradient background, you can add it to your JFrame. Additionally, you need to ensure that the JFrame is set to be non-opaque to allow the transparency effect to be visible. This involves calling the setOpaque method on the content pane of the JFrame and setting it to false. By combining these techniques, you can achieve a transparent gradient background in your JFrame.']","['[\'[\\\'To add a transparent gradient background to a JFrame in Java, you can use the Java 2D API. The key is to override the paintComponent method of a JPanel to draw the gradient, and then set this JPanel as the content pane of the JFrame. Below is an example of how to achieve this.\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\npublic class TransparentGradientBackground extends JFrame {\\\\n    public TransparentGradientBackground() {\\\\n        setTitle(""Transparent Gradient Background"");\\\\n        setSize(400, 400);\\\\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        setLocationRelativeTo(null);\\\\n\\\\n        // Create a custom JPanel with a gradient background\\\\n        JPanel gradientPanel = new JPanel() {\\\\n            @Override\\\\n            protected void paintComponent(Graphics g) {\\\\n                super.paintComponent(g);\\\\n                Graphics2D g2d = (Graphics2D) g;\\\\n                int width = getWidth();\\\\n                int height = getHeight();\\\\n\\\\n                // Create a gradient from top to bottom\\\\n                GradientPaint gp = new GradientPaint(0, 0, new Color(255, 0, 0, 0), 0, height, new Color(0, 0, 255, 128));\\\\n                g2d.setPaint(gp);\\\\n                g2d.fillRect(0, 0, width, height);\\\\n            }\\\\n        };\\\\n\\\\n        setContentPane(gradientPanel);\\\\n    }\\\\n\\\\n    public static void main(String[] args) {\\\\n        SwingUtilities.invokeLater(() -> {\\\\n            TransparentGradientBackground frame = new TransparentGradientBackground();\\\\n            frame.setVisible(true);\\\\n        });\\\\n    }\\\\n}\\\']\']']",0.25,0.2,0.1428571428571428,0.0007686395080707,0.1111111111111111,0.1666666666666666
swing,JFrame,Swing: Obtain Image of JFrame,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['Most common ways to construct:\nJFrame frame = new JFrame(""HelloWorldSwing"");\nBased on 107 examples\n \nJFrame frame = new JFrame();\nBased on 87 examples']","['I believe you are looking for internal frames.\n\nFor the background image bit, sublass JPanel, override its paintComponent() method, and blit your image there. Then set an instance of that panel as your JFrame\'s content pane.\n\npublic class BackgroundPanel extends JPanel {\n    private BufferedImage bgImg;\n\n    public BackgroundPanel() {\n        try {\n            bgImg = ImageIO.read(BackgroundPanel.class.getResourceAsStream(\n                    ""mybackgroundimage.png""));\n        } catch (IOException ex) {\n            System.err.println(""Could not load background image!"");\n            ex.printStackTrace();\n        }\n    }\n\n    @Override\n    protected void paintComponent(Graphics g) {\n        super.paintComponent(g);\n        if (bgImg != null) {\n            g.drawImage(bgImg, 0, 0, null);\n        }\n    }\n}\n\npublic class MyJFrame extends JFrame {\n\n    public MyJFrame() {\n        setContentPane(new BackgroundPanel());\n    }\n\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nDrawing an object using getGraphics() without extending JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new JPanel() {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n};\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new MyRectangleJPanel(); // changed this line\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\n/* A JPanel that overrides the paintComponent() method and draws a rectangle */\nclass MyRectangleJPanel extends JPanel {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nSwing: Obtain Image of JFrame\n----------Explanation----------\nComponentImageCapture.java\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Image;\nimport java.awt.Graphics;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.InputEvent;\n\nimport javax.swing.*;\n\nimport javax.swing.border.TitledBorder;\n\nimport javax.imageio.ImageIO;\n\nimport java.io.File;\n\n/**\nCreate a screenshot of a component.\n@author Andrew Thompson\n*/\nclass ComponentImageCapture {\n\nstatic final String HELP =\n""Type Ctrl-0 to get a screenshot of the current GUI.\\n"" +\n""The screenshot will be saved to the current "" +\n""directory as \'screenshot.png\'."";\n\npublic static BufferedImage getScreenShot(\nComponent component) {\n\nBufferedImage image = new BufferedImage(\ncomponent.getWidth(),\ncomponent.getHeight(),\nBufferedImage.TYPE_INT_RGB\n);\n// call the Component\'s paint method, using\n// the Graphics object of the image.\ncomponent.paint( image.getGraphics() ); // alternately use .printAll(..)\nreturn image;\n}\n\npublic static void main(String[] args) {\nRunnable r = new Runnable() {\npublic void run() {\nfinal JFrame f = new JFrame(""Test Screenshot"");\n\nJMenuItem screenshot =\nnew JMenuItem(""Screenshot"");\nscreenshot.setAccelerator(\nKeyStroke.getKeyStroke(\nKeyEvent.VK_0,\nInputEvent.CTRL_DOWN_MASK\n));\nscreenshot.addActionListener(\nnew ActionListener(){\npublic void actionPerformed(ActionEvent ae) {\nBufferedImage img = getScreenShot(\nf.getContentPane() );\nJOptionPane.showMessageDialog(\nnull,\nnew JLabel(\nnew ImageIcon(\nimg.getScaledInstance(\nimg.getWidth(null)/2,\nimg.getHeight(null)/2,\nImage.SCALE_SMOOTH )\n)));\ntry {\n// write the image as a PNG\nImageIO.write(\nimg,\n""png"",\nnew File(""screenshot.png""));\n} catch(Exception e) {\ne.printStackTrace();\n}\n}\n} );\nJMenu menu = new JMenu(""Other"");\nmenu.add(screenshot);\nJMenuBar mb = new JMenuBar();\nmb.add(menu);\nf.setJMenuBar(mb);\n\nJPanel p = new JPanel( new BorderLayout(5,5) );\np.setBorder( new TitledBorder(""Main GUI"") );\np.add( new JScrollPane(new JTree()),\nBorderLayout.WEST );\np.add( new JScrollPane( new JTextArea(HELP,10,30) ),\nBorderLayout.CENTER );\n\nf.setContentPane( p );\nf.pack();\nf.setLocationRelativeTo(null);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nf.setVisible(true);\n}\n};\nSwingUtilities.invokeLater(r);\n}\n} \n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport javax.swing.*;\n\npublic class LabelRenderTest {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\n\nString title = """"\n+ ""\nDo U C Me?\n\n""\n+ ""Here is a long string that will wrap. ""\n+ ""The effect we want is a multi-line label."";\n\nJFrame f = new JFrame(""Label Render Test"");\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nBufferedImage image = new BufferedImage(\n400,\n300,\nBufferedImage.TYPE_INT_RGB);\nGraphics2D imageGraphics = image.createGraphics();\nGradientPaint gp = new GradientPaint(\n20f,\n20f,\nColor.red,\n380f,\n280f,\nColor.orange);\nimageGraphics.setPaint(gp);\nimageGraphics.fillRect(0, 0, 400, 300);\n\nJLabel textLabel = new JLabel(title);\ntextLabel.setSize(textLabel.getPreferredSize());\n\nDimension d = textLabel.getPreferredSize();\nBufferedImage bi = new BufferedImage(\nd.width,\nd.height,\nBufferedImage.TYPE_INT_ARGB);\nGraphics g = bi.createGraphics();\ng.setColor(new Color(255, 255, 255, 128));\ng.fillRoundRect(\n0,\n0,\nbi.getWidth(f),\nbi.getHeight(f),\n15,\n10);\ng.setColor(Color.black);\ntextLabel.paint(g);\nGraphics g2 = image.getGraphics();\ng2.drawImage(bi, 20, 20, f);\n\nImageIcon ii = new ImageIcon(image);\nJLabel imageLabel = new JLabel(ii);\n\nf.getContentPane().add(imageLabel);\nf.pack();\nf.setLocationByPlatform(true);\n\nf.setVisible(true);\n}\n});\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nhow to visualize console java in JFrame/JPanel\n----------Explanation----------\nYou need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I\'ve used something like this for one of my programs:\n----------Code Sample----------\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport javax.swing.JTextArea;\nimport javax.swing.SwingUtilities;\n\npublic class TextAreaOutputStream extends OutputStream {\n\nprivate final JTextArea textArea;\nprivate final StringBuilder sb = new StringBuilder();\nprivate String title;\n\npublic TextAreaOutputStream(final JTextArea textArea, String title) {\nthis.textArea = textArea;\nthis.title = title;\nsb.append(title + ""> "");\n}\n\n@Override\npublic void flush() {\n}\n\n@Override\npublic void close() {\n}\n\n@Override\npublic void write(int b) throws IOException {\n\nif (b == \'\\r\')\nreturn;\n\nif (b == \'\\n\') {\nfinal String text = sb.toString() + ""\\n"";\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ntextArea.append(text);\n}\n});\nsb.setLength(0);\nsb.append(title + ""> "");\nreturn;\n}\n\nsb.append((char) b);\n}\n}\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.PrintStream;\nimport javax.swing.*;\n\n@SuppressWarnings(""serial"")\npublic class TextAreaOutputStreamTest extends JPanel {\n\nprivate JTextArea textArea = new JTextArea(15, 30);\nprivate TextAreaOutputStream taOutputStream = new TextAreaOutputStream(\ntextArea, ""Test"");\n\npublic TextAreaOutputStreamTest() {\nsetLayout(new BorderLayout());\nadd(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\nJScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\nSystem.setOut(new PrintStream(taOutputStream));\n\nint timerDelay = 1000;\nnew Timer(timerDelay , new ActionListener() {\nint count = 0;\n@Override\npublic void actionPerformed(ActionEvent arg0) {\n\n// though this outputs via System.out.println, it actually displays\n// in the JTextArea:\nSystem.out.println(""Count is now: "" + count + "" seconds"");\ncount++;\n}\n}).start();\n}\n\nprivate static void createAndShowGui() {\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.getContentPane().add(new TextAreaOutputStreamTest());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nUsing removeActionListener but not removing - JAVA\n----------Explanation----------\nFor example check this test code:\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class TestActionListeners extends JPanel {\nprivate JButton button = new JButton(""Button"");\n\npublic TestActionListeners() {\nadd(button);\n\nbutton.addActionListener(new Listener1());\n}\n\nprivate static void createAndShowGui() {\nTestActionListeners mainPanel = new TestActionListeners();\n\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass Listener1 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 1"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener1());\nbutton.addActionListener(new Listener2());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener1;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener1.class.hashCode();\n}\n}\n\nclass Listener2 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 2"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener2());\nbutton.addActionListener(new Listener1());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener2;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener2.class.hashCode();\n}\n}\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class DisableAButton extends JPanel {\nprivate JButton disableMeButton1 = new JButton(""Disable Me 1"");\nprivate JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));\n\npublic DisableAButton() {\ndisableMeButton1.addActionListener(new ActionListener() {\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nAbstractButton buttonSource = (AbstractButton) e.getSource();\nJOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");\n\nbuttonSource.setEnabled(false);\n}\n});\n\nadd(disableMeButton1);\nadd(disableMeButton2);\n}\n\nprivate static void createAndShowGui() {\nDisableAButton mainPanel = new DisableAButton();\n\nJFrame frame = new JFrame(""DisableAButton"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass DisableMe2Action extends AbstractAction {\npublic DisableMe2Action(String name) {\nsuper(name);\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nJComponent source = (JComponent) e.getSource();\nJOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");\n\nsetEnabled(false);\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava GUI: How to Set Focus on JButton in JPanel on JFrame?\n----------Explanation----------\nBasically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.\n----------Code Sample----------\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n\npackage sof;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\n// Launch the frame:\nJFrame frame = new JFrame();\nframe.setTitle(""Welcome!"");\nframe.setSize(520, 480);\nframe.setLocationRelativeTo(null);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n// Add the image:\nImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");\nJPanel heroShotPanel = new JPanel();\nJLabel heroShot = new JLabel(heroShotImage);\nheroShotPanel.add(heroShot);\n\n// Create a panel to hold the ""Start"" button:\nJPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\nJButton start = new JButton(""Start"");\nstart.setToolTipText(""Click to use library"");\n\nstart.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""I AM PRESSED"");\n}\n});\n\nsubmitPanel.add(start);\n\nframe.getContentPane().add(heroShotPanel, BorderLayout.NORTH);\nframe.getContentPane().add(submitPanel, BorderLayout.SOUTH);\nframe.setVisible(true);\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to draw simple 3D points(x,y,z) in java using Java3D API?\n----------Explanation----------\nAnother important thing:\n----------Code Sample----------\nsimpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);\nSimpleU.getViewer().getView().setBackClipDistance ( 300.0 );\n\nMouseRotate m1=new MouseRotate();\nMouseZoom m2=new MouseZoom();\nMouseTranslate m3=new MouseTranslate();\n\n//skipped imports relating with char limit in this post\npublic final class energon extends JPanel {\nint s = 0, count = 0;\n\npublic energon() {\n\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\n\nBranchGroup scene = createSceneGraph();\nscene.compile();\n\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n\n\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\n\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\n\nQuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nlsa.setNormals(0, normals);\nlsa.setCoordinates(0, pts);\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setGeometry(lsa);\nsh.setAppearance(app);\nsh.setPickable(true); \nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh);\n\nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\n//now you can use Shape3D-type sh as a 3D-surface-containing shape\n\n//skipping imports since char limit is reached in this answer\npublic final class energon extends JPanel {\nint s = 0, count = 0;\npublic energon() {\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\nBranchGroup scene = createSceneGraph();\nscene.compile();\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setAppearance(app);\nsh.setPickable(true);\nGeometryArray ga=null;\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh); \nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nadding progress bar to each table cell for file progress - Java\n----------Explanation----------\nAnd finally, notify the table of changes to the model so it will repaint itself.\n----------Code Sample----------\npublic class UpdateTable {\n\npublic static void main(String[] args) {\nnew UpdateTable();\n}\n\npublic UpdateTable() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nUpdatableTableModel model = new UpdatableTableModel();\n\nJTable table = new JTable();\ntable.setModel(model);\n\ntable.getColumn(""Status"").setCellRenderer(new ProgressCellRender());\n\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new JScrollPane(table));\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n\nFileFinderWorker worker = new FileFinderWorker(model);\nworker.execute();\n\n}\n});\n}\n\npublic class ProgressCellRender extends JProgressBar implements TableCellRenderer {\n\n@Override\npublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\nint progress = 0;\nif (value instanceof Float) {\nprogress = Math.round(((Float) value) * 100f);\n} else if (value instanceof Integer) {\nprogress = (int) value;\n}\nsetValue(progress);\nreturn this;\n}\n}\n\npublic class RowData {\n\nprivate File file;\nprivate String type;\nprivate long length;\nprivate float status;\n\npublic RowData(File file, String type) {\nthis.file = file;\nthis.type = type;\nthis.length = file.length();\nthis.status = 0f;\n}\n\npublic File getFile() {\nreturn file;\n}\n\npublic long getLength() {\nreturn length;\n}\n\npublic float getStatus() {\nreturn status;\n}\n\npublic String getType() {\nreturn type;\n}\n\npublic void setStatus(float status) {\nthis.status = status;\n}\n}\n\npublic class UpdatableTableModel extends AbstractTableModel {\n\nprivate List rows;\nprivate Map mapLookup;\n\npublic UpdatableTableModel() {\nrows = new ArrayList<>(25);\nmapLookup = new HashMap<>(25);\n}\n\n@Override\npublic int getRowCount() {\nreturn rows.size();\n}\n\n@Override\npublic int getColumnCount() {\nreturn 4;\n}\n\n@Override\npublic String getColumnName(int column) {\nString name = ""??"";\nswitch (column) {\ncase 0:\nname = ""File"";\nbreak;\ncase 1:\nname = ""File Type"";\nbreak;\ncase 2:\nname = ""Size"";\nbreak;\ncase 3:\nname = ""Status"";\nbreak;\n}\nreturn name;\n}\n\n@Override\npublic Object getValueAt(int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nObject value = null;\nswitch (columnIndex) {\ncase 0:\nvalue = rowData.getFile();\nbreak;\ncase 1:\nvalue = rowData.getType();\nbreak;\ncase 2:\nvalue = rowData.getLength();\nbreak;\ncase 3:\nvalue = rowData.getStatus();\nbreak;\n}\nreturn value;\n}\n\n@Override\npublic void setValueAt(Object aValue, int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nswitch (columnIndex) {\ncase 3:\nif (aValue instanceof Float) {\nrowData.setStatus((float) aValue);\n}\nbreak;\n}\n}\n\npublic void addFile(File file) {\nRowData rowData = new RowData(file, ""A File"");\nmapLookup.put(file, rowData);\nrows.add(rowData);\nfireTableRowsInserted(rows.size() - 1, rows.size() - 1);\n}\n\nprotected void updateStatus(File file, int progress) {\nRowData rowData = mapLookup.get(file);\nif (rowData != null) {\nint row = rows.indexOf(rowData);\nfloat p = (float) progress / 100f;\nsetValueAt(p, row, 3);\nfireTableCellUpdated(row, 3);\n}\n}\n}\n\npublic class FileFinderWorker extends SwingWorker, File> {\n\nprivate UpdatableTableModel model;\n\npublic FileFinderWorker(UpdatableTableModel model) {\nthis.model = model;\n}\n\n@Override\nprotected void process(List chunks) {\nfor (File file : chunks) {\nmodel.addFile(file);\n}\n}\n\n@Override\nprotected List doInBackground() throws Exception {\nFile files[] = new File(System.getProperty(""user.dir"")).listFiles();\nList lstFiles = new ArrayList<>(Arrays.asList(files));\nfor (File file : lstFiles) {\n// You could actually publish the entire array, but I\'m doing this\n// deliberatly ;)\npublish(file);\n}\nreturn lstFiles;\n}\n\n@Override\nprotected void done() {\ntry {\nList files = get();\nfor (File file : files) {\nnew FileReaderWorker(model, file).execute();\n}\n} catch (Exception exp) {\nexp.printStackTrace();\n}\n}\n}\n\npublic class FileReaderWorker extends SwingWorker {\n\nprivate File currentFile;\nprivate UpdatableTableModel model;\n\npublic FileReaderWorker(UpdatableTableModel model, File file) {\nthis.currentFile = file;\nthis.model = model;\n\naddPropertyChangeListener(new PropertyChangeListener() {\n@Override\npublic void propertyChange(PropertyChangeEvent evt) {\nif (evt.getPropertyName().equals(""progress"")) {\nFileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());\n}\n}\n});\n\n}\n\n@Override\nprotected File doInBackground() throws Exception {\nif (currentFile.isFile()) {\nsetProgress(0);\nlong fileLength = currentFile.length();\nBufferedReader reader = null;\nchar[] cbuf = new char[1024];\ntry {\nreader = new BufferedReader(new FileReader(currentFile));\nint bytesRead = -1;\nint totalBytesRead = 0;\nwhile ((bytesRead = reader.read(cbuf)) != -1) {\ntotalBytesRead += bytesRead;\nint progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);\nsetProgress(progress);\nThread.sleep(25);\n}\nsetProgress(100);\n} catch (Exception e) {\ne.printStackTrace();\nsetProgress(100);\n} finally {\ntry {\nreader.close();\n} catch (Exception e) {\n}\n}\n} else {\nsetProgress(100);\n}\nreturn currentFile;\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nIncreasing distance from top of JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate GridBagConstraints gbc;\n\npublic MainMenu() {\ngbc = new GridBagConstraints();\ngbc.insets = new Insets(15, 15, 15, 15);\ngbc.anchor = GridBagConstraints.FIRST_LINE_START;\n}\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new BorderLayout());\n\nmenuPanel = new JPanel(new GridBagLayout());\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButton = new JButton(""Play"");\ninstructionButton = new JButton(""Instructions"");\nscoreboardButton = new JButton(""Scoreboard"");\nexitButton = new JButton(""Exit"");\n\naddComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\n\ncontentPane.add(menuPanel);\n\nframe.setContentPane(contentPane);\nframe.pack();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(\ncontentPane.getHeight() - (contentPane.getHeight() / 4),\n20, 5, 20));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\nprivate void addComp(JPanel panel, JComponent comp,\nint gridx, int gridy,\nint gridwidth, int gridheight,\ndouble weightx, double weighty,\nint fill) {\ngbc.gridx = gridx;\ngbc.gridy = gridy;\ngbc.gridwidth = gridwidth;\ngbc.gridheight = gridheight;\ngbc.weightx = weightx;\ngbc.weighty = weighty;\ngbc.fill = fill;\n\npanel.add(comp, gbc);\n}\n\npublic static void main(String[] args) {\nRunnable runnable = new Runnable() {\n@Override\npublic void run() {\nnew MainMenu().displayGUI();\n}\n};\nEventQueue.invokeLater(runnable);\n}\n}\n\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new GridBagLayout());\n\nmenuPanel = new JPanel(new GridLayout(0, 1, 5, 5));\nmenuPanel.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButt""""""]']","['To obtain an image of a JFrame in a Swing application, you need to capture the content of the JFrame as a BufferedImage. This involves several steps. First, you need to get the content pane of the JFrame, which is the container that holds all the components of the JFrame. Then, you create a BufferedImage with the same dimensions as the content pane. After that, you use the paint method of the content pane to draw its contents onto the BufferedImage. This process effectively captures the visual representation of the JFrame at that moment. Finally, you can use the BufferedImage for various purposes, such as saving it to a file or displaying it elsewhere in your application. This approach ensures that you capture the entire JFrame, including all its components and their current states.']","['[\'[\\\'To obtain an image of a JFrame in a Swing application, we can use the `paint` method of the JFrame to draw its contents onto a BufferedImage. This image can then be saved or manipulated as needed. Below is an example of how to achieve this.\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport javax.imageio.ImageIO;\\\\npublic class JFrameImageCapture {\\\\n    public static void main(String[] args) {\\\\n        // Create a JFrame with some content\\\\n        JFrame frame = new JFrame(""JFrame Image Capture"");\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        frame.setSize(400, 300);\\\\n        frame.setLayout(new BorderLayout());\\\\n        frame.add(new JLabel(""This is a test frame""), BorderLayout.CENTER);\\\\n        frame.setVisible(true);\\\\n\\\\n        // Capture the image of the JFrame\\\\n        BufferedImage image = new BufferedImage(frame.getWidth(), frame.getHeight(), BufferedImage.TYPE_INT_ARGB);\\\\n        Graphics2D g2d = image.createGraphics();\\\\n        frame.paint(g2d);\\\\n        g2d.dispose();\\\\n\\\\n        // Save the image to a file\\\\n        try {\\\\n            ImageIO.write(image, ""png"", new File(""frame_capture.png""));\\\\n            System.out.println(""Image captured and saved as frame_capture.png"");\\\\n        } catch (Exception e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.25,0.2,0.1481481481481481,0.0007686395080707,1.0,0.1666666666666666
swing,JFrame,Transparent JFrame background,['By allowing separate <code>JFrame</code>s  you give your end-user the ability to spread out and control what s on his/her screen.\nFor modeless dialogs  pass a null parent to the constructor  but locate them relative to their  parent  window.\n<p>To switch between this <code>JPanel</code>s use <code>JMenuBar</code> with <code>JMenuItems</code> for each <code>JPanel</code>or  JButton<code>for each</code>JPanel`.</p>'],"['Most common ways to construct:\nJFrame frame = new JFrame(""HelloWorldSwing"");\nBased on 107 examples\n \nJFrame frame = new JFrame();\nBased on 87 examples']","['You should make content pane transparent too.\n\nframe.setUndecorated(true);\nframe.getContentPane().setBackground(new Color(1.0f,1.0f,1.0f,0.0f));\nframe.setBackground(new Color(1.0f,1.0f,1.0f,0.0f));']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nDrawing an object using getGraphics() without extending JFrame\n----------Explanation----------\n\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new JPanel() {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n};\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setVisible(true);\nframe.setSize(600, 400);\n\nJPanel panel = new MyRectangleJPanel(); // changed this line\nframe.add(panel);\n\n// Graphics g = panel.getGraphics();\n// g.setColor(Color.BLUE);\n// g.fillRect(0, 0, 100, 100);\n\nframe.validate(); // because you added panel after setVisible was called\nframe.repaint(); // because you added panel after setVisible was called\n}\n}\n\n/* A JPanel that overrides the paintComponent() method and draws a rectangle */\nclass MyRectangleJPanel extends JPanel {\n@Override\npublic void paintComponent(Graphics g) {\nsuper.paintComponent(g);\ng.setColor(Color.BLUE);\ng.fillRect(0, 0, 100, 100);\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nSwing: Obtain Image of JFrame\n----------Explanation----------\nComponentImageCapture.java\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.Component;\nimport java.awt.Image;\nimport java.awt.Graphics;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.InputEvent;\n\nimport javax.swing.*;\n\nimport javax.swing.border.TitledBorder;\n\nimport javax.imageio.ImageIO;\n\nimport java.io.File;\n\n/**\nCreate a screenshot of a component.\n@author Andrew Thompson\n*/\nclass ComponentImageCapture {\n\nstatic final String HELP =\n""Type Ctrl-0 to get a screenshot of the current GUI.\\n"" +\n""The screenshot will be saved to the current "" +\n""directory as \'screenshot.png\'."";\n\npublic static BufferedImage getScreenShot(\nComponent component) {\n\nBufferedImage image = new BufferedImage(\ncomponent.getWidth(),\ncomponent.getHeight(),\nBufferedImage.TYPE_INT_RGB\n);\n// call the Component\'s paint method, using\n// the Graphics object of the image.\ncomponent.paint( image.getGraphics() ); // alternately use .printAll(..)\nreturn image;\n}\n\npublic static void main(String[] args) {\nRunnable r = new Runnable() {\npublic void run() {\nfinal JFrame f = new JFrame(""Test Screenshot"");\n\nJMenuItem screenshot =\nnew JMenuItem(""Screenshot"");\nscreenshot.setAccelerator(\nKeyStroke.getKeyStroke(\nKeyEvent.VK_0,\nInputEvent.CTRL_DOWN_MASK\n));\nscreenshot.addActionListener(\nnew ActionListener(){\npublic void actionPerformed(ActionEvent ae) {\nBufferedImage img = getScreenShot(\nf.getContentPane() );\nJOptionPane.showMessageDialog(\nnull,\nnew JLabel(\nnew ImageIcon(\nimg.getScaledInstance(\nimg.getWidth(null)/2,\nimg.getHeight(null)/2,\nImage.SCALE_SMOOTH )\n)));\ntry {\n// write the image as a PNG\nImageIO.write(\nimg,\n""png"",\nnew File(""screenshot.png""));\n} catch(Exception e) {\ne.printStackTrace();\n}\n}\n} );\nJMenu menu = new JMenu(""Other"");\nmenu.add(screenshot);\nJMenuBar mb = new JMenuBar();\nmb.add(menu);\nf.setJMenuBar(mb);\n\nJPanel p = new JPanel( new BorderLayout(5,5) );\np.setBorder( new TitledBorder(""Main GUI"") );\np.add( new JScrollPane(new JTree()),\nBorderLayout.WEST );\np.add( new JScrollPane( new JTextArea(HELP,10,30) ),\nBorderLayout.CENTER );\n\nf.setContentPane( p );\nf.pack();\nf.setLocationRelativeTo(null);\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nf.setVisible(true);\n}\n};\nSwingUtilities.invokeLater(r);\n}\n} \n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport javax.swing.*;\n\npublic class LabelRenderTest {\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater( new Runnable() {\npublic void run() {\n\nString title = """"\n+ ""\nDo U C Me?\n\n""\n+ ""Here is a long string that will wrap. ""\n+ ""The effect we want is a multi-line label."";\n\nJFrame f = new JFrame(""Label Render Test"");\nf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nBufferedImage image = new BufferedImage(\n400,\n300,\nBufferedImage.TYPE_INT_RGB);\nGraphics2D imageGraphics = image.createGraphics();\nGradientPaint gp = new GradientPaint(\n20f,\n20f,\nColor.red,\n380f,\n280f,\nColor.orange);\nimageGraphics.setPaint(gp);\nimageGraphics.fillRect(0, 0, 400, 300);\n\nJLabel textLabel = new JLabel(title);\ntextLabel.setSize(textLabel.getPreferredSize());\n\nDimension d = textLabel.getPreferredSize();\nBufferedImage bi = new BufferedImage(\nd.width,\nd.height,\nBufferedImage.TYPE_INT_ARGB);\nGraphics g = bi.createGraphics();\ng.setColor(new Color(255, 255, 255, 128));\ng.fillRoundRect(\n0,\n0,\nbi.getWidth(f),\nbi.getHeight(f),\n15,\n10);\ng.setColor(Color.black);\ntextLabel.paint(g);\nGraphics g2 = image.getGraphics();\ng2.drawImage(bi, 20, 20, f);\n\nImageIcon ii = new ImageIcon(image);\nJLabel imageLabel = new JLabel(ii);\n\nf.getContentPane().add(imageLabel);\nf.pack();\nf.setLocationByPlatform(true);\n\nf.setVisible(true);\n}\n});\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nhow to visualize console java in JFrame/JPanel\n----------Explanation----------\nYou need to make an OutputStream that re-directs output to the text area and that implements all the necessary methods of the OutputStream interface, and then in your main program, redirect your Standard output into this stream. I\'ve used something like this for one of my programs:\n----------Code Sample----------\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport javax.swing.JTextArea;\nimport javax.swing.SwingUtilities;\n\npublic class TextAreaOutputStream extends OutputStream {\n\nprivate final JTextArea textArea;\nprivate final StringBuilder sb = new StringBuilder();\nprivate String title;\n\npublic TextAreaOutputStream(final JTextArea textArea, String title) {\nthis.textArea = textArea;\nthis.title = title;\nsb.append(title + ""> "");\n}\n\n@Override\npublic void flush() {\n}\n\n@Override\npublic void close() {\n}\n\n@Override\npublic void write(int b) throws IOException {\n\nif (b == \'\\r\')\nreturn;\n\nif (b == \'\\n\') {\nfinal String text = sb.toString() + ""\\n"";\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ntextArea.append(text);\n}\n});\nsb.setLength(0);\nsb.append(title + ""> "");\nreturn;\n}\n\nsb.append((char) b);\n}\n}\n\nimport java.awt.BorderLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.PrintStream;\nimport javax.swing.*;\n\n@SuppressWarnings(""serial"")\npublic class TextAreaOutputStreamTest extends JPanel {\n\nprivate JTextArea textArea = new JTextArea(15, 30);\nprivate TextAreaOutputStream taOutputStream = new TextAreaOutputStream(\ntextArea, ""Test"");\n\npublic TextAreaOutputStreamTest() {\nsetLayout(new BorderLayout());\nadd(new JScrollPane(textArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,\nJScrollPane.HORIZONTAL_SCROLLBAR_NEVER));\nSystem.setOut(new PrintStream(taOutputStream));\n\nint timerDelay = 1000;\nnew Timer(timerDelay , new ActionListener() {\nint count = 0;\n@Override\npublic void actionPerformed(ActionEvent arg0) {\n\n// though this outputs via System.out.println, it actually displays\n// in the JTextArea:\nSystem.out.println(""Count is now: "" + count + "" seconds"");\ncount++;\n}\n}).start();\n}\n\nprivate static void createAndShowGui() {\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.getContentPane().add(new TextAreaOutputStreamTest());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nUsing removeActionListener but not removing - JAVA\n----------Explanation----------\nFor example check this test code:\n----------Code Sample----------\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class TestActionListeners extends JPanel {\nprivate JButton button = new JButton(""Button"");\n\npublic TestActionListeners() {\nadd(button);\n\nbutton.addActionListener(new Listener1());\n}\n\nprivate static void createAndShowGui() {\nTestActionListeners mainPanel = new TestActionListeners();\n\nJFrame frame = new JFrame(""Test"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass Listener1 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 1"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener1());\nbutton.addActionListener(new Listener2());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener1;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener1.class.hashCode();\n}\n}\n\nclass Listener2 implements ActionListener {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""in listener 2"");\n\nAbstractButton button = (AbstractButton) e.getSource();\n\nbutton.removeActionListener(new Listener2());\nbutton.addActionListener(new Listener1());\n}\n\n@Override\npublic boolean equals(Object obj) {\nreturn obj instanceof Listener2;\n}\n\n@Override\npublic int hashCode() {\nreturn Listener2.class.hashCode();\n}\n}\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport javax.swing.*;\n\npublic class DisableAButton extends JPanel {\nprivate JButton disableMeButton1 = new JButton(""Disable Me 1"");\nprivate JButton disableMeButton2 = new JButton(new DisableMe2Action(""Disable Me 2""));\n\npublic DisableAButton() {\ndisableMeButton1.addActionListener(new ActionListener() {\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nAbstractButton buttonSource = (AbstractButton) e.getSource();\nJOptionPane.showMessageDialog(buttonSource, ""DisableMe1 ActionListener!"");\n\nbuttonSource.setEnabled(false);\n}\n});\n\nadd(disableMeButton1);\nadd(disableMeButton2);\n}\n\nprivate static void createAndShowGui() {\nDisableAButton mainPanel = new DisableAButton();\n\nJFrame frame = new JFrame(""DisableAButton"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass DisableMe2Action extends AbstractAction {\npublic DisableMe2Action(String name) {\nsuper(name);\n}\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nJComponent source = (JComponent) e.getSource();\nJOptionPane.showMessageDialog(source, ""DisableMe2 Action!"");\n\nsetEnabled(false);\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava GUI: How to Set Focus on JButton in JPanel on JFrame?\n----------Explanation----------\nBasically these are the two things you have to do for it to respond while pressing enter key and for it to be focused by default.\n----------Code Sample----------\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n\npackage sof;\n\nimport java.awt.BorderLayout;\nimport java.awt.FlowLayout;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.ImageIcon;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class TestFrame {\n\npublic static void main(String[] args) {\n// Launch the frame:\nJFrame frame = new JFrame();\nframe.setTitle(""Welcome!"");\nframe.setSize(520, 480);\nframe.setLocationRelativeTo(null);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n// Add the image:\nImageIcon heroShotImage = new ImageIcon(""heroShot.jpg"");\nJPanel heroShotPanel = new JPanel();\nJLabel heroShot = new JLabel(heroShotImage);\nheroShotPanel.add(heroShot);\n\n// Create a panel to hold the ""Start"" button:\nJPanel submitPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\n\nJButton start = new JButton(""Start"");\nstart.setToolTipText(""Click to use library"");\n\nstart.addActionListener(new ActionListener() {\n@Override\npublic void actionPerformed(ActionEvent e) {\nSystem.out.println(""I AM PRESSED"");\n}\n});\n\nsubmitPanel.add(start);\n\nframe.getContentPane().add(heroShotPanel, BorderLayout.NORTH);\nframe.getContentPane().add(submitPanel, BorderLayout.SOUTH);\nframe.setVisible(true);\nframe.getRootPane().setDefaultButton(start);\nstart.requestFocus();\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to draw simple 3D points(x,y,z) in java using Java3D API?\n----------Explanation----------\nAnother important thing:\n----------Code Sample----------\nsimpleU.getViewingPlatform().getViewPlatform().setActivationRadius(300);\nSimpleU.getViewer().getView().setBackClipDistance ( 300.0 );\n\nMouseRotate m1=new MouseRotate();\nMouseZoom m2=new MouseZoom();\nMouseTranslate m3=new MouseTranslate();\n\n//skipped imports relating with char limit in this post\npublic final class energon extends JPanel {\nint s = 0, count = 0;\n\npublic energon() {\n\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\n\nBranchGroup scene = createSceneGraph();\nscene.compile();\n\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n\n\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\n\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\n\nQuadArray lsa = new QuadArray(48,QuadArray.COORDINATES|QuadArray.NORMALS);\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nlsa.setNormals(0, normals);\nlsa.setCoordinates(0, pts);\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setGeometry(lsa);\nsh.setAppearance(app);\nsh.setPickable(true); \nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh);\n\nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};-->each face of cube has 4 points\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\n//now you can use Shape3D-type sh as a 3D-surface-containing shape\n\n//skipping imports since char limit is reached in this answer\npublic final class energon extends JPanel {\nint s = 0, count = 0;\npublic energon() {\nsetLayout(new BorderLayout());\nGraphicsConfiguration gc=SimpleUniverse.getPreferredConfiguration();\nCanvas3D canvas3D = new Canvas3D(gc);\nadd(""Center"", canvas3D);\nBranchGroup scene = createSceneGraph();\nscene.compile();\n// SimpleUniverse is a Convenience Utility class\nSimpleUniverse simpleU = new SimpleUniverse(canvas3D);\n// This moves the ViewPlatform back a bit so the\n// objects in the scene can be viewed.\nsimpleU.getViewingPlatform().setNominalViewingTransform();\nsimpleU.addBranchGraph(scene);\n}\npublic BranchGroup createSceneGraph() {\nBranchGroup lineGroup = new BranchGroup();\nAppearance app = new Appearance();\nVector3f [] normals=new Vector3f[24];\nfor(int i=0;i<24;i++)normals[i]=new Vector3f();\nPoint3f [] pts=new Point3f[24];\nfor(int i=0;i<24;i++)pts[i]=new Point3f();\nColor3f [] clrs=new Color3f[24];\nfor(int i=0;i<24;i++)clrs[i]=new Color3f(0.5f,0.5f,0.5f);\n//cube=6 quads \n//first quad\npts[0].x=-0.5f;pts[0].y=-0.5f;pts[0].z=-0.5f;\npts[1].x=-0.5f;pts[1].y=-0.5f;pts[1].z=0.5f;\npts[2].x=-0.5f;pts[2].y=0.5f;pts[2].z=0.5f;\npts[3].x=-0.5f;pts[3].y=0.5f;pts[3].z=-0.5f;\nnormals[0].x=-1;normals[1].x=-1;normals[2].x=-1;normals[3].x=-1;\n//second quad\npts[4].x=0.5f;pts[4].y=-0.5f;pts[4].z=-0.5f;\npts[5].x=0.5f;pts[5].y=-0.5f;pts[5].z=0.5f;\npts[6].x=0.5f;pts[6].y=0.5f;pts[6].z=0.5f;\npts[7].x=0.5f;pts[7].y=0.5f;pts[7].z=-0.5f;\nnormals[4].x=1;normals[5].x=1;normals[6].x=1;normals[7].x=1;\n//third quad\npts[8].x=-0.5f;pts[8].y=-0.5f;pts[8].z=-0.5f;\npts[9].x=0.5f;pts[9].y=-0.5f;pts[9].z=-0.5f;\npts[10].x=0.5f;pts[10].y=0.5f;pts[10].z=-0.5f;\npts[11].x=-0.5f;pts[11].y=0.5f;pts[11].z=-0.5f;\nnormals[8].z=-1;normals[9].z=-1;normals[10].z=-1;normals[11].z=-1;\n//fourth quad\npts[12].x=-0.5f;pts[12].y=-0.5f;pts[12].z=0.5f;\npts[13].x=0.5f;pts[13].y=-0.5f;pts[13].z=0.5f;\npts[14].x=0.5f;pts[14].y=0.5f;pts[14].z=0.5f;\npts[15].x=-0.5f;pts[15].y=0.5f;pts[15].z=0.5f;\nnormals[12].z=1;normals[13].z=1;normals[14].z=1;normals[15].z=1;\n//fifth quad\npts[16].x=-0.5f;pts[16].y=-0.5f;pts[16].z=-0.5f;\npts[17].x=-0.5f;pts[17].y=-0.5f;pts[17].z=0.5f;\npts[18].x=0.5f;pts[18].y=-0.5f;pts[18].z=0.5f;\npts[19].x=0.5f;pts[19].y=-0.5f;pts[19].z=-0.5f;\nnormals[16].y=-1;normals[17].y=-1;normals[18].y=-1;normals[19].y=-1;\n//sixth quad\npts[20].x=-0.5f;pts[20].y=0.5f;pts[20].z=-0.5f;\npts[21].x=-0.5f;pts[21].y=0.5f;pts[21].z=0.5f;\npts[22].x=0.5f;pts[22].y=0.5f;pts[22].z=0.5f;\npts[23].x=0.5f;pts[23].y=0.5f;pts[23].z=-0.5f;\nnormals[20].y=1;normals[21].y=1;normals[22].y=1;normals[23].y=1;\nShape3D sh=new Shape3D();\nPolygonAttributes pa=new PolygonAttributes();\npa.setPolygonMode(PolygonAttributes.POLYGON_FILL);\npa.setCullFace(PolygonAttributes.CULL_NONE);\nMaterial mat=new Material();\nmat.setEmissiveColor(new Color3f(0.5f,0.5f,0.5f));\nmat.setAmbientColor(new Color3f(0.1f,0.1f,0.1f));\nmat.setDiffuseColor(new Color3f(0.2f,0.3f,0.4f));\nmat.setSpecularColor(new Color3f(0.6f,0.3f,0.2f));\nmat.setLightingEnable(true);\nRenderingAttributes ra=new RenderingAttributes();\nra.setIgnoreVertexColors(true);\nColoringAttributes ca=new ColoringAttributes();\nca.setShadeModel(ColoringAttributes.SHADE_GOURAUD);\nca.setColor(new Color3f(0.2f,0.5f,0.9f));\napp.setColoringAttributes(ca);\napp.setRenderingAttributes(ra);\napp.setMaterial(mat);\napp.setPolygonAttributes(pa);\nsh.setAppearance(app);\nsh.setPickable(true);\nGeometryArray ga=null;\nGeometryInfo ginfo=new GeometryInfo(GeometryInfo.POLYGON_ARRAY);\nTriangulator tr = new Triangulator();\nNormalGenerator normalGenerator = new NormalGenerator();\nStripifier st = new Stripifier(); \nint [] iint=new int[]{4,4,4,4,4,4};\nginfo.setStripCounts(iint);\nginfo.setCoordinates(pts); \ntr.triangulate(ginfo); // ginfo contains the geometry \nnormalGenerator.generateNormals( ginfo );\nst.stripify(ginfo);\nsh.setGeometry(ginfo.getGeometryArray()); // shape is a Shape3D.\nTransformGroup objRotate = new TransformGroup();\nobjRotate.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\nobjRotate.addChild(sh); \nDirectionalLight light1=new DirectionalLight();\nlight1.setInfluencingBounds(new BoundingSphere(new Point3d(-5.0,0,0),10.0));\nlight1.setColor(new Color3f(1f,1f,1f));\nlight1.setDirection(new Vector3f(0,1,0));\nobjRotate.addChild(light1);\nDirectionalLight light2=new DirectionalLight();\nlight2.setInfluencingBounds(new BoundingSphere(new Point3d(5.0,0,0),10.0));\nlight2.setColor(new Color3f(0.5f,1f,0.5f));\nlight2.setDirection(new Vector3f(0,-1,0));\nobjRotate.addChild(light2);\nMouseRotate f1=new MouseRotate();\nf1.setSchedulingBounds(new BoundingSphere());\nf1.setTransformGroup(objRotate);\nlineGroup.addChild(f1);\nobjRotate.addChild(new Sphere(0.60f,1,128));\nlineGroup.addChild(objRotate);\nreturn lineGroup;\n}\n\npublic static void main(String[] args) {\nJFrame frame = new JFrame();\nframe.add(new JScrollPane(new energon()));\nframe.setSize(300, 300);\nframe.setVisible(true);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nadding progress bar to each table cell for file progress - Java\n----------Explanation----------\nAnd finally, notify the table of changes to the model so it will repaint itself.\n----------Code Sample----------\npublic class UpdateTable {\n\npublic static void main(String[] args) {\nnew UpdateTable();\n}\n\npublic UpdateTable() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nUpdatableTableModel model = new UpdatableTableModel();\n\nJTable table = new JTable();\ntable.setModel(model);\n\ntable.getColumn(""Status"").setCellRenderer(new ProgressCellRender());\n\nJFrame frame = new JFrame();\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new JScrollPane(table));\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n\nFileFinderWorker worker = new FileFinderWorker(model);\nworker.execute();\n\n}\n});\n}\n\npublic class ProgressCellRender extends JProgressBar implements TableCellRenderer {\n\n@Override\npublic Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\nint progress = 0;\nif (value instanceof Float) {\nprogress = Math.round(((Float) value) * 100f);\n} else if (value instanceof Integer) {\nprogress = (int) value;\n}\nsetValue(progress);\nreturn this;\n}\n}\n\npublic class RowData {\n\nprivate File file;\nprivate String type;\nprivate long length;\nprivate float status;\n\npublic RowData(File file, String type) {\nthis.file = file;\nthis.type = type;\nthis.length = file.length();\nthis.status = 0f;\n}\n\npublic File getFile() {\nreturn file;\n}\n\npublic long getLength() {\nreturn length;\n}\n\npublic float getStatus() {\nreturn status;\n}\n\npublic String getType() {\nreturn type;\n}\n\npublic void setStatus(float status) {\nthis.status = status;\n}\n}\n\npublic class UpdatableTableModel extends AbstractTableModel {\n\nprivate List rows;\nprivate Map mapLookup;\n\npublic UpdatableTableModel() {\nrows = new ArrayList<>(25);\nmapLookup = new HashMap<>(25);\n}\n\n@Override\npublic int getRowCount() {\nreturn rows.size();\n}\n\n@Override\npublic int getColumnCount() {\nreturn 4;\n}\n\n@Override\npublic String getColumnName(int column) {\nString name = ""??"";\nswitch (column) {\ncase 0:\nname = ""File"";\nbreak;\ncase 1:\nname = ""File Type"";\nbreak;\ncase 2:\nname = ""Size"";\nbreak;\ncase 3:\nname = ""Status"";\nbreak;\n}\nreturn name;\n}\n\n@Override\npublic Object getValueAt(int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nObject value = null;\nswitch (columnIndex) {\ncase 0:\nvalue = rowData.getFile();\nbreak;\ncase 1:\nvalue = rowData.getType();\nbreak;\ncase 2:\nvalue = rowData.getLength();\nbreak;\ncase 3:\nvalue = rowData.getStatus();\nbreak;\n}\nreturn value;\n}\n\n@Override\npublic void setValueAt(Object aValue, int rowIndex, int columnIndex) {\nRowData rowData = rows.get(rowIndex);\nswitch (columnIndex) {\ncase 3:\nif (aValue instanceof Float) {\nrowData.setStatus((float) aValue);\n}\nbreak;\n}\n}\n\npublic void addFile(File file) {\nRowData rowData = new RowData(file, ""A File"");\nmapLookup.put(file, rowData);\nrows.add(rowData);\nfireTableRowsInserted(rows.size() - 1, rows.size() - 1);\n}\n\nprotected void updateStatus(File file, int progress) {\nRowData rowData = mapLookup.get(file);\nif (rowData != null) {\nint row = rows.indexOf(rowData);\nfloat p = (float) progress / 100f;\nsetValueAt(p, row, 3);\nfireTableCellUpdated(row, 3);\n}\n}\n}\n\npublic class FileFinderWorker extends SwingWorker, File> {\n\nprivate UpdatableTableModel model;\n\npublic FileFinderWorker(UpdatableTableModel model) {\nthis.model = model;\n}\n\n@Override\nprotected void process(List chunks) {\nfor (File file : chunks) {\nmodel.addFile(file);\n}\n}\n\n@Override\nprotected List doInBackground() throws Exception {\nFile files[] = new File(System.getProperty(""user.dir"")).listFiles();\nList lstFiles = new ArrayList<>(Arrays.asList(files));\nfor (File file : lstFiles) {\n// You could actually publish the entire array, but I\'m doing this\n// deliberatly ;)\npublish(file);\n}\nreturn lstFiles;\n}\n\n@Override\nprotected void done() {\ntry {\nList files = get();\nfor (File file : files) {\nnew FileReaderWorker(model, file).execute();\n}\n} catch (Exception exp) {\nexp.printStackTrace();\n}\n}\n}\n\npublic class FileReaderWorker extends SwingWorker {\n\nprivate File currentFile;\nprivate UpdatableTableModel model;\n\npublic FileReaderWorker(UpdatableTableModel model, File file) {\nthis.currentFile = file;\nthis.model = model;\n\naddPropertyChangeListener(new PropertyChangeListener() {\n@Override\npublic void propertyChange(PropertyChangeEvent evt) {\nif (evt.getPropertyName().equals(""progress"")) {\nFileReaderWorker.this.model.updateStatus(currentFile, (int) evt.getNewValue());\n}\n}\n});\n\n}\n\n@Override\nprotected File doInBackground() throws Exception {\nif (currentFile.isFile()) {\nsetProgress(0);\nlong fileLength = currentFile.length();\nBufferedReader reader = null;\nchar[] cbuf = new char[1024];\ntry {\nreader = new BufferedReader(new FileReader(currentFile));\nint bytesRead = -1;\nint totalBytesRead = 0;\nwhile ((bytesRead = reader.read(cbuf)) != -1) {\ntotalBytesRead += bytesRead;\nint progress = (int) Math.round(((double) totalBytesRead / (double) fileLength) * 100d);\nsetProgress(progress);\nThread.sleep(25);\n}\nsetProgress(100);\n} catch (Exception e) {\ne.printStackTrace();\nsetProgress(100);\n} finally {\ntry {\nreader.close();\n} catch (Exception e) {\n}\n}\n} else {\nsetProgress(100);\n}\nreturn currentFile;\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nIncreasing distance from top of JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate GridBagConstraints gbc;\n\npublic MainMenu() {\ngbc = new GridBagConstraints();\ngbc.insets = new Insets(15, 15, 15, 15);\ngbc.anchor = GridBagConstraints.FIRST_LINE_START;\n}\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new BorderLayout());\n\nmenuPanel = new JPanel(new GridBagLayout());\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButton = new JButton(""Play"");\ninstructionButton = new JButton(""Instructions"");\nscoreboardButton = new JButton(""Scoreboard"");\nexitButton = new JButton(""Exit"");\n\naddComp(menuPanel, playButton, 0, 0, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, instructionButton, 0, 1, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, scoreboardButton, 0, 2, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\naddComp(menuPanel, exitButton, 0, 3, 1, 1, 1.0, 0.20,\nGridBagConstraints.HORIZONTAL);\n\ncontentPane.add(menuPanel);\n\nframe.setContentPane(contentPane);\nframe.pack();\ncontentPane.setBorder(\nBorderFactory.createEmptyBorder(\ncontentPane.getHeight() - (contentPane.getHeight() / 4),\n20, 5, 20));\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\nprivate void addComp(JPanel panel, JComponent comp,\nint gridx, int gridy,\nint gridwidth, int gridheight,\ndouble weightx, double weighty,\nint fill) {\ngbc.gridx = gridx;\ngbc.gridy = gridy;\ngbc.gridwidth = gridwidth;\ngbc.gridheight = gridheight;\ngbc.weightx = weightx;\ngbc.weighty = weighty;\ngbc.fill = fill;\n\npanel.add(comp, gbc);\n}\n\npublic static void main(String[] args) {\nRunnable runnable = new Runnable() {\n@Override\npublic void run() {\nnew MainMenu().displayGUI();\n}\n};\nEventQueue.invokeLater(runnable);\n}\n}\n\nimport java.awt.*;\nimport javax.swing.*;\n\npublic class MainMenu {\n\nprivate JButton playButton;\nprivate JButton instructionButton;\nprivate JButton scoreboardButton;\nprivate JButton exitButton;\n\nprivate JPanel menuPanel;\n\nprivate void displayGUI() {\nJFrame frame = new JFrame(""Main Menu"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n\nJPanel contentPane = new JPanel(new GridBagLayout());\n\nmenuPanel = new JPanel(new GridLayout(0, 1, 5, 5));\nmenuPanel.setBorder(\nBorderFactory.createEmptyBorder(5, 5, 5, 5));\nmenuPanel.setOpaque(true);\nmenuPanel.setBackground(Color.BLACK);\n\nplayButt""""""]']","['To create a transparent JFrame background in Java, you need to use the Swing framework and the AWT package. First, ensure that you are using Java 6 update 10 or later, as earlier versions do not support transparency in JFrames. You can achieve transparency by setting the opacity of the JFrame. This involves calling the setUndecorated(true) method on the JFrame instance to remove the window decorations, such as the title bar and borders. Then, you can use the setBackground method with a Color object that includes an alpha value to set the transparency level. The alpha value ranges from 0 (completely transparent) to 255 (completely opaque). Additionally, you may need to override the paintComponent method of a JPanel to handle custom painting if you want to draw on the transparent background. Finally, add the JPanel to the JFrame and make the JFrame visible. This approach allows you to create a window with a transparent background, which can be useful for creating custom-shaped windows or overlay effects.']","['[""[\'To create a transparent JFrame background in Java, you can use the `setBackground` method with an alpha value for transparency. The following example demonstrates how to create a JFrame with a transparent background. The key steps include setting the JFrame to be undecorated, setting the background color with an alpha value, and enabling the `AWTUtilities` for transparency. Note that `AWTUtilities` is part of the `com.sun.awt` package, which is not officially supported and may not be available in all Java versions. However, for demonstration purposes, this example will use it.\\\\nimport javax.swing.JFrame;\\\\nimport javax.swing.JPanel;\\\\nimport java.awt.Color;\\\\nimport com.sun.awt.AWTUtilities;\\\\npublic class TransparentJFrameExample {\\\\n    public static void main(String[] args) {\\\\n        // Create a new JFrame\\\\n        JFrame frame = new JFrame();\\\\n        \\\\n        // Set the frame to be undecorated\\\\n        frame.setUndecorated(true);\\\\n        \\\\n        // Set the background color with an alpha value for transparency\\\\n        frame.setBackground(new Color(0, 0, 0, 0));\\\\n        \\\\n        // Enable the AWTUtilities for transparency\\\\n        AWTUtilities.setWindowOpaque(frame, false);\\\\n        \\\\n        // Create a JPanel with a semi-transparent background\\\\n        JPanel panel = new JPanel();\\\\n        panel.setBackground(new Color(0, 0, 0, 128)); // 50% transparent\\\\n        \\\\n        // Add the panel to the frame\\\\n        frame.add(panel);\\\\n        \\\\n        // Set the size of the frame\\\\n        frame.setSize(400, 300);\\\\n        \\\\n        // Set the default close operation\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        \\\\n        // Set the frame to be visible\\\\n        frame.setVisible(true);\\\\n    }\\\\n}\']""]']",0.25,0.2,0.2,0.0007686395080707,0.1111111111111111,0.1666666666666666
io,Serializable,Java Serializable Object to Byte Array,['<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.\nThe Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>\n<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.\n<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.\n<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>\n<p>Serialization provides default functionality to store and later recreate the object.\nIn default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>\nBut if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.\nThe Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().\nWhile working with Externalizable we should remember that the default constructer should be public else the code will throw exception.\nHere if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.\nWe can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).\nWe can observe as we are not setting the value of passWord so it s null.</p> <p>\n<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>\nIncompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >\nYou can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.\n<p>Serialization uses certain default behaviors to store and later recreate the object.\n<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.\nA Java object is only serializable.\nMost of the java class are serializable</em>.</p>\n<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.\nFor serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.\nThe Serializable interface is defined to identify classes which implement the serializable protocol:</p>\nThe serialization interface has no methods or fields and serves only to identify the semantics of being serializable.\nFor serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>\nThe values of the non-transient and non-static fields of the class get serialized.</li> </ul>\n<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.\nThe Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>\nProgrammer has to take care of which objects to be serialized.\nAs a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>\nWhen an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.\n<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>\n<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).\nThis is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>\n<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.\nFor (a contrived) example  you may wish to record boolean true as  Y  and false as  N .\n<p>The Externalizable interface was not actually provided to optimize the serialization process performance!\nbut to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>\n<p>When considering options for improving performance  don t forget custom serialization.\nYou can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.\n<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>\nWe can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.\nWe can define custom validation or business rules inside read/write methods.\nplease check in/out object case of Externalizable.\nWhere as Outstream/Instream are tightly bind to classes.\nWe can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>\n<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.\nallows the implementer to decide how an object is serialized  where as <code>Serializable</code>\n<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.\n<p>Serialization can also lead to security problems.\nBy being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>\n<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>\nNet people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>\n<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.\nI have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.\n<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>\n<p>Not everything is genuinely serializable.\nYou could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>\n<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.\nSerialization is a very dangerous mechanism  especially in its default implementation.\nHence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>\n<p>Serialization adds constraints and potential problems since structure compatibility is not insured.\nSo the effort you d spend making the class serializble properly dwarves the cost of adding the interface.\n<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.\nFor many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>\n<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.\n<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>\n<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.\nFor simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>\n<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>\n<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>\nOther languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.\nAn Object should default to be serializable.\n<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.'],"['All Known Implementing Classes:\nAbstractAction, BasicDesktopPaneUI.CloseAction, BasicDesktopPaneUI.MaximizeAction, BasicDesktopPaneUI.MinimizeAction, BasicDesktopPaneUI.NavigateAction, BasicDesktopPaneUI.OpenAction, BasicFileChooserUI.ApproveSelectionAction, BasicFileChooserUI.CancelSelectionAction, BasicFileChooserUI.ChangeToParentDirectoryAction, BasicFileChooserUI.GoHomeAction, BasicFileChooserUI.NewFolderAction, BasicFileChooserUI.UpdateAction, BasicInternalFrameTitlePane.CloseAction, BasicInternalFrameTitlePane.IconifyAction, BasicInternalFrameTitlePane.MaximizeAction, BasicInternalFrameTitlePane.MoveAction, BasicInternalFrameTitlePane.RestoreAction, BasicInternalFrameTitlePane.SizeAction, BasicSliderUI.ActionScroller, BasicTreeUI.TreeCancelEditingAction, BasicTreeUI.TreeHomeAction, BasicTreeUI.TreeIncrementAction, BasicTreeUI.TreePageAction, BasicTreeUI.TreeToggleAction, BasicTreeUI.TreeTraverseAction, MetalFileChooserUI.DirectoryComboBoxAction, TextAction, DefaultEditorKit.BeepAction, DefaultEditorKit.CopyAction, DefaultEditorKit.CutAction, DefaultEditorKit.DefaultKeyTypedAction, DefaultEditorKit.InsertBreakAction, DefaultEditorKit.InsertContentAction, DefaultEditorKit.InsertTabAction, DefaultEditorKit.PasteAction, StyledEditorKit.StyledTextAction, HTMLEditorKit.HTMLTextAction, StyledEditorKit.AlignmentAction, StyledEditorKit.BoldAction, StyledEditorKit.FontFamilyAction, StyledEditorKit.FontSizeAction, StyledEditorKit.ForegroundAction, StyledEditorKit.ItalicAction, StyledEditorKit.UnderlineAction, HTMLEditorKit.InsertHTMLTextAction, AbstractBorder, BasicBorders.ButtonBorder, BasicBorders.FieldBorder, BasicBorders.MarginBorder, BasicBorders.MenuBarBorder, BevelBorder, CompoundBorder, EmptyBorder, EtchedBorder, LineBorder, MetalBorders.ButtonBorder, MetalBorders.Flush3DBorder, MetalBorders.InternalFrameBorder, MetalBorders.MenuBarBorder, MetalBorders.MenuItemBorder, MetalBorders.OptionDialogBorder, MetalBorders.PaletteBorder, MetalBorders.PopupMenuBorder, MetalBorders.ScrollPaneBorder, MetalBorders.TableHeaderBorder, MetalBorders.ToolBarBorder, TitledBorder, BasicBorders.RadioButtonBorder, BasicBorders.RolloverButtonBorder, BasicBorders.ToggleButtonBorder, BorderUIResource.BevelBorderUIResource, SoftBevelBorder, BorderUIResource.CompoundBorderUIResource, BorderUIResource.EmptyBorderUIResource, MatteBorder, BorderUIResource.EtchedBorderUIResource, BorderUIResource.LineBorderUIResource, MetalBorders.RolloverButtonBorder, MetalBorders.ToggleButtonBorder, MetalBorders.TextFieldBorder, BorderUIResource.TitledBorderUIResource, BorderUIResource.MatteBorderUIResource, AbstractButton.ButtonChangeListener, AbstractCellEditor, DefaultCellEditor, AbstractDocument, DefaultStyledDocument, PlainDocument, HTMLDocument, AbstractDocument.AbstractElement, AbstractDocument.BranchElement, AbstractDocument.LeafElement, DefaultStyledDocument.SectionElement, HTMLDocument.BlockElement, HTMLDocument.RunElement, AbstractListModel, BasicDirectoryModel, DefaultComboBoxModel, DefaultListModel, MetalFileChooserUI.DirectoryComboBoxModel, MetalFileChooserUI.FilterComboBoxModel, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractOwnableSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer, AbstractQueuedSynchronizer.ConditionObject, AbstractTableModel, DefaultTableModel, AbstractUndoableEdit, AbstractDocument.ElementEdit, CompoundEdit, DefaultStyledDocument.AttributeUndoableEdit, StateEdit, AbstractDocument.DefaultDocumentEvent, UndoManager, ActionMap, ActionMapUIResource, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AffineTransform, Arc2D.Double, Arc2D.Float, ArrayBlockingQueue, ArrayDeque, ArrayList, AttributeList, RoleList, RoleUnresolvedList, AtomicBoolean, AtomicInteger, AtomicIntegerArray, AtomicLong, AtomicLongArray, AtomicReference, AtomicReferenceArray, Attribute, AttributedCharacterIterator.Attribute, Format.Field, TextAttribute, DateFormat.Field, MessageFormat.Field, NumberFormat.Field, AttributeList, AuthorizeCallback, AWTKeyStroke, KeyStroke, BaseRowSet, BasicComboBoxRenderer, BasicComboBoxRenderer.UIResource, BasicIconFactory, BasicLookAndFeel, MetalLookAndFeel, SynthLookAndFeel, BasicPermission, AudioPermission, AuthPermission, AWTPermission, DelegationPermission, LoggingPermission, ManagementPermission, MBeanServerPermission, MBeanTrustPermission, NetPermission, PropertyPermission, ReflectPermission, RuntimePermission, SecurityPermission, SerializablePermission, SQLPermission, SSLPermission, SubjectDelegationPermission, WebServicePermission, BeanContextChildSupport, BeanContextSupport, BeanContextServicesSupport, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport, BeanContextSupport.BCSChild, BeanContextServicesSupport.BCSSChild, BitSet, Boolean, BorderLayout, BorderUIResource, BoxLayout, DefaultMenuLayout, ButtonGroup, Calendar, GregorianCalendar, CardLayout, Certificate, X509Certificate, Certificate.CertificateRep, CertPath, CertPath.CertPathRep, Character, CheckboxGroup, ChoiceCallback, RealmChoiceCallback, Class, ClassDesc, CodeSigner, CodeSource, Color, ColorUIResource, SystemColor, ColorSpace, ICC_ColorSpace, Component, Button, Canvas, Checkbox, Choice, Container, Label, List, Scrollbar, TextComponent, BasicSplitPaneDivider, CellRendererPane, DefaultTreeCellEditor.EditorContainer, JComponent, Panel, ScrollPane, Window, TextArea, TextField, AbstractButton, BasicInternalFrameTitlePane, Box, Box.Filler, JColorChooser, JComboBox, JFileChooser, JInternalFrame, JInternalFrame.JDesktopIcon, JLabel, JLayeredPane, JList, JMenuBar, JOptionPane, JPanel, JPopupMenu, JProgressBar, JRootPane, JScrollBar, JScrollPane, JSeparator, JSlider, JSpinner, JSplitPane, JTabbedPane, JTable, JTableHeader, JTextComponent, JToolBar, JToolTip, JTree, JViewport, Applet, BasicToolBarUI.DragWindow, Dialog, Frame, JWindow, JButton, JMenuItem, JToggleButton, MetalInternalFrameTitlePane, DefaultListCellRenderer, DefaultTableCellRenderer, DefaultTreeCellRenderer, JDesktopPane, BasicInternalFrameTitlePane.SystemMenuBar, AbstractColorChooserPanel, JSpinner.DefaultEditor, BasicComboPopup, JScrollPane.ScrollBar, JPopupMenu.Separator, JToolBar.Separator, JEditorPane, JTextArea, JTextField, JApplet, FileDialog, JDialog, JFrame, BasicArrowButton, MetalComboBoxButton, JCheckBoxMenuItem, JMenu, JRadioButtonMenuItem, JCheckBox, JRadioButton, DefaultListCellRenderer.UIResource, MetalFileChooserUI.FileRenderer, MetalFileChooserUI.FilterComboBoxRenderer, DefaultTableCellRenderer.UIResource, JSpinner.DateEditor, JSpinner.ListEditor, JSpinner.NumberEditor, MetalComboBoxUI.MetalComboPopup, JTextPane, DefaultTreeCellEditor.DefaultTextField, JFormattedTextField, JPasswordField, MetalScrollButton, Component.AccessibleAWTComponent, Box.Filler.AccessibleBoxFiller, Button.AccessibleAWTButton, Canvas.AccessibleAWTCanvas, Checkbox.AccessibleAWTCheckbox, Choice.AccessibleAWTChoice, Container.AccessibleAWTContainer, Label.AccessibleAWTLabel, List.AccessibleAWTList, List.AccessibleAWTList.AccessibleAWTListChild, Scrollbar.AccessibleAWTScrollBar, TextComponent.AccessibleAWTTextComponent, Box.AccessibleBox, CellRendererPane.AccessibleCellRendererPane, JComponent.AccessibleJComponent, Panel.AccessibleAWTPanel, ScrollPane.AccessibleAWTScrollPane, Window.AccessibleAWTWindow, TextArea.AccessibleAWTTextArea, TextField.AccessibleAWTTextField, AbstractButton.AccessibleAbstractButton, JColorChooser.AccessibleJColorChooser, JComboBox.AccessibleJComboBox, JDesktopPane.AccessibleJDesktopPane, JFileChooser.AccessibleJFileChooser, JInternalFrame.AccessibleJInternalFrame, JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon, JLabel.AccessibleJLabel, JLayeredPane.AccessibleJLayeredPane, JList.AccessibleJList, JMenuBar.AccessibleJMenuBar, JOptionPane.AccessibleJOptionPane, JPanel.AccessibleJPanel, JPopupMenu.AccessibleJPopupMenu, JProgressBar.AccessibleJProgressBar, JRootPane.AccessibleJRootPane, JScrollBar.AccessibleJScrollBar, JScrollPane.AccessibleJScrollPane, JSeparator.AccessibleJSeparator, JSlider.AccessibleJSlider, JSpinner.AccessibleJSpinner, JSplitPane.AccessibleJSplitPane, JTabbedPane.AccessibleJTabbedPane, JTable.AccessibleJTable, JTableHeader.AccessibleJTableHeader, JTextComponent.AccessibleJTextComponent, JToolBar.AccessibleJToolBar, JToolTip.AccessibleJToolTip, JTree.AccessibleJTree, JViewport.AccessibleJViewport, Applet.AccessibleApplet, Dialog.AccessibleAWTDialog, Frame.AccessibleAWTFrame, JWindow.AccessibleJWindow, JButton.AccessibleJButton, JMenuItem.AccessibleJMenuItem, JToggleButton.AccessibleJToggleButton, JEditorPane.AccessibleJEditorPane, JTextArea.AccessibleJTextArea, JTextField.AccessibleJTextField, JApplet.AccessibleJApplet, JDialog.AccessibleJDialog, JFrame.AccessibleJFrame, JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem, JMenu.AccessibleJMenu, JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem, JCheckBox.AccessibleJCheckBox, JRadioButton.AccessibleJRadioButton, JEditorPane.AccessibleJEditorPaneHTML, JEditorPane.JEditorPaneAccessibleHypertextSupport, JPasswordField.AccessibleJPasswordField, ComponentOrientation, CompositeDataSupport, ConcurrentHashMap, ConcurrentLinkedQueue, ConcurrentSkipListMap, ConcurrentSkipListSet, ConfirmationCallback, ContainerOrderFocusTraversalPolicy, DefaultFocusTraversalPolicy, ContentModel, CopyOnWriteArrayList, CopyOnWriteArraySet, CSS, CubicCurve2D.Double, CubicCurve2D.Float, Currency, Cursor, Date, Date, Time, Timestamp, DateFormatSymbols, DateTimeSyntax, DateTimeAtCompleted, DateTimeAtCreation, DateTimeAtProcessing, JobHoldUntil, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, JToggleButton.ToggleButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultComboBoxModel, DefaultDesktopManager, DefaultFormatter, InternationalFormatter, MaskFormatter, DateFormatter, NumberFormatter, DefaultFormatterFactory, DefaultListCellRenderer, DefaultListSelectionModel, DefaultMutableTreeNode, JTree.DynamicUtilTreeNode, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultTableCellRenderer, DefaultTableColumnModel, DefaultTableModel, DefaultTreeModel, DefaultTreeSelectionModel, JTree.EmptySelectionModel, DelegationPermission, Dimension, DimensionUIResource, DocFlavor, DocFlavor.BYTE_ARRAY, DocFlavor.CHAR_ARRAY, DocFlavor.INPUT_STREAM, DocFlavor.READER, DocFlavor.SERVICE_FORMATTED, DocFlavor.STRING, DocFlavor.URL, DragGestureRecognizer, MouseDragGestureRecognizer, DragSource, DragSourceContext, DropTarget, DropTargetContext, EditorKit, DefaultEditorKit, StyledEditorKit, HTMLEditorKit, RTFEditorKit, Element, Ellipse2D.Double, Ellipse2D.Float, EmptyBorder, Enum, Authenticator.RequestorType, ClientInfoStatus, Component.BaselineResizeBehavior, Desktop.Action, Diagnostic.Kind, Dialog.ModalExclusionType, Dialog.ModalityType, DropMode, ElementKind, ElementType, Formatter.BigDecimalLayoutForm, FormSubmitEvent.MethodType, GroupLayout.Alignment, JavaFileObject.Kind, JTable.PrintMode, KeyRep.Type, LayoutStyle.ComponentPlacement, MemoryType, MessageContext.Scope, Modifier, MultipleGradientPaint.ColorSpaceType, MultipleGradientPaint.CycleMethod, NestingKind, Normalizer.Form, Proxy.Type, Resource.AuthenticationType, RetentionPolicy, RoundingMode, RowFilter.ComparisonType, RowIdLifetime, RowSorterEvent.Type, Service.Mode, SortOrder, SourceVersion, SSLEngineResult.HandshakeStatus, SSLEngineResult.Status, StandardLocation, SwingWorker.StateValue, Thread.State, TimeUnit, TrayIcon.MessageType, TypeKind, XmlAccessOrder, XmlAccessType, XmlNsForm, EnumMap, EnumSet, EnumSyntax, Chromaticity, ColorSupported, Compression, Fidelity, Finishings, JobSheets, JobState, JobStateReason, Media, MultipleDocumentHandling, OrientationRequested, PDLOverrideSupported, PresentationDirection, PrinterIsAcceptingJobs, PrinterState, PrinterStateReason, PrintQuality, ReferenceUriSchemesSupported, Severity, SheetCollate, Sides, MediaName, MediaSizeName, MediaTray, Event, EventListenerList, EventObject, AWTEvent, BeanContextEvent, CaretEvent, ChangeEvent, ConnectionEvent, DragGestureEvent, DragSourceEvent, DropTargetEvent, FlavorEvent, HandshakeCompletedEvent, HyperlinkEvent, LineEvent, ListDataEvent, ListSelectionEvent, MenuEvent, NamingEvent, NamingExceptionEvent, NodeChangeEvent, Notification, PopupMenuEvent, PreferenceChangeEvent, PrintEvent, PropertyChangeEvent, RowSetEvent, RowSorterEvent, SSLSessionBindingEvent, StatementEvent, TableColumnModelEvent, TableModelEvent, TreeExpansionEvent, TreeModelEvent, TreeSelectionEvent, UndoableEditEvent, UnsolicitedNotificationEvent, ActionEvent, AdjustmentEvent, AncestorEvent, ComponentEvent, HierarchyEvent, InputMethodEvent, InternalFrameEvent, InvocationEvent, ItemEvent, TextEvent, BeanContextMembershipEvent, BeanContextServiceAvailableEvent, BeanContextServiceRevokedEvent, DragSourceDragEvent, DragSourceDropEvent, DropTargetDragEvent, DropTargetDropEvent, HTMLFrameHyperlinkEvent, AttributeChangeNotification, JMXConnectionNotification, MBeanServerNotification, MonitorNotification, RelationNotification, TimerNotification, PrintJobAttributeEvent, PrintJobEvent, PrintServiceAttributeEvent, IndexedPropertyChangeEvent, ContainerEvent, FocusEvent, InputEvent, PaintEvent, WindowEvent, FormSubmitEvent, KeyEvent, MouseEvent, MenuKeyEvent, MenuDragMouseEvent, MouseWheelEvent, File, FilePermission, FlowLayout, Font, FontUIResource, FontMetrics, Format, DateFormat, MessageFormat, NumberFormat, SimpleDateFormat, ChoiceFormat, DecimalFormat, GapContent, GraphicsConfigTemplate, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GuardedObject, HashAttributeSet, HashDocAttributeSet, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashDocAttributeSet, HashMap, LinkedHashMap, PrinterStateReasons, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashSet, JobStateReasons, LinkedHashSet, Hashtable, Properties, UIDefaults, Provider, AuthProvider, HTML.UnknownTag, HTMLEditorKit.LinkController, ICC_Profile, ICC_ProfileGray, ICC_ProfileRGB, IconUIResource, Identity, IdentityScope, Signer, IdentityHashMap, ImageIcon, ImageIcon.AccessibleImageIcon, InetAddress, Inet4Address, Inet6Address, InputMap, ComponentInputMap, InputMapUIResource, ComponentInputMapUIResource, Insets, InsetsUIResource, IntegerSyntax, Copies, JobImpressions, JobImpressionsCompleted, JobKOctets, JobKOctetsProcessed, JobMediaSheets, JobMediaSheetsCompleted, JobPriority, JobPrioritySupported, NumberOfDocuments, NumberOfInterveningJobs, NumberUp, PagesPerMinute, PagesPerMinuteColor, QueuedJobCount, JAXBElement, JComponent, JFormattedTextField.AbstractFormatter, JMenu.WinListener, JMXPrincipal, JMXServiceURL, JRootPane.RootLayout, JTabbedPane, JTabbedPane.ModelListener, JTree.TreeSelectionRedirector, JViewport.ViewListener, KerberosPrincipal, KerberosTicket, KeyPair, KeyRep, LanguageCallback, LayoutFocusTraversalPolicy, Lease, Level, Line2D.Double, Line2D.Float, LinkedBlockingDeque, LinkedBlockingQueue, LinkedHashSet, LinkedList, Locale, LogRecord, MarshalledObject, MathContext, MBeanFeatureInfo, MBeanAttributeInfo, MBeanConstructorInfo, MBeanNotificationInfo, MBeanOperationInfo, MBeanParameterInfo, ModelMBeanAttributeInfo, OpenMBeanAttributeInfoSupport, ModelMBeanConstructorInfo, OpenMBeanConstructorInfoSupport, ModelMBeanNotificationInfo, ModelMBeanOperationInfo, OpenMBeanOperationInfoSupport, OpenMBeanParameterInfoSupport, MBeanInfo, ModelMBeanInfoSupport, OpenMBeanInfoSupport, MediaTracker, MenuComponent, MenuBar, MenuItem, CheckboxMenuItem, Menu, PopupMenu, MenuComponent.AccessibleAWTMenuComponent, MenuBar.AccessibleAWTMenuBar, MenuItem.AccessibleAWTMenuItem, CheckboxMenuItem.AccessibleAWTCheckboxMenuItem, Menu.AccessibleAWTMenu, PopupMenu.AccessibleAWTPopupMenu, MenuShortcut, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.TreeLeafIcon, MetalIconFactory.FolderIcon16, MetalIconFactory.TreeFolderIcon, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, ModificationItem, NameCallback, NameClassPair, Binding, SearchResult, NotificationResult, Number, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, NumericShaper, ObjectInstance, ObjectStreamClass, ObjID, OpenType, ArrayType, CompositeType, SimpleType, TabularType, Option, OverlayLayout, ParameterBlock, ParserDelegator, PasswordCallback, Path2D.Double, Path2D.Float, GeneralPath, Pattern, Permission, AllPermission, MBeanPermission, PrivateCredentialPermission, ServicePermission, SocketPermission, UnresolvedPermission, PermissionCollection, Permissions, Permissions, Point, Point2D.Double, Point2D.Float, Polygon, PriorityBlockingQueue, PriorityQueue, PropertyChangeSupport, SwingPropertyChangeSupport, Proxy, QName, QuadCurve2D.Double, QuadCurve2D.Float, QueryEval, Random, SecureRandom, Rdn, Rectangle, DefaultCaret, BasicTextUI.BasicCaret, Rectangle2D.Double, Rectangle2D.Float, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, BinaryRefAddr, StringRefAddr, Reference, LinkRef, RemoteObject, RemoteObjectInvocationHandler, RemoteServer, RemoteStub, Activatable, UnicastRemoteObject, ActivationGroup_Stub, RMIConnectionImpl_Stub, RMIServerImpl_Stub, ActivationGroup, ResolutionSyntax, PrinterResolution, ResolveResult, RMIConnector, Role, RoleInfo, RoleResult, RoleUnresolved, RoundRectangle2D.Double, RoundRectangle2D.Float, RowSetMetaDataImpl, ScrollPaneAdjustable, ScrollPaneLayout, ScrollPaneLayout.UIResource, SealedObject, SearchControls, SecureRandomSpi, Semaphore, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, ServicePermission, SetOfIntegerSyntax, CopiesSupported, JobImpressionsSupported, JobKOctetsSupported, JobMediaSheetsSupported, NumberUpSupported, PageRanges, SignedObject, SimpleAttributeSet, Size2DSyntax, MediaSize, SizeRequirements, SocketAddress, InetSocketAddress, SocketPermission, SpinnerDateModel, SpinnerListModel, SpinnerNumberModel, SslRMIClientSocketFactory, StackTraceElement, String, StringBuffer, StringBuilder, StringContent, Stub, _Remote_Stub, StyleContext, StyleSheet, StyleContext.NamedStyle, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SynchronousQueue, SystemColor, TableColumn, TabSet, TabStop, TabularDataSupport, TargetedNotification, TextInputCallback, RealmCallback, TextOutputCallback, TextSyntax, DocumentName, JobMessageFromOperator, JobName, JobOriginatingUserName, OutputDeviceAssigned, PrinterInfo, PrinterLocation, PrinterMakeAndModel, PrinterMessageFromOperator, PrinterName, RequestingUserName, Throwable, Error, Exception, AnnotationFormatError, AssertionError, AWTError, CoderMalfunctionError, FactoryConfigurationError, FactoryConfigurationError, IOError, LinkageError, ServiceConfigurationError, ThreadDeath, TransformerFactoryConfigurationError, VirtualMachineError, AclNotFoundException, ActivationException, AlreadyBoundException, ApplicationException, AWTException, BackingStoreException, BadAttributeValueExpException, BadBinaryOpValueExpException, BadLocationException, BadStringOperationException, BrokenBarrierException, CertificateException, ClassNotFoundException, CloneNotSupportedException, DataFormatException, DatatypeConfigurationException, DestroyFailedException, ExecutionException, ExpandVetoException, FontFormatException, GeneralSecurityException, GSSException, IllegalAccessException, IllegalClassFormatException, InstantiationException, InterruptedException, IntrospectionException, InvalidApplicationException, InvalidMidiDataException, InvalidPreferencesFormatException, InvalidTargetObjectTypeException, InvocationTargetException, IOException, JAXBException, JMException, KeySelectorException, LastOwnerException, LineUnavailableException, MarshalException, MidiUnavailableException, MimeTypeParseException, NamingException, NoninvertibleTransformException, NoSuchFieldException, NoSuchMethodException, NotBoundException, NotOwnerException, ParseException, ParserConfigurationException, PrinterException, PrintException, PrivilegedActionException, PropertyVetoException, RefreshFailedException, RemarshalException, RuntimeException, SAXException, ScriptException, ServerNotActiveException, SOAPException, SQLException, TimeoutException, TooManyListenersException, TransformerException, TransformException, UnmodifiableClassException, UnsupportedAudioFileException, UnsupportedCallbackException, UnsupportedFlavorException, UnsupportedLookAndFeelException, URIReferenceException, URISyntaxException, UserException, XMLParseException, XMLSignatureException, XMLStreamException, XPathException, ClassCircularityError, ClassFormatError, ExceptionInInitializerError, IncompatibleClassChangeError, NoClassDefFoundError, UnsatisfiedLinkError, VerifyError, InternalError, OutOfMemoryError, StackOverflowError, UnknownError, UnknownGroupException, UnknownObjectException, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, ServerCloneException, BadPaddingException, CertificateException, CertPathBuilderException, CertPathValidatorException, CertStoreException, CRLException, DigestException, ExemptionMechanismException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException, InvalidParameterSpecException, KeyException, KeyStoreException, LoginException, NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, ShortBufferException, SignatureException, UnrecoverableEntryException, ChangedCharSetException, CharacterCodingException, CharConversionException, ClosedChannelException, EOFException, FileLockInterruptionException, FileNotFoundException, FilerException, HttpRetryException, IIOException, InterruptedIOException, InvalidPropertiesFormatException, JMXProviderException, JMXServerErrorException, MalformedURLException, ObjectStreamException, ProtocolException, RemoteException, SaslException, SocketException, SSLException, SyncFailedException, UnknownHostException, UnknownServiceException, UnsupportedEncodingException, UTFDataFormatException, ZipException, MarshalException, PropertyException, UnmarshalException, ValidationException, MBeanException, OpenDataException, OperationsException, ReflectionException, RelationException, AttributeInUseException, AttributeModificationException, CannotProceedException, CommunicationException, ConfigurationException, ContextNotEmptyException, InsufficientResourcesException, InterruptedNamingException, InvalidAttributeIdentifierException, InvalidAttributesException, InvalidAttributeValueException, InvalidNameException, InvalidSearchControlsException, InvalidSearchFilterException, LimitExceededException, LinkException, NameAlreadyBoundException, NameNotFoundException, NamingSecurityException, NoInitialContextException, NoSuchAttributeException, NotContextException, OperationNotSupportedException, PartialResultException, ReferralException, SchemaViolationException, ServiceUnavailableException, PrinterAbortException, PrinterIOException, AnnotationTypeMismatchException, ArithmeticException, ArrayStoreException, BufferOverflowException, BufferUnderflowException, CannotRedoException, CannotUndoException, ClassCastException, CMMException, ConcurrentModificationException, DataBindingException, DOMException, EmptyStackException, EnumConstantNotPresentException, EventException, IllegalArgumentException, IllegalMonitorStateException, IllegalPathStateException, IllegalStateException, ImagingOpException, IncompleteAnnotationException, IndexOutOfBoundsException, JMRuntimeException, LSException, MalformedParameterizedTypeException, MirroredTypeException, MirroredTypesException, MissingResourceException, NegativeArraySizeException, NoSuchElementException, NoSuchMechanismException, NullPointerException, ProfileDataException, ProviderException, RangeException, RasterFormatException, RejectedExecutionException, SecurityException, SystemException, TypeConstraintException, TypeNotPresentException, UndeclaredThrowableException, UnknownAnnotationValueException, UnknownElementException, UnknownTypeException, UnmodifiableSetException, UnsupportedOperationException, WebServiceException, XPathException, SAXNotRecognizedException, SAXNotSupportedException, SAXParseException, BatchUpdateException, RowSetWarning, SerialException, SQLClientInfoException, SQLNonTransientException, SQLRecoverableException, SQLTransientException, SQLWarning, SyncFactoryException, SyncProviderException, TransformerConfigurationException, AdapterAlreadyExists, AdapterInactive, AdapterNonExistent, AlreadyBound, BadKind, Bounds, Bounds, CannotProceed, DuplicateName, FormatMismatch, ForwardRequest, ForwardRequest, InconsistentTypeCode, InconsistentTypeCode, Invalid, InvalidAddress, InvalidName, InvalidName, InvalidName, InvalidPolicy, InvalidSeq, InvalidSlot, InvalidTypeForEncoding, InvalidValue, InvalidValue, NoContext, NoServant, NotEmpty, NotFound, ObjectAlreadyActive, ObjectNotActive, PolicyError, ServantAlreadyActive, ServantNotActive, TypeMismatch, TypeMismatch, TypeMismatch, UnknownEncoding, UnknownUserException, WrongAdapter, WrongPolicy, WrongTransaction, XPathExpressionException, XPathFactoryConfigurationException, GenericSignatureFormatError, UnsupportedClassVersionError, AbstractMethodError, IllegalAccessError, InstantiationError, NoSuchFieldError, NoSuchMethodError, ZipError, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, InvalidKeyException, KeyManagementException, AccountException, CredentialException, FailedLoginException, UnrecoverableKeyException, MalformedInputException, UnmappableCharacterException, AsynchronousCloseException, IIOInvalidTreeException, SocketTimeoutException, InvalidClassException, InvalidObjectException, NotActiveException, NotSerializableException, OptionalDataException, StreamCorruptedException, WriteAbortedException, AccessException, ActivateFailedException, ConnectException, ConnectIOException, ExportException, MarshalException, NoSuchObjectException, ServerError, ServerException, ServerRuntimeException, SkeletonMismatchException, SkeletonNotFoundException, StubNotFoundException, UnexpectedException, UnknownHostException, UnmarshalException, AuthenticationException, BindException, ConnectException, NoRouteToHostException, PortUnreachableException, SSLHandshakeException, SSLKeyException, SSLPeerUnverifiedException, SSLProtocolException, JarException, MBeanRegistrationException, AttributeNotFoundException, InstanceAlreadyExistsException, InstanceNotFoundException, IntrospectionException, InvalidAttributeValueException, ListenerNotFoundException, MalformedObjectNameException, NotCompliantMBeanException, ServiceNotFoundException, InvalidRelationIdException, InvalidRelationServiceException, InvalidRelationTypeException, InvalidRoleInfoException, InvalidRoleValueException, RelationNotFoundException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RoleInfoNotFoundException, RoleNotFoundException, SizeLimitExceededException, TimeLimitExceededException, LinkLoopException, MalformedLinkException, AuthenticationException, AuthenticationNotSupportedException, NoPermissionException, LdapReferralException, IllegalCharsetNameException, IllegalFormatException, IllegalSelectorException, IllegalThreadStateException, InvalidKeyException, InvalidOpenTypeException, InvalidParameterException, KeyAlreadyExistsException, NumberFormatException, PatternSyntaxException, UnresolvedAddressException, UnsupportedAddressTypeException, UnsupportedCharsetException, AlreadyConnectedException, CancellationException, CancelledKeyException, ClosedSelectorException, ConnectionPendingException, FormatterClosedException, IllegalBlockingModeException, IllegalComponentStateException, InvalidDnDOperationException, InvalidMarkException, NoConnectionPendingException, NonReadableChannelException, NonWritableChannelException, NotYetBoundException, NotYetConnectedException, OverlappingFileLockException, ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException, MonitorSettingException, RuntimeErrorException, RuntimeMBeanException, RuntimeOperationsException, InputMismatchException, AccessControlException, RMISecurityException, ACTIVITY_COMPLETED, ACTIVITY_REQUIRED, BAD_CONTEXT, BAD_INV_ORDER, BAD_OPERATION, BAD_PARAM, BAD_QOS, BAD_TYPECODE, CODESET_INCOMPATIBLE, COMM_FAILURE, DATA_CONVERSION, FREE_MEM, IMP_LIMIT, IndirectionException, INITIALIZE, INTERNAL, INTF_REPOS, INVALID_ACTIVITY, INVALID_TRANSACTION, INV_FLAG, INV_IDENT, INV_OBJREF, INV_POLICY, MARSHAL, NO_IMPLEMENT, NO_MEMORY, NO_PERMISSION, NO_RESOURCES, NO_RESPONSE, OBJECT_NOT_EXIST, OBJ_ADAPTER, PERSIST_STORE, REBIND, TIMEOUT, TRANSACTION_MODE, TRANSACTION_REQUIRED, TRANSACTION_ROLLEDBACK, TRANSACTION_UNAVAILABLE, TRANSIENT, UNKNOWN, UnknownException, HeadlessException, ReadOnlyBufferException, ProtocolException, SQLDataException, SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException, SQLSyntaxErrorException, SQLTimeoutException, SQLTransactionRollbackException, SQLTransientConnectionException, DataTruncation, XPathFunctionException, AccountExpiredException, AccountLockedException, AccountNotFoundException, CredentialExpiredException, CredentialNotFoundException, ClosedByInterruptException, SocketSecurityException, DuplicateFormatFlagsException, FormatFlagsConversionMismatchException, IllegalFormatCodePointException, IllegalFormatConversionException, IllegalFormatFlagsException, IllegalFormatPrecisionException, IllegalFormatWidthException, MissingFormatArgumentException, MissingFormatWidthException, UnknownFormatConversionException, UnknownFormatFlagsException, HTTPException, SOAPFaultException, Timer, Timestamp, TimeZone, SimpleTimeZone, TransferHandler, TransformAttribute, TreeMap, TreePath, TreeSet, UID, UIManager, UnresolvedPermission, URI, URISyntax, Destination, PrinterMoreInfo, PrinterMoreInfoManufacturer, PrinterURI, URL, UUID, Vector, Stack, VetoableChangeSupport, ViewportLayout, VMID, X500Principal']",['If the object array contains Serializable objects then you can use java.io.ObjectOutputStream\n\nObjectOutputStream out = new ObjectOutputStream(anyOutputStream);\nout.writeObject(objectArray);\nÃ¢â‚¬Å¡Ãƒâ€žÃ‚Â¶'],['nan'],"['To convert a Java Serializable object to a byte array, you need to use the `java.io` package, specifically the `ObjectOutputStream` and `ByteArrayOutputStream` classes. The process involves creating an instance of `ByteArrayOutputStream` to hold the byte data and then wrapping it with an `ObjectOutputStream` to handle the serialization. You write the object to the `ObjectOutputStream`, which in turn writes the serialized object data to the `ByteArrayOutputStream`. Finally, you can retrieve the byte array from the `ByteArrayOutputStream` using its `toByteArray` method. This approach ensures that the object is properly serialized into a byte array, which can then be used for various purposes such as storage or transmission over a network.']","['[\'[\\\'The task is to convert a Java Serializable object to a byte array. This can be achieved using Java\\\\\\\'s built-in serialization mechanism. The following code demonstrates how to serialize an object to a byte array using the `ObjectOutputStream` and `ByteArrayOutputStream` classes. First, we create a simple serializable class `Person`. Then, we create a method `serializeObjectToByteArray` that takes a serializable object and returns its byte array representation.\\\\nimport java.io.ByteArrayOutputStream;\\\\nimport java.io.IOException;\\\\nimport java.io.ObjectOutputStream;\\\\nimport java.io.Serializable;\\\\npublic class SerializableExample {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Create an instance of the Person class\\\\n            Person person = new Person(""John"", 30);\\\\n            // Serialize the person object to a byte array\\\\n            byte[] byteArray = serializeObjectToByteArray(person);\\\\n            // Print the byte array\\\\n            System.out.println(""Serialized byte array: "" + java.util.Arrays.toString(byteArray));\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n\\\\n    // Method to serialize an object to a byte array\\\\n    public static byte[] serializeObjectToByteArray(Serializable obj) throws IOException {\\\\n        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\\\\n             ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream)) {\\\\n            objectOutputStream.writeObject(obj);\\\\n            return byteArrayOutputStream.toByteArray();\\\\n        }\\\\n    }\\\\n\\\\n    // A simple serializable class\\\\n    public static class Person implements Serializable {\\\\n        private static final long serialVersionUID = 1L;\\\\n        private String name;\\\\n        private int age;\\\\n\\\\n        public Person(String name, int age) {\\\\n            this.name = name;\\\\n            this.age = age;\\\\n        }\\\\n\\\\n        @Override\\\\n        public String toString() {\\\\n            return ""Person{name=\\\\\\\'"" + name + ""\\\\\\\', age="" + age + ""}"";\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0099009900990099,0.5,0.25,1.0,1.0,0.1666666666666666
io,Serializable,JSONObject Not Serializable?,['<p>To add to the other answers  by implementating <code>java.io.Serializable</code>  you get  automatic  serialization capability for objects of your class.\nThe Java runtime will use reflection to figure out how to marshal and unmarshal your objects.</p>\n<p>In earlier version of Java  reflection was very slow  and so serializaing large object graphs (e.g. in client-server RMI applications) was a bit of a performance problem.\n<p>In recent versions of Java (1.3 onwards  certainly) the performance of reflection is vastly better than it used to be  and so this is much less of a problem.\n<p>Also  the built-in Java serialization mechanism isn t the only one  you can get third-party replacements  such as JBoss Serialization  which is considerably quicker  and is a drop-in replacement for the default.</p>\n<p>Serialization provides default functionality to store and later recreate the object.\nIn default serialization the object is constructed entirely from its stored bits  with no constructor calls.</p> <pre><code>  ObjectOutputStream oos = new ObjectOutputStream(       new FileOutputStream(&quot;/Users/Desktop/files/temp.txt&quot;));   oos.writeObject(linkedListHead); //writing head of linked list   oos.close(); </code></pre> <p>\nBut if you want restricted serialization or don t want some portion of your object to be serialized then use Externalizable.\nThe Externalizable interface extends the Serializable interface and adds two methods  writeExternal() and readExternal().\nWhile working with Externalizable we should remember that the default constructer should be public else the code will throw exception.\nHere if you comment the default constructer then the code will throw below exception:</p> <pre><code> java.io.InvalidClassException: javaserialization.\nWe can observe that as password is sensitive information  so i am not serializing it in writeExternal(ObjectOutput oo) method and not setting the value of same in readExternal(ObjectInput oi).\nWe can observe as we are not setting the value of passWord so it s null.</p> <p>\n<code>Externalizable</code> interface contains two methods: <code>writeExternal()</code> and <code>readExternal()</code>.</li> <li><strong>\nIncompatible changes to classes are those changes for which the guarantee of interoperability cannot be maintained like Deleting fields etc.</p> </blockquote> <ol start= 4 >\nYou can support different versions of your object.</li> <li><strong>public No-arg constructor</strong>:  <code>Serializable</code> uses reflection to construct object and does not require no arg constructor.\n<p>Serialization uses certain default behaviors to store and later recreate the object.\n<p>Externalization is used in the rare cases that you really want to store and rebuild your object in a completely different way and without using the default serialization mechanisms for data fields.\nA Java object is only serializable.\nMost of the java class are serializable</em>.</p>\n<p>Object Serialization produces a stream with information about the Java classes for the objects which are being saved.\nFor serializable objects  sufficient information is kept to restore those objects even if a different (but compatible) version of the implementation of the class is present.\nThe Serializable interface is defined to identify classes which implement the serializable protocol:</p>\nThe serialization interface has no methods or fields and serves only to identify the semantics of being serializable.\nFor serializing/deserializing a class  either we can use default writeObject and readObject methods (or) we can overriding writeObject and readObject methods from a class.</li>\nThe values of the non-transient and non-static fields of the class get serialized.</li> </ul>\n<p>For Externalizable objects  only the identity of the class of the object is saved by the container; the class must save and restore the contents.\nThe Externalizable interface has two methods  an externalizable object must implement a writeExternal and readExternal methods to save/restore the state of an object.</li> <li>\nProgrammer has to take care of which objects to be serialized.\nAs a programmer take care of Serialization So  here transient keyword will not restrict any object in Serialization process.</li> <li>\nWhen an Externalizable object is reconstructed  an instance is created using the public no-arg constructor  then the readExternal method called.\n<p>Default serialization is somewhat verbose  and assumes the widest possible usage scenario of the serialized object  and accordingly the default format (Serializable) annotates the resultant stream with information about the class of the serialized object.</p>\n<p>Externalization give the producer of the object stream complete control over the precise class meta-data (if any) beyond the minimal required identification of the class (e.g. its name).\nThis is clearly desirable in certain situations  such as closed environments  where producer of the object stream and its consumer (which reifies the object from the stream) are matched  and additional metadata about the class serves no purpose and degrades performance.</p>\n<p>Additionally (as Uri point out) externalization also provides for complete control over the encoding of the data in the stream corresponding to Java types.\nFor (a contrived) example  you may wish to record boolean true as  Y  and false as  N .\n<p>The Externalizable interface was not actually provided to optimize the serialization process performance!\nbut to provide means of implementing your own custom processing and offer complete control over the format and contents of the stream for an object and its super types!</p>\n<p>When considering options for improving performance  don t forget custom serialization.\nYou can let Java do what it does well  or at least good enough  <em>for free</em>  and provide custom support for what it does badly.\n<p>There are so many difference exist between Serializable and Externalizable but when we compare difference between custom Serializable(overrided writeObject() &amp; readObject()) and Externalizable  then we find that custom implementation is tightly bind with ObjectOutputStream class where as in Externalizable case   we ourself provide an implementation of ObjectOutput which may be ObjectOutputStream class or it could be some other like org.apache.mina.filter.codec.serialization.ObjectSerializationOutputStream</p>\nWe can comment below two method and use default serialization process as well              Sequence of class attributes in read and write methods MUST BE same.\nWe can define custom validation or business rules inside read/write methods.\nplease check in/out object case of Externalizable.\nWhere as Outstream/Instream are tightly bind to classes.\nWe can extends ObjectOutputStream/ObjectInputStream but it will a bit difficult to use.</p>\n<code>Externalizable</code> contains 2 methods  <code>readExternal</code> and <code>writeExternal</code>.\nallows the implementer to decide how an object is serialized  where as <code>Serializable</code>\n<p>For long-term persistence  the class must be able to decode this form  which restricts the changes you can make to class design.\n<p>Serialization can also lead to security problems.\nBy being able to serialize any object it has a reference to  a class can access data it would not normally be able to (by parsing the resultant byte data).</p>\n<p>There are other issues  such as the serialized form of inner classes not being well defined.</p>\nNet people got it wrong this time around  would have been better to make everything serializable by default and only need to mark those classes that can t be safely serialized instead.</p>\n<p>For example in Smalltalk (a language created in 70s) every object is serializable by default.\nI have no idea why this is not the case in Java  considering the fact that the vast majority of objects are safe to serialize and just a few of them aren t.\n<p>Marking an object as serializable (with an interface) doesn t magically make that object serializable  <strong>it was serializable all along</strong>  it s just that now you expressed something that the system could have found on his own  so I see no real good reason for serialization being the way it is now.</p>\n<p>Not everything is genuinely serializable.\nYou could serialize the data/state of your socket object  but the essence of an active connection would be lost.</p>\n<p>The main role of Serializable in Java is to actually make  by default  all other objects nonserializable.\nSerialization is a very dangerous mechanism  especially in its default implementation.\nHence  like friendship in C++  it is off by default  even if it costs a little to make things serializable.</p>\n<p>Serialization adds constraints and potential problems since structure compatibility is not insured.\nSo the effort you d spend making the class serializble properly dwarves the cost of adding the interface.\n<p>For some classes  especially those that represent something more physical like a File  a Socket  a Thread  or a DB connection  it makes absolutely no sense to serialize instances.\nFor many others  Serialization may be problematic because it destroys uniqueness constraints  or simply forces you to deal with instances of different versions of a class  which you may not want to.</p>\n<p>Arguably  it might have been better to make everything Serializable by default and make classes non-serializable through a keyword or marker interface - but then  those who should use that option probably would not think about it.\n<p>Apparently everything was serializable in some preliminary designs  but because of security and correctness concerns the final design ended up as we all know.</p>\n<p>Having to state explicitely that instances of a certain class are Serializable the language forces you to think about if you you should allow that.\nFor simple value objects serialization is trivial  but in more complex cases you need to really think things through.</p>\n<p>By just relying on the standard serialization support of the JVM you expose yourself to all kinds of nasty versioning issues.</p>\n<p>Uniqueness  references to  real  resources  timers and lots of other types of artifacts are NOT candidates for serialization.</p>\nOther languages happily try serializing everything that doesn t jump on a tree after you ve counted to 10.\nAn Object should default to be serializable.\n<p>So  what you basically need to do is read all the properties of your 3rd-party class yourself.'],"['All Known Implementing Classes:\nAbstractAction, BasicDesktopPaneUI.CloseAction, BasicDesktopPaneUI.MaximizeAction, BasicDesktopPaneUI.MinimizeAction, BasicDesktopPaneUI.NavigateAction, BasicDesktopPaneUI.OpenAction, BasicFileChooserUI.ApproveSelectionAction, BasicFileChooserUI.CancelSelectionAction, BasicFileChooserUI.ChangeToParentDirectoryAction, BasicFileChooserUI.GoHomeAction, BasicFileChooserUI.NewFolderAction, BasicFileChooserUI.UpdateAction, BasicInternalFrameTitlePane.CloseAction, BasicInternalFrameTitlePane.IconifyAction, BasicInternalFrameTitlePane.MaximizeAction, BasicInternalFrameTitlePane.MoveAction, BasicInternalFrameTitlePane.RestoreAction, BasicInternalFrameTitlePane.SizeAction, BasicSliderUI.ActionScroller, BasicTreeUI.TreeCancelEditingAction, BasicTreeUI.TreeHomeAction, BasicTreeUI.TreeIncrementAction, BasicTreeUI.TreePageAction, BasicTreeUI.TreeToggleAction, BasicTreeUI.TreeTraverseAction, MetalFileChooserUI.DirectoryComboBoxAction, TextAction, DefaultEditorKit.BeepAction, DefaultEditorKit.CopyAction, DefaultEditorKit.CutAction, DefaultEditorKit.DefaultKeyTypedAction, DefaultEditorKit.InsertBreakAction, DefaultEditorKit.InsertContentAction, DefaultEditorKit.InsertTabAction, DefaultEditorKit.PasteAction, StyledEditorKit.StyledTextAction, HTMLEditorKit.HTMLTextAction, StyledEditorKit.AlignmentAction, StyledEditorKit.BoldAction, StyledEditorKit.FontFamilyAction, StyledEditorKit.FontSizeAction, StyledEditorKit.ForegroundAction, StyledEditorKit.ItalicAction, StyledEditorKit.UnderlineAction, HTMLEditorKit.InsertHTMLTextAction, AbstractBorder, BasicBorders.ButtonBorder, BasicBorders.FieldBorder, BasicBorders.MarginBorder, BasicBorders.MenuBarBorder, BevelBorder, CompoundBorder, EmptyBorder, EtchedBorder, LineBorder, MetalBorders.ButtonBorder, MetalBorders.Flush3DBorder, MetalBorders.InternalFrameBorder, MetalBorders.MenuBarBorder, MetalBorders.MenuItemBorder, MetalBorders.OptionDialogBorder, MetalBorders.PaletteBorder, MetalBorders.PopupMenuBorder, MetalBorders.ScrollPaneBorder, MetalBorders.TableHeaderBorder, MetalBorders.ToolBarBorder, TitledBorder, BasicBorders.RadioButtonBorder, BasicBorders.RolloverButtonBorder, BasicBorders.ToggleButtonBorder, BorderUIResource.BevelBorderUIResource, SoftBevelBorder, BorderUIResource.CompoundBorderUIResource, BorderUIResource.EmptyBorderUIResource, MatteBorder, BorderUIResource.EtchedBorderUIResource, BorderUIResource.LineBorderUIResource, MetalBorders.RolloverButtonBorder, MetalBorders.ToggleButtonBorder, MetalBorders.TextFieldBorder, BorderUIResource.TitledBorderUIResource, BorderUIResource.MatteBorderUIResource, AbstractButton.ButtonChangeListener, AbstractCellEditor, DefaultCellEditor, AbstractDocument, DefaultStyledDocument, PlainDocument, HTMLDocument, AbstractDocument.AbstractElement, AbstractDocument.BranchElement, AbstractDocument.LeafElement, DefaultStyledDocument.SectionElement, HTMLDocument.BlockElement, HTMLDocument.RunElement, AbstractListModel, BasicDirectoryModel, DefaultComboBoxModel, DefaultListModel, MetalFileChooserUI.DirectoryComboBoxModel, MetalFileChooserUI.FilterComboBoxModel, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractOwnableSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedSynchronizer, AbstractQueuedLongSynchronizer, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer, AbstractQueuedSynchronizer.ConditionObject, AbstractTableModel, DefaultTableModel, AbstractUndoableEdit, AbstractDocument.ElementEdit, CompoundEdit, DefaultStyledDocument.AttributeUndoableEdit, StateEdit, AbstractDocument.DefaultDocumentEvent, UndoManager, ActionMap, ActionMapUIResource, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AffineTransform, Arc2D.Double, Arc2D.Float, ArrayBlockingQueue, ArrayDeque, ArrayList, AttributeList, RoleList, RoleUnresolvedList, AtomicBoolean, AtomicInteger, AtomicIntegerArray, AtomicLong, AtomicLongArray, AtomicReference, AtomicReferenceArray, Attribute, AttributedCharacterIterator.Attribute, Format.Field, TextAttribute, DateFormat.Field, MessageFormat.Field, NumberFormat.Field, AttributeList, AuthorizeCallback, AWTKeyStroke, KeyStroke, BaseRowSet, BasicComboBoxRenderer, BasicComboBoxRenderer.UIResource, BasicIconFactory, BasicLookAndFeel, MetalLookAndFeel, SynthLookAndFeel, BasicPermission, AudioPermission, AuthPermission, AWTPermission, DelegationPermission, LoggingPermission, ManagementPermission, MBeanServerPermission, MBeanTrustPermission, NetPermission, PropertyPermission, ReflectPermission, RuntimePermission, SecurityPermission, SerializablePermission, SQLPermission, SSLPermission, SubjectDelegationPermission, WebServicePermission, BeanContextChildSupport, BeanContextSupport, BeanContextServicesSupport, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport, BeanContextSupport.BCSChild, BeanContextServicesSupport.BCSSChild, BitSet, Boolean, BorderLayout, BorderUIResource, BoxLayout, DefaultMenuLayout, ButtonGroup, Calendar, GregorianCalendar, CardLayout, Certificate, X509Certificate, Certificate.CertificateRep, CertPath, CertPath.CertPathRep, Character, CheckboxGroup, ChoiceCallback, RealmChoiceCallback, Class, ClassDesc, CodeSigner, CodeSource, Color, ColorUIResource, SystemColor, ColorSpace, ICC_ColorSpace, Component, Button, Canvas, Checkbox, Choice, Container, Label, List, Scrollbar, TextComponent, BasicSplitPaneDivider, CellRendererPane, DefaultTreeCellEditor.EditorContainer, JComponent, Panel, ScrollPane, Window, TextArea, TextField, AbstractButton, BasicInternalFrameTitlePane, Box, Box.Filler, JColorChooser, JComboBox, JFileChooser, JInternalFrame, JInternalFrame.JDesktopIcon, JLabel, JLayeredPane, JList, JMenuBar, JOptionPane, JPanel, JPopupMenu, JProgressBar, JRootPane, JScrollBar, JScrollPane, JSeparator, JSlider, JSpinner, JSplitPane, JTabbedPane, JTable, JTableHeader, JTextComponent, JToolBar, JToolTip, JTree, JViewport, Applet, BasicToolBarUI.DragWindow, Dialog, Frame, JWindow, JButton, JMenuItem, JToggleButton, MetalInternalFrameTitlePane, DefaultListCellRenderer, DefaultTableCellRenderer, DefaultTreeCellRenderer, JDesktopPane, BasicInternalFrameTitlePane.SystemMenuBar, AbstractColorChooserPanel, JSpinner.DefaultEditor, BasicComboPopup, JScrollPane.ScrollBar, JPopupMenu.Separator, JToolBar.Separator, JEditorPane, JTextArea, JTextField, JApplet, FileDialog, JDialog, JFrame, BasicArrowButton, MetalComboBoxButton, JCheckBoxMenuItem, JMenu, JRadioButtonMenuItem, JCheckBox, JRadioButton, DefaultListCellRenderer.UIResource, MetalFileChooserUI.FileRenderer, MetalFileChooserUI.FilterComboBoxRenderer, DefaultTableCellRenderer.UIResource, JSpinner.DateEditor, JSpinner.ListEditor, JSpinner.NumberEditor, MetalComboBoxUI.MetalComboPopup, JTextPane, DefaultTreeCellEditor.DefaultTextField, JFormattedTextField, JPasswordField, MetalScrollButton, Component.AccessibleAWTComponent, Box.Filler.AccessibleBoxFiller, Button.AccessibleAWTButton, Canvas.AccessibleAWTCanvas, Checkbox.AccessibleAWTCheckbox, Choice.AccessibleAWTChoice, Container.AccessibleAWTContainer, Label.AccessibleAWTLabel, List.AccessibleAWTList, List.AccessibleAWTList.AccessibleAWTListChild, Scrollbar.AccessibleAWTScrollBar, TextComponent.AccessibleAWTTextComponent, Box.AccessibleBox, CellRendererPane.AccessibleCellRendererPane, JComponent.AccessibleJComponent, Panel.AccessibleAWTPanel, ScrollPane.AccessibleAWTScrollPane, Window.AccessibleAWTWindow, TextArea.AccessibleAWTTextArea, TextField.AccessibleAWTTextField, AbstractButton.AccessibleAbstractButton, JColorChooser.AccessibleJColorChooser, JComboBox.AccessibleJComboBox, JDesktopPane.AccessibleJDesktopPane, JFileChooser.AccessibleJFileChooser, JInternalFrame.AccessibleJInternalFrame, JInternalFrame.JDesktopIcon.AccessibleJDesktopIcon, JLabel.AccessibleJLabel, JLayeredPane.AccessibleJLayeredPane, JList.AccessibleJList, JMenuBar.AccessibleJMenuBar, JOptionPane.AccessibleJOptionPane, JPanel.AccessibleJPanel, JPopupMenu.AccessibleJPopupMenu, JProgressBar.AccessibleJProgressBar, JRootPane.AccessibleJRootPane, JScrollBar.AccessibleJScrollBar, JScrollPane.AccessibleJScrollPane, JSeparator.AccessibleJSeparator, JSlider.AccessibleJSlider, JSpinner.AccessibleJSpinner, JSplitPane.AccessibleJSplitPane, JTabbedPane.AccessibleJTabbedPane, JTable.AccessibleJTable, JTableHeader.AccessibleJTableHeader, JTextComponent.AccessibleJTextComponent, JToolBar.AccessibleJToolBar, JToolTip.AccessibleJToolTip, JTree.AccessibleJTree, JViewport.AccessibleJViewport, Applet.AccessibleApplet, Dialog.AccessibleAWTDialog, Frame.AccessibleAWTFrame, JWindow.AccessibleJWindow, JButton.AccessibleJButton, JMenuItem.AccessibleJMenuItem, JToggleButton.AccessibleJToggleButton, JEditorPane.AccessibleJEditorPane, JTextArea.AccessibleJTextArea, JTextField.AccessibleJTextField, JApplet.AccessibleJApplet, JDialog.AccessibleJDialog, JFrame.AccessibleJFrame, JCheckBoxMenuItem.AccessibleJCheckBoxMenuItem, JMenu.AccessibleJMenu, JRadioButtonMenuItem.AccessibleJRadioButtonMenuItem, JCheckBox.AccessibleJCheckBox, JRadioButton.AccessibleJRadioButton, JEditorPane.AccessibleJEditorPaneHTML, JEditorPane.JEditorPaneAccessibleHypertextSupport, JPasswordField.AccessibleJPasswordField, ComponentOrientation, CompositeDataSupport, ConcurrentHashMap, ConcurrentLinkedQueue, ConcurrentSkipListMap, ConcurrentSkipListSet, ConfirmationCallback, ContainerOrderFocusTraversalPolicy, DefaultFocusTraversalPolicy, ContentModel, CopyOnWriteArrayList, CopyOnWriteArraySet, CSS, CubicCurve2D.Double, CubicCurve2D.Float, Currency, Cursor, Date, Date, Time, Timestamp, DateFormatSymbols, DateTimeSyntax, DateTimeAtCompleted, DateTimeAtCreation, DateTimeAtProcessing, JobHoldUntil, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, JToggleButton.ToggleButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultComboBoxModel, DefaultDesktopManager, DefaultFormatter, InternationalFormatter, MaskFormatter, DateFormatter, NumberFormatter, DefaultFormatterFactory, DefaultListCellRenderer, DefaultListSelectionModel, DefaultMutableTreeNode, JTree.DynamicUtilTreeNode, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultTableCellRenderer, DefaultTableColumnModel, DefaultTableModel, DefaultTreeModel, DefaultTreeSelectionModel, JTree.EmptySelectionModel, DelegationPermission, Dimension, DimensionUIResource, DocFlavor, DocFlavor.BYTE_ARRAY, DocFlavor.CHAR_ARRAY, DocFlavor.INPUT_STREAM, DocFlavor.READER, DocFlavor.SERVICE_FORMATTED, DocFlavor.STRING, DocFlavor.URL, DragGestureRecognizer, MouseDragGestureRecognizer, DragSource, DragSourceContext, DropTarget, DropTargetContext, EditorKit, DefaultEditorKit, StyledEditorKit, HTMLEditorKit, RTFEditorKit, Element, Ellipse2D.Double, Ellipse2D.Float, EmptyBorder, Enum, Authenticator.RequestorType, ClientInfoStatus, Component.BaselineResizeBehavior, Desktop.Action, Diagnostic.Kind, Dialog.ModalExclusionType, Dialog.ModalityType, DropMode, ElementKind, ElementType, Formatter.BigDecimalLayoutForm, FormSubmitEvent.MethodType, GroupLayout.Alignment, JavaFileObject.Kind, JTable.PrintMode, KeyRep.Type, LayoutStyle.ComponentPlacement, MemoryType, MessageContext.Scope, Modifier, MultipleGradientPaint.ColorSpaceType, MultipleGradientPaint.CycleMethod, NestingKind, Normalizer.Form, Proxy.Type, Resource.AuthenticationType, RetentionPolicy, RoundingMode, RowFilter.ComparisonType, RowIdLifetime, RowSorterEvent.Type, Service.Mode, SortOrder, SourceVersion, SSLEngineResult.HandshakeStatus, SSLEngineResult.Status, StandardLocation, SwingWorker.StateValue, Thread.State, TimeUnit, TrayIcon.MessageType, TypeKind, XmlAccessOrder, XmlAccessType, XmlNsForm, EnumMap, EnumSet, EnumSyntax, Chromaticity, ColorSupported, Compression, Fidelity, Finishings, JobSheets, JobState, JobStateReason, Media, MultipleDocumentHandling, OrientationRequested, PDLOverrideSupported, PresentationDirection, PrinterIsAcceptingJobs, PrinterState, PrinterStateReason, PrintQuality, ReferenceUriSchemesSupported, Severity, SheetCollate, Sides, MediaName, MediaSizeName, MediaTray, Event, EventListenerList, EventObject, AWTEvent, BeanContextEvent, CaretEvent, ChangeEvent, ConnectionEvent, DragGestureEvent, DragSourceEvent, DropTargetEvent, FlavorEvent, HandshakeCompletedEvent, HyperlinkEvent, LineEvent, ListDataEvent, ListSelectionEvent, MenuEvent, NamingEvent, NamingExceptionEvent, NodeChangeEvent, Notification, PopupMenuEvent, PreferenceChangeEvent, PrintEvent, PropertyChangeEvent, RowSetEvent, RowSorterEvent, SSLSessionBindingEvent, StatementEvent, TableColumnModelEvent, TableModelEvent, TreeExpansionEvent, TreeModelEvent, TreeSelectionEvent, UndoableEditEvent, UnsolicitedNotificationEvent, ActionEvent, AdjustmentEvent, AncestorEvent, ComponentEvent, HierarchyEvent, InputMethodEvent, InternalFrameEvent, InvocationEvent, ItemEvent, TextEvent, BeanContextMembershipEvent, BeanContextServiceAvailableEvent, BeanContextServiceRevokedEvent, DragSourceDragEvent, DragSourceDropEvent, DropTargetDragEvent, DropTargetDropEvent, HTMLFrameHyperlinkEvent, AttributeChangeNotification, JMXConnectionNotification, MBeanServerNotification, MonitorNotification, RelationNotification, TimerNotification, PrintJobAttributeEvent, PrintJobEvent, PrintServiceAttributeEvent, IndexedPropertyChangeEvent, ContainerEvent, FocusEvent, InputEvent, PaintEvent, WindowEvent, FormSubmitEvent, KeyEvent, MouseEvent, MenuKeyEvent, MenuDragMouseEvent, MouseWheelEvent, File, FilePermission, FlowLayout, Font, FontUIResource, FontMetrics, Format, DateFormat, MessageFormat, NumberFormat, SimpleDateFormat, ChoiceFormat, DecimalFormat, GapContent, GraphicsConfigTemplate, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GuardedObject, HashAttributeSet, HashDocAttributeSet, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashDocAttributeSet, HashMap, LinkedHashMap, PrinterStateReasons, HashPrintJobAttributeSet, HashPrintRequestAttributeSet, HashPrintServiceAttributeSet, HashSet, JobStateReasons, LinkedHashSet, Hashtable, Properties, UIDefaults, Provider, AuthProvider, HTML.UnknownTag, HTMLEditorKit.LinkController, ICC_Profile, ICC_ProfileGray, ICC_ProfileRGB, IconUIResource, Identity, IdentityScope, Signer, IdentityHashMap, ImageIcon, ImageIcon.AccessibleImageIcon, InetAddress, Inet4Address, Inet6Address, InputMap, ComponentInputMap, InputMapUIResource, ComponentInputMapUIResource, Insets, InsetsUIResource, IntegerSyntax, Copies, JobImpressions, JobImpressionsCompleted, JobKOctets, JobKOctetsProcessed, JobMediaSheets, JobMediaSheetsCompleted, JobPriority, JobPrioritySupported, NumberOfDocuments, NumberOfInterveningJobs, NumberUp, PagesPerMinute, PagesPerMinuteColor, QueuedJobCount, JAXBElement, JComponent, JFormattedTextField.AbstractFormatter, JMenu.WinListener, JMXPrincipal, JMXServiceURL, JRootPane.RootLayout, JTabbedPane, JTabbedPane.ModelListener, JTree.TreeSelectionRedirector, JViewport.ViewListener, KerberosPrincipal, KerberosTicket, KeyPair, KeyRep, LanguageCallback, LayoutFocusTraversalPolicy, Lease, Level, Line2D.Double, Line2D.Float, LinkedBlockingDeque, LinkedBlockingQueue, LinkedHashSet, LinkedList, Locale, LogRecord, MarshalledObject, MathContext, MBeanFeatureInfo, MBeanAttributeInfo, MBeanConstructorInfo, MBeanNotificationInfo, MBeanOperationInfo, MBeanParameterInfo, ModelMBeanAttributeInfo, OpenMBeanAttributeInfoSupport, ModelMBeanConstructorInfo, OpenMBeanConstructorInfoSupport, ModelMBeanNotificationInfo, ModelMBeanOperationInfo, OpenMBeanOperationInfoSupport, OpenMBeanParameterInfoSupport, MBeanInfo, ModelMBeanInfoSupport, OpenMBeanInfoSupport, MediaTracker, MenuComponent, MenuBar, MenuItem, CheckboxMenuItem, Menu, PopupMenu, MenuComponent.AccessibleAWTMenuComponent, MenuBar.AccessibleAWTMenuBar, MenuItem.AccessibleAWTMenuItem, CheckboxMenuItem.AccessibleAWTCheckboxMenuItem, Menu.AccessibleAWTMenu, PopupMenu.AccessibleAWTPopupMenu, MenuShortcut, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.TreeLeafIcon, MetalIconFactory.FolderIcon16, MetalIconFactory.TreeFolderIcon, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, ModificationItem, NameCallback, NameClassPair, Binding, SearchResult, NotificationResult, Number, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, NumericShaper, ObjectInstance, ObjectStreamClass, ObjID, OpenType, ArrayType, CompositeType, SimpleType, TabularType, Option, OverlayLayout, ParameterBlock, ParserDelegator, PasswordCallback, Path2D.Double, Path2D.Float, GeneralPath, Pattern, Permission, AllPermission, MBeanPermission, PrivateCredentialPermission, ServicePermission, SocketPermission, UnresolvedPermission, PermissionCollection, Permissions, Permissions, Point, Point2D.Double, Point2D.Float, Polygon, PriorityBlockingQueue, PriorityQueue, PropertyChangeSupport, SwingPropertyChangeSupport, Proxy, QName, QuadCurve2D.Double, QuadCurve2D.Float, QueryEval, Random, SecureRandom, Rdn, Rectangle, DefaultCaret, BasicTextUI.BasicCaret, Rectangle2D.Double, Rectangle2D.Float, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, BinaryRefAddr, StringRefAddr, Reference, LinkRef, RemoteObject, RemoteObjectInvocationHandler, RemoteServer, RemoteStub, Activatable, UnicastRemoteObject, ActivationGroup_Stub, RMIConnectionImpl_Stub, RMIServerImpl_Stub, ActivationGroup, ResolutionSyntax, PrinterResolution, ResolveResult, RMIConnector, Role, RoleInfo, RoleResult, RoleUnresolved, RoundRectangle2D.Double, RoundRectangle2D.Float, RowSetMetaDataImpl, ScrollPaneAdjustable, ScrollPaneLayout, ScrollPaneLayout.UIResource, SealedObject, SearchControls, SecureRandomSpi, Semaphore, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, ServicePermission, SetOfIntegerSyntax, CopiesSupported, JobImpressionsSupported, JobKOctetsSupported, JobMediaSheetsSupported, NumberUpSupported, PageRanges, SignedObject, SimpleAttributeSet, Size2DSyntax, MediaSize, SizeRequirements, SocketAddress, InetSocketAddress, SocketPermission, SpinnerDateModel, SpinnerListModel, SpinnerNumberModel, SslRMIClientSocketFactory, StackTraceElement, String, StringBuffer, StringBuilder, StringContent, Stub, _Remote_Stub, StyleContext, StyleSheet, StyleContext.NamedStyle, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SynchronousQueue, SystemColor, TableColumn, TabSet, TabStop, TabularDataSupport, TargetedNotification, TextInputCallback, RealmCallback, TextOutputCallback, TextSyntax, DocumentName, JobMessageFromOperator, JobName, JobOriginatingUserName, OutputDeviceAssigned, PrinterInfo, PrinterLocation, PrinterMakeAndModel, PrinterMessageFromOperator, PrinterName, RequestingUserName, Throwable, Error, Exception, AnnotationFormatError, AssertionError, AWTError, CoderMalfunctionError, FactoryConfigurationError, FactoryConfigurationError, IOError, LinkageError, ServiceConfigurationError, ThreadDeath, TransformerFactoryConfigurationError, VirtualMachineError, AclNotFoundException, ActivationException, AlreadyBoundException, ApplicationException, AWTException, BackingStoreException, BadAttributeValueExpException, BadBinaryOpValueExpException, BadLocationException, BadStringOperationException, BrokenBarrierException, CertificateException, ClassNotFoundException, CloneNotSupportedException, DataFormatException, DatatypeConfigurationException, DestroyFailedException, ExecutionException, ExpandVetoException, FontFormatException, GeneralSecurityException, GSSException, IllegalAccessException, IllegalClassFormatException, InstantiationException, InterruptedException, IntrospectionException, InvalidApplicationException, InvalidMidiDataException, InvalidPreferencesFormatException, InvalidTargetObjectTypeException, InvocationTargetException, IOException, JAXBException, JMException, KeySelectorException, LastOwnerException, LineUnavailableException, MarshalException, MidiUnavailableException, MimeTypeParseException, NamingException, NoninvertibleTransformException, NoSuchFieldException, NoSuchMethodException, NotBoundException, NotOwnerException, ParseException, ParserConfigurationException, PrinterException, PrintException, PrivilegedActionException, PropertyVetoException, RefreshFailedException, RemarshalException, RuntimeException, SAXException, ScriptException, ServerNotActiveException, SOAPException, SQLException, TimeoutException, TooManyListenersException, TransformerException, TransformException, UnmodifiableClassException, UnsupportedAudioFileException, UnsupportedCallbackException, UnsupportedFlavorException, UnsupportedLookAndFeelException, URIReferenceException, URISyntaxException, UserException, XMLParseException, XMLSignatureException, XMLStreamException, XPathException, ClassCircularityError, ClassFormatError, ExceptionInInitializerError, IncompatibleClassChangeError, NoClassDefFoundError, UnsatisfiedLinkError, VerifyError, InternalError, OutOfMemoryError, StackOverflowError, UnknownError, UnknownGroupException, UnknownObjectException, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, ServerCloneException, BadPaddingException, CertificateException, CertPathBuilderException, CertPathValidatorException, CertStoreException, CRLException, DigestException, ExemptionMechanismException, IllegalBlockSizeException, InvalidAlgorithmParameterException, InvalidKeySpecException, InvalidParameterSpecException, KeyException, KeyStoreException, LoginException, NoSuchAlgorithmException, NoSuchPaddingException, NoSuchProviderException, ShortBufferException, SignatureException, UnrecoverableEntryException, ChangedCharSetException, CharacterCodingException, CharConversionException, ClosedChannelException, EOFException, FileLockInterruptionException, FileNotFoundException, FilerException, HttpRetryException, IIOException, InterruptedIOException, InvalidPropertiesFormatException, JMXProviderException, JMXServerErrorException, MalformedURLException, ObjectStreamException, ProtocolException, RemoteException, SaslException, SocketException, SSLException, SyncFailedException, UnknownHostException, UnknownServiceException, UnsupportedEncodingException, UTFDataFormatException, ZipException, MarshalException, PropertyException, UnmarshalException, ValidationException, MBeanException, OpenDataException, OperationsException, ReflectionException, RelationException, AttributeInUseException, AttributeModificationException, CannotProceedException, CommunicationException, ConfigurationException, ContextNotEmptyException, InsufficientResourcesException, InterruptedNamingException, InvalidAttributeIdentifierException, InvalidAttributesException, InvalidAttributeValueException, InvalidNameException, InvalidSearchControlsException, InvalidSearchFilterException, LimitExceededException, LinkException, NameAlreadyBoundException, NameNotFoundException, NamingSecurityException, NoInitialContextException, NoSuchAttributeException, NotContextException, OperationNotSupportedException, PartialResultException, ReferralException, SchemaViolationException, ServiceUnavailableException, PrinterAbortException, PrinterIOException, AnnotationTypeMismatchException, ArithmeticException, ArrayStoreException, BufferOverflowException, BufferUnderflowException, CannotRedoException, CannotUndoException, ClassCastException, CMMException, ConcurrentModificationException, DataBindingException, DOMException, EmptyStackException, EnumConstantNotPresentException, EventException, IllegalArgumentException, IllegalMonitorStateException, IllegalPathStateException, IllegalStateException, ImagingOpException, IncompleteAnnotationException, IndexOutOfBoundsException, JMRuntimeException, LSException, MalformedParameterizedTypeException, MirroredTypeException, MirroredTypesException, MissingResourceException, NegativeArraySizeException, NoSuchElementException, NoSuchMechanismException, NullPointerException, ProfileDataException, ProviderException, RangeException, RasterFormatException, RejectedExecutionException, SecurityException, SystemException, TypeConstraintException, TypeNotPresentException, UndeclaredThrowableException, UnknownAnnotationValueException, UnknownElementException, UnknownTypeException, UnmodifiableSetException, UnsupportedOperationException, WebServiceException, XPathException, SAXNotRecognizedException, SAXNotSupportedException, SAXParseException, BatchUpdateException, RowSetWarning, SerialException, SQLClientInfoException, SQLNonTransientException, SQLRecoverableException, SQLTransientException, SQLWarning, SyncFactoryException, SyncProviderException, TransformerConfigurationException, AdapterAlreadyExists, AdapterInactive, AdapterNonExistent, AlreadyBound, BadKind, Bounds, Bounds, CannotProceed, DuplicateName, FormatMismatch, ForwardRequest, ForwardRequest, InconsistentTypeCode, InconsistentTypeCode, Invalid, InvalidAddress, InvalidName, InvalidName, InvalidName, InvalidPolicy, InvalidSeq, InvalidSlot, InvalidTypeForEncoding, InvalidValue, InvalidValue, NoContext, NoServant, NotEmpty, NotFound, ObjectAlreadyActive, ObjectNotActive, PolicyError, ServantAlreadyActive, ServantNotActive, TypeMismatch, TypeMismatch, TypeMismatch, UnknownEncoding, UnknownUserException, WrongAdapter, WrongPolicy, WrongTransaction, XPathExpressionException, XPathFactoryConfigurationException, GenericSignatureFormatError, UnsupportedClassVersionError, AbstractMethodError, IllegalAccessError, InstantiationError, NoSuchFieldError, NoSuchMethodError, ZipError, CertificateEncodingException, CertificateExpiredException, CertificateNotYetValidException, CertificateParsingException, InvalidKeyException, KeyManagementException, AccountException, CredentialException, FailedLoginException, UnrecoverableKeyException, MalformedInputException, UnmappableCharacterException, AsynchronousCloseException, IIOInvalidTreeException, SocketTimeoutException, InvalidClassException, InvalidObjectException, NotActiveException, NotSerializableException, OptionalDataException, StreamCorruptedException, WriteAbortedException, AccessException, ActivateFailedException, ConnectException, ConnectIOException, ExportException, MarshalException, NoSuchObjectException, ServerError, ServerException, ServerRuntimeException, SkeletonMismatchException, SkeletonNotFoundException, StubNotFoundException, UnexpectedException, UnknownHostException, UnmarshalException, AuthenticationException, BindException, ConnectException, NoRouteToHostException, PortUnreachableException, SSLHandshakeException, SSLKeyException, SSLPeerUnverifiedException, SSLProtocolException, JarException, MBeanRegistrationException, AttributeNotFoundException, InstanceAlreadyExistsException, InstanceNotFoundException, IntrospectionException, InvalidAttributeValueException, ListenerNotFoundException, MalformedObjectNameException, NotCompliantMBeanException, ServiceNotFoundException, InvalidRelationIdException, InvalidRelationServiceException, InvalidRelationTypeException, InvalidRoleInfoException, InvalidRoleValueException, RelationNotFoundException, RelationServiceNotRegisteredException, RelationTypeNotFoundException, RoleInfoNotFoundException, RoleNotFoundException, SizeLimitExceededException, TimeLimitExceededException, LinkLoopException, MalformedLinkException, AuthenticationException, AuthenticationNotSupportedException, NoPermissionException, LdapReferralException, IllegalCharsetNameException, IllegalFormatException, IllegalSelectorException, IllegalThreadStateException, InvalidKeyException, InvalidOpenTypeException, InvalidParameterException, KeyAlreadyExistsException, NumberFormatException, PatternSyntaxException, UnresolvedAddressException, UnsupportedAddressTypeException, UnsupportedCharsetException, AlreadyConnectedException, CancellationException, CancelledKeyException, ClosedSelectorException, ConnectionPendingException, FormatterClosedException, IllegalBlockingModeException, IllegalComponentStateException, InvalidDnDOperationException, InvalidMarkException, NoConnectionPendingException, NonReadableChannelException, NonWritableChannelException, NotYetBoundException, NotYetConnectedException, OverlappingFileLockException, ArrayIndexOutOfBoundsException, StringIndexOutOfBoundsException, MonitorSettingException, RuntimeErrorException, RuntimeMBeanException, RuntimeOperationsException, InputMismatchException, AccessControlException, RMISecurityException, ACTIVITY_COMPLETED, ACTIVITY_REQUIRED, BAD_CONTEXT, BAD_INV_ORDER, BAD_OPERATION, BAD_PARAM, BAD_QOS, BAD_TYPECODE, CODESET_INCOMPATIBLE, COMM_FAILURE, DATA_CONVERSION, FREE_MEM, IMP_LIMIT, IndirectionException, INITIALIZE, INTERNAL, INTF_REPOS, INVALID_ACTIVITY, INVALID_TRANSACTION, INV_FLAG, INV_IDENT, INV_OBJREF, INV_POLICY, MARSHAL, NO_IMPLEMENT, NO_MEMORY, NO_PERMISSION, NO_RESOURCES, NO_RESPONSE, OBJECT_NOT_EXIST, OBJ_ADAPTER, PERSIST_STORE, REBIND, TIMEOUT, TRANSACTION_MODE, TRANSACTION_REQUIRED, TRANSACTION_ROLLEDBACK, TRANSACTION_UNAVAILABLE, TRANSIENT, UNKNOWN, UnknownException, HeadlessException, ReadOnlyBufferException, ProtocolException, SQLDataException, SQLFeatureNotSupportedException, SQLIntegrityConstraintViolationException, SQLInvalidAuthorizationSpecException, SQLNonTransientConnectionException, SQLSyntaxErrorException, SQLTimeoutException, SQLTransactionRollbackException, SQLTransientConnectionException, DataTruncation, XPathFunctionException, AccountExpiredException, AccountLockedException, AccountNotFoundException, CredentialExpiredException, CredentialNotFoundException, ClosedByInterruptException, SocketSecurityException, DuplicateFormatFlagsException, FormatFlagsConversionMismatchException, IllegalFormatCodePointException, IllegalFormatConversionException, IllegalFormatFlagsException, IllegalFormatPrecisionException, IllegalFormatWidthException, MissingFormatArgumentException, MissingFormatWidthException, UnknownFormatConversionException, UnknownFormatFlagsException, HTTPException, SOAPFaultException, Timer, Timestamp, TimeZone, SimpleTimeZone, TransferHandler, TransformAttribute, TreeMap, TreePath, TreeSet, UID, UIManager, UnresolvedPermission, URI, URISyntax, Destination, PrinterMoreInfo, PrinterMoreInfoManufacturer, PrinterURI, URL, UUID, Vector, Stack, VetoableChangeSupport, ViewportLayout, VMID, X500Principal']","['Call toString on the JSONObject, and then serialize the string. JSONObject itself is not serializable.\n\nString jsonString = jsonObject.toString();']",['nan'],"[""The question 'JSONObject Not Serializable?' addresses the issue of why instances of the JSONObject class in Java are not serializable. Serialization is the process of converting an object into a byte stream, which can then be reverted back into a copy of the object. This is useful for saving objects to files, sending them over a network, or storing them in a database. However, the JSONObject class from the org.json library does not implement the Serializable interface, which is required for an object to be serializable in Java. This means that you cannot directly serialize a JSONObject instance using standard Java serialization mechanisms. The primary reason for this is that the JSONObject class is designed for lightweight JSON parsing and manipulation, and adding serialization support would increase its complexity and size. Additionally, the internal structure of a JSONObject may include non-serializable objects, which would further complicate the serialization process. To work around this limitation, you can convert the JSONObject to a string using its toString() method and then serialize the string, or use other libraries that provide serializable JSON objects.""]","['[\'[\\\'To address the issue of JSONObject not being serializable, we can use the Gson library to convert the JSONObject to a JSON string and then serialize it. Gson is a popular library for handling JSON in Java. Below is an example of how to achieve this.\\\\nimport com.google.gson.Gson;\\\\nimport org.json.JSONObject;\\\\npublic class JSONObjectSerializationExample {\\\\n    public static void main(String[] args) {\\\\n        // Create a sample JSONObject\\\\n        JSONObject jsonObject = new JSONObject();\\\\n        jsonObject.put(""name"", ""John"");\\\\n        jsonObject.put(""age"", 30);\\\\n        jsonObject.put(""city"", ""New York"");\\\\n\\\\n        // Convert JSONObject to JSON string using Gson\\\\n        Gson gson = new Gson();\\\\n        String jsonString = gson.toJson(jsonObject.toMap());\\\\n\\\\n        // Print the JSON string\\\\n        System.out.println(""Serialized JSON String: "" + jsonString);\\\\n    }\\\\n}\\\']\']']",0.0099009900990099,0.5,0.3333333333333333,1.0,0.125,0.25
io,InputStream,Convert InputStream to byte array in Java,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],['nan'],"['I use this.\n\npublic static byte[] toByteArray(InputStream is) throws IOException {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        try {\n            byte[] b = new byte[4096];\n            int n = 0;\n            while ((n = is.read(b)) != -1) {\n                output.write(b, 0, n);\n            }\n            return output.toByteArray();\n        } finally {\n            output.close();\n        }\n    }']",['nan'],"['To convert an InputStream to a byte array in Java, you need to read the data from the InputStream and store it in a byte array. This process typically involves creating a ByteArrayOutputStream, which is a class that implements an output stream where the data is written into a byte array. You read the data from the InputStream in chunks, usually using a buffer, and write these chunks to the ByteArrayOutputStream. Once all the data has been read and written, you can convert the ByteArrayOutputStream to a byte array using its toByteArray() method. This approach ensures that you efficiently handle the data and convert it into a byte array without knowing the size of the InputStream in advance.']","['[\'[\\\'To convert an InputStream to a byte array in Java, you can use the `ByteArrayOutputStream` class. This class allows you to write data to a byte array, and it provides a method to convert the written data to a byte array. Below is an example of how to achieve this:\\\\nimport java.io.ByteArrayOutputStream;\\\\nimport java.io.IOException;\\\\nimport java.io.InputStream;\\\\npublic class InputStreamToByteArray {\\\\n    public static void main(String[] args) throws IOException {\\\\n        // Example InputStream (you can replace this with your actual InputStream)\\\\n        InputStream inputStream = InputStreamToByteArray.class.getResourceAsStream(""/example.txt"");\\\\n        \\\\n        if (inputStream == null) {\\\\n            System.out.println(""InputStream is null. Make sure the file exists."");\\\\n            return;\\\\n        }\\\\n        \\\\n        byte[] byteArray = convertInputStreamToByteArray(inputStream);\\\\n        \\\\n        // Print the byte array\\\\n        for (byte b : byteArray) {\\\\n            System.out.print((char) b);\\\\n        }\\\\n    }\\\\n\\\\n    public static byte[] convertInputStreamToByteArray(InputStream inputStream) throws IOException {\\\\n        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\\\\n        int nRead;\\\\n        byte[] data = new byte[1024];\\\\n\\\\n        while ((nRead = inputStream.read(data, 0, data.length)) != -1) {\\\\n            buffer.write(data, 0, nRead);\\\\n        }\\\\n\\\\n        buffer.flush();\\\\n        return buffer.toByteArray();\\\\n    }\\\\n}\\\']\']']",0.0303030303030303,1.0,0.0666666666666666,1.0,0.2,1.0
io,InputStream,Java: InputStream too slow to read huge files,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],['nan'],"['I would try this\n\n// create the file so we have something to read.\nfinal String fileName = ""1.2.fasta"";\nFileOutputStream fos = new FileOutputStream(fileName);\nfos.write(new byte[54 * 1024 * 1024]);\nfos.close();\n\n// read the file in one hit.\nlong start = System.nanoTime();\nFileChannel fc = new FileInputStream(fileName).getChannel();\nByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());\nwhile (bb.remaining() > 0)\n    bb.getLong();\nlong time = System.nanoTime() - start;\nSystem.out.printf(""Took %.3f seconds to read %.1f MB%n"", time / 1e9, fc.size() / 1e6);\nfc.close();\n((DirectBuffer) bb).cleaner().clean();\nprints\n\nTook 0.016 seconds to read 56.6 MB']",['nan'],"['When dealing with large files in Java, using InputStream can sometimes be too slow due to its default buffer size and the way it handles data. InputStream reads data byte by byte, which can be inefficient for large files. To improve performance, consider using BufferedInputStream, which wraps around an InputStream and provides a larger buffer, reducing the number of I/O operations. Additionally, you can increase the buffer size to further enhance performance. Another approach is to use FileChannel and ByteBuffer from the java.nio package, which offer more efficient file reading capabilities by allowing you to read larger chunks of data at once. These methods can significantly speed up the process of reading large files compared to using InputStream alone.']","['[\'[\\\'To address the issue of reading huge files efficiently in Java, we can use a BufferedInputStream wrapped around a FileInputStream. This approach helps in reducing the number of I/O operations by buffering the input. Additionally, we can use a larger buffer size to further enhance the performance. Below is an example code that demonstrates how to read a large file efficiently using BufferedInputStream.\\\\nimport java.io.BufferedInputStream;\\\\nimport java.io.FileInputStream;\\\\nimport java.io.IOException;\\\\npublic class LargeFileReader {\\\\n    public static void main(String[] args) {\\\\n        String filePath = ""path/to/large/file.txt"";\\\\n        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream(filePath), 8192)) { // 8192 is the buffer size\\\\n            byte[] buffer = new byte[8192];\\\\n            int bytesRead;\\\\n            while ((bytesRead = bis.read(buffer)) != -1) {\\\\n                // Process the bytes read from the buffer\\\\n                // For example, convert bytes to String and print\\\\n                String chunk = new String(buffer, 0, bytesRead);\\\\n                System.out.print(chunk);\\\\n            }\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.3939393939393939,1.0,0.0476190476190476,1.0,1.0,0.1666666666666666
io,InputStream,Loading images using an InputStream,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],['nan'],"['If you are using PDFBox 2.0.0 or above\n\nPDDocument document = PDDocument.load(new File(""filePath"")); //filePath is the path to your .pdf\nPDFRenderer pdfRenderer = new PDFRenderer(document);\n\nfor(int i=0; i<document.getPages().getCount(); i++){\n    BufferedImage bim = pdfRenderer.renderImage(i, 1.0f, ImageType.RGB); //Get bufferedImage for page ""i"" with scale 1\n    ByteArrayOutputStream os = new ByteArrayOutputStream();\n    ImageIO.write(bim, ""jpg"", os);\n    InputStream is = new ByteArrayInputStream(os.toByteArray());\n    //Do whatever you need with the inputstream\n}\ndocument.close()']",['nan'],"['Loading images using an InputStream in Java involves reading image data from a stream of bytes, which is particularly useful when the image data is not available as a file but rather as a stream, such as from a network connection or a database. The process typically starts by obtaining an InputStream that contains the image data. This InputStream can be from various sources like a file, a URL, or a byte array. Once you have the InputStream, you can use the ImageIO class from the javax.imageio package to read the image. The ImageIO.read method takes an InputStream as a parameter and returns a BufferedImage object, which represents the image. This BufferedImage can then be manipulated, displayed, or saved as needed. Handling exceptions is crucial in this process to manage potential issues such as IO errors or unsupported image formats. Properly closing the InputStream after the image is loaded is also important to free up system resources.']","['[\'[\\\'To load images using an InputStream in Java, we can use the ImageIO class from the javax.imageio package. The ImageIO class provides a convenient way to read and write images in various formats. Below is an example of how to load an image from an InputStream and display it in a JFrame.\\\\nimport javax.imageio.ImageIO;\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\nimport java.io.*;\\\\npublic class LoadImageFromInputStream {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Load image from InputStream\\\\n            InputStream inputStream = new FileInputStream(""path/to/your/image.jpg"");\\\\n            Image image = ImageIO.read(inputStream);\\\\n\\\\n            // Create a JFrame to display the image\\\\n            JFrame frame = new JFrame();\\\\n            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n            frame.setSize(800, 600);\\\\n\\\\n            // Create a JPanel to add the image\\\\n            JPanel panel = new JPanel() {\\\\n                @Override\\\\n                protected void paintComponent(Graphics g) {\\\\n                    super.paintComponent(g);\\\\n                    g.drawImage(image, 0, 0, this);\\\\n                }\\\\n            };\\\\n\\\\n            frame.add(panel);\\\\n            frame.setVisible(true);\\\\n\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.6060606060606061,1.0,0.5,1.0,1.0,0.1428571428571428
io,InputStream,How do I read bytes from InputStream?,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\n<p>Here s a way using only the standard Java library (note that the stream is not closed  your mileage may vary).</p>\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nif we are not accessing it in multiple threads  and <code>StringBuilder</code> is faster).\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\nisn t necessary  but it is generally a good idea to specify the encoding if you know it (which you should!)</p>\n<p>If all you want to do is read the same information more than once  and the input data is small enough to fit into memory  you can copy the data from your <code>InputStream</code> to a <a href= http://docs.oracle.com/javase/7/docs/api/java/io/ByteArrayOutputStream.html  rel= noreferrer >ByteArrayOutputStream</a>.</p> <p>\nBut if you really need to keep the original stream open to receive new data  then you will need to track the external call to <code>close()</code>.\n<p>You can t clone it  and how you are going to solve your problem depends on what the source of the data is.\n<p>One solution is to read all data from the InputStream into a byte array  and then create a ByteArrayInputStream around that byte array  and pass that input stream into your method.</p>\n<p>Edit 1: That is  if the other method also needs to read the same data.\n<p>If the data read from the stream is large  I would recommend using a TeeInputStream from Apache Commons IO.\nFilterInputStream</a> class and do the required processing of the bytes as the external lib reads the data.\nIt should be noted that this works byte for byte  so don t use this if high performance is a requirement.</strong></p>\nFetches entire contents of an InputStream and represent same data as result InputStream.\n<p>Cloning an input stream might not be a good idea  because this requires deep knowledge about the details of the input stream being cloned.\nA workaround for this is to create a new input stream that reads from the same source again.</p>\nAnd there is no need to maintain a second code path for the cloning of the stream.</p>\n<p>On the other hand  if reading from the stream is expensive (because a it s done over a low bandwith connection)  then this method will double the costs.\nJust create an instance  call the  multiply  method  and provide the source input stream and the amount of duplicates you need.</p>\nImportant: you must consume all cloned streams simultaneously in separate threads.</strong></p>'],['nan'],['Try this( IOUtils is commons-io)\n\nbyte[] bytes = IOUtils.toByteArray(instream);'],['nan'],"['To read bytes from an InputStream in Java, you need to understand the basic concept of streams in Java. An InputStream is an abstract class that represents an input stream of bytes. To read bytes, you typically use one of its subclasses, such as FileInputStream, ByteArrayInputStream, or BufferedInputStream. The most common methods to read bytes are read(), read(byte[] b), and read(byte[] b, int off, int len). The read() method reads the next byte of data from the input stream and returns it as an integer, or -1 if the end of the stream is reached. The read(byte[] b) method reads some number of bytes from the input stream and stores them into the buffer array b. The read(byte[] b, int off, int len) method reads up to len bytes of data from the input stream into an array of bytes, starting at the specified offset. It is important to handle exceptions such as IOException, which can be thrown during input operations. Additionally, always ensure to close the InputStream after operations are complete to free up system resources.']","['[\'[\\\'To read bytes from an InputStream in Java, you can use the `read` method provided by the InputStream class. Below is an example of how to do this. The code reads bytes from an InputStream and stores them in a byte array. It continues to read until the end of the stream is reached (indicated by -1).\\\\nimport java.io.InputStream;\\\\nimport java.io.ByteArrayInputStream;\\\\nimport java.io.IOException;\\\\npublic class ReadBytesFromInputStream {\\\\n    public static void main(String[] args) {\\\\n        // Example input stream (in a real scenario, this could be a FileInputStream, etc.)\\\\n        byte[] inputData = ""Example input data"".getBytes();\\\\n        InputStream inputStream = new ByteArrayInputStream(inputData);\\\\n\\\\n        try {\\\\n            byte[] buffer = new byte[1024]; // Buffer to hold the bytes read\\\\n            int bytesRead;\\\\n\\\\n            // Read bytes from the input stream\\\\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\\\\n                // Process the bytes read (for example, print them)\\\\n                System.out.write(buffer, 0, bytesRead);\\\\n            }\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            try {\\\\n                if (inputStream != null) {\\\\n                    inputStream.close();\\\\n                }\\\\n            } catch (IOException ex) {\\\\n                ex.printStackTrace();\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0303030303030303,1.0,1.0,1.0,1.0,0.1428571428571428
io,FileInputStream,FileInputStream read until last 128 bytes of file,['Don t use FileInputStream</strong> as a parameter or variable type.\nUse the abstract base class  in this case InputStream instead.</p>\n<p>But it will work only within your IDE  not in runnable JAR.\n<p>Don t make the mistake of relying upon or needlessly converting/losing endline characters.\nDon t forget to use the proper character encoding to interpres the stream.</p>\n<p>If you want to make this a little more efficient  you can use arrays of characters instead  but to be honest  looping over the characters can be still quite fast.</p>'],"['Most common ways to construct:\nFileInputStream fis = new FileInputStream(""mybinaryfile"");\nBased on 106 examples\n \nFile file = Ã‰;\nFileInputStream fis = new FileInputStream(file);\nBased on 94 examples']","['This should work.\n\nInputStream is = Context.openFileInput(someFileName);\nByteArrayOutputStream bos = new ByteArrayOutputStream();\nbyte[] b = new byte[1024];\nwhile ((int bytesRead = is.read(b)) != -1) {\n   bos.write(b, 0, bytesRead);\n}\nbyte[] bytes = bos.toByteArray();']",['nan'],"['To read the last 128 bytes of a file using FileInputStream in Java, you need to follow a series of steps. First, open the file using a FileInputStream. Then, determine the total length of the file by using the available() method or by creating a File object and calling its length() method. Once you have the total length, calculate the starting position for reading the last 128 bytes by subtracting 128 from the total length. Use the skip() method of FileInputStream to move the file pointer to this starting position. Finally, read the last 128 bytes into a byte array using the read() method. This approach ensures that you only read the last 128 bytes of the file, regardless of its total size.']","['[\'[\\\'The task is to read the last 128 bytes of a file using FileInputStream in Java. The approach involves opening the file with FileInputStream, determining the file\\\\\\\'s length, and then reading the last 128 bytes from the appropriate position. Here\\\\\\\'s how you can do it:\\\\nimport java.io.File;\\\\nimport java.io.FileInputStream;\\\\nimport java.io.IOException;\\\\npublic class ReadLast128Bytes {\\\\n    public static void main(String[] args) {\\\\n        File file = new File(""path/to/your/file"");\\\\n        try (FileInputStream fis = new FileInputStream(file)) {\\\\n            long fileLength = file.length();\\\\n            long startPosition = fileLength - 128;\\\\n            if (startPosition < 0) {\\\\n                startPosition = 0;\\\\n            }\\\\n            fis.skip(startPosition);\\\\n            byte[] buffer = new byte[128];\\\\n            int bytesRead = fis.read(buffer);\\\\n            if (bytesRead > 0) {\\\\n                System.out.println(""Last "" + bytesRead + "" bytes of the file:"");\\\\n                for (int i = 0; i < bytesRead; i++) {\\\\n                    System.out.print((char) buffer[i]);\\\\n                }\\\\n            } else {\\\\n                System.out.println(""File is empty or could not read the file."");\\\\n            }\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.1111111111111111,0.1666666666666666,0.1111111111111111,1.0,0.8571428571428571,0.6666666666666666
lang,Object,Converting json from a file to a java Object,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['Direct Known Subclasses:\nAbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile']","['This simple example works like a charm:\nDTOs\n\npublic class SampleDTO \n{\n   private String name;\n   private InnerDTO inner;\n   // getters/setters\n}\n\npublic class InnerDTO \n{\n   private int number;\n   private String str; \n   // getters/setters  \n}  \nGson\n\n  BufferedReader br = new BufferedReader(new FileReader(""/tmp/test.json""));\n  SampleDTO sample = new Gson().fromJson(br, SampleDTO.class);  \nJackson\n\n  InputStream inJson = SampleDTO.class.getResourceAsStream(""/test.json"");\n  SampleDTO sample = new ObjectMapper().readValue(inJson, SampleDTO.class);\nJSON (test.json)\n\n{\n   ""name"" : ""Mike"",\n   ""inner"": {\n      ""number"" : 5,\n      ""str"" : ""Simple!""\n   }\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nConverting Java objects to JSON with Jackson\n----------Explanation----------\nTo convert your object in JSON with Jackson:\n----------Code Sample----------\nObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();\nString json = ow.writeValueAsString(object);\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nHow to create a jQuery plugin with methods?\n----------Explanation----------\nAccording to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method\n----------Code Sample----------\n(function( $ ){\n\nvar methods = {\ninit : function(options) {\n\n},\nshow : function( ) { },// IS\nhide : function( ) { },// GOOD\nupdate : function( content ) { }// !!!\n};\n\n$.fn.tooltip = function(methodOrOptions) {\nif ( methods[methodOrOptions] ) {\nreturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\n} else if ( typeof methodOrOptions === \'object\' || ! methodOrOptions ) {\n// Default to ""init""\nreturn methods.init.apply( this, arguments );\n} else {\n$.error( \'Method \' + methodOrOptions + \' does not exist on jQuery.tooltip\' );\n} \n};\n\n\n})( jQuery );\n\n$(\'div\').tooltip(); // calls the init method\n$(\'div\').tooltip({ // calls the init method\nfoo : \'bar\'\n});\n$(\'div\').tooltip(\'hide\'); // calls the hide method\n$(\'div\').tooltip(\'update\', \'This is the new tooltip content!\'); // calls the update method\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nChecking if a key exists in a JavaScript object?\n----------Explanation----------\nChecking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?\n----------Code Sample----------\nvar obj = { key: undefined };\nobj[""key""] != undefined // false, but the key exists!\n\n""key"" in obj // true, regardless of the actual value\n\n!(""key"" in obj) // true if ""key"" doesn\'t exist in object\n!""key"" in obj // ERROR! Equivalent to ""false in obj""\n\nobj.hasOwnProperty(""key"") // true\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to ""properly"" create a custom object in JavaScript?\n----------Explanation----------\nLet\'s start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.\n----------Code Sample----------\nfunction Shape(x, y) {\nthis.x= x;\nthis.y= y;\n}\n\nShape.prototype.toString= function() {\nreturn \'Shape at \'+this.x+\', \'+this.y;\n};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y); // invoke the base class\'s constructor function to take co-ords\nthis.r= r;\n}\nCircle.prototype= new Shape();\n\nCircle.prototype.toString= function() {\nreturn \'Circular \'+Shape.prototype.toString.call(this)+\' with radius \'+this.r;\n}\n\nfunction subclassOf(base) {\n_subclassOf.prototype= base.prototype;\nreturn new _subclassOf();\n}\nfunction _subclassOf() {};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.prototype= subclassOf(Shape);\n\nFunction.prototype.subclass= function(base) {\nvar c= Function.prototype.subclass.nonconstructor;\nc.prototype= base.prototype;\nthis.prototype= new c();\n};\nFunction.prototype.subclass.nonconstructor= function() {};\n\n...\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.subclass(Shape);\n\nfunction Point() {\nShape.apply(this, arguments);\n}\nPoint.subclass(Shape);\n\nfunction Shape() { this._init.apply(this, arguments); }\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nfunction Point() { this._init.apply(this, arguments); }\nPoint.subclass(Shape);\n// no need to write new initialiser for Point!\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (\'_init\' in this)\nthis._init.apply(this, arguments);\n}\nFunction.prototype.makeSubclass.nonconstructor.prototype= this.prototype;\nClass.prototype= new Function.prototype.makeSubclass.nonconstructor();\nreturn Class;\n};\nFunction.prototype.makeSubclass.nonconstructor= function() {};\n\n...\n\nShape= Object.makeSubclass();\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nPoint= Shape.makeSubclass();\n\nCircle= Shape.makeSubclass();\nCircle.prototype._init= function(x, y, r) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n};\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (!(this instanceof Class))\nthrow(\'Constructor called without ""new""\');\n...\n\nCircle= Shape.makeSubclass({\n_init: function(x, y, z) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n},\n...\n});\n\nfunction Shape(x, y) {\nvar that= this;\n\nthis.x= x;\nthis.y= y;\n\nthis.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n}\n\nfunction Circle(x, y, r) {\nvar that= this;\n\nShape.call(this, x, y);\nthis.r= r;\n\nvar _baseToString= this.toString;\nthis.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+that.r;\n};\n};\n\nvar mycircle= new Circle();\n\nvar ts= mycircle.toString;\nalert(ts());\n\nsetTimeout(function() {\nmycircle.move(1, 1);\n}, 1000);\n\nsetTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);\n\nfunction Shape(x, y) {\nvar that= {};\n\nthat.x= x;\nthat.y= y;\n\nthat.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n\nreturn that;\n}\n\nfunction Circle(x, y, r) {\nvar that= Shape(x, y);\n\nthat.r= r;\n\nvar _baseToString= that.toString;\nthat.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+r;\n};\n\nreturn that;\n};\n\nvar mycircle= Circle(); // you can include `new` if you want but it won\'t do anything\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nAvoiding != null statements\n----------Explanation----------\n(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:\n----------Code Sample----------\nassert \n\nassert : \n\npublic interface Action {\nvoid doSomething();\n}\n\npublic interface Parser {\nAction findAction(String userInput);\n}\n\npublic class MyParser implements Parser {\nprivate static Action DO_NOTHING = new Action() {\npublic void doSomething() { /* do nothing */ }\n};\n\npublic Action findAction(String userInput) {\n// ...\nif ( /* we can\'t find any actions */ ) {\nreturn DO_NOTHING;\n}\n}\n}\n\nParser parser = ParserFactory.getParser();\nif (parser == null) {\n// now what?\n// this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n// do nothing\n} else {\naction.doSomething();\n}\n\nParserFactory.getParser().findAction(someInput).doSomething();\n\ntry {\nParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\nuserConsole.err(anfe.getMessage());\n}\n\npublic Action findAction(final String userInput) {\n/* Code to return requested Action if found */\nreturn new Action() {\npublic void doSomething() {\nuserConsole.err(""Action not found: "" + userInput);\n}\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nJava Generics Wildcarding With Multiple Classes\n----------Explanation----------\nActually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:\n----------Code Sample----------\n\n\npublic static > T\nmax(Collection coll)\n\nclass classB { }\ninterface interfaceC { }\n\npublic class MyClass {\nClass variable;\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCloning an Object in Node.js\n----------Explanation----------\n\n----------Code Sample----------\nvar obj2 = JSON.parse(JSON.stringify(obj1));\n\nvar extend = require(\'util\')._extend;\n\nvar obj1 = {x: 5, y:5};\nvar obj2 = extend({}, obj1);\nobj2.x = 6;\nconsole.log(obj1.x); // still logs 5\n\nexports._extend = function(origin, add) {\n// Don\'t do anything if add isn\'t an object\nif (!add || typeof add !== \'object\') return origin;\n\nvar keys = Object.keys(add);\nvar i = keys.length;\nwhile (i--) {\norigin[keys[i]] = add[keys[i]];\n}\nreturn origin;\n};\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nNull check in an enhanced for loop\n----------Explanation----------\nIf you get this list from somewhere else and don\'t know if it is ok or not you could create a utility method and use it like this:\n----------Code Sample----------\nfor( Object o : safe( list ) ) {\n// do whatever \n}\n\npublic static List safe( List other ) {\nreturn other == null ? Collections.EMPTY_LIST : other;\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nShallow copy for arrays, why can\'t simply do newArr = oldArr?\n----------Explanation----------\n""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:\n----------Code Sample----------\nOriginal Array\n\n[0]\n[1]\n[2]\n[3]\n\nAfter copying:\n\n[0] <--- Original [0]\n[1] [1]\n[3] [2]\n[4] Copy ---> [3]\n\nOriginal Array:\n\n[0:]----> [object 0]\n[1:]----> [object 1]\n[2:]----> [object 2]\n[3:]----> [object 3]\n\nOriginal -> [0:]----> [object 0] <----[:0] <- Copy\n[1:]----> [object 1] <----[:1]\n[2:]----> [object 2] <----[:2]\n[3:]----> [object 3] <----[:3]\n\nOriginal -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]\n[1:]----> [object 1] [1:]----> [copy of object 1]\n[2:]----> [object 2] [2:]----> [copy of object 2]\n[3:]----> [object 3] [3:]----> [copy of object 3]\n\narr1 -> [0, 1, 2, 3, 4]\n\narr1 -> [0, 1, 2, 3, 4] <- arr2\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIterate through object properties\n----------Explanation----------\nIterating over properties requires this additional hasOwnProperty check:\n----------Code Sample----------\nfor (var property in object) {\nif (object.hasOwnProperty(property)) {\n// do stuff\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow do I test for an empty JavaScript object?\n----------Explanation----------\n\n----------Code Sample----------\n// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 && obj.constructor === Object\n\nfunction isEmpty(obj) {\nfor(var prop in obj) {\nif(obj.hasOwnProperty(prop))\nreturn false;\n}\n\nreturn true && JSON.stringify(obj) === JSON.stringify({});\n}\n\njQuery.isEmptyObject({}); // true\n\n_.isEmpty({}); // true\n\n_.isEmpty({}); // true\n\nHoek.deepEqual({}, {}); // true\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\ndynamic object construction in javascript?\n----------Explanation----------\n\n----------Code Sample----------\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Use a fake constructor function with the target constructor\'s\n// `prototype` property to create the object with the right prototype\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nobj = new fakeCtor();\n\n// Set the object\'s `constructor`\nobj.constructor = ctor;\n\n// Call the constructor function\nnewobj = ctor.apply(obj, params);\n\n// Use the returned object if there is one.\n// Note that we handle the funky edge case of the `Function` constructor,\n// thanks to Mike\'s comment below. Double-checked the spec, that should be\n// the lot.\nif (newobj !== null\n&& (typeof newobj === ""object"" || typeof newobj === ""function"")\n) {\nobj = newobj;\n}\n\n// Done\nreturn obj;\n}\n\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Create the object with the desired prototype\nif (typeof Object.create === ""function"") {\n// ECMAScript 5 \nobj = Object.create(ctor.prototype);\n}\nelse if ({}.__proto__) {\n// Non-standard __proto__, supported by some browsers\nobj = {};\nobj.__proto__ = ctor.prototype;\nif (obj.__proto__ !== ctor.prototype) {\n// Setting it didn\'t work\nobj = makeObjectWithFakeCtor();\n}\n}\nelse {\n// Fallback\nobj = makeObjectWithFakeCtor();\n}\n\n// Set the object\'s constructor\nobj.constructor = ctor;\n\n// Apply the constructor function\nnewobj = ctor.apply(obj, params);\n\n// If a constructor function returns an object, that\n// becomes the return value of `new`, so we handle\n// that here.\nif (typeof newobj === ""object"") {\nobj = newobj;\n}\n\n// Done!\nreturn obj;\n\n// Subroutine for building objects with specific prototypes\nfunction makeObjectWithFakeCtor() {\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nreturn new fakeCtor();\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow to pass json POST data to Web API method as object\n----------Explanation----------\n\n----------Code Sample----------\ncontentType:""application/json""\n\n$(function () {\nvar customer = {contact_name :""Scott"",company_name:""HP""};\n$.ajax({\ntype: ""POST"",\ndata :JSON.stringify(customer),\nurl: ""api/Customer"",\ncontentType: ""application/json""\n});\n});\n\npublic class CreateUserViewModel\n{\npublic int Id {set;get;}\npublic string Name {set;get;} \npublic List Tags {set;get;}\n}\npublic class TagViewModel\n{\npublic int Id {set;get;}\npublic string Code {set;get;}\n}\n\npublic class ProductController : Controller\n{\n[HttpPost]\npublic CreateUserViewMode Save([FromBody] CreateUserViewModel m)\n{\n// I am just returning the posted model as it is. \n// You may do other stuff and return different response.\n// Ex : missileService.LaunchMissile(m);\nreturn m;\n}\n}\n\n//Build an object which matches the structure of our view model class\nvar model = {\nName: ""Shyju"",\nId: 123,\nTags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]\n};\n\n$.ajax({\ntype: ""POST"",\ndata: JSON.stringify(model),\nurl: ""../product/save"",\ncontentType: ""application/json""\n}).done(function(res) { \nconsole.log(\'res\', res);\n// Do something with the result :)\n});\n\n[HttpPost]\npublic CreateUserViewModel Save(CreateUserViewModel m)\n{\nreturn m;\n}\n\n$.ajax({\ntype: ""POST"",\ndata: model,\nurl: ""../product/save""\n}).done(function (res) {\nconsole.log(\'res\', res);\n});\n\n$.post(""../product/save"", model, function (res) {\n//res contains the markup returned by the partial view\nconsole.log(\'res\', res);\n});\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow to create a simple map using JavaScript/JQuery\n----------Explanation----------\nEdit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n----------Code Sample----------\nvar map = new Object(); // or var map = {};\nmap[myKey1] = myObj1;\nmap[myKey2] = myObj2;\n\nfunction get(k) {\nreturn map[k];\n}\n\n//map[myKey1] == get(myKey1);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHow to efficiently count the number of keys/properties of an object in JavaScript?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-js prettyprint-override"">Object.keys(obj).length\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nOverriding the java equals() method quirk\n----------Explanation----------\nIn Java, the equals() method that is inherited from Object is:\n----------Code Sample----------\npublic boolean equals(Object other);\n\n@Override\npublic boolean equals(Object other){\nif (other == null) return false;\nif (other == this) return true;\nif (!(other instanceof MyClass))return false;\nMyClass otherMyClass = (MyClass)other;\n...test other properties here...\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nHow can I access a private constructor of a class?\n----------Explanation----------\nOne way to bypass the restriction is to use reflections:\n----------Code Sample----------\nimport java.lang.reflect.Constructor;\n\npublic class Example {\npublic static void main(final String[] args) throws Exception {\nConstructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);\nconstructor.setAccessible(true);\nFoo foo = constructor.newInstance(new Object[0]);\nSystem.out.println(foo);\n}\n}\n\nclass Foo {\nprivate Foo() {\n// private!\n}\n\n@Override\npublic String toString() {\nreturn ""I\'m a Foo and I\'m alright!"";\n}\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nWhy is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?\n----------Explanation----------\n\n----------Code Sample----------\npublic Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}\n\n// calls the varargs method.\nFoo(new Object[]{new Object(), new Object()});\n\npublic static void main(String... args) {\n\npublic Foo(Object o, Object... os){} \n\npublic Foo(Object[] os) {}\n\nFoo(new Object(), new Object()); // calls the first.\n\nFoo(new Object[]{new Object(), new Object()}); // calls the second.\n\npublic Foo(Object... os){} \n\npublic Bar(Object[] os) {}\n\nFoo(new Object[]{new Object(), new Object()}); // compiles fine.\n\nBar(new Object(), new Object()); // Fails to compile.\n\npublic Foo(Object... os, int i){} // fails to compile.\n\npublic Bar(Object[] os, int i) {} // compiles ok.\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nWhat does enumerable mean?\n----------Explanation----------\nIf a property isn\'t identified as enumerable, the loop will ignore that it\'s within the object.\n----------Code Sample----------\nvar obj = { key: \'val\' };\n\nconsole.log(\'toString\' in obj); // true\nconsole.log(typeof obj.toString); // ""function""\n\nfor (var key in obj)\nconsole.log(key); // ""key""\n\nvar descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, \'bar\');\n\nconsole.log(descriptor.enumerable); // true\nconsole.log(descriptor.value); // 1\n\nconsole.log(descriptor);\n// { value: 1, writable: true, enumerable: true, configurable: true }\n\nvar foo = { bar: 1, baz: 2};\n\nfor (var prop in foo)\nconsole.log(prop); // outputs \'bar\' and \'baz\'\n\nconsole.log(Object.getOwnPropertyNames(Object.prototype));\n// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]\n\nconsole.log(\'constructor\' in foo); // true\nconsole.log(\'toString\' in foo); // true\n// etc.\n\nvar descriptor = Object.getOwnPropertyDescriptor(Object.prototype, \'constructor\');\n\nconsole.log(descriptor.enumerable); // false\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nEach for object?\n----------Explanation----------\nA javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work\n----------Code Sample----------\n$.each(object, function(index, value) {\nconsole.log(value);\n}); \n\nfor(var index in object) { \nvar attr = object[index]; \n}\n\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\nvar attr = object[index];\n}\n}\n\nclick\nclick\nclick\n\nvar object = [""first"", ""middle"", ""last""];\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\n$(\'.index\'+index).click(function() {\nconsole.log(object[index]);\n});\n}\n}\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoading Java Builder Object from Yaml file\n----------Explanation----------\nSnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.\n----------Code Sample----------\n/**\n* create JavaBean\n*/\npublic void testGetBeanAssumeClass() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person\\nfirstName: Andrey\\nage: 99"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertNull(person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n\n/**\n* create instance using constructor arguments\n*/\npublic void testGetConstructorBean() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertEquals(""Somov"", person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nPriorityQueue/Heap Update\n----------Explanation----------\nSome years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java\'s Comparator and Comparable interfaces, and also would make the class use generics.)\n----------Code Sample----------\nimport java.util.*;\n\npublic abstract class Heap {\n\nprivate List heap;\n\npublic Heap() {\nheap = new ArrayList();\n}\n\npublic void push(Object obj) {\nheap.add(obj);\npushUp(heap.size()-1);\n}\n\npublic Object pop() {\nif (heap.size() > 0) {\nswap(0, heap.size()-1);\nObject result = heap.remove(heap.size()-1);\npushDown(0);\nreturn result;\n} else {\nreturn null;\n}\n}\n\npublic Object getFirst() {\nreturn heap.get(0);\n}\n\npublic Object get(int index) {\nreturn heap.get(index);\n}\n\npublic int size() {\nreturn heap.size();\n}\n\nprotected abstract boolean isGreaterOrEqual(int first, int last);\n\nprotected int parent(int i) {\nreturn (i - 1) / 2;\n}\n\nprotected int left(int i) {\nreturn 2 * i + 1;\n}\n\nprotected int right(int i) {\nreturn 2 * i + 2;\n}\n\nprotected void swap(int i, int j) {\nObject tmp = heap.get(i);\nheap.set(i, heap.get(j));\nheap.set(j, tmp);\n}\n\npublic void pushDown(int i) {\nint left = left(i);\nint right = right(i);\nint largest = i;\n\nif (left < heap.size() && !isGreaterOrEqual(largest, left)) {\nlargest = left;\n}\nif (right < heap.size() && !isGreaterOrEqual(largest, right)) {\nlargest = right;\n}\n\nif (largest != i) {\nswap(largest, i);\npushDown(largest);\n}\n}\n\npublic void pushUp(int i) {\nwhile (i > 0 && !isGreaterOrEqual(parent(i), i)) {\nswap(parent(i), i);\ni = parent(i);\n}\n}\n\npublic String toString() {\nStringBuffer s = new StringBuffer(""Heap:\\n"");\nint rowStart = 0;\nint rowSize = 1;\nfor (int i = 0; i < heap.size(); i++) {\nif (i == rowStart+rowSize) {\ns.append(\'\\n\');\nrowStart = i;\nrowSize *= 2;\n}\ns.append(get(i));\ns.append("" "");\n}\nreturn s.toString();\n}\n\npublic static void main(String[] args){\nHeap h = new Heap() {\nprotected boolean isGreaterOrEqual(int first, int last) {\nreturn ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();\n}\n};\n\nfor (int i = 0; i < 100; i++) {\nh.push(new Integer((int)(100 * Math.random())));\n}\n\nSystem.out.println(h+""\\n"");\n\nwhile (h.size() > 0) {\nSystem.out.println(h.pop());\n}\n}\n}\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nConvert Java Object to JsonNode in Jackson\n----------Explanation----------\n\n----------Code Sample----------\nJsonNode node = objectMapper.valueToTree(map);\n\nJsonNode node = mapper.convertValue(object, JsonNode.class);\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nChange key in js associative array\n----------Explanation----------\nIn JavaScript there is no such thing as associative Array. Objects can be used instead:\n----------Code Sample----------\nvar myHash = new Object();\n\nvar myHash = {};\n\nmyHash[""from""] = ""value"";\nmyHash[""to""] = myHash[""from""];\ndelete myHash[""from""];\n\nmyHash.from = ""value"";\nmyHash.to = myHash.from;\ndelete myHash.from;\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nUnderstanding the difference between Object.create() and new SomeFunction()\n----------Explanation----------\nWith constructor functions, the newly created object inherits from the constructor\'s prototype, e.g.:\n----------Code Sample----------\nvar o = new SomeConstructor();\n\nvar o = Object.create({inherited: 1}, {\nfoo: {\nget: (function () { // a closure\nvar closured = \'foo\';\nreturn function () {\nreturn closured+\'bar\';\n};\n})()\n}\n});\n\no.foo; // ""foobar""\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow do I correctly clone a JavaScript object?\n----------Explanation----------\nYet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object\'s prototype is Object , then simply creating a new general object with {} will work, but if the source\'s prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren\'t enumerable in the first place. One solution might be to call the source object\'s constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:\n----------Code Sample----------\nfunction clone(obj) {\nif (null == obj || ""object"" != typeof obj) return obj;\nvar copy = obj.constructor();\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n}\nreturn copy;\n}\n\nvar d1 = new Date();\n\n/* Wait for 5 seconds. */\nvar start = (new Date()).getTime();\nwhile ((new Date()).getTime() - start < 5000);\n\n\nvar d2 = clone(d1);\nalert(""d1 = "" + d1.toString() + ""\\nd2 = "" + d2.toString());\n\nfunction clone(obj) {\nvar copy;\n\n// Handle the 3 simple types, and null or undefined\nif (null == obj || ""object"" != typeof obj) return obj;\n\n// Handle Date\nif (obj instanceof Date) {\ncopy = new Date();\ncopy.setTime(obj.getTime());\nreturn copy;\n}\n\n// Handle Array\nif (obj instanceof Array) {\ncopy = [];\nfor (var i = 0, len = obj.length; i < len; i++) {\ncopy[i] = clone(obj[i]);\n}\nreturn copy;\n}\n\n// Handle Object\nif (obj instanceof Object) {\ncopy = {};\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n}\nreturn copy;\n}\n\nthrow new Error(""Unable to copy obj! Its type isn\'t supported."");\n}\n\n// This would be cloneable:\nvar tree = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""right"" : null,\n""data"" : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ndirectedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ncylicGraph[""right""] = cylicGraph;\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow do I access properties of a javascript object if I don\'t know the names?\n----------Explanation----------\nYou can loop through keys like this:\n----------Code Sample----------\nfor (var key in data) {\nconsole.log(key);\n}\n\nfor (var key in data) {\nif (data.hasOwnProperty(key)) {\nconsole.log(key);\n}\n}\n\nfor each (var value in data) {\nconsole.log(value);\n}\n\nvar data = { Name: \'Property Name\', Value: \'0\' };\nconsole.log(Object.keys(data)); // => [""Name"", ""Value""]\n\nObject.keys(data).forEach(function (key) {\nconsole.log(data[key]);\n});\n// => Logs ""Property Name"", 0\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nC# version of java\'s synchronized keyword?\n----------Explanation----------\nFor the method-level stuff, there is [MethodImpl] :\n----------Code Sample----------\n[MethodImpl(MethodImplOptions.Synchronized)]\npublic void SomeMethod() {/* code */}\n\nprivate int i;\npublic int SomeProperty\n{\n[MethodImpl(MethodImplOptions.Synchronized)]\nget { return i; }\n[MethodImpl(MethodImplOptions.Synchronized)]\nset { i = value; }\n}\n\npublic int SomeProperty {get;set;} // not synchronized\npublic event EventHandler SomeEvent; // synchronized\n\nprivate readonly object syncLock = new object();\npublic void SomeMethod() {\nlock(syncLock) { /* code */ }\n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nIs it possible to implement properties in languages other than C#?\n----------Explanation----------\nPython definitely supports properties:\n----------Code Sample----------\nclass Foo(object):\n\ndef get_length_inches(self):\nreturn self.length_meters * 39.0\n\ndef set_length_inches(self, val):\nself.length_meters = val/39.0\n\nlength_inches = property(get_length_inches, set_length_inches)\n\nclass Foo(object):\n\n# 2.5 or later\n@property\ndef length_inches(self):\nreturn self.length_meters * 39.0\n\n# 2.6 or later\n@length_inches.setter\ndef length_inches(self, val):\nself.length_meters = val/39.0\n*******************end of usage scenario 29***************** \n\n*******************usage scenario 30********************** \n----------usage scenario----------\nJson deserialization into another class hierarchy using Jackson\n----------Explanation----------\nHere is a code which creates ObjectMapper for deserialization:\n----------Code Sample----------\nprotected ObjectMapper getObjectMapperForDeserialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {\nprivate HashMap classes = new HashMap() {\n{\nput(ConcreteA.class, ConcreteAAdapter.class);\nput(ConcreteB.class, ConcreteBAdapter.class);\nput(ConcreteC.class, ConcreteCAdapter.class);\n}\n};\n\n@Override\npublic String idFromValue(Object value) {\nreturn (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;\n}\n\n@Override\npublic JavaType typeFromId(String id) {\ntry {\nreturn classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));\n} catch (ClassNotFoundException e) {\n// todo catch the e\n}\nreturn super.typeFromId(id);\n}\n});\nmapper.setDefaultTyping(typeResolverBuilder);\nreturn mapper;\n}\n\nprotected ObjectMapper getObjectMapperForSerialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes""""""]']","[""To convert JSON from a file to a Java object, you typically use a library such as Jackson or Gson. The process involves reading the JSON data from the file and then mapping it to a Java object. First, you need to create a Java class that matches the structure of the JSON data. This class will have fields corresponding to the keys in the JSON, and you can use annotations to handle any naming discrepancies. Next, you use the library's API to read the JSON file and deserialize it into an instance of your Java class. For Jackson, this involves creating an ObjectMapper instance and calling its readValue method, passing in the file and the class type. For Gson, you create a Gson instance and use its fromJson method. Both libraries handle the parsing and mapping automatically, making it straightforward to work with JSON data in Java.""]","['[\'[\\\'To convert JSON from a file to a Java object, we can use the Jackson library, which is a popular library for processing JSON in Java. Below is an example of how to achieve this.\\\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\n// Define a simple Java class to represent the JSON data\\\\nclass Person {\\\\n    private String name;\\\\n    private int age;\\\\n\\\\n    // Getters and setters\\\\n    public String getName() {\\\\n        return name;\\\\n    }\\\\n\\\\n    public void setName(String name) {\\\\n        this.name = name;\\\\n    }\\\\n\\\\n    public int getAge() {\\\\n        return age;\\\\n    }\\\\n\\\\n    public void setAge(int age) {\\\\n        this.age = age;\\\\n    }\\\\n\\\\n    @Override\\\\n    public String toString() {\\\\n        return ""Person{name=\\\\\\\'"" + name + \\\\\\\'\\\\\\\\\\\\\\\'\\\\\\\' + "", age="" + age + \\\\\\\'}\\\\\\\';\\\\n    }\\\\n}\\\\n\\\\npublic class JsonToObjectExample {\\\\n    public static void main(String[] args) {\\\\n        // Create an ObjectMapper instance\\\\n        ObjectMapper objectMapper = new ObjectMapper();\\\\n\\\\n        try {\\\\n            // Read JSON file and convert it to a Person object\\\\n            Person person = objectMapper.readValue(new File(""person.json""), Person.class);\\\\n\\\\n            // Print the Person object\\\\n            System.out.println(person);\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.5,0.3,0.0009208103130755,1.0,0.6666666666666666
lang,Object,Java/JAXB: Unmarshall XML attributes to specific Java Object attributes,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['Direct Known Subclasses:\nAbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile']","['You may create a separate classes to represent structure of your XML:\n\npublic class Section {\n    @XmlAttribute\n    public String name;\n    @XmlElement(name = ""value"")\n    public List<Value> values;\n}\n\npublic class Value {\n    @XmlAttribute\n    public String name;\n    @XmlValue\n    public String value;\n}\nand then use an XmlAdapter to perform conversion:\n\npublic class OptionsAdapter extends XmlAdapter<Section, Options> {\n    public Options unmarshal(Section s) {\n        if (""default_options"".equals(s.name)) {\n            ...\n        } else if (...) {\n            ...\n        }\n        ...\n    }\n    ...\n}\n\n@XmlElement\npublic class Configuration {\n    @XmlElement(name = ""section"")\n    @XmlJavaTypeAdapter(OptionsAdapter.class)\n    public List<Options> options;\n}\n\npublic class DefaultOptions extends Options { ... }\npublic class CustomOptions extends Options { ... }']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nConverting Java objects to JSON with Jackson\n----------Explanation----------\nTo convert your object in JSON with Jackson:\n----------Code Sample----------\nObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();\nString json = ow.writeValueAsString(object);\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nHow to create a jQuery plugin with methods?\n----------Explanation----------\nAccording to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method\n----------Code Sample----------\n(function( $ ){\n\nvar methods = {\ninit : function(options) {\n\n},\nshow : function( ) { },// IS\nhide : function( ) { },// GOOD\nupdate : function( content ) { }// !!!\n};\n\n$.fn.tooltip = function(methodOrOptions) {\nif ( methods[methodOrOptions] ) {\nreturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\n} else if ( typeof methodOrOptions === \'object\' || ! methodOrOptions ) {\n// Default to ""init""\nreturn methods.init.apply( this, arguments );\n} else {\n$.error( \'Method \' + methodOrOptions + \' does not exist on jQuery.tooltip\' );\n} \n};\n\n\n})( jQuery );\n\n$(\'div\').tooltip(); // calls the init method\n$(\'div\').tooltip({ // calls the init method\nfoo : \'bar\'\n});\n$(\'div\').tooltip(\'hide\'); // calls the hide method\n$(\'div\').tooltip(\'update\', \'This is the new tooltip content!\'); // calls the update method\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nChecking if a key exists in a JavaScript object?\n----------Explanation----------\nChecking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?\n----------Code Sample----------\nvar obj = { key: undefined };\nobj[""key""] != undefined // false, but the key exists!\n\n""key"" in obj // true, regardless of the actual value\n\n!(""key"" in obj) // true if ""key"" doesn\'t exist in object\n!""key"" in obj // ERROR! Equivalent to ""false in obj""\n\nobj.hasOwnProperty(""key"") // true\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to ""properly"" create a custom object in JavaScript?\n----------Explanation----------\nLet\'s start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.\n----------Code Sample----------\nfunction Shape(x, y) {\nthis.x= x;\nthis.y= y;\n}\n\nShape.prototype.toString= function() {\nreturn \'Shape at \'+this.x+\', \'+this.y;\n};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y); // invoke the base class\'s constructor function to take co-ords\nthis.r= r;\n}\nCircle.prototype= new Shape();\n\nCircle.prototype.toString= function() {\nreturn \'Circular \'+Shape.prototype.toString.call(this)+\' with radius \'+this.r;\n}\n\nfunction subclassOf(base) {\n_subclassOf.prototype= base.prototype;\nreturn new _subclassOf();\n}\nfunction _subclassOf() {};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.prototype= subclassOf(Shape);\n\nFunction.prototype.subclass= function(base) {\nvar c= Function.prototype.subclass.nonconstructor;\nc.prototype= base.prototype;\nthis.prototype= new c();\n};\nFunction.prototype.subclass.nonconstructor= function() {};\n\n...\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.subclass(Shape);\n\nfunction Point() {\nShape.apply(this, arguments);\n}\nPoint.subclass(Shape);\n\nfunction Shape() { this._init.apply(this, arguments); }\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nfunction Point() { this._init.apply(this, arguments); }\nPoint.subclass(Shape);\n// no need to write new initialiser for Point!\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (\'_init\' in this)\nthis._init.apply(this, arguments);\n}\nFunction.prototype.makeSubclass.nonconstructor.prototype= this.prototype;\nClass.prototype= new Function.prototype.makeSubclass.nonconstructor();\nreturn Class;\n};\nFunction.prototype.makeSubclass.nonconstructor= function() {};\n\n...\n\nShape= Object.makeSubclass();\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nPoint= Shape.makeSubclass();\n\nCircle= Shape.makeSubclass();\nCircle.prototype._init= function(x, y, r) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n};\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (!(this instanceof Class))\nthrow(\'Constructor called without ""new""\');\n...\n\nCircle= Shape.makeSubclass({\n_init: function(x, y, z) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n},\n...\n});\n\nfunction Shape(x, y) {\nvar that= this;\n\nthis.x= x;\nthis.y= y;\n\nthis.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n}\n\nfunction Circle(x, y, r) {\nvar that= this;\n\nShape.call(this, x, y);\nthis.r= r;\n\nvar _baseToString= this.toString;\nthis.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+that.r;\n};\n};\n\nvar mycircle= new Circle();\n\nvar ts= mycircle.toString;\nalert(ts());\n\nsetTimeout(function() {\nmycircle.move(1, 1);\n}, 1000);\n\nsetTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);\n\nfunction Shape(x, y) {\nvar that= {};\n\nthat.x= x;\nthat.y= y;\n\nthat.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n\nreturn that;\n}\n\nfunction Circle(x, y, r) {\nvar that= Shape(x, y);\n\nthat.r= r;\n\nvar _baseToString= that.toString;\nthat.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+r;\n};\n\nreturn that;\n};\n\nvar mycircle= Circle(); // you can include `new` if you want but it won\'t do anything\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nAvoiding != null statements\n----------Explanation----------\n(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:\n----------Code Sample----------\nassert \n\nassert : \n\npublic interface Action {\nvoid doSomething();\n}\n\npublic interface Parser {\nAction findAction(String userInput);\n}\n\npublic class MyParser implements Parser {\nprivate static Action DO_NOTHING = new Action() {\npublic void doSomething() { /* do nothing */ }\n};\n\npublic Action findAction(String userInput) {\n// ...\nif ( /* we can\'t find any actions */ ) {\nreturn DO_NOTHING;\n}\n}\n}\n\nParser parser = ParserFactory.getParser();\nif (parser == null) {\n// now what?\n// this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n// do nothing\n} else {\naction.doSomething();\n}\n\nParserFactory.getParser().findAction(someInput).doSomething();\n\ntry {\nParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\nuserConsole.err(anfe.getMessage());\n}\n\npublic Action findAction(final String userInput) {\n/* Code to return requested Action if found */\nreturn new Action() {\npublic void doSomething() {\nuserConsole.err(""Action not found: "" + userInput);\n}\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nJava Generics Wildcarding With Multiple Classes\n----------Explanation----------\nActually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:\n----------Code Sample----------\n\n\npublic static > T\nmax(Collection coll)\n\nclass classB { }\ninterface interfaceC { }\n\npublic class MyClass {\nClass variable;\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCloning an Object in Node.js\n----------Explanation----------\n\n----------Code Sample----------\nvar obj2 = JSON.parse(JSON.stringify(obj1));\n\nvar extend = require(\'util\')._extend;\n\nvar obj1 = {x: 5, y:5};\nvar obj2 = extend({}, obj1);\nobj2.x = 6;\nconsole.log(obj1.x); // still logs 5\n\nexports._extend = function(origin, add) {\n// Don\'t do anything if add isn\'t an object\nif (!add || typeof add !== \'object\') return origin;\n\nvar keys = Object.keys(add);\nvar i = keys.length;\nwhile (i--) {\norigin[keys[i]] = add[keys[i]];\n}\nreturn origin;\n};\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nNull check in an enhanced for loop\n----------Explanation----------\nIf you get this list from somewhere else and don\'t know if it is ok or not you could create a utility method and use it like this:\n----------Code Sample----------\nfor( Object o : safe( list ) ) {\n// do whatever \n}\n\npublic static List safe( List other ) {\nreturn other == null ? Collections.EMPTY_LIST : other;\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nShallow copy for arrays, why can\'t simply do newArr = oldArr?\n----------Explanation----------\n""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:\n----------Code Sample----------\nOriginal Array\n\n[0]\n[1]\n[2]\n[3]\n\nAfter copying:\n\n[0] <--- Original [0]\n[1] [1]\n[3] [2]\n[4] Copy ---> [3]\n\nOriginal Array:\n\n[0:]----> [object 0]\n[1:]----> [object 1]\n[2:]----> [object 2]\n[3:]----> [object 3]\n\nOriginal -> [0:]----> [object 0] <----[:0] <- Copy\n[1:]----> [object 1] <----[:1]\n[2:]----> [object 2] <----[:2]\n[3:]----> [object 3] <----[:3]\n\nOriginal -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]\n[1:]----> [object 1] [1:]----> [copy of object 1]\n[2:]----> [object 2] [2:]----> [copy of object 2]\n[3:]----> [object 3] [3:]----> [copy of object 3]\n\narr1 -> [0, 1, 2, 3, 4]\n\narr1 -> [0, 1, 2, 3, 4] <- arr2\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIterate through object properties\n----------Explanation----------\nIterating over properties requires this additional hasOwnProperty check:\n----------Code Sample----------\nfor (var property in object) {\nif (object.hasOwnProperty(property)) {\n// do stuff\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow do I test for an empty JavaScript object?\n----------Explanation----------\n\n----------Code Sample----------\n// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 && obj.constructor === Object\n\nfunction isEmpty(obj) {\nfor(var prop in obj) {\nif(obj.hasOwnProperty(prop))\nreturn false;\n}\n\nreturn true && JSON.stringify(obj) === JSON.stringify({});\n}\n\njQuery.isEmptyObject({}); // true\n\n_.isEmpty({}); // true\n\n_.isEmpty({}); // true\n\nHoek.deepEqual({}, {}); // true\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\ndynamic object construction in javascript?\n----------Explanation----------\n\n----------Code Sample----------\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Use a fake constructor function with the target constructor\'s\n// `prototype` property to create the object with the right prototype\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nobj = new fakeCtor();\n\n// Set the object\'s `constructor`\nobj.constructor = ctor;\n\n// Call the constructor function\nnewobj = ctor.apply(obj, params);\n\n// Use the returned object if there is one.\n// Note that we handle the funky edge case of the `Function` constructor,\n// thanks to Mike\'s comment below. Double-checked the spec, that should be\n// the lot.\nif (newobj !== null\n&& (typeof newobj === ""object"" || typeof newobj === ""function"")\n) {\nobj = newobj;\n}\n\n// Done\nreturn obj;\n}\n\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Create the object with the desired prototype\nif (typeof Object.create === ""function"") {\n// ECMAScript 5 \nobj = Object.create(ctor.prototype);\n}\nelse if ({}.__proto__) {\n// Non-standard __proto__, supported by some browsers\nobj = {};\nobj.__proto__ = ctor.prototype;\nif (obj.__proto__ !== ctor.prototype) {\n// Setting it didn\'t work\nobj = makeObjectWithFakeCtor();\n}\n}\nelse {\n// Fallback\nobj = makeObjectWithFakeCtor();\n}\n\n// Set the object\'s constructor\nobj.constructor = ctor;\n\n// Apply the constructor function\nnewobj = ctor.apply(obj, params);\n\n// If a constructor function returns an object, that\n// becomes the return value of `new`, so we handle\n// that here.\nif (typeof newobj === ""object"") {\nobj = newobj;\n}\n\n// Done!\nreturn obj;\n\n// Subroutine for building objects with specific prototypes\nfunction makeObjectWithFakeCtor() {\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nreturn new fakeCtor();\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow to pass json POST data to Web API method as object\n----------Explanation----------\n\n----------Code Sample----------\ncontentType:""application/json""\n\n$(function () {\nvar customer = {contact_name :""Scott"",company_name:""HP""};\n$.ajax({\ntype: ""POST"",\ndata :JSON.stringify(customer),\nurl: ""api/Customer"",\ncontentType: ""application/json""\n});\n});\n\npublic class CreateUserViewModel\n{\npublic int Id {set;get;}\npublic string Name {set;get;} \npublic List Tags {set;get;}\n}\npublic class TagViewModel\n{\npublic int Id {set;get;}\npublic string Code {set;get;}\n}\n\npublic class ProductController : Controller\n{\n[HttpPost]\npublic CreateUserViewMode Save([FromBody] CreateUserViewModel m)\n{\n// I am just returning the posted model as it is. \n// You may do other stuff and return different response.\n// Ex : missileService.LaunchMissile(m);\nreturn m;\n}\n}\n\n//Build an object which matches the structure of our view model class\nvar model = {\nName: ""Shyju"",\nId: 123,\nTags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]\n};\n\n$.ajax({\ntype: ""POST"",\ndata: JSON.stringify(model),\nurl: ""../product/save"",\ncontentType: ""application/json""\n}).done(function(res) { \nconsole.log(\'res\', res);\n// Do something with the result :)\n});\n\n[HttpPost]\npublic CreateUserViewModel Save(CreateUserViewModel m)\n{\nreturn m;\n}\n\n$.ajax({\ntype: ""POST"",\ndata: model,\nurl: ""../product/save""\n}).done(function (res) {\nconsole.log(\'res\', res);\n});\n\n$.post(""../product/save"", model, function (res) {\n//res contains the markup returned by the partial view\nconsole.log(\'res\', res);\n});\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow to create a simple map using JavaScript/JQuery\n----------Explanation----------\nEdit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n----------Code Sample----------\nvar map = new Object(); // or var map = {};\nmap[myKey1] = myObj1;\nmap[myKey2] = myObj2;\n\nfunction get(k) {\nreturn map[k];\n}\n\n//map[myKey1] == get(myKey1);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHow to efficiently count the number of keys/properties of an object in JavaScript?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-js prettyprint-override"">Object.keys(obj).length\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nOverriding the java equals() method quirk\n----------Explanation----------\nIn Java, the equals() method that is inherited from Object is:\n----------Code Sample----------\npublic boolean equals(Object other);\n\n@Override\npublic boolean equals(Object other){\nif (other == null) return false;\nif (other == this) return true;\nif (!(other instanceof MyClass))return false;\nMyClass otherMyClass = (MyClass)other;\n...test other properties here...\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nHow can I access a private constructor of a class?\n----------Explanation----------\nOne way to bypass the restriction is to use reflections:\n----------Code Sample----------\nimport java.lang.reflect.Constructor;\n\npublic class Example {\npublic static void main(final String[] args) throws Exception {\nConstructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);\nconstructor.setAccessible(true);\nFoo foo = constructor.newInstance(new Object[0]);\nSystem.out.println(foo);\n}\n}\n\nclass Foo {\nprivate Foo() {\n// private!\n}\n\n@Override\npublic String toString() {\nreturn ""I\'m a Foo and I\'m alright!"";\n}\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nWhy is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?\n----------Explanation----------\n\n----------Code Sample----------\npublic Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}\n\n// calls the varargs method.\nFoo(new Object[]{new Object(), new Object()});\n\npublic static void main(String... args) {\n\npublic Foo(Object o, Object... os){} \n\npublic Foo(Object[] os) {}\n\nFoo(new Object(), new Object()); // calls the first.\n\nFoo(new Object[]{new Object(), new Object()}); // calls the second.\n\npublic Foo(Object... os){} \n\npublic Bar(Object[] os) {}\n\nFoo(new Object[]{new Object(), new Object()}); // compiles fine.\n\nBar(new Object(), new Object()); // Fails to compile.\n\npublic Foo(Object... os, int i){} // fails to compile.\n\npublic Bar(Object[] os, int i) {} // compiles ok.\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nWhat does enumerable mean?\n----------Explanation----------\nIf a property isn\'t identified as enumerable, the loop will ignore that it\'s within the object.\n----------Code Sample----------\nvar obj = { key: \'val\' };\n\nconsole.log(\'toString\' in obj); // true\nconsole.log(typeof obj.toString); // ""function""\n\nfor (var key in obj)\nconsole.log(key); // ""key""\n\nvar descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, \'bar\');\n\nconsole.log(descriptor.enumerable); // true\nconsole.log(descriptor.value); // 1\n\nconsole.log(descriptor);\n// { value: 1, writable: true, enumerable: true, configurable: true }\n\nvar foo = { bar: 1, baz: 2};\n\nfor (var prop in foo)\nconsole.log(prop); // outputs \'bar\' and \'baz\'\n\nconsole.log(Object.getOwnPropertyNames(Object.prototype));\n// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]\n\nconsole.log(\'constructor\' in foo); // true\nconsole.log(\'toString\' in foo); // true\n// etc.\n\nvar descriptor = Object.getOwnPropertyDescriptor(Object.prototype, \'constructor\');\n\nconsole.log(descriptor.enumerable); // false\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nEach for object?\n----------Explanation----------\nA javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work\n----------Code Sample----------\n$.each(object, function(index, value) {\nconsole.log(value);\n}); \n\nfor(var index in object) { \nvar attr = object[index]; \n}\n\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\nvar attr = object[index];\n}\n}\n\nclick\nclick\nclick\n\nvar object = [""first"", ""middle"", ""last""];\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\n$(\'.index\'+index).click(function() {\nconsole.log(object[index]);\n});\n}\n}\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoading Java Builder Object from Yaml file\n----------Explanation----------\nSnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.\n----------Code Sample----------\n/**\n* create JavaBean\n*/\npublic void testGetBeanAssumeClass() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person\\nfirstName: Andrey\\nage: 99"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertNull(person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n\n/**\n* create instance using constructor arguments\n*/\npublic void testGetConstructorBean() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertEquals(""Somov"", person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nPriorityQueue/Heap Update\n----------Explanation----------\nSome years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java\'s Comparator and Comparable interfaces, and also would make the class use generics.)\n----------Code Sample----------\nimport java.util.*;\n\npublic abstract class Heap {\n\nprivate List heap;\n\npublic Heap() {\nheap = new ArrayList();\n}\n\npublic void push(Object obj) {\nheap.add(obj);\npushUp(heap.size()-1);\n}\n\npublic Object pop() {\nif (heap.size() > 0) {\nswap(0, heap.size()-1);\nObject result = heap.remove(heap.size()-1);\npushDown(0);\nreturn result;\n} else {\nreturn null;\n}\n}\n\npublic Object getFirst() {\nreturn heap.get(0);\n}\n\npublic Object get(int index) {\nreturn heap.get(index);\n}\n\npublic int size() {\nreturn heap.size();\n}\n\nprotected abstract boolean isGreaterOrEqual(int first, int last);\n\nprotected int parent(int i) {\nreturn (i - 1) / 2;\n}\n\nprotected int left(int i) {\nreturn 2 * i + 1;\n}\n\nprotected int right(int i) {\nreturn 2 * i + 2;\n}\n\nprotected void swap(int i, int j) {\nObject tmp = heap.get(i);\nheap.set(i, heap.get(j));\nheap.set(j, tmp);\n}\n\npublic void pushDown(int i) {\nint left = left(i);\nint right = right(i);\nint largest = i;\n\nif (left < heap.size() && !isGreaterOrEqual(largest, left)) {\nlargest = left;\n}\nif (right < heap.size() && !isGreaterOrEqual(largest, right)) {\nlargest = right;\n}\n\nif (largest != i) {\nswap(largest, i);\npushDown(largest);\n}\n}\n\npublic void pushUp(int i) {\nwhile (i > 0 && !isGreaterOrEqual(parent(i), i)) {\nswap(parent(i), i);\ni = parent(i);\n}\n}\n\npublic String toString() {\nStringBuffer s = new StringBuffer(""Heap:\\n"");\nint rowStart = 0;\nint rowSize = 1;\nfor (int i = 0; i < heap.size(); i++) {\nif (i == rowStart+rowSize) {\ns.append(\'\\n\');\nrowStart = i;\nrowSize *= 2;\n}\ns.append(get(i));\ns.append("" "");\n}\nreturn s.toString();\n}\n\npublic static void main(String[] args){\nHeap h = new Heap() {\nprotected boolean isGreaterOrEqual(int first, int last) {\nreturn ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();\n}\n};\n\nfor (int i = 0; i < 100; i++) {\nh.push(new Integer((int)(100 * Math.random())));\n}\n\nSystem.out.println(h+""\\n"");\n\nwhile (h.size() > 0) {\nSystem.out.println(h.pop());\n}\n}\n}\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nConvert Java Object to JsonNode in Jackson\n----------Explanation----------\n\n----------Code Sample----------\nJsonNode node = objectMapper.valueToTree(map);\n\nJsonNode node = mapper.convertValue(object, JsonNode.class);\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nChange key in js associative array\n----------Explanation----------\nIn JavaScript there is no such thing as associative Array. Objects can be used instead:\n----------Code Sample----------\nvar myHash = new Object();\n\nvar myHash = {};\n\nmyHash[""from""] = ""value"";\nmyHash[""to""] = myHash[""from""];\ndelete myHash[""from""];\n\nmyHash.from = ""value"";\nmyHash.to = myHash.from;\ndelete myHash.from;\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nUnderstanding the difference between Object.create() and new SomeFunction()\n----------Explanation----------\nWith constructor functions, the newly created object inherits from the constructor\'s prototype, e.g.:\n----------Code Sample----------\nvar o = new SomeConstructor();\n\nvar o = Object.create({inherited: 1}, {\nfoo: {\nget: (function () { // a closure\nvar closured = \'foo\';\nreturn function () {\nreturn closured+\'bar\';\n};\n})()\n}\n});\n\no.foo; // ""foobar""\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow do I correctly clone a JavaScript object?\n----------Explanation----------\nYet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object\'s prototype is Object , then simply creating a new general object with {} will work, but if the source\'s prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren\'t enumerable in the first place. One solution might be to call the source object\'s constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:\n----------Code Sample----------\nfunction clone(obj) {\nif (null == obj || ""object"" != typeof obj) return obj;\nvar copy = obj.constructor();\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n}\nreturn copy;\n}\n\nvar d1 = new Date();\n\n/* Wait for 5 seconds. */\nvar start = (new Date()).getTime();\nwhile ((new Date()).getTime() - start < 5000);\n\n\nvar d2 = clone(d1);\nalert(""d1 = "" + d1.toString() + ""\\nd2 = "" + d2.toString());\n\nfunction clone(obj) {\nvar copy;\n\n// Handle the 3 simple types, and null or undefined\nif (null == obj || ""object"" != typeof obj) return obj;\n\n// Handle Date\nif (obj instanceof Date) {\ncopy = new Date();\ncopy.setTime(obj.getTime());\nreturn copy;\n}\n\n// Handle Array\nif (obj instanceof Array) {\ncopy = [];\nfor (var i = 0, len = obj.length; i < len; i++) {\ncopy[i] = clone(obj[i]);\n}\nreturn copy;\n}\n\n// Handle Object\nif (obj instanceof Object) {\ncopy = {};\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n}\nreturn copy;\n}\n\nthrow new Error(""Unable to copy obj! Its type isn\'t supported."");\n}\n\n// This would be cloneable:\nvar tree = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""right"" : null,\n""data"" : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ndirectedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ncylicGraph[""right""] = cylicGraph;\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow do I access properties of a javascript object if I don\'t know the names?\n----------Explanation----------\nYou can loop through keys like this:\n----------Code Sample----------\nfor (var key in data) {\nconsole.log(key);\n}\n\nfor (var key in data) {\nif (data.hasOwnProperty(key)) {\nconsole.log(key);\n}\n}\n\nfor each (var value in data) {\nconsole.log(value);\n}\n\nvar data = { Name: \'Property Name\', Value: \'0\' };\nconsole.log(Object.keys(data)); // => [""Name"", ""Value""]\n\nObject.keys(data).forEach(function (key) {\nconsole.log(data[key]);\n});\n// => Logs ""Property Name"", 0\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nC# version of java\'s synchronized keyword?\n----------Explanation----------\nFor the method-level stuff, there is [MethodImpl] :\n----------Code Sample----------\n[MethodImpl(MethodImplOptions.Synchronized)]\npublic void SomeMethod() {/* code */}\n\nprivate int i;\npublic int SomeProperty\n{\n[MethodImpl(MethodImplOptions.Synchronized)]\nget { return i; }\n[MethodImpl(MethodImplOptions.Synchronized)]\nset { i = value; }\n}\n\npublic int SomeProperty {get;set;} // not synchronized\npublic event EventHandler SomeEvent; // synchronized\n\nprivate readonly object syncLock = new object();\npublic void SomeMethod() {\nlock(syncLock) { /* code */ }\n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nIs it possible to implement properties in languages other than C#?\n----------Explanation----------\nPython definitely supports properties:\n----------Code Sample----------\nclass Foo(object):\n\ndef get_length_inches(self):\nreturn self.length_meters * 39.0\n\ndef set_length_inches(self, val):\nself.length_meters = val/39.0\n\nlength_inches = property(get_length_inches, set_length_inches)\n\nclass Foo(object):\n\n# 2.5 or later\n@property\ndef length_inches(self):\nreturn self.length_meters * 39.0\n\n# 2.6 or later\n@length_inches.setter\ndef length_inches(self, val):\nself.length_meters = val/39.0\n*******************end of usage scenario 29***************** \n\n*******************usage scenario 30********************** \n----------usage scenario----------\nJson deserialization into another class hierarchy using Jackson\n----------Explanation----------\nHere is a code which creates ObjectMapper for deserialization:\n----------Code Sample----------\nprotected ObjectMapper getObjectMapperForDeserialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {\nprivate HashMap classes = new HashMap() {\n{\nput(ConcreteA.class, ConcreteAAdapter.class);\nput(ConcreteB.class, ConcreteBAdapter.class);\nput(ConcreteC.class, ConcreteCAdapter.class);\n}\n};\n\n@Override\npublic String idFromValue(Object value) {\nreturn (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;\n}\n\n@Override\npublic JavaType typeFromId(String id) {\ntry {\nreturn classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));\n} catch (ClassNotFoundException e) {\n// todo catch the e\n}\nreturn super.typeFromId(id);\n}\n});\nmapper.setDefaultTyping(typeResolverBuilder);\nreturn mapper;\n}\n\nprotected ObjectMapper getObjectMapperForSerialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes""""""]']","['To unmarshall XML attributes to specific Java object attributes using JAXB (Java Architecture for XML Binding), you need to follow a series of steps. JAXB allows you to map XML elements and attributes to Java objects and vice versa. First, you need to annotate your Java class with JAXB annotations to specify how the XML data should be mapped to the Java object. The @XmlRootElement annotation is used to define the root element of the XML, while the @XmlAttribute annotation is used to map XML attributes to Java fields. Each field in the Java class that corresponds to an XML attribute should be annotated with @XmlAttribute. You can also use other annotations like @XmlElement for XML elements and @XmlType to define the order of elements. Once your Java class is properly annotated, you can use the JAXBContext and Unmarshaller classes to convert the XML data into the Java object. The JAXBContext is created for the specific class, and the Unmarshaller is used to read the XML and populate the Java object with the data. This process allows you to easily convert XML attributes into specific attributes of a Java object, facilitating the manipulation and use of XML data within your Java application.']","['[\'[\\\'To unmarshall XML attributes to specific Java Object attributes using JAXB, we need to follow these steps: 1. Create a Java class that represents the XML structure. 2. Annotate the Java class with JAXB annotations to map the XML attributes to Java object attributes. 3. Use JAXB to unmarshall the XML into the Java object. Below is an example demonstrating this process.\\\\nimport javax.xml.bind.annotation.XmlAttribute;\\\\nimport javax.xml.bind.annotation.XmlElement;\\\\nimport javax.xml.bind.annotation.XmlRootElement;\\\\nimport javax.xml.bind.JAXBContext;\\\\nimport javax.xml.bind.JAXBException;\\\\nimport javax.xml.bind.Unmarshaller;\\\\nimport java.io.StringReader;\\\\n@XmlRootElement(name = ""person"")\\\\npublic class Person {\\\\n\\\\n    private String name;\\\\n    private int age;\\\\n\\\\n    @XmlAttribute(name = ""name"")\\\\n    public void setName(String name) {\\\\n        this.name = name;\\\\n    }\\\\n\\\\n    public String getName() {\\\\n        return name;\\\\n    }\\\\n\\\\n    @XmlAttribute(name = ""age"")\\\\n    public void setAge(int age) {\\\\n        this.age = age;\\\\n    }\\\\n\\\\n    public int getAge() {\\\\n        return age;\\\\n    }\\\\n\\\\n    @Override\\\\n    public String toString() {\\\\n        return ""Person{name=\\\\\\\'"" + name + ""\\\\\\\', age="" + age + ""}"";\\\\n    }\\\\n\\\\n    public static void main(String[] args) {\\\\n        String xml = ""<person name=\\\\\\\\""John\\\\\\\\"" age=\\\\\\\\""30\\\\\\\\""></person>"";\\\\n\\\\n        try {\\\\n            JAXBContext context = JAXBContext.newInstance(Person.class);\\\\n            Unmarshaller unmarshaller = context.createUnmarshaller();\\\\n            Person person = (Person) unmarshaller.unmarshal(new StringReader(xml));\\\\n            System.out.println(person);\\\\n        } catch (JAXBException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.5,0.2647058823529412,0.6289134438305709,1.0,0.1666666666666666
lang,Object,Inserting Java Object to MongoDB Collection Using Java,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['Direct Known Subclasses:\nAbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile']","['You can convert your java object into json string using the gson library and then insert it in mongodb.\n\nEg:\n\nGson gson = new Gson();\nString json = gson.toJson(Employee);    \nBasicDBObject basicDBObject = new BasicDBObject(""Name"", json );          \nDBCollection dbCollection = db.getCollection(""NameColl"");          \ndbCollection.save(basicDBObject);    ']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nConverting Java objects to JSON with Jackson\n----------Explanation----------\nTo convert your object in JSON with Jackson:\n----------Code Sample----------\nObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();\nString json = ow.writeValueAsString(object);\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nHow to create a jQuery plugin with methods?\n----------Explanation----------\nAccording to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method\n----------Code Sample----------\n(function( $ ){\n\nvar methods = {\ninit : function(options) {\n\n},\nshow : function( ) { },// IS\nhide : function( ) { },// GOOD\nupdate : function( content ) { }// !!!\n};\n\n$.fn.tooltip = function(methodOrOptions) {\nif ( methods[methodOrOptions] ) {\nreturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\n} else if ( typeof methodOrOptions === \'object\' || ! methodOrOptions ) {\n// Default to ""init""\nreturn methods.init.apply( this, arguments );\n} else {\n$.error( \'Method \' + methodOrOptions + \' does not exist on jQuery.tooltip\' );\n} \n};\n\n\n})( jQuery );\n\n$(\'div\').tooltip(); // calls the init method\n$(\'div\').tooltip({ // calls the init method\nfoo : \'bar\'\n});\n$(\'div\').tooltip(\'hide\'); // calls the hide method\n$(\'div\').tooltip(\'update\', \'This is the new tooltip content!\'); // calls the update method\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nChecking if a key exists in a JavaScript object?\n----------Explanation----------\nChecking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?\n----------Code Sample----------\nvar obj = { key: undefined };\nobj[""key""] != undefined // false, but the key exists!\n\n""key"" in obj // true, regardless of the actual value\n\n!(""key"" in obj) // true if ""key"" doesn\'t exist in object\n!""key"" in obj // ERROR! Equivalent to ""false in obj""\n\nobj.hasOwnProperty(""key"") // true\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to ""properly"" create a custom object in JavaScript?\n----------Explanation----------\nLet\'s start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.\n----------Code Sample----------\nfunction Shape(x, y) {\nthis.x= x;\nthis.y= y;\n}\n\nShape.prototype.toString= function() {\nreturn \'Shape at \'+this.x+\', \'+this.y;\n};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y); // invoke the base class\'s constructor function to take co-ords\nthis.r= r;\n}\nCircle.prototype= new Shape();\n\nCircle.prototype.toString= function() {\nreturn \'Circular \'+Shape.prototype.toString.call(this)+\' with radius \'+this.r;\n}\n\nfunction subclassOf(base) {\n_subclassOf.prototype= base.prototype;\nreturn new _subclassOf();\n}\nfunction _subclassOf() {};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.prototype= subclassOf(Shape);\n\nFunction.prototype.subclass= function(base) {\nvar c= Function.prototype.subclass.nonconstructor;\nc.prototype= base.prototype;\nthis.prototype= new c();\n};\nFunction.prototype.subclass.nonconstructor= function() {};\n\n...\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.subclass(Shape);\n\nfunction Point() {\nShape.apply(this, arguments);\n}\nPoint.subclass(Shape);\n\nfunction Shape() { this._init.apply(this, arguments); }\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nfunction Point() { this._init.apply(this, arguments); }\nPoint.subclass(Shape);\n// no need to write new initialiser for Point!\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (\'_init\' in this)\nthis._init.apply(this, arguments);\n}\nFunction.prototype.makeSubclass.nonconstructor.prototype= this.prototype;\nClass.prototype= new Function.prototype.makeSubclass.nonconstructor();\nreturn Class;\n};\nFunction.prototype.makeSubclass.nonconstructor= function() {};\n\n...\n\nShape= Object.makeSubclass();\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nPoint= Shape.makeSubclass();\n\nCircle= Shape.makeSubclass();\nCircle.prototype._init= function(x, y, r) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n};\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (!(this instanceof Class))\nthrow(\'Constructor called without ""new""\');\n...\n\nCircle= Shape.makeSubclass({\n_init: function(x, y, z) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n},\n...\n});\n\nfunction Shape(x, y) {\nvar that= this;\n\nthis.x= x;\nthis.y= y;\n\nthis.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n}\n\nfunction Circle(x, y, r) {\nvar that= this;\n\nShape.call(this, x, y);\nthis.r= r;\n\nvar _baseToString= this.toString;\nthis.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+that.r;\n};\n};\n\nvar mycircle= new Circle();\n\nvar ts= mycircle.toString;\nalert(ts());\n\nsetTimeout(function() {\nmycircle.move(1, 1);\n}, 1000);\n\nsetTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);\n\nfunction Shape(x, y) {\nvar that= {};\n\nthat.x= x;\nthat.y= y;\n\nthat.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n\nreturn that;\n}\n\nfunction Circle(x, y, r) {\nvar that= Shape(x, y);\n\nthat.r= r;\n\nvar _baseToString= that.toString;\nthat.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+r;\n};\n\nreturn that;\n};\n\nvar mycircle= Circle(); // you can include `new` if you want but it won\'t do anything\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nAvoiding != null statements\n----------Explanation----------\n(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:\n----------Code Sample----------\nassert \n\nassert : \n\npublic interface Action {\nvoid doSomething();\n}\n\npublic interface Parser {\nAction findAction(String userInput);\n}\n\npublic class MyParser implements Parser {\nprivate static Action DO_NOTHING = new Action() {\npublic void doSomething() { /* do nothing */ }\n};\n\npublic Action findAction(String userInput) {\n// ...\nif ( /* we can\'t find any actions */ ) {\nreturn DO_NOTHING;\n}\n}\n}\n\nParser parser = ParserFactory.getParser();\nif (parser == null) {\n// now what?\n// this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n// do nothing\n} else {\naction.doSomething();\n}\n\nParserFactory.getParser().findAction(someInput).doSomething();\n\ntry {\nParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\nuserConsole.err(anfe.getMessage());\n}\n\npublic Action findAction(final String userInput) {\n/* Code to return requested Action if found */\nreturn new Action() {\npublic void doSomething() {\nuserConsole.err(""Action not found: "" + userInput);\n}\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nJava Generics Wildcarding With Multiple Classes\n----------Explanation----------\nActually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:\n----------Code Sample----------\n\n\npublic static > T\nmax(Collection coll)\n\nclass classB { }\ninterface interfaceC { }\n\npublic class MyClass {\nClass variable;\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCloning an Object in Node.js\n----------Explanation----------\n\n----------Code Sample----------\nvar obj2 = JSON.parse(JSON.stringify(obj1));\n\nvar extend = require(\'util\')._extend;\n\nvar obj1 = {x: 5, y:5};\nvar obj2 = extend({}, obj1);\nobj2.x = 6;\nconsole.log(obj1.x); // still logs 5\n\nexports._extend = function(origin, add) {\n// Don\'t do anything if add isn\'t an object\nif (!add || typeof add !== \'object\') return origin;\n\nvar keys = Object.keys(add);\nvar i = keys.length;\nwhile (i--) {\norigin[keys[i]] = add[keys[i]];\n}\nreturn origin;\n};\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nNull check in an enhanced for loop\n----------Explanation----------\nIf you get this list from somewhere else and don\'t know if it is ok or not you could create a utility method and use it like this:\n----------Code Sample----------\nfor( Object o : safe( list ) ) {\n// do whatever \n}\n\npublic static List safe( List other ) {\nreturn other == null ? Collections.EMPTY_LIST : other;\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nShallow copy for arrays, why can\'t simply do newArr = oldArr?\n----------Explanation----------\n""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:\n----------Code Sample----------\nOriginal Array\n\n[0]\n[1]\n[2]\n[3]\n\nAfter copying:\n\n[0] <--- Original [0]\n[1] [1]\n[3] [2]\n[4] Copy ---> [3]\n\nOriginal Array:\n\n[0:]----> [object 0]\n[1:]----> [object 1]\n[2:]----> [object 2]\n[3:]----> [object 3]\n\nOriginal -> [0:]----> [object 0] <----[:0] <- Copy\n[1:]----> [object 1] <----[:1]\n[2:]----> [object 2] <----[:2]\n[3:]----> [object 3] <----[:3]\n\nOriginal -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]\n[1:]----> [object 1] [1:]----> [copy of object 1]\n[2:]----> [object 2] [2:]----> [copy of object 2]\n[3:]----> [object 3] [3:]----> [copy of object 3]\n\narr1 -> [0, 1, 2, 3, 4]\n\narr1 -> [0, 1, 2, 3, 4] <- arr2\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIterate through object properties\n----------Explanation----------\nIterating over properties requires this additional hasOwnProperty check:\n----------Code Sample----------\nfor (var property in object) {\nif (object.hasOwnProperty(property)) {\n// do stuff\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow do I test for an empty JavaScript object?\n----------Explanation----------\n\n----------Code Sample----------\n// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 && obj.constructor === Object\n\nfunction isEmpty(obj) {\nfor(var prop in obj) {\nif(obj.hasOwnProperty(prop))\nreturn false;\n}\n\nreturn true && JSON.stringify(obj) === JSON.stringify({});\n}\n\njQuery.isEmptyObject({}); // true\n\n_.isEmpty({}); // true\n\n_.isEmpty({}); // true\n\nHoek.deepEqual({}, {}); // true\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\ndynamic object construction in javascript?\n----------Explanation----------\n\n----------Code Sample----------\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Use a fake constructor function with the target constructor\'s\n// `prototype` property to create the object with the right prototype\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nobj = new fakeCtor();\n\n// Set the object\'s `constructor`\nobj.constructor = ctor;\n\n// Call the constructor function\nnewobj = ctor.apply(obj, params);\n\n// Use the returned object if there is one.\n// Note that we handle the funky edge case of the `Function` constructor,\n// thanks to Mike\'s comment below. Double-checked the spec, that should be\n// the lot.\nif (newobj !== null\n&& (typeof newobj === ""object"" || typeof newobj === ""function"")\n) {\nobj = newobj;\n}\n\n// Done\nreturn obj;\n}\n\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Create the object with the desired prototype\nif (typeof Object.create === ""function"") {\n// ECMAScript 5 \nobj = Object.create(ctor.prototype);\n}\nelse if ({}.__proto__) {\n// Non-standard __proto__, supported by some browsers\nobj = {};\nobj.__proto__ = ctor.prototype;\nif (obj.__proto__ !== ctor.prototype) {\n// Setting it didn\'t work\nobj = makeObjectWithFakeCtor();\n}\n}\nelse {\n// Fallback\nobj = makeObjectWithFakeCtor();\n}\n\n// Set the object\'s constructor\nobj.constructor = ctor;\n\n// Apply the constructor function\nnewobj = ctor.apply(obj, params);\n\n// If a constructor function returns an object, that\n// becomes the return value of `new`, so we handle\n// that here.\nif (typeof newobj === ""object"") {\nobj = newobj;\n}\n\n// Done!\nreturn obj;\n\n// Subroutine for building objects with specific prototypes\nfunction makeObjectWithFakeCtor() {\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nreturn new fakeCtor();\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow to pass json POST data to Web API method as object\n----------Explanation----------\n\n----------Code Sample----------\ncontentType:""application/json""\n\n$(function () {\nvar customer = {contact_name :""Scott"",company_name:""HP""};\n$.ajax({\ntype: ""POST"",\ndata :JSON.stringify(customer),\nurl: ""api/Customer"",\ncontentType: ""application/json""\n});\n});\n\npublic class CreateUserViewModel\n{\npublic int Id {set;get;}\npublic string Name {set;get;} \npublic List Tags {set;get;}\n}\npublic class TagViewModel\n{\npublic int Id {set;get;}\npublic string Code {set;get;}\n}\n\npublic class ProductController : Controller\n{\n[HttpPost]\npublic CreateUserViewMode Save([FromBody] CreateUserViewModel m)\n{\n// I am just returning the posted model as it is. \n// You may do other stuff and return different response.\n// Ex : missileService.LaunchMissile(m);\nreturn m;\n}\n}\n\n//Build an object which matches the structure of our view model class\nvar model = {\nName: ""Shyju"",\nId: 123,\nTags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]\n};\n\n$.ajax({\ntype: ""POST"",\ndata: JSON.stringify(model),\nurl: ""../product/save"",\ncontentType: ""application/json""\n}).done(function(res) { \nconsole.log(\'res\', res);\n// Do something with the result :)\n});\n\n[HttpPost]\npublic CreateUserViewModel Save(CreateUserViewModel m)\n{\nreturn m;\n}\n\n$.ajax({\ntype: ""POST"",\ndata: model,\nurl: ""../product/save""\n}).done(function (res) {\nconsole.log(\'res\', res);\n});\n\n$.post(""../product/save"", model, function (res) {\n//res contains the markup returned by the partial view\nconsole.log(\'res\', res);\n});\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow to create a simple map using JavaScript/JQuery\n----------Explanation----------\nEdit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n----------Code Sample----------\nvar map = new Object(); // or var map = {};\nmap[myKey1] = myObj1;\nmap[myKey2] = myObj2;\n\nfunction get(k) {\nreturn map[k];\n}\n\n//map[myKey1] == get(myKey1);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHow to efficiently count the number of keys/properties of an object in JavaScript?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-js prettyprint-override"">Object.keys(obj).length\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nOverriding the java equals() method quirk\n----------Explanation----------\nIn Java, the equals() method that is inherited from Object is:\n----------Code Sample----------\npublic boolean equals(Object other);\n\n@Override\npublic boolean equals(Object other){\nif (other == null) return false;\nif (other == this) return true;\nif (!(other instanceof MyClass))return false;\nMyClass otherMyClass = (MyClass)other;\n...test other properties here...\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nHow can I access a private constructor of a class?\n----------Explanation----------\nOne way to bypass the restriction is to use reflections:\n----------Code Sample----------\nimport java.lang.reflect.Constructor;\n\npublic class Example {\npublic static void main(final String[] args) throws Exception {\nConstructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);\nconstructor.setAccessible(true);\nFoo foo = constructor.newInstance(new Object[0]);\nSystem.out.println(foo);\n}\n}\n\nclass Foo {\nprivate Foo() {\n// private!\n}\n\n@Override\npublic String toString() {\nreturn ""I\'m a Foo and I\'m alright!"";\n}\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nWhy is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?\n----------Explanation----------\n\n----------Code Sample----------\npublic Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}\n\n// calls the varargs method.\nFoo(new Object[]{new Object(), new Object()});\n\npublic static void main(String... args) {\n\npublic Foo(Object o, Object... os){} \n\npublic Foo(Object[] os) {}\n\nFoo(new Object(), new Object()); // calls the first.\n\nFoo(new Object[]{new Object(), new Object()}); // calls the second.\n\npublic Foo(Object... os){} \n\npublic Bar(Object[] os) {}\n\nFoo(new Object[]{new Object(), new Object()}); // compiles fine.\n\nBar(new Object(), new Object()); // Fails to compile.\n\npublic Foo(Object... os, int i){} // fails to compile.\n\npublic Bar(Object[] os, int i) {} // compiles ok.\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nWhat does enumerable mean?\n----------Explanation----------\nIf a property isn\'t identified as enumerable, the loop will ignore that it\'s within the object.\n----------Code Sample----------\nvar obj = { key: \'val\' };\n\nconsole.log(\'toString\' in obj); // true\nconsole.log(typeof obj.toString); // ""function""\n\nfor (var key in obj)\nconsole.log(key); // ""key""\n\nvar descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, \'bar\');\n\nconsole.log(descriptor.enumerable); // true\nconsole.log(descriptor.value); // 1\n\nconsole.log(descriptor);\n// { value: 1, writable: true, enumerable: true, configurable: true }\n\nvar foo = { bar: 1, baz: 2};\n\nfor (var prop in foo)\nconsole.log(prop); // outputs \'bar\' and \'baz\'\n\nconsole.log(Object.getOwnPropertyNames(Object.prototype));\n// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]\n\nconsole.log(\'constructor\' in foo); // true\nconsole.log(\'toString\' in foo); // true\n// etc.\n\nvar descriptor = Object.getOwnPropertyDescriptor(Object.prototype, \'constructor\');\n\nconsole.log(descriptor.enumerable); // false\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nEach for object?\n----------Explanation----------\nA javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work\n----------Code Sample----------\n$.each(object, function(index, value) {\nconsole.log(value);\n}); \n\nfor(var index in object) { \nvar attr = object[index]; \n}\n\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\nvar attr = object[index];\n}\n}\n\nclick\nclick\nclick\n\nvar object = [""first"", ""middle"", ""last""];\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\n$(\'.index\'+index).click(function() {\nconsole.log(object[index]);\n});\n}\n}\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoading Java Builder Object from Yaml file\n----------Explanation----------\nSnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.\n----------Code Sample----------\n/**\n* create JavaBean\n*/\npublic void testGetBeanAssumeClass() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person\\nfirstName: Andrey\\nage: 99"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertNull(person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n\n/**\n* create instance using constructor arguments\n*/\npublic void testGetConstructorBean() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertEquals(""Somov"", person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nPriorityQueue/Heap Update\n----------Explanation----------\nSome years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java\'s Comparator and Comparable interfaces, and also would make the class use generics.)\n----------Code Sample----------\nimport java.util.*;\n\npublic abstract class Heap {\n\nprivate List heap;\n\npublic Heap() {\nheap = new ArrayList();\n}\n\npublic void push(Object obj) {\nheap.add(obj);\npushUp(heap.size()-1);\n}\n\npublic Object pop() {\nif (heap.size() > 0) {\nswap(0, heap.size()-1);\nObject result = heap.remove(heap.size()-1);\npushDown(0);\nreturn result;\n} else {\nreturn null;\n}\n}\n\npublic Object getFirst() {\nreturn heap.get(0);\n}\n\npublic Object get(int index) {\nreturn heap.get(index);\n}\n\npublic int size() {\nreturn heap.size();\n}\n\nprotected abstract boolean isGreaterOrEqual(int first, int last);\n\nprotected int parent(int i) {\nreturn (i - 1) / 2;\n}\n\nprotected int left(int i) {\nreturn 2 * i + 1;\n}\n\nprotected int right(int i) {\nreturn 2 * i + 2;\n}\n\nprotected void swap(int i, int j) {\nObject tmp = heap.get(i);\nheap.set(i, heap.get(j));\nheap.set(j, tmp);\n}\n\npublic void pushDown(int i) {\nint left = left(i);\nint right = right(i);\nint largest = i;\n\nif (left < heap.size() && !isGreaterOrEqual(largest, left)) {\nlargest = left;\n}\nif (right < heap.size() && !isGreaterOrEqual(largest, right)) {\nlargest = right;\n}\n\nif (largest != i) {\nswap(largest, i);\npushDown(largest);\n}\n}\n\npublic void pushUp(int i) {\nwhile (i > 0 && !isGreaterOrEqual(parent(i), i)) {\nswap(parent(i), i);\ni = parent(i);\n}\n}\n\npublic String toString() {\nStringBuffer s = new StringBuffer(""Heap:\\n"");\nint rowStart = 0;\nint rowSize = 1;\nfor (int i = 0; i < heap.size(); i++) {\nif (i == rowStart+rowSize) {\ns.append(\'\\n\');\nrowStart = i;\nrowSize *= 2;\n}\ns.append(get(i));\ns.append("" "");\n}\nreturn s.toString();\n}\n\npublic static void main(String[] args){\nHeap h = new Heap() {\nprotected boolean isGreaterOrEqual(int first, int last) {\nreturn ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();\n}\n};\n\nfor (int i = 0; i < 100; i++) {\nh.push(new Integer((int)(100 * Math.random())));\n}\n\nSystem.out.println(h+""\\n"");\n\nwhile (h.size() > 0) {\nSystem.out.println(h.pop());\n}\n}\n}\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nConvert Java Object to JsonNode in Jackson\n----------Explanation----------\n\n----------Code Sample----------\nJsonNode node = objectMapper.valueToTree(map);\n\nJsonNode node = mapper.convertValue(object, JsonNode.class);\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nChange key in js associative array\n----------Explanation----------\nIn JavaScript there is no such thing as associative Array. Objects can be used instead:\n----------Code Sample----------\nvar myHash = new Object();\n\nvar myHash = {};\n\nmyHash[""from""] = ""value"";\nmyHash[""to""] = myHash[""from""];\ndelete myHash[""from""];\n\nmyHash.from = ""value"";\nmyHash.to = myHash.from;\ndelete myHash.from;\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nUnderstanding the difference between Object.create() and new SomeFunction()\n----------Explanation----------\nWith constructor functions, the newly created object inherits from the constructor\'s prototype, e.g.:\n----------Code Sample----------\nvar o = new SomeConstructor();\n\nvar o = Object.create({inherited: 1}, {\nfoo: {\nget: (function () { // a closure\nvar closured = \'foo\';\nreturn function () {\nreturn closured+\'bar\';\n};\n})()\n}\n});\n\no.foo; // ""foobar""\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow do I correctly clone a JavaScript object?\n----------Explanation----------\nYet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object\'s prototype is Object , then simply creating a new general object with {} will work, but if the source\'s prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren\'t enumerable in the first place. One solution might be to call the source object\'s constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:\n----------Code Sample----------\nfunction clone(obj) {\nif (null == obj || ""object"" != typeof obj) return obj;\nvar copy = obj.constructor();\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n}\nreturn copy;\n}\n\nvar d1 = new Date();\n\n/* Wait for 5 seconds. */\nvar start = (new Date()).getTime();\nwhile ((new Date()).getTime() - start < 5000);\n\n\nvar d2 = clone(d1);\nalert(""d1 = "" + d1.toString() + ""\\nd2 = "" + d2.toString());\n\nfunction clone(obj) {\nvar copy;\n\n// Handle the 3 simple types, and null or undefined\nif (null == obj || ""object"" != typeof obj) return obj;\n\n// Handle Date\nif (obj instanceof Date) {\ncopy = new Date();\ncopy.setTime(obj.getTime());\nreturn copy;\n}\n\n// Handle Array\nif (obj instanceof Array) {\ncopy = [];\nfor (var i = 0, len = obj.length; i < len; i++) {\ncopy[i] = clone(obj[i]);\n}\nreturn copy;\n}\n\n// Handle Object\nif (obj instanceof Object) {\ncopy = {};\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n}\nreturn copy;\n}\n\nthrow new Error(""Unable to copy obj! Its type isn\'t supported."");\n}\n\n// This would be cloneable:\nvar tree = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""right"" : null,\n""data"" : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ndirectedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ncylicGraph[""right""] = cylicGraph;\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow do I access properties of a javascript object if I don\'t know the names?\n----------Explanation----------\nYou can loop through keys like this:\n----------Code Sample----------\nfor (var key in data) {\nconsole.log(key);\n}\n\nfor (var key in data) {\nif (data.hasOwnProperty(key)) {\nconsole.log(key);\n}\n}\n\nfor each (var value in data) {\nconsole.log(value);\n}\n\nvar data = { Name: \'Property Name\', Value: \'0\' };\nconsole.log(Object.keys(data)); // => [""Name"", ""Value""]\n\nObject.keys(data).forEach(function (key) {\nconsole.log(data[key]);\n});\n// => Logs ""Property Name"", 0\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nC# version of java\'s synchronized keyword?\n----------Explanation----------\nFor the method-level stuff, there is [MethodImpl] :\n----------Code Sample----------\n[MethodImpl(MethodImplOptions.Synchronized)]\npublic void SomeMethod() {/* code */}\n\nprivate int i;\npublic int SomeProperty\n{\n[MethodImpl(MethodImplOptions.Synchronized)]\nget { return i; }\n[MethodImpl(MethodImplOptions.Synchronized)]\nset { i = value; }\n}\n\npublic int SomeProperty {get;set;} // not synchronized\npublic event EventHandler SomeEvent; // synchronized\n\nprivate readonly object syncLock = new object();\npublic void SomeMethod() {\nlock(syncLock) { /* code */ }\n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nIs it possible to implement properties in languages other than C#?\n----------Explanation----------\nPython definitely supports properties:\n----------Code Sample----------\nclass Foo(object):\n\ndef get_length_inches(self):\nreturn self.length_meters * 39.0\n\ndef set_length_inches(self, val):\nself.length_meters = val/39.0\n\nlength_inches = property(get_length_inches, set_length_inches)\n\nclass Foo(object):\n\n# 2.5 or later\n@property\ndef length_inches(self):\nreturn self.length_meters * 39.0\n\n# 2.6 or later\n@length_inches.setter\ndef length_inches(self, val):\nself.length_meters = val/39.0\n*******************end of usage scenario 29***************** \n\n*******************usage scenario 30********************** \n----------usage scenario----------\nJson deserialization into another class hierarchy using Jackson\n----------Explanation----------\nHere is a code which creates ObjectMapper for deserialization:\n----------Code Sample----------\nprotected ObjectMapper getObjectMapperForDeserialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {\nprivate HashMap classes = new HashMap() {\n{\nput(ConcreteA.class, ConcreteAAdapter.class);\nput(ConcreteB.class, ConcreteBAdapter.class);\nput(ConcreteC.class, ConcreteCAdapter.class);\n}\n};\n\n@Override\npublic String idFromValue(Object value) {\nreturn (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;\n}\n\n@Override\npublic JavaType typeFromId(String id) {\ntry {\nreturn classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));\n} catch (ClassNotFoundException e) {\n// todo catch the e\n}\nreturn super.typeFromId(id);\n}\n});\nmapper.setDefaultTyping(typeResolverBuilder);\nreturn mapper;\n}\n\nprotected ObjectMapper getObjectMapperForSerialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes""""""]']","['To insert a Java object into a MongoDB collection using Java, you need to follow several steps. First, ensure you have the MongoDB Java driver included in your project dependencies. You can use a build tool like Maven or Gradle to manage this dependency. Next, establish a connection to your MongoDB instance using the MongoClient class. Once connected, access the specific database and collection where you want to insert the object. Convert your Java object into a BSON document, which is the format MongoDB uses to store data. This can be done using the Document class provided by the MongoDB driver. After converting the object, use the insertOne method of the MongoCollection class to insert the document into the collection. Finally, handle any potential exceptions that may arise during the process to ensure robust error handling. This approach allows you to seamlessly integrate Java applications with MongoDB, enabling efficient data storage and retrieval.']","['[\'[\\\'To insert a Java object into a MongoDB collection, we need to use the MongoDB Java Driver. Below is an example of how to do this. The example assumes you have a MongoDB instance running locally on the default port (27017) and a database named \\\\\\\'testdb\\\\\\\' with a collection named \\\\\\\'testcollection\\\\\\\'. The Java object we will insert is a simple `Person` class with fields for name and age.\\\\nimport com.mongodb.MongoClient;\\\\nimport com.mongodb.client.MongoCollection;\\\\nimport com.mongodb.client.MongoDatabase;\\\\nimport org.bson.Document;\\\\nclass Person {\\\\n    private String name;\\\\n    private int age;\\\\n\\\\n    public Person(String name, int age) {\\\\n        this.name = name;\\\\n        this.age = age;\\\\n    }\\\\n\\\\n    public String getName() {\\\\n        return name;\\\\n    }\\\\n\\\\n    public int getAge() {\\\\n        return age;\\\\n    }\\\\n\\\\n    public Document toDocument() {\\\\n        return new Document(""name"", name)\\\\n                .append(""age"", age);\\\\n    }\\\\n}\\\\n\\\\npublic class MongoDBExample {\\\\n    public static void main(String[] args) {\\\\n        // Create a new MongoClient instance\\\\n        MongoClient mongoClient = new MongoClient(""localhost"", 27017);\\\\n\\\\n        // Get the database\\\\n        MongoDatabase database = mongoClient.getDatabase(""testdb"");\\\\n\\\\n        // Get the collection\\\\n        MongoCollection<Document> collection = database.getCollection(""testcollection"");\\\\n\\\\n        // Create a new Person object\\\\n        Person person = new Person(""John Doe"", 30);\\\\n\\\\n        // Convert the Person object to a Document\\\\n        Document doc = person.toDocument();\\\\n\\\\n        // Insert the Document into the collection\\\\n        collection.insertOne(doc);\\\\n\\\\n        // Close the MongoClient\\\\n        mongoClient.close();\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.5,1.0,0.0257826887661141,0.9,0.1666666666666666
lang,Object,Java - getting max value from an arraylist of Objects?,['<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>Both of these interfaces allow for different behavior.\nComparable allows you to make the object act like you just described Strings (in fact  String implements Comparable).\nThe second  Comparator  allows you to do what you are asking to do.\nIf the objects in the ArrayList implement comparable  you can instead do something like this:</p>\n<p>The <a href= http://java.sun.com/javase/6/docs/api/java/util/Collections.html  rel= noreferrer >Collections</a> class contains a number of these useful  common tools.</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>\n<p>Since technologies appear everyday  the answer will change in the time.\n<p>Of course  having this kind of beauty impacts in the performance (an average of 2 times)  but can you find a more readable code?</p>\nFortunately  the actual code is much simpler and shorter than this description.</p>\n<p>If you want to sort for alphabet that contains non English characters you can use Locale...'],"['Direct Known Subclasses:\nAbstractAction, AbstractAnnotationValueVisitor6, AbstractBorder, AbstractButton.ButtonChangeListener, AbstractCellEditor, AbstractCollection, AbstractDocument, AbstractDocument.AbstractElement, AbstractElementVisitor6, AbstractExecutorService, AbstractInterruptibleChannel, AbstractLayoutCache, AbstractLayoutCache.NodeDimensions, AbstractListModel, AbstractMap, AbstractMap.SimpleEntry, AbstractMap.SimpleImmutableEntry, AbstractMarshallerImpl, AbstractOwnableSynchronizer, AbstractProcessor, AbstractQueuedLongSynchronizer.ConditionObject, AbstractQueuedSynchronizer.ConditionObject, AbstractScriptEngine, AbstractSpinnerModel, AbstractTableModel, AbstractTypeVisitor6, AbstractUndoableEdit, AbstractUnmarshallerImpl, AbstractWriter, AccessControlContext, AccessController, AccessibleAttributeSequence, AccessibleBundle, AccessibleContext, AccessibleHyperlink, AccessibleObject, AccessibleRelationSet, AccessibleStateSet, AccessibleTextSequence, ActionMap, ActivationDesc, ActivationGroupDesc, ActivationGroupDesc.CommandEnvironment, ActivationGroupID, ActivationID, AdapterAlreadyExistsHelper, AdapterInactiveHelper, AdapterManagerIdHelper, AdapterNameHelper, AdapterNonExistentHelper, AdapterStateHelper, AddressHelper, Adler32, AffineTransform, AffineTransformOp, AlgorithmParameterGenerator, AlgorithmParameterGeneratorSpi, AlgorithmParameters, AlgorithmParametersSpi, AlphaComposite, AlreadyBoundHelper, AlreadyBoundHolder, Annotation, Any, AnyHolder, AnySeqHelper, AnySeqHelper, AnySeqHolder, AppConfigurationEntry, AppConfigurationEntry.LoginModuleControlFlag, Area, Array, Arrays, AsyncBoxView.ChildLocator, AsyncBoxView.ChildState, AtomicBoolean, AtomicIntegerArray, AtomicIntegerFieldUpdater, AtomicLongArray, AtomicLongFieldUpdater, AtomicMarkableReference, AtomicReference, AtomicReferenceArray, AtomicReferenceFieldUpdater, AtomicStampedReference, AttachmentMarshaller, AttachmentPart, AttachmentUnmarshaller, Attribute, AttributeChangeNotificationFilter, AttributedCharacterIterator.Attribute, AttributedString, AttributeList, AttributeListImpl, Attributes, Attributes.Name, AttributeSetUtilities, AttributesImpl, AttributeValueExp, AudioFileFormat, AudioFileFormat.Type, AudioFileReader, AudioFileWriter, AudioFormat, AudioFormat.Encoding, AudioSystem, Authenticator, AuthorizeCallback, AWTEventMulticaster, AWTKeyStroke, BandCombineOp, BaseRowSet, BasicAttribute, BasicAttributes, BasicBorders, BasicBorders.SplitPaneBorder, BasicButtonListener, BasicColorChooserUI.PropertyHandler, BasicComboBoxEditor, BasicComboBoxUI.ComboBoxLayoutManager, BasicComboBoxUI.FocusHandler, BasicComboBoxUI.ItemHandler, BasicComboBoxUI.ListDataHandler, BasicComboBoxUI.PropertyChangeHandler, BasicComboPopup.ItemHandler, BasicComboPopup.ListDataHandler, BasicComboPopup.ListSelectionHandler, BasicComboPopup.PropertyChangeHandler, BasicControl, BasicFileChooserUI.SelectionListener, BasicGraphicsUtils, BasicHTML, BasicIconFactory, BasicInternalFrameTitlePane.PropertyChangeHandler, BasicInternalFrameTitlePane.TitlePaneLayout, BasicInternalFrameUI.BasicInternalFrameListener, BasicInternalFrameUI.ComponentHandler, BasicInternalFrameUI.GlassPaneDispatcher, BasicInternalFrameUI.InternalFrameLayout, BasicInternalFrameUI.InternalFramePropertyChangeListener, BasicListUI.FocusHandler, BasicListUI.ListDataHandler, BasicListUI.ListSelectionHandler, BasicListUI.MouseInputHandler, BasicListUI.PropertyChangeHandler, BasicMenuItemUI.MouseInputHandler, BasicMenuUI.ChangeHandler, BasicMenuUI.MouseInputHandler, BasicOptionPaneUI.ButtonActionListener, BasicOptionPaneUI.ButtonAreaLayout, BasicOptionPaneUI.PropertyChangeHandler, BasicProgressBarUI.ChangeHandler, BasicScrollBarUI.ModelListener, BasicScrollBarUI.PropertyChangeHandler, BasicScrollBarUI.ScrollListener, BasicScrollPaneUI.HSBChangeListener, BasicScrollPaneUI.MouseWheelHandler, BasicScrollPaneUI.PropertyChangeHandler, BasicScrollPaneUI.ViewportChangeHandler, BasicScrollPaneUI.VSBChangeListener, BasicSliderUI.ChangeHandler, BasicSliderUI.FocusHandler, BasicSliderUI.PropertyChangeHandler, BasicSliderUI.ScrollListener, BasicSplitPaneDivider.DividerLayout, BasicSplitPaneDivider.DragController, BasicSplitPaneUI.BasicHorizontalLayoutManager, BasicSplitPaneUI.KeyboardDownRightHandler, BasicSplitPaneUI.KeyboardEndHandler, BasicSplitPaneUI.KeyboardHomeHandler, BasicSplitPaneUI.KeyboardResizeToggleHandler, BasicSplitPaneUI.KeyboardUpLeftHandler, BasicSplitPaneUI.PropertyHandler, BasicStroke, BasicTabbedPaneUI.PropertyChangeHandler, BasicTabbedPaneUI.TabbedPaneLayout, BasicTabbedPaneUI.TabSelectionHandler, BasicTableHeaderUI.MouseInputHandler, BasicTableUI.FocusHandler, BasicTableUI.KeyHandler, BasicTableUI.MouseInputHandler, BasicToolBarUI.DockingListener, BasicToolBarUI.PropertyListener, BasicToolBarUI.ToolBarContListener, BasicToolBarUI.ToolBarFocusListener, BasicTreeUI.CellEditorHandler, BasicTreeUI.FocusHandler, BasicTreeUI.MouseInputHandler, BasicTreeUI.PropertyChangeHandler, BasicTreeUI.SelectionModelPropertyChangeHandler, BasicTreeUI.TreeExpansionHandler, BasicTreeUI.TreeModelHandler, BasicTreeUI.TreeSelectionHandler, BeanContextChildSupport, BeanContextServicesSupport.BCSSProxyServiceProvider, BeanContextServicesSupport.BCSSServiceProvider, BeanContextSupport.BCSChild, BeanContextSupport.BCSIterator, Beans, Bidi, Binder, Binding, BindingHelper, BindingHolder, BindingIteratorHelper, BindingIteratorHolder, BindingListHelper, BindingListHolder, BindingType, BindingTypeHelper, BindingTypeHolder, BitSet, Book, Boolean, BooleanHolder, BooleanSeqHelper, BooleanSeqHolder, BorderFactory, BorderLayout, BorderUIResource, BoxLayout, BreakIterator, Buffer, BufferCapabilities, BufferStrategy, ButtonGroup, ByteHolder, ByteOrder, CacheRequest, CacheResponse, Calendar, CannotProceedHelper, CannotProceedHolder, CardLayout, Certificate, Certificate, Certificate.CertificateRep, CertificateFactory, CertificateFactorySpi, CertPath, CertPath.CertPathRep, CertPathBuilder, CertPathBuilderSpi, CertPathTrustManagerParameters, CertPathValidator, CertPathValidatorSpi, CertStore, CertStoreSpi, ChannelBinding, Channels, Character, Character.Subset, CharHolder, CharSeqHelper, CharSeqHolder, Charset, CharsetDecoder, CharsetEncoder, CharsetProvider, CheckboxGroup, ChoiceCallback, Cipher, CipherSpi, Class, ClassDefinition, ClassDesc, ClassLoader, Clipboard, CodecFactoryHelper, CoderResult, CodeSigner, CodeSource, CodingErrorAction, CollationElementIterator, CollationKey, Collator, CollectionCertStoreParameters, Collections, Color, ColorChooserComponentFactory, ColorConvertOp, ColorModel, ColorSpace, ColorType, CompiledScript, Compiler, Completions, CompletionStatus, CompletionStatusHelper, Component, Component.AccessibleAWTComponent.AccessibleAWTComponentHandler, Component.AccessibleAWTComponent.AccessibleAWTFocusHandler, ComponentAdapter, ComponentIdHelper, ComponentOrientation, ComponentUI, CompositeDataInvocationHandler, CompositeDataSupport, CompositeName, CompoundName, Configuration, ConfigurationSpi, ConfirmationCallback, Console, Container.AccessibleAWTContainer.AccessibleContainerHandler, ContainerAdapter, ContentHandler, ContentModel, Context, ContextList, Control, Control.Type, ControlFactory, ConvolveOp, CookieHandler, CookieHolder, CopyOnWriteArrayList, CountDownLatch, CRC32, CRL, CSS, CSS.Attribute, CubicCurve2D, Currency, CurrentHelper, CurrentHelper, CurrentHelper, CurrentHolder, Cursor, CyclicBarrier, DataBuffer, DataFlavor, DatagramPacket, DatagramSocket, DatagramSocketImpl, DatatypeConstants, DatatypeConstants.Field, DatatypeConverter, DatatypeFactory, Date, DateFormatSymbols, DateTimeSyntax, DecimalFormatSymbols, DefaultBoundedRangeModel, DefaultButtonModel, DefaultCellEditor.EditorDelegate, DefaultColorSelectionModel, DefaultDesktopManager, DefaultHandler, DefaultListSelectionModel, DefaultLoaderRepository, DefaultLoaderRepository, DefaultMutableTreeNode, DefaultRowSorter.ModelWrapper, DefaultSingleSelectionModel, DefaultStyledDocument.ElementBuffer, DefaultStyledDocument.ElementSpec, DefaultTableColumnModel, DefaultTreeCellEditor, DefaultTreeModel, DefaultTreeSelectionModel, DefaultValidationEventHandler, DefinitionKind, DefinitionKindHelper, Deflater, Delegate, DescriptorSupport, DESedeKeySpec, DESKeySpec, Desktop, DHGenParameterSpec, DHParameterSpec, DHPrivateKeySpec, DHPublicKeySpec, DiagnosticCollector, Dictionary, Dimension2D, DirStateFactory.Result, DisplayMode, DnDConstants, DocFlavor, DocumentBuilder, DocumentBuilderFactory, DocumentEvent.EventType, DocumentFilter, DocumentFilter.FilterBypass, DOMCryptoContext, DOMImplementationRegistry, DOMResult, DOMSource, DOMStructure, DoubleHolder, DoubleSeqHelper, DoubleSeqHolder, DragGestureRecognizer, DragSource, DragSourceAdapter, DragSourceContext, DriverManager, DriverPropertyInfo, DropTarget, DropTarget.DropTargetAutoScroller, DropTargetAdapter, DropTargetContext, DropTargetContext.TransferableProxy, DSAParameterSpec, DSAPrivateKeySpec, DSAPublicKeySpec, DTD, DuplicateNameHelper, Duration, DynAnyFactoryHelper, DynAnyHelper, DynAnySeqHelper, DynArrayHelper, DynEnumHelper, DynFixedHelper, DynSequenceHelper, DynStructHelper, DynUnionHelper, DynValueHelper, ECFieldF2m, ECFieldFp, ECGenParameterSpec, ECParameterSpec, ECPoint, ECPrivateKeySpec, ECPublicKeySpec, EditorKit, Element, ElementFilter, ElementIterator, EllipticCurve, EncodedKeySpec, Encoder, Encoding, EncryptedPrivateKeyInfo, Endpoint, EndpointReference, Entity, Enum, EnumSyntax, Environment, ErrorManager, Event, EventHandler, EventListenerList, EventListenerProxy, EventObject, EventQueue, EventReaderDelegate, ExcC14NParameterSpec, ExceptionList, Exchanger, ExecutorCompletionService, Executors, ExemptionMechanism, ExemptionMechanismSpi, FeatureDescriptor, FieldNameHelper, FieldNameHelper, FieldPosition, File, FileChannel.MapMode, FileDescriptor, FileFilter, FileLock, FileSystemView, FileView, FilteredImageSource, FixedHolder, FlatteningPathIterator, FloatHolder, FloatSeqHelper, FloatSeqHolder, FlowLayout, FlowView.FlowStrategy, FocusAdapter, FocusTraversalPolicy, Font, FontMetrics, FontRenderContext, Format, FormatConversionProvider, FormatMismatchHelper, FormattableFlags, Formatter, Formatter, ForwardingFileObject, ForwardingJavaFileManager, ForwardRequestHelper, ForwardRequestHelper, FutureTask, GlyphJustificationInfo, GlyphMetrics, GlyphVector, GlyphView.GlyphPainter, GradientPaint, GraphicAttribute, Graphics, GraphicsConfigTemplate, GraphicsConfiguration, GraphicsDevice, GraphicsEnvironment, GridBagConstraints, GridBagLayout, GridBagLayoutInfo, GridLayout, GroupLayout, GSSManager, GuardedObject, Handler, HandlerBase, HashAttributeSet, HierarchyBoundsAdapter, HMACParameterSpec, Holder, HTML, HTML.Attribute, HTML.Tag, HTMLDocument.HTMLReader.TagAction, HTMLDocument.Iterator, HTMLEditorKit.HTMLFactory, HTMLEditorKit.Parser, HTMLEditorKit.ParserCallback, HttpCookie, HyperlinkEvent.EventType, ICC_Profile, IconUIResource, IdAssignmentPolicyValue, IdentifierHelper, Identity, IDLTypeHelper, IDN, IdUniquenessPolicyValue, IIOByteBuffer, IIOImage, IIOMetadata, IIOMetadataFormatImpl, IIOMetadataNode, IIOParam, IIOServiceProvider, Image, ImageCapabilities, ImageFilter, ImageIcon, ImageInputStreamImpl, ImageIO, ImageReader, ImageTypeSpecifier, ImageWriter, ImmutableDescriptor, ImplicitActivationPolicyValue, InconsistentTypeCodeHelper, InetAddress, Inflater, InitialContext, InputContext, InputMap, InputMethodHighlight, InputSource, InputStream, InputVerifier, Insets, IntegerSyntax, InterfaceAddress, InternalFrameAdapter, IntHolder, Introspector, InvalidAddressHelper, InvalidAddressHolder, InvalidNameHelper, InvalidNameHelper, InvalidNameHolder, InvalidPolicyHelper, InvalidSlotHelper, InvalidTypeForEncodingHelper, InvalidValueHelper, IOR, IORHelper, IORHolder, IORInterceptor_3_0Helper, IORInterceptor_3_0Holder, IstringHelper, IvParameterSpec, JAXB, JAXBContext, JAXBElement, JAXBElement.GlobalScope, JAXBIntrospector, JComponent.AccessibleJComponent.AccessibleContainerHandler, JComponent.AccessibleJComponent.AccessibleFocusHandler, JFormattedTextField.AbstractFormatter, JFormattedTextField.AbstractFormatterFactory, JMX, JMXConnectorFactory, JMXConnectorServerFactory, JMXPrincipal, JMXServiceURL, JobAttributes, JPEGHuffmanTable, JPEGQTable, JRootPane.RootLayout, JTabbedPane.ModelListener, JTable.AccessibleJTable.AccessibleJTableModelChange, JTextComponent.KeyBinding, JTree.TreeModelHandler, JTree.TreeSelectionRedirector, KerberosKey, KerberosPrincipal, KerberosTicket, Kernel, KeyAdapter, KeyAgreement, KeyAgreementSpi, KeyboardFocusManager, KeyFactory, KeyFactorySpi, KeyGenerator, KeyGeneratorSpi, KeyInfoFactory, KeyManagerFactory, KeyManagerFactorySpi, KeyPair, KeyPairGeneratorSpi, KeyRep, KeySelector, KeySelector.Purpose, KeyStore, KeyStore.Builder, KeyStore.CallbackHandlerProtection, KeyStore.PasswordProtection, KeyStore.PrivateKeyEntry, KeyStore.SecretKeyEntry, KeyStore.TrustedCertificateEntry, KeyStoreBuilderParameters, KeyStoreSpi, LanguageCallback, LayeredHighlighter, LayeredHighlighter.LayerPainter, LayoutPath, LayoutQueue, LayoutStyle, LDAPCertStoreParameters, LdapName, Lease, Level, LifespanPolicyValue, Line.Info, Line2D, LineBreakMeasurer, LineEvent.Type, LineMetrics, Locale, LocaleServiceProvider, LocalObject, LocateRegistry, LocatorImpl, LockInfo, LockSupport, Logger, LoginContext, LogManager, LogRecord, LongHolder, LongLongSeqHelper, LongLongSeqHolder, LongSeqHelper, LongSeqHolder, LookAndFeel, LookupOp, LookupTable, Mac, MacSpi, ManagementFactory, Manifest, MarshalledObject, Marshaller.Listener, Matcher, Math, MathContext, MBeanFeatureInfo, MBeanInfo, MBeanServerBuilder, MBeanServerDelegate, MBeanServerFactory, MBeanServerInvocationHandler, MediaPrintableArea, MediaSize.Engineering, MediaSize.ISO, MediaSize.JIS, MediaSize.NA, MediaSize.Other, MediaTracker, MemoryImageSource, MemoryNotificationInfo, MemoryUsage, MenuComponent, MenuSelectionManager, MenuShortcut, MessageDigestSpi, MessageFactory, MessageProp, MetalBorders, MetalCheckBoxIcon, MetalComboBoxIcon, MetalIconFactory, MetalIconFactory.FileIcon16, MetalIconFactory.FolderIcon16, MetalIconFactory.PaletteCloseIcon, MetalIconFactory.TreeControlIcon, MetalTheme, MGF1ParameterSpec, MidiDevice.Info, MidiDeviceProvider, MidiEvent, MidiFileFormat, MidiFileReader, MidiFileWriter, MidiMessage, MidiSystem, MimeHeader, MimeHeaders, Mixer.Info, MixerProvider, MLetContent, ModificationItem, Modifier, MouseAdapter, MouseInfo, MouseMotionAdapter, MultipleComponentProfileHelper, MultipleComponentProfileHolder, MultipleGradientPaint, NameCallback, NameClassPair, NameComponent, NameComponentHelper, NameComponentHolder, NamedValue, NameDynAnyPair, NameDynAnyPairHelper, NameDynAnyPairSeqHelper, NameHelper, NameHolder, NamespaceSupport, NameValuePair, NameValuePair, NameValuePairHelper, NameValuePairHelper, NameValuePairSeqHelper, Naming, NamingContextExtHelper, NamingContextExtHolder, NamingContextHelper, NamingContextHolder, NamingManager, NavigationFilter, NavigationFilter.FilterBypass, NetworkInterface, NoContextHelper, Normalizer, NoServantHelper, NotEmptyHelper, NotEmptyHolder, NotFoundHelper, NotFoundHolder, NotFoundReason, NotFoundReasonHelper, NotFoundReasonHolder, NotificationBroadcasterSupport, NotificationFilterSupport, NotificationResult, Number, NumericShaper, NVList, OAEPParameterSpec, ObjectAlreadyActiveHelper, ObjectHelper, ObjectHolder, ObjectIdHelper, ObjectIdHelper, ObjectImpl, ObjectInputStream.GetField, ObjectInstance, ObjectName, ObjectNotActiveHelper, ObjectOutputStream.PutField, ObjectReferenceFactoryHelper, ObjectReferenceFactoryHolder, ObjectReferenceTemplateHelper, ObjectReferenceTemplateHolder, ObjectReferenceTemplateSeqHelper, ObjectReferenceTemplateSeqHolder, ObjectStreamClass, ObjectStreamField, ObjID, Observable, OctetSeqHelper, OctetSeqHolder, OctetStreamData, Oid, OpenType, Operation, Option, ORB, ORBIdHelper, OutputKeys, OutputStream, OverlayLayout, Pack200, Package, PageAttributes, PageFormat, Paper, Parameter, ParameterBlock, ParameterMode, ParameterModeHelper, ParameterModeHolder, ParsePosition, Parser, ParserAdapter, ParserFactory, PasswordAuthentication, PasswordCallback, Patch, Path2D, PBEKeySpec, PBEParameterSpec, Permission, PermissionCollection, PersistenceDelegate, Pipe, PixelGrabber, PKIXCertPathChecker, PKIXCertPathValidatorResult, PKIXParameters, POAHelper, Point2D, PointerInfo, Policy, Policy, PolicyErrorCodeHelper, PolicyErrorHelper, PolicyErrorHolder, PolicyHelper, PolicyHolder, PolicyListHelper, PolicyListHolder, PolicyQualifierInfo, PolicySpi, PolicyTypeHelper, Polygon, Popup, PopupFactory, PortableRemoteObject, Position.Bias, Preferences, Principal, PrincipalHolder, PrinterJob, PrintJob, PrintJobAdapter, PrintServiceLookup, Process, ProcessBuilder, ProfileIdHelper, ProgressMonitor, PropertyChangeSupport, PropertyEditorManager, PropertyEditorSupport, ProtectionDomain, Provider, Provider.Service, Proxy, Proxy, ProxySelector, PSource, PSSParameterSpec, QName, QuadCurve2D, Query, QueryEval, Random, RandomAccessFile, Raster, RC2ParameterSpec, RC5ParameterSpec, Rdn, Reader, RectangularShape, ReentrantLock, ReentrantReadWriteLock, ReentrantReadWriteLock.ReadLock, ReentrantReadWriteLock.WriteLock, RefAddr, Reference, Reference, ReferenceQueue, Region, RelationSupport, RelationTypeSupport, RemoteObject, RenderableImageOp, RenderableImageProducer, RenderContext, RenderingHints, RenderingHints.Key, RepaintManager, RepositoryIdHelper, Request, RequestProcessingPolicyValue, RequiredModelMBean, RescaleOp, ResolutionSyntax, ResolveResult, ResourceBundle, ResourceBundle.Control, ResponseCache, ReverbType, RMIClassLoader, RMIClassLoaderSpi, RMIConnectionImpl, RMIConnector, RMIServerImpl, RMISocketFactory, Robot, Role, RoleInfo, RoleResult, RoleStatus, RoleUnresolved, RowFilter, RowFilter.Entry, RowSetMetaDataImpl, RowSorter, RowSorter.SortKey, RSAKeyGenParameterSpec, RSAOtherPrimeInfo, RSAPrivateKeySpec, RSAPublicKeySpec, Runtime, SAAJMetaFactory, SampleModel, Sasl, SAXParser, SAXParserFactory, SAXResult, SAXSource, Scanner, Schema, SchemaFactory, SchemaFactoryLoader, SchemaOutputResolver, ScriptEngineManager, ScrollPaneAdjustable, ScrollPaneLayout, SealedObject, SearchControls, SecretKeyFactory, SecretKeyFactorySpi, SecretKeySpec, SecureRandomSpi, Security, SecurityManager, Segment, SelectionKey, Selector, SelectorProvider, Semaphore, Sequence, Sequencer.SyncMode, SerialArray, SerialBlob, SerialClob, SerialDatalink, SerialJavaObject, SerialRef, SerialStruct, Servant, ServantActivatorHelper, ServantAlreadyActiveHelper, ServantLocatorHelper, ServantNotActiveHelper, ServantObject, ServantRetentionPolicyValue, ServerIdHelper, ServerRequest, ServerSocket, ServerSocketFactory, Service, ServiceContext, ServiceContextHelper, ServiceContextHolder, ServiceContextListHelper, ServiceContextListHolder, ServiceDelegate, ServiceDetail, ServiceDetailHelper, ServiceIdHelper, ServiceInformation, ServiceInformationHelper, ServiceInformationHolder, ServiceLoader, ServiceRegistry, ServiceUI, ServiceUIFactory, SetOfIntegerSyntax, SetOverrideType, SetOverrideTypeHelper, ShortHolder, ShortSeqHelper, ShortSeqHolder, SignatureSpi, SignedObject, SimpleAttributeSet, SimpleBeanInfo, SimpleBindings, SimpleDoc, SimpleJavaFileObject, SimpleScriptContext, Size2DSyntax, SizeRequirements, SizeSequence, SOAPConnection, SOAPConnectionFactory, SOAPElementFactory, SOAPFactory, SOAPMessage, SOAPPart, Socket, SocketAddress, SocketFactory, SocketImpl, SortKey, SoundbankReader, SoundbankResource, SplashScreen, Spring, SpringLayout, SpringLayout.Constraints, SQLInputImpl, SQLOutputImpl, SSLContext, SSLContextSpi, SSLEngine, SSLEngineResult, SslRMIClientSocketFactory, SslRMIServerSocketFactory, StackTraceElement, StandardMBean, StartTlsRequest, StartTlsResponse, State, Statement, StAXResult, StAXSource, StreamPrintService, StreamPrintServiceFactory, StreamReaderDelegate, StreamResult, StreamSource, StreamTokenizer, StrictMath, String, StringCharacterIterator, StringContent, StringHolder, StringNameHelper, StringSelection, StringSeqHelper, StringSeqHolder, StringTokenizer, StringValueExp, StringValueHelper, StructMember, StructMemberHelper, StyleConstants, StyleContext, StyleContext.NamedStyle, StyleContext.SmallAttributeSet, StyleSheet.BoxPainter, StyleSheet.ListPainter, Subject, SubjectDomainCombiner, SwingUtilities, SwingWorker, SyncFactory, SyncProvider, SyncScopeHelper, SynthContext, SynthGraphicsUtils, SynthPainter, SynthStyle, SynthStyleFactory, System, SystemFlavorMap, SystemTray, TableColumn, TableStringConverter, TabSet, TabStop, TabularDataSupport, TagElement, TaggedComponent, TaggedComponentHelper, TaggedComponentHolder, TaggedProfile, TaggedProfileHelper, TaggedProfileHolder, TargetedNotification, TCKind, TextHitInfo, TextInputCallback, TextLayout, TextLayout.CaretPolicy, TextMeasurer, TextOutputCallback, TextSyntax, TexturePaint, Thread, ThreadGroup, ThreadInfo, ThreadLocal, ThreadPolicyValue, ThreadPoolExecutor.AbortPolicy, ThreadPoolExecutor.CallerRunsPolicy, ThreadPoolExecutor.DiscardOldestPolicy, ThreadPoolExecutor.DiscardPolicy, Throwable, Timer, Timer, TimerTask, Timestamp, TimeZone, Toolkit, ToolProvider, ToolTipManager.insideTimerAction, ToolTipManager.outsideTimerAction, ToolTipManager.stillInsideTimerAction, Track, TransferHandler, TransferHandler.DropLocation, TransferHandler.TransferSupport, TransformAttribute, Transformer, TransformerFactory, TransformService, TrayIcon, TreePath, TrustAnchor, TrustManagerFactory, TrustManagerFactorySpi, TypeCode, TypeCodeHolder, TypeInfoProvider, TypeMismatchHelper, TypeMismatchHelper, Types, UID, UIDefaults.LazyInputMap, UIDefaults.ProxyLazyValue, UIManager, UIManager.LookAndFeelInfo, ULongLongSeqHelper, ULongLongSeqHolder, ULongSeqHelper, ULongSeqHolder, UndoableEditSupport, UnionMember, UnionMemberHelper, UnknownEncodingHelper, UnknownUserExceptionHelper, UnknownUserExceptionHolder, Unmarshaller.Listener, URI, URIParameter, URISyntax, URL, URLConnection, URLDecoder, URLEncoder, URLStreamHandler, URLStringHelper, UShortSeqHelper, UShortSeqHolder, Util, Utilities, UUID, ValidationEventCollector, ValidationEventImpl, ValidationEventLocatorImpl, Validator, ValidatorHandler, ValueBaseHelper, ValueBaseHolder, ValueMember, ValueMemberHelper, VersionSpecHelper, VetoableChangeSupport, View, ViewportLayout, VisibilityHelper, VMID, VoiceStatus, Void, W3CDomHandler, W3CEndpointReferenceBuilder, WCharSeqHelper, WCharSeqHolder, WebServiceFeature, WindowAdapter, Writer, WrongAdapterHelper, WrongPolicyHelper, WrongTransactionHelper, WrongTransactionHolder, WStringSeqHelper, WStringSeqHolder, WStringValueHelper, X500Principal, X500PrivateCredential, X509CertSelector, X509CRLEntry, X509CRLSelector, X509ExtendedKeyManager, XmlAdapter, XMLConstants, XMLDecoder, XmlElement.DEFAULT, XmlElementDecl.GLOBAL, XmlElementRef.DEFAULT, XMLEventFactory, XMLFilterImpl, XMLGregorianCalendar, XMLInputFactory, XmlJavaTypeAdapter.DEFAULT, XMLOutputFactory, XMLReaderAdapter, XMLReaderFactory, XmlSchemaType.DEFAULT, XMLSignatureFactory, XmlType.DEFAULT, XPathConstants, XPathFactory, XPathFilter2ParameterSpec, XPathFilterParameterSpec, XPathType, XPathType.Filter, XSLTTransformParameterSpec, ZipEntry, ZipFile']","['You can use Java 8 Streams :\n\nArrayList<ArrayList<String>> allChains = new ArrayList<>();\nallChains.add (new ArrayList<String>(Arrays.asList (""apple"", ""b"", ""c"")));\nallChains.add (new ArrayList<String>(Arrays.asList (""a"")));\nallChains.add (new ArrayList<String>(Arrays.asList (""a"",""b"",""c"",""d"")));\n\nArrayList<String> longest = allChains.stream()\n                                     .max(Comparator.comparingInt(ArrayList::size))\n                                     .get();\n\nSystem.out.println (longest);\nOutput:\n\n[a, b, c, d]']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nConverting Java objects to JSON with Jackson\n----------Explanation----------\nTo convert your object in JSON with Jackson:\n----------Code Sample----------\nObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();\nString json = ow.writeValueAsString(object);\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nHow to create a jQuery plugin with methods?\n----------Explanation----------\nAccording to the jQuery Plugin Authoring page ( http://docs.jquery.com/Plugins/Authoring ) its best not to muddy up the jQuery and jQuery.fn namespaces. They suggest this method\n----------Code Sample----------\n(function( $ ){\n\nvar methods = {\ninit : function(options) {\n\n},\nshow : function( ) { },// IS\nhide : function( ) { },// GOOD\nupdate : function( content ) { }// !!!\n};\n\n$.fn.tooltip = function(methodOrOptions) {\nif ( methods[methodOrOptions] ) {\nreturn methods[ methodOrOptions ].apply( this, Array.prototype.slice.call( arguments, 1 ));\n} else if ( typeof methodOrOptions === \'object\' || ! methodOrOptions ) {\n// Default to ""init""\nreturn methods.init.apply( this, arguments );\n} else {\n$.error( \'Method \' + methodOrOptions + \' does not exist on jQuery.tooltip\' );\n} \n};\n\n\n})( jQuery );\n\n$(\'div\').tooltip(); // calls the init method\n$(\'div\').tooltip({ // calls the init method\nfoo : \'bar\'\n});\n$(\'div\').tooltip(\'hide\'); // calls the hide method\n$(\'div\').tooltip(\'update\', \'This is the new tooltip content!\'); // calls the update method\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nChecking if a key exists in a JavaScript object?\n----------Explanation----------\nChecking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually undefined ?\n----------Code Sample----------\nvar obj = { key: undefined };\nobj[""key""] != undefined // false, but the key exists!\n\n""key"" in obj // true, regardless of the actual value\n\n!(""key"" in obj) // true if ""key"" doesn\'t exist in object\n!""key"" in obj // ERROR! Equivalent to ""false in obj""\n\nobj.hasOwnProperty(""key"") // true\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to ""properly"" create a custom object in JavaScript?\n----------Explanation----------\nLet\'s start with the prototype way . This is the most JavaScript-native you can get: there is a minimum of overhead code and instanceof will work with instances of this kind of object.\n----------Code Sample----------\nfunction Shape(x, y) {\nthis.x= x;\nthis.y= y;\n}\n\nShape.prototype.toString= function() {\nreturn \'Shape at \'+this.x+\', \'+this.y;\n};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y); // invoke the base class\'s constructor function to take co-ords\nthis.r= r;\n}\nCircle.prototype= new Shape();\n\nCircle.prototype.toString= function() {\nreturn \'Circular \'+Shape.prototype.toString.call(this)+\' with radius \'+this.r;\n}\n\nfunction subclassOf(base) {\n_subclassOf.prototype= base.prototype;\nreturn new _subclassOf();\n}\nfunction _subclassOf() {};\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.prototype= subclassOf(Shape);\n\nFunction.prototype.subclass= function(base) {\nvar c= Function.prototype.subclass.nonconstructor;\nc.prototype= base.prototype;\nthis.prototype= new c();\n};\nFunction.prototype.subclass.nonconstructor= function() {};\n\n...\n\nfunction Circle(x, y, r) {\nShape.call(this, x, y);\nthis.r= r;\n}\nCircle.subclass(Shape);\n\nfunction Point() {\nShape.apply(this, arguments);\n}\nPoint.subclass(Shape);\n\nfunction Shape() { this._init.apply(this, arguments); }\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nfunction Point() { this._init.apply(this, arguments); }\nPoint.subclass(Shape);\n// no need to write new initialiser for Point!\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (\'_init\' in this)\nthis._init.apply(this, arguments);\n}\nFunction.prototype.makeSubclass.nonconstructor.prototype= this.prototype;\nClass.prototype= new Function.prototype.makeSubclass.nonconstructor();\nreturn Class;\n};\nFunction.prototype.makeSubclass.nonconstructor= function() {};\n\n...\n\nShape= Object.makeSubclass();\nShape.prototype._init= function(x, y) {\nthis.x= x;\nthis.y= y;\n};\n\nPoint= Shape.makeSubclass();\n\nCircle= Shape.makeSubclass();\nCircle.prototype._init= function(x, y, r) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n};\n\nFunction.prototype.makeSubclass= function() {\nfunction Class() {\nif (!(this instanceof Class))\nthrow(\'Constructor called without ""new""\');\n...\n\nCircle= Shape.makeSubclass({\n_init: function(x, y, z) {\nShape.prototype._init.call(this, x, y);\nthis.r= r;\n},\n...\n});\n\nfunction Shape(x, y) {\nvar that= this;\n\nthis.x= x;\nthis.y= y;\n\nthis.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n}\n\nfunction Circle(x, y, r) {\nvar that= this;\n\nShape.call(this, x, y);\nthis.r= r;\n\nvar _baseToString= this.toString;\nthis.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+that.r;\n};\n};\n\nvar mycircle= new Circle();\n\nvar ts= mycircle.toString;\nalert(ts());\n\nsetTimeout(function() {\nmycircle.move(1, 1);\n}, 1000);\n\nsetTimeout(mycircle.move.bind(mycircle, 1, 1), 1000);\n\nfunction Shape(x, y) {\nvar that= {};\n\nthat.x= x;\nthat.y= y;\n\nthat.toString= function() {\nreturn \'Shape at \'+that.x+\', \'+that.y;\n};\n\nreturn that;\n}\n\nfunction Circle(x, y, r) {\nvar that= Shape(x, y);\n\nthat.r= r;\n\nvar _baseToString= that.toString;\nthat.toString= function() {\nreturn \'Circular \'+_baseToString(that)+\' with radius \'+r;\n};\n\nreturn that;\n};\n\nvar mycircle= Circle(); // you can include `new` if you want but it won\'t do anything\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nAvoiding != null statements\n----------Explanation----------\n(2) is easy. Either use assert statements (assertions) or allow failure (for example, NullPointerException ). Assertions are a highly-underused Java feature that was added in 1.4. The syntax is:\n----------Code Sample----------\nassert \n\nassert : \n\npublic interface Action {\nvoid doSomething();\n}\n\npublic interface Parser {\nAction findAction(String userInput);\n}\n\npublic class MyParser implements Parser {\nprivate static Action DO_NOTHING = new Action() {\npublic void doSomething() { /* do nothing */ }\n};\n\npublic Action findAction(String userInput) {\n// ...\nif ( /* we can\'t find any actions */ ) {\nreturn DO_NOTHING;\n}\n}\n}\n\nParser parser = ParserFactory.getParser();\nif (parser == null) {\n// now what?\n// this would be an example of where null isn\'t (or shouldn\'t be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n// do nothing\n} else {\naction.doSomething();\n}\n\nParserFactory.getParser().findAction(someInput).doSomething();\n\ntry {\nParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\nuserConsole.err(anfe.getMessage());\n}\n\npublic Action findAction(final String userInput) {\n/* Code to return requested Action if found */\nreturn new Action() {\npublic void doSomething() {\nuserConsole.err(""Action not found: "" + userInput);\n}\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nJava Generics Wildcarding With Multiple Classes\n----------Explanation----------\nActually, you can do what you want. If you want to provide multiple interfaces or a class plus interfaces, you have to have your wildcard look something like this:\n----------Code Sample----------\n\n\npublic static > T\nmax(Collection coll)\n\nclass classB { }\ninterface interfaceC { }\n\npublic class MyClass {\nClass variable;\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCloning an Object in Node.js\n----------Explanation----------\n\n----------Code Sample----------\nvar obj2 = JSON.parse(JSON.stringify(obj1));\n\nvar extend = require(\'util\')._extend;\n\nvar obj1 = {x: 5, y:5};\nvar obj2 = extend({}, obj1);\nobj2.x = 6;\nconsole.log(obj1.x); // still logs 5\n\nexports._extend = function(origin, add) {\n// Don\'t do anything if add isn\'t an object\nif (!add || typeof add !== \'object\') return origin;\n\nvar keys = Object.keys(add);\nvar i = keys.length;\nwhile (i--) {\norigin[keys[i]] = add[keys[i]];\n}\nreturn origin;\n};\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nNull check in an enhanced for loop\n----------Explanation----------\nIf you get this list from somewhere else and don\'t know if it is ok or not you could create a utility method and use it like this:\n----------Code Sample----------\nfor( Object o : safe( list ) ) {\n// do whatever \n}\n\npublic static List safe( List other ) {\nreturn other == null ? Collections.EMPTY_LIST : other;\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nShallow copy for arrays, why can\'t simply do newArr = oldArr?\n----------Explanation----------\n""Shallowness"" comes into play when the object you are comparing has references to other objects inside it. For example, if you have an array of integers and you create a copy, you now have two arrays which both contain the same integer values:\n----------Code Sample----------\nOriginal Array\n\n[0]\n[1]\n[2]\n[3]\n\nAfter copying:\n\n[0] <--- Original [0]\n[1] [1]\n[3] [2]\n[4] Copy ---> [3]\n\nOriginal Array:\n\n[0:]----> [object 0]\n[1:]----> [object 1]\n[2:]----> [object 2]\n[3:]----> [object 3]\n\nOriginal -> [0:]----> [object 0] <----[:0] <- Copy\n[1:]----> [object 1] <----[:1]\n[2:]----> [object 2] <----[:2]\n[3:]----> [object 3] <----[:3]\n\nOriginal -> [0:]----> [object 0] Copy -> [0:]----> [copy of object 0]\n[1:]----> [object 1] [1:]----> [copy of object 1]\n[2:]----> [object 2] [2:]----> [copy of object 2]\n[3:]----> [object 3] [3:]----> [copy of object 3]\n\narr1 -> [0, 1, 2, 3, 4]\n\narr1 -> [0, 1, 2, 3, 4] <- arr2\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIterate through object properties\n----------Explanation----------\nIterating over properties requires this additional hasOwnProperty check:\n----------Code Sample----------\nfor (var property in object) {\nif (object.hasOwnProperty(property)) {\n// do stuff\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow do I test for an empty JavaScript object?\n----------Explanation----------\n\n----------Code Sample----------\n// because Object.keys(new Date()).length === 0;\n// we have to do some additional check\nObject.keys(obj).length === 0 && obj.constructor === Object\n\nfunction isEmpty(obj) {\nfor(var prop in obj) {\nif(obj.hasOwnProperty(prop))\nreturn false;\n}\n\nreturn true && JSON.stringify(obj) === JSON.stringify({});\n}\n\njQuery.isEmptyObject({}); // true\n\n_.isEmpty({}); // true\n\n_.isEmpty({}); // true\n\nHoek.deepEqual({}, {}); // true\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\ndynamic object construction in javascript?\n----------Explanation----------\n\n----------Code Sample----------\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Use a fake constructor function with the target constructor\'s\n// `prototype` property to create the object with the right prototype\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nobj = new fakeCtor();\n\n// Set the object\'s `constructor`\nobj.constructor = ctor;\n\n// Call the constructor function\nnewobj = ctor.apply(obj, params);\n\n// Use the returned object if there is one.\n// Note that we handle the funky edge case of the `Function` constructor,\n// thanks to Mike\'s comment below. Double-checked the spec, that should be\n// the lot.\nif (newobj !== null\n&& (typeof newobj === ""object"" || typeof newobj === ""function"")\n) {\nobj = newobj;\n}\n\n// Done\nreturn obj;\n}\n\nfunction applyConstruct(ctor, params) {\nvar obj, newobj;\n\n// Create the object with the desired prototype\nif (typeof Object.create === ""function"") {\n// ECMAScript 5 \nobj = Object.create(ctor.prototype);\n}\nelse if ({}.__proto__) {\n// Non-standard __proto__, supported by some browsers\nobj = {};\nobj.__proto__ = ctor.prototype;\nif (obj.__proto__ !== ctor.prototype) {\n// Setting it didn\'t work\nobj = makeObjectWithFakeCtor();\n}\n}\nelse {\n// Fallback\nobj = makeObjectWithFakeCtor();\n}\n\n// Set the object\'s constructor\nobj.constructor = ctor;\n\n// Apply the constructor function\nnewobj = ctor.apply(obj, params);\n\n// If a constructor function returns an object, that\n// becomes the return value of `new`, so we handle\n// that here.\nif (typeof newobj === ""object"") {\nobj = newobj;\n}\n\n// Done!\nreturn obj;\n\n// Subroutine for building objects with specific prototypes\nfunction makeObjectWithFakeCtor() {\nfunction fakeCtor() {\n}\nfakeCtor.prototype = ctor.prototype;\nreturn new fakeCtor();\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow to pass json POST data to Web API method as object\n----------Explanation----------\n\n----------Code Sample----------\ncontentType:""application/json""\n\n$(function () {\nvar customer = {contact_name :""Scott"",company_name:""HP""};\n$.ajax({\ntype: ""POST"",\ndata :JSON.stringify(customer),\nurl: ""api/Customer"",\ncontentType: ""application/json""\n});\n});\n\npublic class CreateUserViewModel\n{\npublic int Id {set;get;}\npublic string Name {set;get;} \npublic List Tags {set;get;}\n}\npublic class TagViewModel\n{\npublic int Id {set;get;}\npublic string Code {set;get;}\n}\n\npublic class ProductController : Controller\n{\n[HttpPost]\npublic CreateUserViewMode Save([FromBody] CreateUserViewModel m)\n{\n// I am just returning the posted model as it is. \n// You may do other stuff and return different response.\n// Ex : missileService.LaunchMissile(m);\nreturn m;\n}\n}\n\n//Build an object which matches the structure of our view model class\nvar model = {\nName: ""Shyju"",\nId: 123,\nTags: [{ Id: 12, Code: ""C"" }, { Id: 33, Code: ""Swift"" }]\n};\n\n$.ajax({\ntype: ""POST"",\ndata: JSON.stringify(model),\nurl: ""../product/save"",\ncontentType: ""application/json""\n}).done(function(res) { \nconsole.log(\'res\', res);\n// Do something with the result :)\n});\n\n[HttpPost]\npublic CreateUserViewModel Save(CreateUserViewModel m)\n{\nreturn m;\n}\n\n$.ajax({\ntype: ""POST"",\ndata: model,\nurl: ""../product/save""\n}).done(function (res) {\nconsole.log(\'res\', res);\n});\n\n$.post(""../product/save"", model, function (res) {\n//res contains the markup returned by the partial view\nconsole.log(\'res\', res);\n});\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow to create a simple map using JavaScript/JQuery\n----------Explanation----------\nEdit: Out of date answer, ECMAScript 2015 (ES6) standard javascript has a Map implementation, read here for more info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\n----------Code Sample----------\nvar map = new Object(); // or var map = {};\nmap[myKey1] = myObj1;\nmap[myKey2] = myObj2;\n\nfunction get(k) {\nreturn map[k];\n}\n\n//map[myKey1] == get(myKey1);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHow to efficiently count the number of keys/properties of an object in JavaScript?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-js prettyprint-override"">Object.keys(obj).length\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nOverriding the java equals() method quirk\n----------Explanation----------\nIn Java, the equals() method that is inherited from Object is:\n----------Code Sample----------\npublic boolean equals(Object other);\n\n@Override\npublic boolean equals(Object other){\nif (other == null) return false;\nif (other == this) return true;\nif (!(other instanceof MyClass))return false;\nMyClass otherMyClass = (MyClass)other;\n...test other properties here...\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nHow can I access a private constructor of a class?\n----------Explanation----------\nOne way to bypass the restriction is to use reflections:\n----------Code Sample----------\nimport java.lang.reflect.Constructor;\n\npublic class Example {\npublic static void main(final String[] args) throws Exception {\nConstructor constructor = Foo.class.getDeclaredConstructor(new Class[0]);\nconstructor.setAccessible(true);\nFoo foo = constructor.newInstance(new Object[0]);\nSystem.out.println(foo);\n}\n}\n\nclass Foo {\nprivate Foo() {\n// private!\n}\n\n@Override\npublic String toString() {\nreturn ""I\'m a Foo and I\'m alright!"";\n}\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nWhy is it not allowed in Java to overload Foo(Object...) with Foo(Object[])?\n----------Explanation----------\n\n----------Code Sample----------\npublic Foo(Object... args){} // syntactic sugar for Foo(Object[] args){}\n\n// calls the varargs method.\nFoo(new Object[]{new Object(), new Object()});\n\npublic static void main(String... args) {\n\npublic Foo(Object o, Object... os){} \n\npublic Foo(Object[] os) {}\n\nFoo(new Object(), new Object()); // calls the first.\n\nFoo(new Object[]{new Object(), new Object()}); // calls the second.\n\npublic Foo(Object... os){} \n\npublic Bar(Object[] os) {}\n\nFoo(new Object[]{new Object(), new Object()}); // compiles fine.\n\nBar(new Object(), new Object()); // Fails to compile.\n\npublic Foo(Object... os, int i){} // fails to compile.\n\npublic Bar(Object[] os, int i) {} // compiles ok.\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nWhat does enumerable mean?\n----------Explanation----------\nIf a property isn\'t identified as enumerable, the loop will ignore that it\'s within the object.\n----------Code Sample----------\nvar obj = { key: \'val\' };\n\nconsole.log(\'toString\' in obj); // true\nconsole.log(typeof obj.toString); // ""function""\n\nfor (var key in obj)\nconsole.log(key); // ""key""\n\nvar descriptor = Object.getOwnPropertyDescriptor({ bar: 1 }, \'bar\');\n\nconsole.log(descriptor.enumerable); // true\nconsole.log(descriptor.value); // 1\n\nconsole.log(descriptor);\n// { value: 1, writable: true, enumerable: true, configurable: true }\n\nvar foo = { bar: 1, baz: 2};\n\nfor (var prop in foo)\nconsole.log(prop); // outputs \'bar\' and \'baz\'\n\nconsole.log(Object.getOwnPropertyNames(Object.prototype));\n// [""constructor"", ""toString"", ""toLocaleString"", ""valueOf"", ""hasOwnProperty"", ""isPrototypeOf"", ""propertyIsEnumerable"", /* etc. */]\n\nconsole.log(\'constructor\' in foo); // true\nconsole.log(\'toString\' in foo); // true\n// etc.\n\nvar descriptor = Object.getOwnPropertyDescriptor(Object.prototype, \'constructor\');\n\nconsole.log(descriptor.enumerable); // false\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nEach for object?\n----------Explanation----------\nA javascript Object does not have a standard .each function. jQuery provides a function. See http://api.jquery.com/jQuery.each/ The below should work\n----------Code Sample----------\n$.each(object, function(index, value) {\nconsole.log(value);\n}); \n\nfor(var index in object) { \nvar attr = object[index]; \n}\n\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\nvar attr = object[index];\n}\n}\n\nclick\nclick\nclick\n\nvar object = [""first"", ""middle"", ""last""];\nfor(var index in object) { \nif (object.hasOwnProperty(index)) {\n$(\'.index\'+index).click(function() {\nconsole.log(object[index]);\n});\n}\n}\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nLoading Java Builder Object from Yaml file\n----------Explanation----------\nSnakeYaml is a very powerful library & it provides support for creating instance based on constructor injection.\n----------Code Sample----------\n/**\n* create JavaBean\n*/\npublic void testGetBeanAssumeClass() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person\\nfirstName: Andrey\\nage: 99"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(""Unexpected: "" + obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertNull(person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n\n/**\n* create instance using constructor arguments\n*/\npublic void testGetConstructorBean() {\nString data = ""--- !!org.yaml.snakeyaml.constructor.Person [ Andrey, Somov, 99 ]"";\nObject obj = construct(data);\nassertNotNull(obj);\nassertTrue(obj.getClass().toString(), obj instanceof Person);\nPerson person = (Person) obj;\nassertEquals(""Andrey"", person.getFirstName());\nassertEquals(""Somov"", person.getLastName());\nassertEquals(99, person.getAge().intValue());\n}\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nPriorityQueue/Heap Update\n----------Explanation----------\nSome years ago I wrote such a heap as part of a school work. Pushing an item up or down is an O(log N) operation. I release the following code as public domain, so you may use it in any way you please. (You might want to improve this class so that instead of the abstract isGreaterOrEqual method the sort order would rely on Java\'s Comparator and Comparable interfaces, and also would make the class use generics.)\n----------Code Sample----------\nimport java.util.*;\n\npublic abstract class Heap {\n\nprivate List heap;\n\npublic Heap() {\nheap = new ArrayList();\n}\n\npublic void push(Object obj) {\nheap.add(obj);\npushUp(heap.size()-1);\n}\n\npublic Object pop() {\nif (heap.size() > 0) {\nswap(0, heap.size()-1);\nObject result = heap.remove(heap.size()-1);\npushDown(0);\nreturn result;\n} else {\nreturn null;\n}\n}\n\npublic Object getFirst() {\nreturn heap.get(0);\n}\n\npublic Object get(int index) {\nreturn heap.get(index);\n}\n\npublic int size() {\nreturn heap.size();\n}\n\nprotected abstract boolean isGreaterOrEqual(int first, int last);\n\nprotected int parent(int i) {\nreturn (i - 1) / 2;\n}\n\nprotected int left(int i) {\nreturn 2 * i + 1;\n}\n\nprotected int right(int i) {\nreturn 2 * i + 2;\n}\n\nprotected void swap(int i, int j) {\nObject tmp = heap.get(i);\nheap.set(i, heap.get(j));\nheap.set(j, tmp);\n}\n\npublic void pushDown(int i) {\nint left = left(i);\nint right = right(i);\nint largest = i;\n\nif (left < heap.size() && !isGreaterOrEqual(largest, left)) {\nlargest = left;\n}\nif (right < heap.size() && !isGreaterOrEqual(largest, right)) {\nlargest = right;\n}\n\nif (largest != i) {\nswap(largest, i);\npushDown(largest);\n}\n}\n\npublic void pushUp(int i) {\nwhile (i > 0 && !isGreaterOrEqual(parent(i), i)) {\nswap(parent(i), i);\ni = parent(i);\n}\n}\n\npublic String toString() {\nStringBuffer s = new StringBuffer(""Heap:\\n"");\nint rowStart = 0;\nint rowSize = 1;\nfor (int i = 0; i < heap.size(); i++) {\nif (i == rowStart+rowSize) {\ns.append(\'\\n\');\nrowStart = i;\nrowSize *= 2;\n}\ns.append(get(i));\ns.append("" "");\n}\nreturn s.toString();\n}\n\npublic static void main(String[] args){\nHeap h = new Heap() {\nprotected boolean isGreaterOrEqual(int first, int last) {\nreturn ((Integer)get(first)).intValue() >= ((Integer)get(last)).intValue();\n}\n};\n\nfor (int i = 0; i < 100; i++) {\nh.push(new Integer((int)(100 * Math.random())));\n}\n\nSystem.out.println(h+""\\n"");\n\nwhile (h.size() > 0) {\nSystem.out.println(h.pop());\n}\n}\n}\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nConvert Java Object to JsonNode in Jackson\n----------Explanation----------\n\n----------Code Sample----------\nJsonNode node = objectMapper.valueToTree(map);\n\nJsonNode node = mapper.convertValue(object, JsonNode.class);\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nChange key in js associative array\n----------Explanation----------\nIn JavaScript there is no such thing as associative Array. Objects can be used instead:\n----------Code Sample----------\nvar myHash = new Object();\n\nvar myHash = {};\n\nmyHash[""from""] = ""value"";\nmyHash[""to""] = myHash[""from""];\ndelete myHash[""from""];\n\nmyHash.from = ""value"";\nmyHash.to = myHash.from;\ndelete myHash.from;\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nUnderstanding the difference between Object.create() and new SomeFunction()\n----------Explanation----------\nWith constructor functions, the newly created object inherits from the constructor\'s prototype, e.g.:\n----------Code Sample----------\nvar o = new SomeConstructor();\n\nvar o = Object.create({inherited: 1}, {\nfoo: {\nget: (function () { // a closure\nvar closured = \'foo\';\nreturn function () {\nreturn closured+\'bar\';\n};\n})()\n}\n});\n\no.foo; // ""foobar""\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow do I correctly clone a JavaScript object?\n----------Explanation----------\nYet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object\'s prototype is Object , then simply creating a new general object with {} will work, but if the source\'s prototype is some descendant of Object , then you are going to be missing the additional members from that prototype which you skipped using the hasOwnProperty filter, or which were in the prototype, but weren\'t enumerable in the first place. One solution might be to call the source object\'s constructor property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a Date object stores its data as a hidden member:\n----------Code Sample----------\nfunction clone(obj) {\nif (null == obj || ""object"" != typeof obj) return obj;\nvar copy = obj.constructor();\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n}\nreturn copy;\n}\n\nvar d1 = new Date();\n\n/* Wait for 5 seconds. */\nvar start = (new Date()).getTime();\nwhile ((new Date()).getTime() - start < 5000);\n\n\nvar d2 = clone(d1);\nalert(""d1 = "" + d1.toString() + ""\\nd2 = "" + d2.toString());\n\nfunction clone(obj) {\nvar copy;\n\n// Handle the 3 simple types, and null or undefined\nif (null == obj || ""object"" != typeof obj) return obj;\n\n// Handle Date\nif (obj instanceof Date) {\ncopy = new Date();\ncopy.setTime(obj.getTime());\nreturn copy;\n}\n\n// Handle Array\nif (obj instanceof Array) {\ncopy = [];\nfor (var i = 0, len = obj.length; i < len; i++) {\ncopy[i] = clone(obj[i]);\n}\nreturn copy;\n}\n\n// Handle Object\nif (obj instanceof Object) {\ncopy = {};\nfor (var attr in obj) {\nif (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n}\nreturn copy;\n}\n\nthrow new Error(""Unable to copy obj! Its type isn\'t supported."");\n}\n\n// This would be cloneable:\nvar tree = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""right"" : null,\n""data"" : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ndirectedAcyclicGraph[""right""] = directedAcyclicGraph[""left""];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cylicGraph = {\n""left"" : { ""left"" : null, ""right"" : null, ""data"" : 3 },\n""data"" : 8\n};\ncylicGraph[""right""] = cylicGraph;\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow do I access properties of a javascript object if I don\'t know the names?\n----------Explanation----------\nYou can loop through keys like this:\n----------Code Sample----------\nfor (var key in data) {\nconsole.log(key);\n}\n\nfor (var key in data) {\nif (data.hasOwnProperty(key)) {\nconsole.log(key);\n}\n}\n\nfor each (var value in data) {\nconsole.log(value);\n}\n\nvar data = { Name: \'Property Name\', Value: \'0\' };\nconsole.log(Object.keys(data)); // => [""Name"", ""Value""]\n\nObject.keys(data).forEach(function (key) {\nconsole.log(data[key]);\n});\n// => Logs ""Property Name"", 0\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nC# version of java\'s synchronized keyword?\n----------Explanation----------\nFor the method-level stuff, there is [MethodImpl] :\n----------Code Sample----------\n[MethodImpl(MethodImplOptions.Synchronized)]\npublic void SomeMethod() {/* code */}\n\nprivate int i;\npublic int SomeProperty\n{\n[MethodImpl(MethodImplOptions.Synchronized)]\nget { return i; }\n[MethodImpl(MethodImplOptions.Synchronized)]\nset { i = value; }\n}\n\npublic int SomeProperty {get;set;} // not synchronized\npublic event EventHandler SomeEvent; // synchronized\n\nprivate readonly object syncLock = new object();\npublic void SomeMethod() {\nlock(syncLock) { /* code */ }\n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nIs it possible to implement properties in languages other than C#?\n----------Explanation----------\nPython definitely supports properties:\n----------Code Sample----------\nclass Foo(object):\n\ndef get_length_inches(self):\nreturn self.length_meters * 39.0\n\ndef set_length_inches(self, val):\nself.length_meters = val/39.0\n\nlength_inches = property(get_length_inches, set_length_inches)\n\nclass Foo(object):\n\n# 2.5 or later\n@property\ndef length_inches(self):\nreturn self.length_meters * 39.0\n\n# 2.6 or later\n@length_inches.setter\ndef length_inches(self, val):\nself.length_meters = val/39.0\n*******************end of usage scenario 29***************** \n\n*******************usage scenario 30********************** \n----------usage scenario----------\nJson deserialization into another class hierarchy using Jackson\n----------Explanation----------\nHere is a code which creates ObjectMapper for deserialization:\n----------Code Sample----------\nprotected ObjectMapper getObjectMapperForDeserialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdResolver(SimpleType.construct(Base.class), TypeFactory.defaultInstance()) {\nprivate HashMap classes = new HashMap() {\n{\nput(ConcreteA.class, ConcreteAAdapter.class);\nput(ConcreteB.class, ConcreteBAdapter.class);\nput(ConcreteC.class, ConcreteCAdapter.class);\n}\n};\n\n@Override\npublic String idFromValue(Object value) {\nreturn (classes.containsKey(value.getClass())) ? value.getClass().getName() : null;\n}\n\n@Override\npublic JavaType typeFromId(String id) {\ntry {\nreturn classes.get(Class.forName(id)) == null ? super.typeFromId(id) : _typeFactory.constructSpecializedType(_baseType, classes.get(Class.forName(id)));\n} catch (ClassNotFoundException e) {\n// todo catch the e\n}\nreturn super.typeFromId(id);\n}\n});\nmapper.setDefaultTyping(typeResolverBuilder);\nreturn mapper;\n}\n\nprotected ObjectMapper getObjectMapperForSerialization() {\nObjectMapper mapper = new ObjectMapper();\n\nStdTypeResolverBuilder typeResolverBuilder = new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);\ntypeResolverBuilder = typeResolverBuilder.inclusion(JsonTypeInfo.As.PROPERTY);\ntypeResolverBuilder.init(JsonTypeInfo.Id.CLASS, new ClassNameIdRes""""""]']","['To get the maximum value from an ArrayList of objects in Java, you need to follow a few steps. First, ensure that the objects in the ArrayList implement the Comparable interface, which requires the implementation of the compareTo method. This method defines the natural ordering of the objects. If the objects do not implement Comparable, you can use a Comparator to define the ordering. Once the ordering is defined, you can use the Collections.max method to find the maximum value in the ArrayList. This method takes the ArrayList as an argument and returns the maximum element according to the natural ordering or the specified Comparator. Alternatively, you can use Java Streams to achieve the same result by calling the stream method on the ArrayList, followed by the max method, which takes a Comparator as an argument. The max method returns an Optional containing the maximum element, which you can retrieve using the get method.']","['[\'[\\\'To get the maximum value from an ArrayList of objects in Java, we can use the `stream` API along with a custom comparator. In this example, let\\\\\\\'s assume we have a class `Person` with an `age` attribute, and we want to find the person with the maximum age in an ArrayList of `Person` objects.\\\\nimport java.util.ArrayList;\\\\nimport java.util.Comparator;\\\\nimport java.util.List;\\\\nimport java.util.Optional;\\\\nclass Person {\\\\n    private String name;\\\\n    private int age;\\\\n\\\\n    public Person(String name, int age) {\\\\n        this.name = name;\\\\n        this.age = age;\\\\n    }\\\\n\\\\n    public int getAge() {\\\\n        return age;\\\\n    }\\\\n\\\\n    @Override\\\\n    public String toString() {\\\\n        return ""Person{name=\\\\\\\'"" + name + ""\\\\\\\', age="" + age + ""}"";\\\\n    }\\\\n}\\\\n\\\\npublic class Main {\\\\n    public static void main(String[] args) {\\\\n        List<Person> people = new ArrayList<>();\\\\n        people.add(new Person(""Alice"", 30));\\\\n        people.add(new Person(""Bob"", 25));\\\\n        people.add(new Person(""Charlie"", 35));\\\\n\\\\n        Optional<Person> maxAgePerson = people.stream()\\\\n                .max(Comparator.comparingInt(Person::getAge));\\\\n\\\\n        maxAgePerson.ifPresent(person -> System.out.println(""Person with max age: "" + person));\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.5,0.2307692307692307,0.6298342541436464,0.125,0.75
lang,String,Finding Largest String in ArrayList,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢</code> to yield an extended alphabet <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£  := Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã¢â‚¬\xa0Ã¢â‚¬Å¡Ãƒâ€˜Ã‚Â¢ {Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢}</code>.</p> <p>Let <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â±</code> be a symbol and X a uniformly distributed random variable over <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã¢â€žÂ¢ = floor[32/logÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡ÃƒÂ¡Ã¢Ë†Å¡ÃƒÂ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Most common ways to construct:\nString name = new String(""Alex"");\nBased on 8 examples\n \nStringBuffer sb = Ã‰;\nString s = sb.toString();\nBased on 6 examples\n\n\n\nString\t\ntruncate(int maxLength)\n\n          Returns a new string with a length no longer than maxLength characters.\n\n\ntruncate\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic String truncate(int maxLength)\nReturns a new string with a length no longer than maxLength characters.\n\nUPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.\nParameters:\nmaxLength\nReturns:\na new string with a length no longer than maxLength characters']","['Please try these code . Here i am trying with get() to access the ArrayList elements, which is working correctly.\n\nimport java.util.Scanner;                  \nimport java.util.ArrayList;\n\nclass ArraylistString\n{\n    public static void main(String args[])\n    {\n        ArrayList<String> Str = new ArrayList<String>();\n        Str.add(""Jim Bob"");\n        Str.add(""Bobby Jones"");\n        Str.add(""Rob Stiles"");\n        int largestString = Str.get(0).length();\n        int index = 0;\n\n        for(int i = 0; i < Str.size(); i++)\n        {\n            if(Str.get(i).length() > largestString)\n            {\n                largestString = Str.get(i).length();\n                                index = i;\n            }\n        }\n        System.out.println(""Index "" + index + "" ""+ Str.get(index) + "" "" + ""is the largest and is size "" + largestString);  \n\n    }\n\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow can I make a method return an argument that was passed to it?\n----------Explanation----------\nYou can create an Answer in Mockito. Let\'s assume, we have an interface named Application with a method myFunction.\n----------Code Sample----------\npublic interface Application {\npublic String myFunction(String abc);\n}\n\npublic void testMyFunction() throws Exception {\nApplication mock = mock(Application.class);\nwhen(mock.myFunction(anyString())).thenAnswer(new Answer() {\n@Override\npublic String answer(InvocationOnMock invocation) throws Throwable {\nObject[] args = invocation.getArguments();\nreturn (String) args[0];\n}\n});\n\nassertEquals(""someString"",mock.myFunction(""someString""));\nassertEquals(""anotherString"",mock.myFunction(""anotherString""));\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nTrim string in JavaScript?\n----------Explanation----------\nFor those browsers who does not support trim() , you can use this polyfill from MDN :\n----------Code Sample----------\nif (!String.prototype.trim) {\n(function() {\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nString.prototype.trim = function() {\nreturn this.replace(rtrim, \'\');\n};\n})();\n}\n\nString.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, \'\');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,\'\');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,\'\');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,\'\').replace(/\\s+/g,\' \');};\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHow to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?\n----------Explanation----------\nchange your return type to ResponseEntity<String> , then you can use below for 400\n----------Code Sample----------\nreturn new ResponseEntity(HttpStatus.BAD_REQUEST);\n\nreturn new ResponseEntity(json,HttpStatus.OK);\nreturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\nreturn ResponseEntity.ok(json);\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nJava Byte Array to String to Byte Array\n----------Explanation----------\nYou can\'t just take the returned string and construct a string from it... it\'s not a byte[] data type anymore, it\'s already a string; you need to parse it. For example :\n----------Code Sample----------\nString response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script\n\nString[] byteValues = response.substring(1, response.length() - 1).split("","");\nbyte[] bytes = new byte[byteValues.length];\n\nfor (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); \n}\n\nString str = new String(bytes);\n\nbyte[] b1 = new byte[] {97, 98, 99};\n\nString s1 = Arrays.toString(b1);\nString s2 = new String(b1);\n\nSystem.out.println(s1); // -> ""[97, 98, 99]""\nSystem.out.println(s2); // -> ""abc"";\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nSprintf equivalent in Java\n----------Explanation----------\n\n----------Code Sample----------\n// Store the formatted string in \'result\'\nString result = String.format(""%4d"", i * j);\n\n// Write the result to standard output\nSystem.out.println( result );\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to replace special characters in a string?\n----------Explanation----------\nThat depends on what you mean. If you just want to get rid of them, do this: \n(Update: Apparently you want to keep digits as well, use the second lines in that case)\n----------Code Sample----------\nString alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");\nString alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");\n\nString alphaOnly = input.replaceAll(""[^\\\\p{Alpha}]+"","""");\nString alphaAndDigits = input.replaceAll(""[^\\\\p{Alpha}\\\\p{Digit}]+"","""");\n\nprivate static final CharMatcher ALNUM =\nCharMatcher.inRange(\'a\', \'z\').or(CharMatcher.inRange(\'A\', \'Z\'))\n.or(CharMatcher.inRange(\'0\', \'9\')).precomputed();\n// ...\nString alphaAndDigits = ALNUM.retainFrom(input);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nGet words around a position in a string\n----------Explanation----------\nYou can achiveve that using String \'s split() method . This solution is O(n) .\n----------Code Sample----------\npublic static void main(String[] args) {\nString str = ""Hello my name is John and I like to go fishing and ""+\n""hiking I have two sisters and one brother."";\nString find = ""I"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nif (sp[i].equals(find)) {\n// have to check for ArrayIndexOutOfBoundsException\nString surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +\n(i-1 > 0 ? sp[i-1]+"" "" : """") +\nsp[i] +\n(i+1 < sp.length ? "" ""+sp[i+1] : """") +\n(i+2 < sp.length ? "" ""+sp[i+2] : """");\nSystem.out.println(surr);\n}\n}\n}\n\npublic static void main(String[] args) {\nString str = ""Hello my name is John and John and I like to go..."";\nString find = ""John and"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\n\nString[] spMulti = find.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nint j = 0;\nwhile (j < spMulti.length && i+j < sp.length \n&& sp[i+j].equals(spMulti[j])) {\nj++;\n} \nif (j == spMulti.length) { // found spMulti entirely\nStringBuilder surr = new StringBuilder();\nif (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }\nif (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }\nfor (int k = 0; k < spMulti.length; k++) {\nif (k > 0){ surr.append("" ""); }\nsurr.append(sp[i+k]);\n}\nif (i+spMulti.length < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length]);\n}\nif (i+spMulti.length+1 < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length+1]);\n}\nSystem.out.println(surr.toString());\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object\n----------Explanation----------\nActually the problem was in ApplesDO Class:\n----------Code Sample----------\npublic class ApplesDO {\n\nprivate String apple;\npublic String getApple() {\nreturn apple;\n}\npublic void setApple(String apple) {\nthis.apple = apple;\npublic ApplesDO(CustomType custom) {\n//constructor Code\n//Introducing the dummy constructor\npublic ApplesDO() {\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nRepeat String - Javascript\n----------Explanation----------\nI\'d put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!\n----------Code Sample----------\nString.prototype.repeat = function( num )\n{\nreturn new Array( num + 1 ).join( this );\n}\n\nalert( ""string to repeat\\n"".repeat( 4 ) );\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIs this valid Java?\n----------Explanation----------\nHowever, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:\n----------Code Sample----------\n.class public CallAmbiguousMethod\n.super java/lang/Object\n\n.method public static main([Ljava/lang/String;)V\n.limit stack 3\n.limit locals 1\n\n; Call the method that returns String\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;\n\n; Call the method that returns Integer\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;\n\nreturn\n\n.end method\n\n\njava -jar jasmin.jar CallAmbiguousMethod.j\n\n\njava CallAmbiguousMethod\n\n\n> java CallAmbiguousMethod\nstrings\nnumbers\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass RealyCompilesAndRunsFine {\n\npublic static String f(List list) {\nreturn list.get(0);\n}\n\npublic static Integer f(List list) {\nreturn list.get(0);\n}\n\npublic static void main(String[] args) {\nfinal String string = f(Arrays.asList(""asdf""));\nfinal Integer integer = f(Arrays.asList(123));\nSystem.out.println(string);\nSystem.out.println(integer);\n}\n\n}\n\n\n>javap -c RealyCompilesAndRunsFine\nCompiled from ""RealyCompilesAndRunsFine.java""\nclass RealyCompilesAndRunsFine extends java.lang.Object{\nRealyCompilesAndRunsFine();\nCode:\n0: aload_0\n1: invokespecial #1; //Method java/lang/Object."""":()V\n4: return\n\npublic static java.lang.String f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #3; //class java/lang/String\n10: areturn\n\npublic static java.lang.Integer f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #4; //class java/lang/Integer\n10: areturn\n\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_1\n1: anewarray #3; //class java/lang/String\n4: dup\n5: iconst_0\n6: ldc #5; //String asdf\n8: aastore\n9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;\n15: astore_1\n16: iconst_1\n17: anewarray #4; //class java/lang/Integer\n20: dup\n21: iconst_0\n22: bipush 123\n24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n27: aastore\n28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;\n34: astore_2\n35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n38: aload_1\n39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n45: aload_2\n46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V\n49: return\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow to unescape a Java string literal in Java?\n----------Explanation----------\nLike many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:\n----------Code Sample----------\n/ 47 002F SOLIDUS\n= slash, virgule\nx (latin letter dental click - 01C0)\nx (combining long solidus overlay - 0338)\nx (fraction slash - 2044)\nx (division slash - 2215)\n\\ 92 005C REVERSE SOLIDUS\n= backslash\nx (combining reverse solidus overlay - 20E5)\nx (set minus - 2216)\n\n/*\n*\n* unescape_perl_string()\n*\n* Tom Christiansen \n* Sun Nov 28 12:55:24 MST 2010\n*\n* It\'s completely ridiculous that there\'s no standard\n* unescape_java_string function. Since I have to do the\n* damn thing myself, I might as well make it halfway useful\n* by supporting things Java was too stupid to consider in\n* strings:\n* \n* => ""?"" items are additions to Java string escapes\n* but normal in Java regexes\n*\n* => ""!"" items are also additions to Java regex escapes\n* \n* Standard singletons: ?\\a ?\\e \\f \\n \\r \\t\n* \n* NB: \\b is unsupported as backspace so it can pass-through\n* to the regex translator untouched; I refuse to make anyone\n* doublebackslash it as doublebackslashing is a Java idiocy\n* I desperately wish would die out. There are plenty of\n* other ways to write it:\n*\n* \\cH, \\12, \\012, \\x08 \\x{8}, \\u0008, \\U00000008\n*\n* Octal escapes: \\0 \\0N \\0NN \\N \\NN \\NNN\n* Can range up to !\\777 not \\377\n* \n* TODO: add !\\o{NNNNN}\n* last Unicode is 4177777\n* maxint is 37777777777\n*\n* Control chars: ?\\cX\n* Means: ord(X) ^ ord(\'@\')\n*\n* Old hex escapes: \\xXX\n* unbraced must be 2 xdigits\n*\n* Perl hex escapes: !\\x{XXX} braced may be 1-8 xdigits\n* NB: proper Unicode never needs more than 6, as highest\n* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF\n*\n* Lame Java escape: \\[IDIOT JAVA PREPROCESSOR]uXXXX must be\n* exactly 4 xdigits;\n*\n* I can\'t write XXXX in this comment where it belongs\n* because the damned Java Preprocessor can\'t mind its\n* own business. Idiots!\n*\n* Lame Python escape: !\\UXXXXXXXX must be exactly 8 xdigits\n* \n* TODO: Perl translation escapes: \\Q \\U \\L \\E \\[IDIOT JAVA PREPROCESSOR]u \\l\n* These are not so important to cover if you\'re passing the\n* result to Pattern.compile(), since it handles them for you\n* further downstream. Hm, what about \\[IDIOT JAVA PREPROCESSOR]u?\n*\n*/\n\npublic final static\nString unescape_perl_string(String oldstr) {\n\n/*\n* In contrast to fixing Java\'s broken regex charclasses,\n* this one need be no bigger, as unescaping shrinks the string\n* here, where in the other one, it grows it.\n*/\n\nStringBuffer newstr = new StringBuffer(oldstr.length());\n\nboolean saw_backslash = false;\n\nfor (int i = 0; i < oldstr.length(); i++) {\nint cp = oldstr.codePointAt(i);\nif (oldstr.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\n\nif (!saw_backslash) {\nif (cp == \'\\\\\') {\nsaw_backslash = true;\n} else {\nnewstr.append(Character.toChars(cp));\n}\ncontinue; /* switch */\n}\n\nif (cp == \'\\\\\') {\nsaw_backslash = false;\nnewstr.append(\'\\\\\');\nnewstr.append(\'\\\\\');\ncontinue; /* switch */\n}\n\nswitch (cp) {\n\ncase \'r\': newstr.append(\'\\r\');\nbreak; /* switch */\n\ncase \'n\': newstr.append(\'\\n\');\nbreak; /* switch */\n\ncase \'f\': newstr.append(\'\\f\');\nbreak; /* switch */\n\n/* PASS a \\b THROUGH!! */\ncase \'b\': newstr.append(""\\\\b"");\nbreak; /* switch */\n\ncase \'t\': newstr.append(\'\\t\');\nbreak; /* switch */\n\ncase \'a\': newstr.append(\'\\007\');\nbreak; /* switch */\n\ncase \'e\': newstr.append(\'\\033\');\nbreak; /* switch */\n\n/*\n* A ""control"" character is what you get when you xor its\n* codepoint with \'@\'==64. This only makes sense for ASCII,\n* and may not yield a ""control"" character after all.\n*\n* Strange but true: ""\\c{"" is "";"", ""\\c}"" is ""="", etc.\n*/\ncase \'c\': {\nif (++i == oldstr.length()) { die(""trailing \\\\c""); }\ncp = oldstr.codePointAt(i);\n/*\n* don\'t need to grok surrogates, as next line blows them up\n*/\nif (cp > 0x7f) { die(""expected ASCII after \\\\c""); }\nnewstr.append(Character.toChars(cp ^ 64));\nbreak; /* switch */\n}\n\ncase \'8\':\ncase \'9\': die(""illegal octal digit"");\n/* NOTREACHED */\n\n/*\n* may be 0 to 2 octal digits following this one\n* so back up one for fallthrough to next case;\n* unread this digit and fall through to next case.\n*/\ncase \'1\':\ncase \'2\':\ncase \'3\':\ncase \'4\':\ncase \'5\':\ncase \'6\':\ncase \'7\': --i;\n/* FALLTHROUGH */\n\n/*\n* Can have 0, 1, or 2 octal digits following a 0\n* this permits larger values than octal 377, up to\n* octal 777.\n*/\ncase \'0\': {\nif (i+1 == oldstr.length()) {\n/* found \\0 at end of string */\nnewstr.append(Character.toChars(0));\nbreak; /* switch */\n}\ni++;\nint digits = 0;\nint j;\nfor (j = 0; j <= 2; j++) {\nif (i+j == oldstr.length()) {\nbreak; /* for */\n}\n/* safe because will unread surrogate */\nint ch = oldstr.charAt(i+j);\nif (ch < \'0\' || ch > \'7\') {\nbreak; /* for */\n}\ndigits++;\n}\nif (digits == 0) {\n--i;\nnewstr.append(\'\\0\');\nbreak; /* switch */\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(\noldstr.substring(i, i+digits), 8);\n} catch (NumberFormatException nfe) {\ndie(""invalid octal value for \\\\0 escape"");\n}\nnewstr.append(Character.toChars(value));\ni += digits-1;\nbreak; /* switch */\n} /* end case \'0\' */\n\ncase \'x\': {\nif (i+2 > oldstr.length()) {\ndie(""string too short for \\\\x escape"");\n}\ni++;\nboolean saw_brace = false;\nif (oldstr.charAt(i) == \'{\') {\n/* ^^^^^^ ok to ignore surrogates here */\ni++;\nsaw_brace = true;\n}\nint j;\nfor (j = 0; j < 8; j++) {\n\nif (!saw_brace && j == 2) {\nbreak; /* for */\n}\n\n/*\n* ASCII test also catches surrogates\n*/\nint ch = oldstr.charAt(i+j);\nif (ch > 127) {\ndie(""illegal non-ASCII hex digit in \\\\x escape"");\n}\n\nif (saw_brace && ch == \'}\') { break; /* for */ }\n\nif (! ( (ch >= \'0\' && ch <= \'9\')\n||\n(ch >= \'a\' && ch <= \'f\')\n||\n(ch >= \'A\' && ch <= \'F\')\n)\n)\n{\ndie(String.format(\n""illegal hex digit #%d \'%c\' in \\\\x"", ch, ch));\n}\n\n}\nif (j == 0) { die(""empty braces in \\\\x{} escape""); }\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\x escape"");\n}\nnewstr.append(Character.toChars(value));\nif (saw_brace) { j++; }\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'u\': {\nif (i+4 > oldstr.length()) {\ndie(""string too short for \\\\u escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 4; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\u escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt( oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\u escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'U\': {\nif (i+8 > oldstr.length()) {\ndie(""string too short for \\\\U escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 8; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\U escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\U escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ndefault: newstr.append(\'\\\\\');\nnewstr.append(Character.toChars(cp));\n/*\n* say(String.format(\n* ""DEFAULT unrecognized escape %c passed through"",\n* cp));\n*/\nbreak; /* switch */\n\n}\nsaw_backslash = false;\n}\n\n/* weird to leave one at the end */\nif (saw_backslash) {\nnewstr.append(\'\\\\\');\n}\n\nreturn newstr.toString();\n}\n\n/*\n* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the\n* xdigits of the logical Unicode code point. No bloody brain-damaged\n* UTF-16 surrogate crap, just true logical characters.\n*/\npublic final static\nString uniplus(String s) {\nif (s.length() == 0) {\nreturn """";\n}\n/* This is just the minimum; sb will grow as needed. */\nStringBuffer sb = new StringBuffer(2 + 3 * s.length());\nsb.append(""U+"");\nfor (int i = 0; i < s.length(); i++) {\nsb.append(String.format(""%X"", s.codePointAt(i)));\nif (s.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\nif (i+1 < s.length()) {\nsb.append(""."");\n}\n}\nreturn sb.toString();\n}\n\nprivate static final\nvoid die(String foa) {\nthrow new IllegalArgumentException(foa);\n}\n\nprivate static final\nvoid say(String what) {\nSystem.out.println(what);\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nReview an answer - Decode Ways\n----------Explanation----------\nNow we have done all the necessary work for a simple (but working) recursive implementation:\n----------Code Sample----------\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail);\n}\n\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nreturn numDecodings(encodedText, new Integer[1 + encodedText.length()]);\n}\n\nstatic int numDecodings(String encodedText, Integer[] cache) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// check if this tail is already known in the cache\nif (cache[encodedText.length()] != null) {\nreturn cache[encodedText.length()];\n}\n\n// cache miss -- sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail, cache); // pass the cache through\n}\n\n// update the cache\ncache[encodedText.length()] = sum;\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nint[] cache = new int[encodedText.length() + 1];\n\n// base case: the empty string at encodedText.length() is 1:\ncache[encodedText.length()] = 1;\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// sum directly into the cache\nfor (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {\nString head = encodedText.substring(position, position + headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\ncache[position] += cache[position + headSize];\n}\n}\n\nreturn cache[0];\n}\n\nstatic int numDecodings(String encodedText) {\n// initialize the cache\nint[] cache = {1, 0, 0};\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// rotate the cache\ncache[2] = cache[1];\ncache[1] = cache[0];\ncache[0] = 0;\n\n// headSize == 1\nif (position + 0 < encodedText.length()) {\nchar c = encodedText.charAt(position + 0);\n\n// 1 .. 9\nif (\'1\' <= c && c <= \'9\') {\ncache[0] += cache[1];\n}\n}\n\n// headSize == 2\nif (position + 1 < encodedText.length()) {\nchar c1 = encodedText.charAt(position + 0);\nchar c2 = encodedText.charAt(position + 1);\n\n// 10 .. 19\nif (\'1\' == c1) {\ncache[0] += cache[2];\n}\n// 20 .. 26\nelse if (\'2\' == c1 && \'0\' <= c2 && c2 <= \'6\') {\ncache[0] += cache[2];\n}\n}\n}\n\nreturn cache[0];\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nFastest way to iterate over all the chars in a String\n----------Explanation----------\n\n----------Code Sample----------\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal Field field = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// avoid this at all costs\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0\n2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5\n4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6\n8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4\n16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5\n32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2\n64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0\n128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6\n256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8\n512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4\n1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2\n2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1\n4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0\n8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0\n16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0\n32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0\n65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0\n131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0\n262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5\n2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8\n4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0\n8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8\n16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6\n32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7\n64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1\n128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7\n256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3\n512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1\n1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0\n2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0\n4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9\n8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9\n16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9\n32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9\n65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9\n131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9\n262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.IntPredicate;\n\n/**\n* @author Saint Hill \n*/\npublic final class TestStrings {\n\n// we will not test strings longer than 512KM\nfinal int MAX_STRING_SIZE = 1024 * 256;\n\n// for each string size, we will do all the tests\n// this many times\nfinal int TRIES_PER_STRING_SIZE = 1000;\n\npublic static void main(String[] args) throws Exception {\nnew TestStrings().run();\n}\n\nvoid run() throws Exception {\n\n// double the length of the data until it reaches MAX chars long\n// 0,1,2,4,8,16,32,64,128,256 ... \nfinal List sizes = new ArrayList<>();\nfor (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {\nsizes.add(n);\n}\n\n// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)\nfinal Random random = new Random();\n\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== FORWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n}\n\n// reverse order or string sizes\nCollections.reverse(sizes);\n\nSystem.out.println("""");\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== BACKWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n\n}\n}\n\n///\n///\n/// METHODS OF CHECKING THE CONTENTS\n/// OF A STRING. ALWAYS CHECKING FOR\n/// WHITESPACE (CHAR <=\' \')\n/// \n///\n// CHECK THE STRING CONTENTS\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// SAME AS ABOVE BUT USE String.length()\n// instead of making a new final local int \nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// USE new Java-8 String\'s IntStream\n// pass it a PREDICATE to do the checking\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// OH LA LA - GO PARALLEL!!!\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// Re-fill a resuable char[] with the contents\n// of the String\'s char[]\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\n// but use FOR-EACH\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// FANCY!\n// OBTAIN FIELD FOR ACCESS TO THE STRING\'S\n// INTERNAL CHAR[]\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\n// same as above but use FOR-EACH\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\n/**\n*\n* Make a list of tests. We will shuffle a copy of this list repeatedly\n* while we repeat this test.\n*\n* @param data\n* @return\n*/\nList makeTests(String data) throws Exception {\n// make a list of tests\nfinal List tests = new ArrayList();\n\ntests.add(new Jobber(""charAt1"") {\nint check() {\nreturn charAtMethod1(data);\n}\n});\n\ntests.add(new Jobber(""charAt2"") {\nint check() {\nreturn charAtMethod2(data);\n}\n});\n\ntests.add(new Jobber(""stream"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamMethod(data, predicate);\n}\n});\n\ntests.add(new Jobber(""streamPar"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamParallelMethod(data, predicate);\n}\n});\n\n// Reusable char[] method\ntests.add(new Jobber(""reuse"") {\nfinal char[] cbuff = new char[MAX_STRING_SIZE];\n\nint check() {\nreturn reuseBuffMethod(cbuff, data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new1"") {\nint check() {\nreturn newMethod1(data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new2"") {\nint check() {\nreturn newMethod2(data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field1"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod1(field, data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field2"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod2(field, data);\n}\n});\n\nreturn tests;\n}\n\n/**\n* We use this class to keep trac""""""]']","['To find the largest string in an ArrayList in Java, you need to iterate through the list and compare the lengths of the strings. The largest string is the one with the maximum length. You can start by initializing a variable to keep track of the largest string found so far. As you iterate through the ArrayList, compare the length of each string with the length of the current largest string. If a string with a greater length is found, update the variable to this new string. Continue this process until you have checked all the strings in the ArrayList. At the end of the iteration, the variable will hold the largest string. This approach ensures that you efficiently find the largest string by length in the ArrayList.']","['[\'[\\\'To find the largest string in an ArrayList in Java, we can use a simple approach where we iterate through the list and keep track of the largest string encountered. The following code demonstrates this approach.\\\\nimport java.util.ArrayList;\\\\nimport java.util.Collections;\\\\npublic class LargestStringFinder {\\\\n    public static void main(String[] args) {\\\\n        // Sample ArrayList of strings\\\\n        ArrayList<String> strings = new ArrayList<>();\\\\n        strings.add(""apple"");\\\\n        strings.add(""banana"");\\\\n        strings.add(""cherry"");\\\\n        strings.add(""date"");\\\\n        strings.add(""elderberry"");\\\\n\\\\n        // Find the largest string\\\\n        String largestString = findLargestString(strings);\\\\n\\\\n        // Print the largest string\\\\n        System.out.println(""The largest string is: "" + largestString);\\\\n    }\\\\n\\\\n    public static String findLargestString(ArrayList<String> strings) {\\\\n        if (strings == null || strings.isEmpty()) {\\\\n            return null;\\\\n        }\\\\n\\\\n        String largest = strings.get(0);\\\\n        for (String str : strings) {\\\\n            if (str.compareTo(largest) > 0) {\\\\n                largest = str;\\\\n            }\\\\n        }\\\\n        return largest;\\\\n    }\\\\n}\\\']\']']",0.0416666666666666,0.0526315789473684,0.0357142857142857,0.0034158838599487,1.0,0.3333333333333333
lang,String,Strings written to file do not preserve line breaks,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢</code> to yield an extended alphabet <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£  := Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã¢â‚¬\xa0Ã¢â‚¬Å¡Ãƒâ€˜Ã‚Â¢ {Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢}</code>.</p> <p>Let <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â±</code> be a symbol and X a uniformly distributed random variable over <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã¢â€žÂ¢ = floor[32/logÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡ÃƒÂ¡Ã¢Ë†Å¡ÃƒÂ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Most common ways to construct:\nString name = new String(""Alex"");\nBased on 8 examples\n \nStringBuffer sb = Ã‰;\nString s = sb.toString();\nBased on 6 examples\n\n\n\nString\t\ntruncate(int maxLength)\n\n          Returns a new string with a length no longer than maxLength characters.\n\n\ntruncate\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic String truncate(int maxLength)\nReturns a new string with a length no longer than maxLength characters.\n\nUPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.\nParameters:\nmaxLength\nReturns:\na new string with a length no longer than maxLength characters']","['When you use readline() the line breaks are removed. You have to re-insert them with\n\nsb = sb.append(line).append(""\\n"");']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow can I make a method return an argument that was passed to it?\n----------Explanation----------\nYou can create an Answer in Mockito. Let\'s assume, we have an interface named Application with a method myFunction.\n----------Code Sample----------\npublic interface Application {\npublic String myFunction(String abc);\n}\n\npublic void testMyFunction() throws Exception {\nApplication mock = mock(Application.class);\nwhen(mock.myFunction(anyString())).thenAnswer(new Answer() {\n@Override\npublic String answer(InvocationOnMock invocation) throws Throwable {\nObject[] args = invocation.getArguments();\nreturn (String) args[0];\n}\n});\n\nassertEquals(""someString"",mock.myFunction(""someString""));\nassertEquals(""anotherString"",mock.myFunction(""anotherString""));\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nTrim string in JavaScript?\n----------Explanation----------\nFor those browsers who does not support trim() , you can use this polyfill from MDN :\n----------Code Sample----------\nif (!String.prototype.trim) {\n(function() {\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nString.prototype.trim = function() {\nreturn this.replace(rtrim, \'\');\n};\n})();\n}\n\nString.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, \'\');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,\'\');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,\'\');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,\'\').replace(/\\s+/g,\' \');};\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHow to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?\n----------Explanation----------\nchange your return type to ResponseEntity<String> , then you can use below for 400\n----------Code Sample----------\nreturn new ResponseEntity(HttpStatus.BAD_REQUEST);\n\nreturn new ResponseEntity(json,HttpStatus.OK);\nreturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\nreturn ResponseEntity.ok(json);\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nJava Byte Array to String to Byte Array\n----------Explanation----------\nYou can\'t just take the returned string and construct a string from it... it\'s not a byte[] data type anymore, it\'s already a string; you need to parse it. For example :\n----------Code Sample----------\nString response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script\n\nString[] byteValues = response.substring(1, response.length() - 1).split("","");\nbyte[] bytes = new byte[byteValues.length];\n\nfor (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); \n}\n\nString str = new String(bytes);\n\nbyte[] b1 = new byte[] {97, 98, 99};\n\nString s1 = Arrays.toString(b1);\nString s2 = new String(b1);\n\nSystem.out.println(s1); // -> ""[97, 98, 99]""\nSystem.out.println(s2); // -> ""abc"";\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nSprintf equivalent in Java\n----------Explanation----------\n\n----------Code Sample----------\n// Store the formatted string in \'result\'\nString result = String.format(""%4d"", i * j);\n\n// Write the result to standard output\nSystem.out.println( result );\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to replace special characters in a string?\n----------Explanation----------\nThat depends on what you mean. If you just want to get rid of them, do this: \n(Update: Apparently you want to keep digits as well, use the second lines in that case)\n----------Code Sample----------\nString alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");\nString alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");\n\nString alphaOnly = input.replaceAll(""[^\\\\p{Alpha}]+"","""");\nString alphaAndDigits = input.replaceAll(""[^\\\\p{Alpha}\\\\p{Digit}]+"","""");\n\nprivate static final CharMatcher ALNUM =\nCharMatcher.inRange(\'a\', \'z\').or(CharMatcher.inRange(\'A\', \'Z\'))\n.or(CharMatcher.inRange(\'0\', \'9\')).precomputed();\n// ...\nString alphaAndDigits = ALNUM.retainFrom(input);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nGet words around a position in a string\n----------Explanation----------\nYou can achiveve that using String \'s split() method . This solution is O(n) .\n----------Code Sample----------\npublic static void main(String[] args) {\nString str = ""Hello my name is John and I like to go fishing and ""+\n""hiking I have two sisters and one brother."";\nString find = ""I"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nif (sp[i].equals(find)) {\n// have to check for ArrayIndexOutOfBoundsException\nString surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +\n(i-1 > 0 ? sp[i-1]+"" "" : """") +\nsp[i] +\n(i+1 < sp.length ? "" ""+sp[i+1] : """") +\n(i+2 < sp.length ? "" ""+sp[i+2] : """");\nSystem.out.println(surr);\n}\n}\n}\n\npublic static void main(String[] args) {\nString str = ""Hello my name is John and John and I like to go..."";\nString find = ""John and"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\n\nString[] spMulti = find.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nint j = 0;\nwhile (j < spMulti.length && i+j < sp.length \n&& sp[i+j].equals(spMulti[j])) {\nj++;\n} \nif (j == spMulti.length) { // found spMulti entirely\nStringBuilder surr = new StringBuilder();\nif (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }\nif (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }\nfor (int k = 0; k < spMulti.length; k++) {\nif (k > 0){ surr.append("" ""); }\nsurr.append(sp[i+k]);\n}\nif (i+spMulti.length < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length]);\n}\nif (i+spMulti.length+1 < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length+1]);\n}\nSystem.out.println(surr.toString());\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object\n----------Explanation----------\nActually the problem was in ApplesDO Class:\n----------Code Sample----------\npublic class ApplesDO {\n\nprivate String apple;\npublic String getApple() {\nreturn apple;\n}\npublic void setApple(String apple) {\nthis.apple = apple;\npublic ApplesDO(CustomType custom) {\n//constructor Code\n//Introducing the dummy constructor\npublic ApplesDO() {\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nRepeat String - Javascript\n----------Explanation----------\nI\'d put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!\n----------Code Sample----------\nString.prototype.repeat = function( num )\n{\nreturn new Array( num + 1 ).join( this );\n}\n\nalert( ""string to repeat\\n"".repeat( 4 ) );\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIs this valid Java?\n----------Explanation----------\nHowever, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:\n----------Code Sample----------\n.class public CallAmbiguousMethod\n.super java/lang/Object\n\n.method public static main([Ljava/lang/String;)V\n.limit stack 3\n.limit locals 1\n\n; Call the method that returns String\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;\n\n; Call the method that returns Integer\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;\n\nreturn\n\n.end method\n\n\njava -jar jasmin.jar CallAmbiguousMethod.j\n\n\njava CallAmbiguousMethod\n\n\n> java CallAmbiguousMethod\nstrings\nnumbers\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass RealyCompilesAndRunsFine {\n\npublic static String f(List list) {\nreturn list.get(0);\n}\n\npublic static Integer f(List list) {\nreturn list.get(0);\n}\n\npublic static void main(String[] args) {\nfinal String string = f(Arrays.asList(""asdf""));\nfinal Integer integer = f(Arrays.asList(123));\nSystem.out.println(string);\nSystem.out.println(integer);\n}\n\n}\n\n\n>javap -c RealyCompilesAndRunsFine\nCompiled from ""RealyCompilesAndRunsFine.java""\nclass RealyCompilesAndRunsFine extends java.lang.Object{\nRealyCompilesAndRunsFine();\nCode:\n0: aload_0\n1: invokespecial #1; //Method java/lang/Object."""":()V\n4: return\n\npublic static java.lang.String f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #3; //class java/lang/String\n10: areturn\n\npublic static java.lang.Integer f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #4; //class java/lang/Integer\n10: areturn\n\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_1\n1: anewarray #3; //class java/lang/String\n4: dup\n5: iconst_0\n6: ldc #5; //String asdf\n8: aastore\n9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;\n15: astore_1\n16: iconst_1\n17: anewarray #4; //class java/lang/Integer\n20: dup\n21: iconst_0\n22: bipush 123\n24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n27: aastore\n28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;\n34: astore_2\n35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n38: aload_1\n39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n45: aload_2\n46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V\n49: return\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow to unescape a Java string literal in Java?\n----------Explanation----------\nLike many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:\n----------Code Sample----------\n/ 47 002F SOLIDUS\n= slash, virgule\nx (latin letter dental click - 01C0)\nx (combining long solidus overlay - 0338)\nx (fraction slash - 2044)\nx (division slash - 2215)\n\\ 92 005C REVERSE SOLIDUS\n= backslash\nx (combining reverse solidus overlay - 20E5)\nx (set minus - 2216)\n\n/*\n*\n* unescape_perl_string()\n*\n* Tom Christiansen \n* Sun Nov 28 12:55:24 MST 2010\n*\n* It\'s completely ridiculous that there\'s no standard\n* unescape_java_string function. Since I have to do the\n* damn thing myself, I might as well make it halfway useful\n* by supporting things Java was too stupid to consider in\n* strings:\n* \n* => ""?"" items are additions to Java string escapes\n* but normal in Java regexes\n*\n* => ""!"" items are also additions to Java regex escapes\n* \n* Standard singletons: ?\\a ?\\e \\f \\n \\r \\t\n* \n* NB: \\b is unsupported as backspace so it can pass-through\n* to the regex translator untouched; I refuse to make anyone\n* doublebackslash it as doublebackslashing is a Java idiocy\n* I desperately wish would die out. There are plenty of\n* other ways to write it:\n*\n* \\cH, \\12, \\012, \\x08 \\x{8}, \\u0008, \\U00000008\n*\n* Octal escapes: \\0 \\0N \\0NN \\N \\NN \\NNN\n* Can range up to !\\777 not \\377\n* \n* TODO: add !\\o{NNNNN}\n* last Unicode is 4177777\n* maxint is 37777777777\n*\n* Control chars: ?\\cX\n* Means: ord(X) ^ ord(\'@\')\n*\n* Old hex escapes: \\xXX\n* unbraced must be 2 xdigits\n*\n* Perl hex escapes: !\\x{XXX} braced may be 1-8 xdigits\n* NB: proper Unicode never needs more than 6, as highest\n* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF\n*\n* Lame Java escape: \\[IDIOT JAVA PREPROCESSOR]uXXXX must be\n* exactly 4 xdigits;\n*\n* I can\'t write XXXX in this comment where it belongs\n* because the damned Java Preprocessor can\'t mind its\n* own business. Idiots!\n*\n* Lame Python escape: !\\UXXXXXXXX must be exactly 8 xdigits\n* \n* TODO: Perl translation escapes: \\Q \\U \\L \\E \\[IDIOT JAVA PREPROCESSOR]u \\l\n* These are not so important to cover if you\'re passing the\n* result to Pattern.compile(), since it handles them for you\n* further downstream. Hm, what about \\[IDIOT JAVA PREPROCESSOR]u?\n*\n*/\n\npublic final static\nString unescape_perl_string(String oldstr) {\n\n/*\n* In contrast to fixing Java\'s broken regex charclasses,\n* this one need be no bigger, as unescaping shrinks the string\n* here, where in the other one, it grows it.\n*/\n\nStringBuffer newstr = new StringBuffer(oldstr.length());\n\nboolean saw_backslash = false;\n\nfor (int i = 0; i < oldstr.length(); i++) {\nint cp = oldstr.codePointAt(i);\nif (oldstr.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\n\nif (!saw_backslash) {\nif (cp == \'\\\\\') {\nsaw_backslash = true;\n} else {\nnewstr.append(Character.toChars(cp));\n}\ncontinue; /* switch */\n}\n\nif (cp == \'\\\\\') {\nsaw_backslash = false;\nnewstr.append(\'\\\\\');\nnewstr.append(\'\\\\\');\ncontinue; /* switch */\n}\n\nswitch (cp) {\n\ncase \'r\': newstr.append(\'\\r\');\nbreak; /* switch */\n\ncase \'n\': newstr.append(\'\\n\');\nbreak; /* switch */\n\ncase \'f\': newstr.append(\'\\f\');\nbreak; /* switch */\n\n/* PASS a \\b THROUGH!! */\ncase \'b\': newstr.append(""\\\\b"");\nbreak; /* switch */\n\ncase \'t\': newstr.append(\'\\t\');\nbreak; /* switch */\n\ncase \'a\': newstr.append(\'\\007\');\nbreak; /* switch */\n\ncase \'e\': newstr.append(\'\\033\');\nbreak; /* switch */\n\n/*\n* A ""control"" character is what you get when you xor its\n* codepoint with \'@\'==64. This only makes sense for ASCII,\n* and may not yield a ""control"" character after all.\n*\n* Strange but true: ""\\c{"" is "";"", ""\\c}"" is ""="", etc.\n*/\ncase \'c\': {\nif (++i == oldstr.length()) { die(""trailing \\\\c""); }\ncp = oldstr.codePointAt(i);\n/*\n* don\'t need to grok surrogates, as next line blows them up\n*/\nif (cp > 0x7f) { die(""expected ASCII after \\\\c""); }\nnewstr.append(Character.toChars(cp ^ 64));\nbreak; /* switch */\n}\n\ncase \'8\':\ncase \'9\': die(""illegal octal digit"");\n/* NOTREACHED */\n\n/*\n* may be 0 to 2 octal digits following this one\n* so back up one for fallthrough to next case;\n* unread this digit and fall through to next case.\n*/\ncase \'1\':\ncase \'2\':\ncase \'3\':\ncase \'4\':\ncase \'5\':\ncase \'6\':\ncase \'7\': --i;\n/* FALLTHROUGH */\n\n/*\n* Can have 0, 1, or 2 octal digits following a 0\n* this permits larger values than octal 377, up to\n* octal 777.\n*/\ncase \'0\': {\nif (i+1 == oldstr.length()) {\n/* found \\0 at end of string */\nnewstr.append(Character.toChars(0));\nbreak; /* switch */\n}\ni++;\nint digits = 0;\nint j;\nfor (j = 0; j <= 2; j++) {\nif (i+j == oldstr.length()) {\nbreak; /* for */\n}\n/* safe because will unread surrogate */\nint ch = oldstr.charAt(i+j);\nif (ch < \'0\' || ch > \'7\') {\nbreak; /* for */\n}\ndigits++;\n}\nif (digits == 0) {\n--i;\nnewstr.append(\'\\0\');\nbreak; /* switch */\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(\noldstr.substring(i, i+digits), 8);\n} catch (NumberFormatException nfe) {\ndie(""invalid octal value for \\\\0 escape"");\n}\nnewstr.append(Character.toChars(value));\ni += digits-1;\nbreak; /* switch */\n} /* end case \'0\' */\n\ncase \'x\': {\nif (i+2 > oldstr.length()) {\ndie(""string too short for \\\\x escape"");\n}\ni++;\nboolean saw_brace = false;\nif (oldstr.charAt(i) == \'{\') {\n/* ^^^^^^ ok to ignore surrogates here */\ni++;\nsaw_brace = true;\n}\nint j;\nfor (j = 0; j < 8; j++) {\n\nif (!saw_brace && j == 2) {\nbreak; /* for */\n}\n\n/*\n* ASCII test also catches surrogates\n*/\nint ch = oldstr.charAt(i+j);\nif (ch > 127) {\ndie(""illegal non-ASCII hex digit in \\\\x escape"");\n}\n\nif (saw_brace && ch == \'}\') { break; /* for */ }\n\nif (! ( (ch >= \'0\' && ch <= \'9\')\n||\n(ch >= \'a\' && ch <= \'f\')\n||\n(ch >= \'A\' && ch <= \'F\')\n)\n)\n{\ndie(String.format(\n""illegal hex digit #%d \'%c\' in \\\\x"", ch, ch));\n}\n\n}\nif (j == 0) { die(""empty braces in \\\\x{} escape""); }\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\x escape"");\n}\nnewstr.append(Character.toChars(value));\nif (saw_brace) { j++; }\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'u\': {\nif (i+4 > oldstr.length()) {\ndie(""string too short for \\\\u escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 4; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\u escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt( oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\u escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'U\': {\nif (i+8 > oldstr.length()) {\ndie(""string too short for \\\\U escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 8; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\U escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\U escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ndefault: newstr.append(\'\\\\\');\nnewstr.append(Character.toChars(cp));\n/*\n* say(String.format(\n* ""DEFAULT unrecognized escape %c passed through"",\n* cp));\n*/\nbreak; /* switch */\n\n}\nsaw_backslash = false;\n}\n\n/* weird to leave one at the end */\nif (saw_backslash) {\nnewstr.append(\'\\\\\');\n}\n\nreturn newstr.toString();\n}\n\n/*\n* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the\n* xdigits of the logical Unicode code point. No bloody brain-damaged\n* UTF-16 surrogate crap, just true logical characters.\n*/\npublic final static\nString uniplus(String s) {\nif (s.length() == 0) {\nreturn """";\n}\n/* This is just the minimum; sb will grow as needed. */\nStringBuffer sb = new StringBuffer(2 + 3 * s.length());\nsb.append(""U+"");\nfor (int i = 0; i < s.length(); i++) {\nsb.append(String.format(""%X"", s.codePointAt(i)));\nif (s.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\nif (i+1 < s.length()) {\nsb.append(""."");\n}\n}\nreturn sb.toString();\n}\n\nprivate static final\nvoid die(String foa) {\nthrow new IllegalArgumentException(foa);\n}\n\nprivate static final\nvoid say(String what) {\nSystem.out.println(what);\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nReview an answer - Decode Ways\n----------Explanation----------\nNow we have done all the necessary work for a simple (but working) recursive implementation:\n----------Code Sample----------\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail);\n}\n\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nreturn numDecodings(encodedText, new Integer[1 + encodedText.length()]);\n}\n\nstatic int numDecodings(String encodedText, Integer[] cache) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// check if this tail is already known in the cache\nif (cache[encodedText.length()] != null) {\nreturn cache[encodedText.length()];\n}\n\n// cache miss -- sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail, cache); // pass the cache through\n}\n\n// update the cache\ncache[encodedText.length()] = sum;\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nint[] cache = new int[encodedText.length() + 1];\n\n// base case: the empty string at encodedText.length() is 1:\ncache[encodedText.length()] = 1;\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// sum directly into the cache\nfor (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {\nString head = encodedText.substring(position, position + headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\ncache[position] += cache[position + headSize];\n}\n}\n\nreturn cache[0];\n}\n\nstatic int numDecodings(String encodedText) {\n// initialize the cache\nint[] cache = {1, 0, 0};\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// rotate the cache\ncache[2] = cache[1];\ncache[1] = cache[0];\ncache[0] = 0;\n\n// headSize == 1\nif (position + 0 < encodedText.length()) {\nchar c = encodedText.charAt(position + 0);\n\n// 1 .. 9\nif (\'1\' <= c && c <= \'9\') {\ncache[0] += cache[1];\n}\n}\n\n// headSize == 2\nif (position + 1 < encodedText.length()) {\nchar c1 = encodedText.charAt(position + 0);\nchar c2 = encodedText.charAt(position + 1);\n\n// 10 .. 19\nif (\'1\' == c1) {\ncache[0] += cache[2];\n}\n// 20 .. 26\nelse if (\'2\' == c1 && \'0\' <= c2 && c2 <= \'6\') {\ncache[0] += cache[2];\n}\n}\n}\n\nreturn cache[0];\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nFastest way to iterate over all the chars in a String\n----------Explanation----------\n\n----------Code Sample----------\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal Field field = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// avoid this at all costs\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0\n2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5\n4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6\n8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4\n16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5\n32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2\n64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0\n128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6\n256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8\n512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4\n1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2\n2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1\n4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0\n8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0\n16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0\n32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0\n65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0\n131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0\n262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5\n2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8\n4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0\n8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8\n16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6\n32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7\n64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1\n128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7\n256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3\n512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1\n1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0\n2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0\n4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9\n8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9\n16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9\n32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9\n65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9\n131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9\n262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.IntPredicate;\n\n/**\n* @author Saint Hill \n*/\npublic final class TestStrings {\n\n// we will not test strings longer than 512KM\nfinal int MAX_STRING_SIZE = 1024 * 256;\n\n// for each string size, we will do all the tests\n// this many times\nfinal int TRIES_PER_STRING_SIZE = 1000;\n\npublic static void main(String[] args) throws Exception {\nnew TestStrings().run();\n}\n\nvoid run() throws Exception {\n\n// double the length of the data until it reaches MAX chars long\n// 0,1,2,4,8,16,32,64,128,256 ... \nfinal List sizes = new ArrayList<>();\nfor (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {\nsizes.add(n);\n}\n\n// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)\nfinal Random random = new Random();\n\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== FORWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n}\n\n// reverse order or string sizes\nCollections.reverse(sizes);\n\nSystem.out.println("""");\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== BACKWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n\n}\n}\n\n///\n///\n/// METHODS OF CHECKING THE CONTENTS\n/// OF A STRING. ALWAYS CHECKING FOR\n/// WHITESPACE (CHAR <=\' \')\n/// \n///\n// CHECK THE STRING CONTENTS\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// SAME AS ABOVE BUT USE String.length()\n// instead of making a new final local int \nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// USE new Java-8 String\'s IntStream\n// pass it a PREDICATE to do the checking\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// OH LA LA - GO PARALLEL!!!\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// Re-fill a resuable char[] with the contents\n// of the String\'s char[]\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\n// but use FOR-EACH\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// FANCY!\n// OBTAIN FIELD FOR ACCESS TO THE STRING\'S\n// INTERNAL CHAR[]\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\n// same as above but use FOR-EACH\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\n/**\n*\n* Make a list of tests. We will shuffle a copy of this list repeatedly\n* while we repeat this test.\n*\n* @param data\n* @return\n*/\nList makeTests(String data) throws Exception {\n// make a list of tests\nfinal List tests = new ArrayList();\n\ntests.add(new Jobber(""charAt1"") {\nint check() {\nreturn charAtMethod1(data);\n}\n});\n\ntests.add(new Jobber(""charAt2"") {\nint check() {\nreturn charAtMethod2(data);\n}\n});\n\ntests.add(new Jobber(""stream"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamMethod(data, predicate);\n}\n});\n\ntests.add(new Jobber(""streamPar"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamParallelMethod(data, predicate);\n}\n});\n\n// Reusable char[] method\ntests.add(new Jobber(""reuse"") {\nfinal char[] cbuff = new char[MAX_STRING_SIZE];\n\nint check() {\nreturn reuseBuffMethod(cbuff, data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new1"") {\nint check() {\nreturn newMethod1(data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new2"") {\nint check() {\nreturn newMethod2(data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field1"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod1(field, data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field2"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod2(field, data);\n}\n});\n\nreturn tests;\n}\n\n/**\n* We use this class to keep trac""""""]']","[""When writing strings to a file in Java, line breaks may not be preserved if the correct newline character is not used or if the file writing method does not handle line breaks properly. In Java, the newline character can vary depending on the operating system: '\\n' for Unix/Linux, '\\r\\n' for Windows, and '\\r' for older Mac systems. If you are writing strings to a file and the line breaks are not being preserved, it is important to ensure that you are using the correct newline character for your operating system. Additionally, when using file writing classes such as FileWriter, BufferedWriter, or PrintWriter, make sure to explicitly include the newline character where needed. For example, using BufferedWriter's newLine() method can help in preserving line breaks. Properly handling these aspects will ensure that the strings written to the file maintain their intended formatting, including line breaks.""]","['[\'[\\\'To address the issue of strings written to a file not preserving line breaks, we need to ensure that the line breaks are correctly handled when writing to the file. In Java, we can use `BufferedWriter` to write strings to a file while preserving line breaks. The `BufferedWriter` class provides a `newLine()` method that can be used to insert a platform-specific line separator. Below is an example of how to achieve this.\\\\nimport java.io.BufferedWriter;\\\\nimport java.io.FileWriter;\\\\nimport java.io.IOException;\\\\npublic class WriteToFileWithLineBreaks {\\\\n    public static void main(String[] args) {\\\\n        String[] lines = {""First line"", ""Second line"", ""Third line""};\\\\n        String filePath = ""output.txt"";\\\\n        \\\\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {\\\\n            for (String line : lines) {\\\\n                writer.write(line);\\\\n                writer.newLine(); // This ensures the line break is preserved\\\\n            }\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0416666666666666,0.0526315789473684,0.5,0.0034158838599487,1.0,0.2
lang,String,Converting an int to a binary string representation in Java?,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢</code> to yield an extended alphabet <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£  := Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã¢â‚¬\xa0Ã¢â‚¬Å¡Ãƒâ€˜Ã‚Â¢ {Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢}</code>.</p> <p>Let <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â±</code> be a symbol and X a uniformly distributed random variable over <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã¢â€žÂ¢ = floor[32/logÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡ÃƒÂ¡Ã¢Ë†Å¡ÃƒÂ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Most common ways to construct:\nString name = new String(""Alex"");\nBased on 8 examples\n \nStringBuffer sb = Ã‰;\nString s = sb.toString();\nBased on 6 examples\n\n\n\nString\t\ntruncate(int maxLength)\n\n          Returns a new string with a length no longer than maxLength characters.\n\n\ntruncate\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic String truncate(int maxLength)\nReturns a new string with a length no longer than maxLength characters.\n\nUPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.\nParameters:\nmaxLength\nReturns:\na new string with a length no longer than maxLength characters']","['Convert Integer to Binary:\n\nimport java.util.Scanner;\n\npublic class IntegerToBinary {\n\n    public static void main(String[] args) {\n\n        Scanner input = new Scanner( System.in );\n\n        System.out.println(""Enter Integer: "");\n        String integerString =input.nextLine();\n\n        System.out.println(""Binary Number: ""+Integer.toBinaryString(Integer.parseInt(integerString)));\n    }\n\n}\nOutput:\n\nEnter Integer:\n\n10\n\nBinary Number: 1010']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow can I make a method return an argument that was passed to it?\n----------Explanation----------\nYou can create an Answer in Mockito. Let\'s assume, we have an interface named Application with a method myFunction.\n----------Code Sample----------\npublic interface Application {\npublic String myFunction(String abc);\n}\n\npublic void testMyFunction() throws Exception {\nApplication mock = mock(Application.class);\nwhen(mock.myFunction(anyString())).thenAnswer(new Answer() {\n@Override\npublic String answer(InvocationOnMock invocation) throws Throwable {\nObject[] args = invocation.getArguments();\nreturn (String) args[0];\n}\n});\n\nassertEquals(""someString"",mock.myFunction(""someString""));\nassertEquals(""anotherString"",mock.myFunction(""anotherString""));\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nTrim string in JavaScript?\n----------Explanation----------\nFor those browsers who does not support trim() , you can use this polyfill from MDN :\n----------Code Sample----------\nif (!String.prototype.trim) {\n(function() {\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nString.prototype.trim = function() {\nreturn this.replace(rtrim, \'\');\n};\n})();\n}\n\nString.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, \'\');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,\'\');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,\'\');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,\'\').replace(/\\s+/g,\' \');};\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHow to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?\n----------Explanation----------\nchange your return type to ResponseEntity<String> , then you can use below for 400\n----------Code Sample----------\nreturn new ResponseEntity(HttpStatus.BAD_REQUEST);\n\nreturn new ResponseEntity(json,HttpStatus.OK);\nreturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\nreturn ResponseEntity.ok(json);\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nJava Byte Array to String to Byte Array\n----------Explanation----------\nYou can\'t just take the returned string and construct a string from it... it\'s not a byte[] data type anymore, it\'s already a string; you need to parse it. For example :\n----------Code Sample----------\nString response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script\n\nString[] byteValues = response.substring(1, response.length() - 1).split("","");\nbyte[] bytes = new byte[byteValues.length];\n\nfor (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); \n}\n\nString str = new String(bytes);\n\nbyte[] b1 = new byte[] {97, 98, 99};\n\nString s1 = Arrays.toString(b1);\nString s2 = new String(b1);\n\nSystem.out.println(s1); // -> ""[97, 98, 99]""\nSystem.out.println(s2); // -> ""abc"";\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nSprintf equivalent in Java\n----------Explanation----------\n\n----------Code Sample----------\n// Store the formatted string in \'result\'\nString result = String.format(""%4d"", i * j);\n\n// Write the result to standard output\nSystem.out.println( result );\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to replace special characters in a string?\n----------Explanation----------\nThat depends on what you mean. If you just want to get rid of them, do this: \n(Update: Apparently you want to keep digits as well, use the second lines in that case)\n----------Code Sample----------\nString alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");\nString alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");\n\nString alphaOnly = input.replaceAll(""[^\\\\p{Alpha}]+"","""");\nString alphaAndDigits = input.replaceAll(""[^\\\\p{Alpha}\\\\p{Digit}]+"","""");\n\nprivate static final CharMatcher ALNUM =\nCharMatcher.inRange(\'a\', \'z\').or(CharMatcher.inRange(\'A\', \'Z\'))\n.or(CharMatcher.inRange(\'0\', \'9\')).precomputed();\n// ...\nString alphaAndDigits = ALNUM.retainFrom(input);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nGet words around a position in a string\n----------Explanation----------\nYou can achiveve that using String \'s split() method . This solution is O(n) .\n----------Code Sample----------\npublic static void main(String[] args) {\nString str = ""Hello my name is John and I like to go fishing and ""+\n""hiking I have two sisters and one brother."";\nString find = ""I"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nif (sp[i].equals(find)) {\n// have to check for ArrayIndexOutOfBoundsException\nString surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +\n(i-1 > 0 ? sp[i-1]+"" "" : """") +\nsp[i] +\n(i+1 < sp.length ? "" ""+sp[i+1] : """") +\n(i+2 < sp.length ? "" ""+sp[i+2] : """");\nSystem.out.println(surr);\n}\n}\n}\n\npublic static void main(String[] args) {\nString str = ""Hello my name is John and John and I like to go..."";\nString find = ""John and"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\n\nString[] spMulti = find.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nint j = 0;\nwhile (j < spMulti.length && i+j < sp.length \n&& sp[i+j].equals(spMulti[j])) {\nj++;\n} \nif (j == spMulti.length) { // found spMulti entirely\nStringBuilder surr = new StringBuilder();\nif (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }\nif (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }\nfor (int k = 0; k < spMulti.length; k++) {\nif (k > 0){ surr.append("" ""); }\nsurr.append(sp[i+k]);\n}\nif (i+spMulti.length < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length]);\n}\nif (i+spMulti.length+1 < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length+1]);\n}\nSystem.out.println(surr.toString());\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object\n----------Explanation----------\nActually the problem was in ApplesDO Class:\n----------Code Sample----------\npublic class ApplesDO {\n\nprivate String apple;\npublic String getApple() {\nreturn apple;\n}\npublic void setApple(String apple) {\nthis.apple = apple;\npublic ApplesDO(CustomType custom) {\n//constructor Code\n//Introducing the dummy constructor\npublic ApplesDO() {\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nRepeat String - Javascript\n----------Explanation----------\nI\'d put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!\n----------Code Sample----------\nString.prototype.repeat = function( num )\n{\nreturn new Array( num + 1 ).join( this );\n}\n\nalert( ""string to repeat\\n"".repeat( 4 ) );\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIs this valid Java?\n----------Explanation----------\nHowever, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:\n----------Code Sample----------\n.class public CallAmbiguousMethod\n.super java/lang/Object\n\n.method public static main([Ljava/lang/String;)V\n.limit stack 3\n.limit locals 1\n\n; Call the method that returns String\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;\n\n; Call the method that returns Integer\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;\n\nreturn\n\n.end method\n\n\njava -jar jasmin.jar CallAmbiguousMethod.j\n\n\njava CallAmbiguousMethod\n\n\n> java CallAmbiguousMethod\nstrings\nnumbers\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass RealyCompilesAndRunsFine {\n\npublic static String f(List list) {\nreturn list.get(0);\n}\n\npublic static Integer f(List list) {\nreturn list.get(0);\n}\n\npublic static void main(String[] args) {\nfinal String string = f(Arrays.asList(""asdf""));\nfinal Integer integer = f(Arrays.asList(123));\nSystem.out.println(string);\nSystem.out.println(integer);\n}\n\n}\n\n\n>javap -c RealyCompilesAndRunsFine\nCompiled from ""RealyCompilesAndRunsFine.java""\nclass RealyCompilesAndRunsFine extends java.lang.Object{\nRealyCompilesAndRunsFine();\nCode:\n0: aload_0\n1: invokespecial #1; //Method java/lang/Object."""":()V\n4: return\n\npublic static java.lang.String f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #3; //class java/lang/String\n10: areturn\n\npublic static java.lang.Integer f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #4; //class java/lang/Integer\n10: areturn\n\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_1\n1: anewarray #3; //class java/lang/String\n4: dup\n5: iconst_0\n6: ldc #5; //String asdf\n8: aastore\n9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;\n15: astore_1\n16: iconst_1\n17: anewarray #4; //class java/lang/Integer\n20: dup\n21: iconst_0\n22: bipush 123\n24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n27: aastore\n28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;\n34: astore_2\n35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n38: aload_1\n39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n45: aload_2\n46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V\n49: return\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow to unescape a Java string literal in Java?\n----------Explanation----------\nLike many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:\n----------Code Sample----------\n/ 47 002F SOLIDUS\n= slash, virgule\nx (latin letter dental click - 01C0)\nx (combining long solidus overlay - 0338)\nx (fraction slash - 2044)\nx (division slash - 2215)\n\\ 92 005C REVERSE SOLIDUS\n= backslash\nx (combining reverse solidus overlay - 20E5)\nx (set minus - 2216)\n\n/*\n*\n* unescape_perl_string()\n*\n* Tom Christiansen \n* Sun Nov 28 12:55:24 MST 2010\n*\n* It\'s completely ridiculous that there\'s no standard\n* unescape_java_string function. Since I have to do the\n* damn thing myself, I might as well make it halfway useful\n* by supporting things Java was too stupid to consider in\n* strings:\n* \n* => ""?"" items are additions to Java string escapes\n* but normal in Java regexes\n*\n* => ""!"" items are also additions to Java regex escapes\n* \n* Standard singletons: ?\\a ?\\e \\f \\n \\r \\t\n* \n* NB: \\b is unsupported as backspace so it can pass-through\n* to the regex translator untouched; I refuse to make anyone\n* doublebackslash it as doublebackslashing is a Java idiocy\n* I desperately wish would die out. There are plenty of\n* other ways to write it:\n*\n* \\cH, \\12, \\012, \\x08 \\x{8}, \\u0008, \\U00000008\n*\n* Octal escapes: \\0 \\0N \\0NN \\N \\NN \\NNN\n* Can range up to !\\777 not \\377\n* \n* TODO: add !\\o{NNNNN}\n* last Unicode is 4177777\n* maxint is 37777777777\n*\n* Control chars: ?\\cX\n* Means: ord(X) ^ ord(\'@\')\n*\n* Old hex escapes: \\xXX\n* unbraced must be 2 xdigits\n*\n* Perl hex escapes: !\\x{XXX} braced may be 1-8 xdigits\n* NB: proper Unicode never needs more than 6, as highest\n* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF\n*\n* Lame Java escape: \\[IDIOT JAVA PREPROCESSOR]uXXXX must be\n* exactly 4 xdigits;\n*\n* I can\'t write XXXX in this comment where it belongs\n* because the damned Java Preprocessor can\'t mind its\n* own business. Idiots!\n*\n* Lame Python escape: !\\UXXXXXXXX must be exactly 8 xdigits\n* \n* TODO: Perl translation escapes: \\Q \\U \\L \\E \\[IDIOT JAVA PREPROCESSOR]u \\l\n* These are not so important to cover if you\'re passing the\n* result to Pattern.compile(), since it handles them for you\n* further downstream. Hm, what about \\[IDIOT JAVA PREPROCESSOR]u?\n*\n*/\n\npublic final static\nString unescape_perl_string(String oldstr) {\n\n/*\n* In contrast to fixing Java\'s broken regex charclasses,\n* this one need be no bigger, as unescaping shrinks the string\n* here, where in the other one, it grows it.\n*/\n\nStringBuffer newstr = new StringBuffer(oldstr.length());\n\nboolean saw_backslash = false;\n\nfor (int i = 0; i < oldstr.length(); i++) {\nint cp = oldstr.codePointAt(i);\nif (oldstr.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\n\nif (!saw_backslash) {\nif (cp == \'\\\\\') {\nsaw_backslash = true;\n} else {\nnewstr.append(Character.toChars(cp));\n}\ncontinue; /* switch */\n}\n\nif (cp == \'\\\\\') {\nsaw_backslash = false;\nnewstr.append(\'\\\\\');\nnewstr.append(\'\\\\\');\ncontinue; /* switch */\n}\n\nswitch (cp) {\n\ncase \'r\': newstr.append(\'\\r\');\nbreak; /* switch */\n\ncase \'n\': newstr.append(\'\\n\');\nbreak; /* switch */\n\ncase \'f\': newstr.append(\'\\f\');\nbreak; /* switch */\n\n/* PASS a \\b THROUGH!! */\ncase \'b\': newstr.append(""\\\\b"");\nbreak; /* switch */\n\ncase \'t\': newstr.append(\'\\t\');\nbreak; /* switch */\n\ncase \'a\': newstr.append(\'\\007\');\nbreak; /* switch */\n\ncase \'e\': newstr.append(\'\\033\');\nbreak; /* switch */\n\n/*\n* A ""control"" character is what you get when you xor its\n* codepoint with \'@\'==64. This only makes sense for ASCII,\n* and may not yield a ""control"" character after all.\n*\n* Strange but true: ""\\c{"" is "";"", ""\\c}"" is ""="", etc.\n*/\ncase \'c\': {\nif (++i == oldstr.length()) { die(""trailing \\\\c""); }\ncp = oldstr.codePointAt(i);\n/*\n* don\'t need to grok surrogates, as next line blows them up\n*/\nif (cp > 0x7f) { die(""expected ASCII after \\\\c""); }\nnewstr.append(Character.toChars(cp ^ 64));\nbreak; /* switch */\n}\n\ncase \'8\':\ncase \'9\': die(""illegal octal digit"");\n/* NOTREACHED */\n\n/*\n* may be 0 to 2 octal digits following this one\n* so back up one for fallthrough to next case;\n* unread this digit and fall through to next case.\n*/\ncase \'1\':\ncase \'2\':\ncase \'3\':\ncase \'4\':\ncase \'5\':\ncase \'6\':\ncase \'7\': --i;\n/* FALLTHROUGH */\n\n/*\n* Can have 0, 1, or 2 octal digits following a 0\n* this permits larger values than octal 377, up to\n* octal 777.\n*/\ncase \'0\': {\nif (i+1 == oldstr.length()) {\n/* found \\0 at end of string */\nnewstr.append(Character.toChars(0));\nbreak; /* switch */\n}\ni++;\nint digits = 0;\nint j;\nfor (j = 0; j <= 2; j++) {\nif (i+j == oldstr.length()) {\nbreak; /* for */\n}\n/* safe because will unread surrogate */\nint ch = oldstr.charAt(i+j);\nif (ch < \'0\' || ch > \'7\') {\nbreak; /* for */\n}\ndigits++;\n}\nif (digits == 0) {\n--i;\nnewstr.append(\'\\0\');\nbreak; /* switch */\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(\noldstr.substring(i, i+digits), 8);\n} catch (NumberFormatException nfe) {\ndie(""invalid octal value for \\\\0 escape"");\n}\nnewstr.append(Character.toChars(value));\ni += digits-1;\nbreak; /* switch */\n} /* end case \'0\' */\n\ncase \'x\': {\nif (i+2 > oldstr.length()) {\ndie(""string too short for \\\\x escape"");\n}\ni++;\nboolean saw_brace = false;\nif (oldstr.charAt(i) == \'{\') {\n/* ^^^^^^ ok to ignore surrogates here */\ni++;\nsaw_brace = true;\n}\nint j;\nfor (j = 0; j < 8; j++) {\n\nif (!saw_brace && j == 2) {\nbreak; /* for */\n}\n\n/*\n* ASCII test also catches surrogates\n*/\nint ch = oldstr.charAt(i+j);\nif (ch > 127) {\ndie(""illegal non-ASCII hex digit in \\\\x escape"");\n}\n\nif (saw_brace && ch == \'}\') { break; /* for */ }\n\nif (! ( (ch >= \'0\' && ch <= \'9\')\n||\n(ch >= \'a\' && ch <= \'f\')\n||\n(ch >= \'A\' && ch <= \'F\')\n)\n)\n{\ndie(String.format(\n""illegal hex digit #%d \'%c\' in \\\\x"", ch, ch));\n}\n\n}\nif (j == 0) { die(""empty braces in \\\\x{} escape""); }\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\x escape"");\n}\nnewstr.append(Character.toChars(value));\nif (saw_brace) { j++; }\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'u\': {\nif (i+4 > oldstr.length()) {\ndie(""string too short for \\\\u escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 4; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\u escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt( oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\u escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'U\': {\nif (i+8 > oldstr.length()) {\ndie(""string too short for \\\\U escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 8; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\U escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\U escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ndefault: newstr.append(\'\\\\\');\nnewstr.append(Character.toChars(cp));\n/*\n* say(String.format(\n* ""DEFAULT unrecognized escape %c passed through"",\n* cp));\n*/\nbreak; /* switch */\n\n}\nsaw_backslash = false;\n}\n\n/* weird to leave one at the end */\nif (saw_backslash) {\nnewstr.append(\'\\\\\');\n}\n\nreturn newstr.toString();\n}\n\n/*\n* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the\n* xdigits of the logical Unicode code point. No bloody brain-damaged\n* UTF-16 surrogate crap, just true logical characters.\n*/\npublic final static\nString uniplus(String s) {\nif (s.length() == 0) {\nreturn """";\n}\n/* This is just the minimum; sb will grow as needed. */\nStringBuffer sb = new StringBuffer(2 + 3 * s.length());\nsb.append(""U+"");\nfor (int i = 0; i < s.length(); i++) {\nsb.append(String.format(""%X"", s.codePointAt(i)));\nif (s.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\nif (i+1 < s.length()) {\nsb.append(""."");\n}\n}\nreturn sb.toString();\n}\n\nprivate static final\nvoid die(String foa) {\nthrow new IllegalArgumentException(foa);\n}\n\nprivate static final\nvoid say(String what) {\nSystem.out.println(what);\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nReview an answer - Decode Ways\n----------Explanation----------\nNow we have done all the necessary work for a simple (but working) recursive implementation:\n----------Code Sample----------\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail);\n}\n\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nreturn numDecodings(encodedText, new Integer[1 + encodedText.length()]);\n}\n\nstatic int numDecodings(String encodedText, Integer[] cache) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// check if this tail is already known in the cache\nif (cache[encodedText.length()] != null) {\nreturn cache[encodedText.length()];\n}\n\n// cache miss -- sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail, cache); // pass the cache through\n}\n\n// update the cache\ncache[encodedText.length()] = sum;\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nint[] cache = new int[encodedText.length() + 1];\n\n// base case: the empty string at encodedText.length() is 1:\ncache[encodedText.length()] = 1;\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// sum directly into the cache\nfor (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {\nString head = encodedText.substring(position, position + headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\ncache[position] += cache[position + headSize];\n}\n}\n\nreturn cache[0];\n}\n\nstatic int numDecodings(String encodedText) {\n// initialize the cache\nint[] cache = {1, 0, 0};\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// rotate the cache\ncache[2] = cache[1];\ncache[1] = cache[0];\ncache[0] = 0;\n\n// headSize == 1\nif (position + 0 < encodedText.length()) {\nchar c = encodedText.charAt(position + 0);\n\n// 1 .. 9\nif (\'1\' <= c && c <= \'9\') {\ncache[0] += cache[1];\n}\n}\n\n// headSize == 2\nif (position + 1 < encodedText.length()) {\nchar c1 = encodedText.charAt(position + 0);\nchar c2 = encodedText.charAt(position + 1);\n\n// 10 .. 19\nif (\'1\' == c1) {\ncache[0] += cache[2];\n}\n// 20 .. 26\nelse if (\'2\' == c1 && \'0\' <= c2 && c2 <= \'6\') {\ncache[0] += cache[2];\n}\n}\n}\n\nreturn cache[0];\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nFastest way to iterate over all the chars in a String\n----------Explanation----------\n\n----------Code Sample----------\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal Field field = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// avoid this at all costs\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0\n2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5\n4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6\n8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4\n16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5\n32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2\n64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0\n128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6\n256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8\n512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4\n1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2\n2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1\n4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0\n8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0\n16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0\n32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0\n65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0\n131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0\n262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5\n2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8\n4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0\n8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8\n16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6\n32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7\n64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1\n128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7\n256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3\n512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1\n1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0\n2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0\n4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9\n8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9\n16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9\n32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9\n65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9\n131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9\n262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.IntPredicate;\n\n/**\n* @author Saint Hill \n*/\npublic final class TestStrings {\n\n// we will not test strings longer than 512KM\nfinal int MAX_STRING_SIZE = 1024 * 256;\n\n// for each string size, we will do all the tests\n// this many times\nfinal int TRIES_PER_STRING_SIZE = 1000;\n\npublic static void main(String[] args) throws Exception {\nnew TestStrings().run();\n}\n\nvoid run() throws Exception {\n\n// double the length of the data until it reaches MAX chars long\n// 0,1,2,4,8,16,32,64,128,256 ... \nfinal List sizes = new ArrayList<>();\nfor (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {\nsizes.add(n);\n}\n\n// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)\nfinal Random random = new Random();\n\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== FORWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n}\n\n// reverse order or string sizes\nCollections.reverse(sizes);\n\nSystem.out.println("""");\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== BACKWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n\n}\n}\n\n///\n///\n/// METHODS OF CHECKING THE CONTENTS\n/// OF A STRING. ALWAYS CHECKING FOR\n/// WHITESPACE (CHAR <=\' \')\n/// \n///\n// CHECK THE STRING CONTENTS\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// SAME AS ABOVE BUT USE String.length()\n// instead of making a new final local int \nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// USE new Java-8 String\'s IntStream\n// pass it a PREDICATE to do the checking\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// OH LA LA - GO PARALLEL!!!\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// Re-fill a resuable char[] with the contents\n// of the String\'s char[]\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\n// but use FOR-EACH\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// FANCY!\n// OBTAIN FIELD FOR ACCESS TO THE STRING\'S\n// INTERNAL CHAR[]\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\n// same as above but use FOR-EACH\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\n/**\n*\n* Make a list of tests. We will shuffle a copy of this list repeatedly\n* while we repeat this test.\n*\n* @param data\n* @return\n*/\nList makeTests(String data) throws Exception {\n// make a list of tests\nfinal List tests = new ArrayList();\n\ntests.add(new Jobber(""charAt1"") {\nint check() {\nreturn charAtMethod1(data);\n}\n});\n\ntests.add(new Jobber(""charAt2"") {\nint check() {\nreturn charAtMethod2(data);\n}\n});\n\ntests.add(new Jobber(""stream"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamMethod(data, predicate);\n}\n});\n\ntests.add(new Jobber(""streamPar"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamParallelMethod(data, predicate);\n}\n});\n\n// Reusable char[] method\ntests.add(new Jobber(""reuse"") {\nfinal char[] cbuff = new char[MAX_STRING_SIZE];\n\nint check() {\nreturn reuseBuffMethod(cbuff, data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new1"") {\nint check() {\nreturn newMethod1(data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new2"") {\nint check() {\nreturn newMethod2(data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field1"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod1(field, data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field2"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod2(field, data);\n}\n});\n\nreturn tests;\n}\n\n/**\n* We use this class to keep trac""""""]']","[""To convert an int to a binary string representation in Java, you can use the Integer class, which provides a method specifically for this purpose. The method Integer.toBinaryString(int i) takes an integer as an argument and returns a string that represents the binary equivalent of the given integer. This method handles the conversion internally, so you don't need to manually perform the binary conversion. The resulting string will contain the binary digits (0s and 1s) that represent the integer in binary form. This is a straightforward and efficient way to obtain the binary representation of an integer in Java.""]","['[\'[\\\'To convert an integer to its binary string representation in Java, we can use the `Integer.toBinaryString` method. This method takes an integer as an argument and returns a string that represents the binary equivalent of the integer. Below is an example demonstrating how to use this method.\\\\nimport java.util.Scanner;\\\\npublic class IntToBinaryString {\\\\n    public static void main(String[] args) {\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.print(""Enter an integer: "");\\\\n        int number = scanner.nextInt();\\\\n        String binaryString = Integer.toBinaryString(number);\\\\n        System.out.println(""Binary representation: "" + binaryString);\\\\n        scanner.close();\\\\n    }\\\\n}\\\']\']']",0.0416666666666666,0.1052631578947368,0.0714285714285714,0.0034158838599487,1.0,0.25
lang,String,How to convert binary string value to decimal,['Ways to convert an InputStream to a String:</strong></p> <ol> <li><p>Using <code>IOUtils.toString</code> (Apache Utils)</p> <pre><code>\nApache Commons</a> <code><a href= https://commons.apache.org/proper/commons-io/javadocs/api-release/org/apache/commons/io/IOUtils.html  rel= noreferrer >IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>...\nhttp://download.oracle.com/javase/8/docs/api/java/util/Scanner.html  rel= noreferrer >Scanner</a> iterates over tokens in the stream  and in this case we separate tokens using  beginning of the input boundary  (\\A)  thus giving us only one token for the entire contents of the stream.</p>\nThe trick here is that we work in blocks  and as such don t need other buffering streams.\nThe block size is parameterized for run-time performance optimization.</p>\n<p>Then just add those numbers to the integer representation of the character <code>`</code>\n<p>When <code>java.util.Random</code> is instantiated with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>)  it follows the random number generation algorithm <em>beginning</em>\n<p>Everyone here did a great job of explaining how the code works and showing how you can construct your own examples  but here s an information theoretical answer showing why we can reasonably expect a solution to exist that the brute force search will eventually find.</p> <p>\nTo allow generating words of different lengths  we further add a terminator symbol <code>Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢</code> to yield an extended alphabet <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£  := Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã¢â‚¬\xa0Ã¢â‚¬Å¡Ãƒâ€˜Ã‚Â¢ {Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ã‚Â§Ã¢â‚¬Å¡Ãƒâ€žÃ‚Â¢}</code>.</p> <p>Let <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â±</code> be a symbol and X a uniformly distributed random variable over <code>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã‚Â£ </code>.\nSince the Pseudorandom Number Generator (PRNG) is initialized with a 32-bit seed  we can expect most words of length up to</p> <blockquote> <p>Ã¢â€°Ë†Ãƒ\xadÃ‚Â¬Ã¢â€žÂ¢ = floor[32/logÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡ÃƒÂ¡Ã¢Ë†Å¡ÃƒÂ¡(27)] - 1 = 5</p> </blockquote> <p>to be generated by at least one seed.\nEven if we were to search for a 6-character word  we would still be successful about 41.06% of the time.\n<p>Most random number generators are  in fact   pseudo random. \n<p>LCGs are quite predictable given a fixed seed.\nBasically  use a seed that gives you your first letter  then write an app that continues to generate the next int (char) until you hit the next letter in your target string and write down how many times you had to invoke the LCG.\n<p>As multi-threading is very easy with Java  here is a variant that searches for a seed using all cores available: <a href= http://ideone.com/ROhmTA  rel= noreferrer >http://ideone.com/ROhmTA</a></p>\n<p>To get different sequences  it s necessary initialize the sequence in some position  called  seed .</p>\n<p>The randomSting get the random number in the i position (seed = -229985452) of the  random  sequence.\n<p>The principal is the Random Class constructed with the same seed will generate the same pattern of numbers every time.</p>'],"['Most common ways to construct:\nString name = new String(""Alex"");\nBased on 8 examples\n \nStringBuffer sb = Ã‰;\nString s = sb.toString();\nBased on 6 examples\n\n\n\nString\t\ntruncate(int maxLength)\n\n          Returns a new string with a length no longer than maxLength characters.\n\n\ntruncate\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic String truncate(int maxLength)\nReturns a new string with a length no longer than maxLength characters.\n\nUPDATE: take a look at org.apache.commons.lang.StringUtils which can apparently do this and a lot more.\nParameters:\nmaxLength\nReturns:\na new string with a length no longer than maxLength characters']","['Use Integer.parseInt (see javadoc), that converts your String to int using base two:\n\nint decimalValue = Integer.parseInt(c, 2);']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nHow can I make a method return an argument that was passed to it?\n----------Explanation----------\nYou can create an Answer in Mockito. Let\'s assume, we have an interface named Application with a method myFunction.\n----------Code Sample----------\npublic interface Application {\npublic String myFunction(String abc);\n}\n\npublic void testMyFunction() throws Exception {\nApplication mock = mock(Application.class);\nwhen(mock.myFunction(anyString())).thenAnswer(new Answer() {\n@Override\npublic String answer(InvocationOnMock invocation) throws Throwable {\nObject[] args = invocation.getArguments();\nreturn (String) args[0];\n}\n});\n\nassertEquals(""someString"",mock.myFunction(""someString""));\nassertEquals(""anotherString"",mock.myFunction(""anotherString""));\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nTrim string in JavaScript?\n----------Explanation----------\nFor those browsers who does not support trim() , you can use this polyfill from MDN :\n----------Code Sample----------\nif (!String.prototype.trim) {\n(function() {\n// Make sure we trim BOM and NBSP\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\nString.prototype.trim = function() {\nreturn this.replace(rtrim, \'\');\n};\n})();\n}\n\nString.prototype.trim=function(){return this.replace(/^\\s+|\\s+$/g, \'\');};\n\nString.prototype.ltrim=function(){return this.replace(/^\\s+/,\'\');};\n\nString.prototype.rtrim=function(){return this.replace(/\\s+$/,\'\');};\n\nString.prototype.fulltrim=function(){return this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,\'\').replace(/\\s+/g,\' \');};\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHow to respond with HTTP 400 error in a Spring MVC @ResponseBody method returning String?\n----------Explanation----------\nchange your return type to ResponseEntity<String> , then you can use below for 400\n----------Code Sample----------\nreturn new ResponseEntity(HttpStatus.BAD_REQUEST);\n\nreturn new ResponseEntity(json,HttpStatus.OK);\nreturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);\nreturn ResponseEntity.ok(json);\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nJava Byte Array to String to Byte Array\n----------Explanation----------\nYou can\'t just take the returned string and construct a string from it... it\'s not a byte[] data type anymore, it\'s already a string; you need to parse it. For example :\n----------Code Sample----------\nString response = ""[-47, 1, 16, 84, 2, 101, 110, 83, 111, 109, 101, 32, 78, 70, 67, 32, 68, 97, 116, 97]""; // response from the Python script\n\nString[] byteValues = response.substring(1, response.length() - 1).split("","");\nbyte[] bytes = new byte[byteValues.length];\n\nfor (int i=0, len=bytes.length; i bytes[i] = Byte.parseByte(byteValues[i].trim()); \n}\n\nString str = new String(bytes);\n\nbyte[] b1 = new byte[] {97, 98, 99};\n\nString s1 = Arrays.toString(b1);\nString s2 = new String(b1);\n\nSystem.out.println(s1); // -> ""[97, 98, 99]""\nSystem.out.println(s2); // -> ""abc"";\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nSprintf equivalent in Java\n----------Explanation----------\n\n----------Code Sample----------\n// Store the formatted string in \'result\'\nString result = String.format(""%4d"", i * j);\n\n// Write the result to standard output\nSystem.out.println( result );\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow to replace special characters in a string?\n----------Explanation----------\nThat depends on what you mean. If you just want to get rid of them, do this: \n(Update: Apparently you want to keep digits as well, use the second lines in that case)\n----------Code Sample----------\nString alphaOnly = input.replaceAll(""[^a-zA-Z]+"","""");\nString alphaAndDigits = input.replaceAll(""[^a-zA-Z0-9]+"","""");\n\nString alphaOnly = input.replaceAll(""[^\\\\p{Alpha}]+"","""");\nString alphaAndDigits = input.replaceAll(""[^\\\\p{Alpha}\\\\p{Digit}]+"","""");\n\nprivate static final CharMatcher ALNUM =\nCharMatcher.inRange(\'a\', \'z\').or(CharMatcher.inRange(\'A\', \'Z\'))\n.or(CharMatcher.inRange(\'0\', \'9\')).precomputed();\n// ...\nString alphaAndDigits = ALNUM.retainFrom(input);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nGet words around a position in a string\n----------Explanation----------\nYou can achiveve that using String \'s split() method . This solution is O(n) .\n----------Code Sample----------\npublic static void main(String[] args) {\nString str = ""Hello my name is John and I like to go fishing and ""+\n""hiking I have two sisters and one brother."";\nString find = ""I"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nif (sp[i].equals(find)) {\n// have to check for ArrayIndexOutOfBoundsException\nString surr = (i-2 > 0 ? sp[i-2]+"" "" : """") +\n(i-1 > 0 ? sp[i-1]+"" "" : """") +\nsp[i] +\n(i+1 < sp.length ? "" ""+sp[i+1] : """") +\n(i+2 < sp.length ? "" ""+sp[i+2] : """");\nSystem.out.println(surr);\n}\n}\n}\n\npublic static void main(String[] args) {\nString str = ""Hello my name is John and John and I like to go..."";\nString find = ""John and"";\n\nString[] sp = str.split("" +""); // ""+"" for multiple spaces\n\nString[] spMulti = find.split("" +""); // ""+"" for multiple spaces\nfor (int i = 2; i < sp.length; i++) {\nint j = 0;\nwhile (j < spMulti.length && i+j < sp.length \n&& sp[i+j].equals(spMulti[j])) {\nj++;\n} \nif (j == spMulti.length) { // found spMulti entirely\nStringBuilder surr = new StringBuilder();\nif (i-2 > 0){ surr.append(sp[i-2]); surr.append("" ""); }\nif (i-1 > 0){ surr.append(sp[i-1]); surr.append("" ""); }\nfor (int k = 0; k < spMulti.length; k++) {\nif (k > 0){ surr.append("" ""); }\nsurr.append(sp[i+k]);\n}\nif (i+spMulti.length < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length]);\n}\nif (i+spMulti.length+1 < sp.length) {\nsurr.append("" "");\nsurr.append(sp[i+spMulti.length+1]);\n}\nSystem.out.println(surr.toString());\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nJsonMappingException: No suitable constructor found for type [simple type, class ]: can not instantiate from JSON object\n----------Explanation----------\nActually the problem was in ApplesDO Class:\n----------Code Sample----------\npublic class ApplesDO {\n\nprivate String apple;\npublic String getApple() {\nreturn apple;\n}\npublic void setApple(String apple) {\nthis.apple = apple;\npublic ApplesDO(CustomType custom) {\n//constructor Code\n//Introducing the dummy constructor\npublic ApplesDO() {\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nRepeat String - Javascript\n----------Explanation----------\nI\'d put this function onto the String object directly. Instead of creating an array, filling it, and joining it with an empty char, just create an array of the proper length, and join it with your desired string. Same result, less process!\n----------Code Sample----------\nString.prototype.repeat = function( num )\n{\nreturn new Array( num + 1 ).join( this );\n}\n\nalert( ""string to repeat\\n"".repeat( 4 ) );\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nIs this valid Java?\n----------Explanation----------\nHowever, not all classes need to be generated from Java source code (consider all the languages that use the JVM as their runtime: JRuby, Jython, etc...). At the bytecode level , the JVM can disambiguate the two methods because the bytecode instructions specify the return type they are expecting. For example, here is a class written in Jasmin that can call either of these methods:\n----------Code Sample----------\n.class public CallAmbiguousMethod\n.super java/lang/Object\n\n.method public static main([Ljava/lang/String;)V\n.limit stack 3\n.limit locals 1\n\n; Call the method that returns String\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/String;\n\n; Call the method that returns Integer\naconst_null\ninvokestatic TestWillThatCompile/f(Ljava/util/List;)Ljava/lang/Integer;\n\nreturn\n\n.end method\n\n\njava -jar jasmin.jar CallAmbiguousMethod.j\n\n\njava CallAmbiguousMethod\n\n\n> java CallAmbiguousMethod\nstrings\nnumbers\n\nimport java.util.Arrays;\nimport java.util.List;\n\nclass RealyCompilesAndRunsFine {\n\npublic static String f(List list) {\nreturn list.get(0);\n}\n\npublic static Integer f(List list) {\nreturn list.get(0);\n}\n\npublic static void main(String[] args) {\nfinal String string = f(Arrays.asList(""asdf""));\nfinal Integer integer = f(Arrays.asList(123));\nSystem.out.println(string);\nSystem.out.println(integer);\n}\n\n}\n\n\n>javap -c RealyCompilesAndRunsFine\nCompiled from ""RealyCompilesAndRunsFine.java""\nclass RealyCompilesAndRunsFine extends java.lang.Object{\nRealyCompilesAndRunsFine();\nCode:\n0: aload_0\n1: invokespecial #1; //Method java/lang/Object."""":()V\n4: return\n\npublic static java.lang.String f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #3; //class java/lang/String\n10: areturn\n\npublic static java.lang.Integer f(java.util.List);\nCode:\n0: aload_0\n1: iconst_0\n2: invokeinterface #2, 2; //InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;\n7: checkcast #4; //class java/lang/Integer\n10: areturn\n\npublic static void main(java.lang.String[]);\nCode:\n0: iconst_1\n1: anewarray #3; //class java/lang/String\n4: dup\n5: iconst_0\n6: ldc #5; //String asdf\n8: aastore\n9: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n12: invokestatic #7; //Method f:(Ljava/util/List;)Ljava/lang/String;\n15: astore_1\n16: iconst_1\n17: anewarray #4; //class java/lang/Integer\n20: dup\n21: iconst_0\n22: bipush 123\n24: invokestatic #8; //Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;\n27: aastore\n28: invokestatic #6; //Method java/util/Arrays.asList:([Ljava/lang/Object;)Ljava/util/List;\n31: invokestatic #9; //Method f:(Ljava/util/List;)Ljava/lang/Integer;\n34: astore_2\n35: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n38: aload_1\n39: invokevirtual #11; //Method java/io/PrintStream.println:(Ljava/lang/String;)V\n42: getstatic #10; //Field java/lang/System.out:Ljava/io/PrintStream;\n45: aload_2\n46: invokevirtual #12; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V\n49: return\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nHow to unescape a Java string literal in Java?\n----------Explanation----------\nLike many of the other points, their embarrassing ignorance about the names of code points U+2F and U+5C instills no confidence in them whatsoever. For the record:\n----------Code Sample----------\n/ 47 002F SOLIDUS\n= slash, virgule\nx (latin letter dental click - 01C0)\nx (combining long solidus overlay - 0338)\nx (fraction slash - 2044)\nx (division slash - 2215)\n\\ 92 005C REVERSE SOLIDUS\n= backslash\nx (combining reverse solidus overlay - 20E5)\nx (set minus - 2216)\n\n/*\n*\n* unescape_perl_string()\n*\n* Tom Christiansen \n* Sun Nov 28 12:55:24 MST 2010\n*\n* It\'s completely ridiculous that there\'s no standard\n* unescape_java_string function. Since I have to do the\n* damn thing myself, I might as well make it halfway useful\n* by supporting things Java was too stupid to consider in\n* strings:\n* \n* => ""?"" items are additions to Java string escapes\n* but normal in Java regexes\n*\n* => ""!"" items are also additions to Java regex escapes\n* \n* Standard singletons: ?\\a ?\\e \\f \\n \\r \\t\n* \n* NB: \\b is unsupported as backspace so it can pass-through\n* to the regex translator untouched; I refuse to make anyone\n* doublebackslash it as doublebackslashing is a Java idiocy\n* I desperately wish would die out. There are plenty of\n* other ways to write it:\n*\n* \\cH, \\12, \\012, \\x08 \\x{8}, \\u0008, \\U00000008\n*\n* Octal escapes: \\0 \\0N \\0NN \\N \\NN \\NNN\n* Can range up to !\\777 not \\377\n* \n* TODO: add !\\o{NNNNN}\n* last Unicode is 4177777\n* maxint is 37777777777\n*\n* Control chars: ?\\cX\n* Means: ord(X) ^ ord(\'@\')\n*\n* Old hex escapes: \\xXX\n* unbraced must be 2 xdigits\n*\n* Perl hex escapes: !\\x{XXX} braced may be 1-8 xdigits\n* NB: proper Unicode never needs more than 6, as highest\n* valid codepoint is 0x10FFFF, not maxint 0xFFFFFFFF\n*\n* Lame Java escape: \\[IDIOT JAVA PREPROCESSOR]uXXXX must be\n* exactly 4 xdigits;\n*\n* I can\'t write XXXX in this comment where it belongs\n* because the damned Java Preprocessor can\'t mind its\n* own business. Idiots!\n*\n* Lame Python escape: !\\UXXXXXXXX must be exactly 8 xdigits\n* \n* TODO: Perl translation escapes: \\Q \\U \\L \\E \\[IDIOT JAVA PREPROCESSOR]u \\l\n* These are not so important to cover if you\'re passing the\n* result to Pattern.compile(), since it handles them for you\n* further downstream. Hm, what about \\[IDIOT JAVA PREPROCESSOR]u?\n*\n*/\n\npublic final static\nString unescape_perl_string(String oldstr) {\n\n/*\n* In contrast to fixing Java\'s broken regex charclasses,\n* this one need be no bigger, as unescaping shrinks the string\n* here, where in the other one, it grows it.\n*/\n\nStringBuffer newstr = new StringBuffer(oldstr.length());\n\nboolean saw_backslash = false;\n\nfor (int i = 0; i < oldstr.length(); i++) {\nint cp = oldstr.codePointAt(i);\nif (oldstr.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\n\nif (!saw_backslash) {\nif (cp == \'\\\\\') {\nsaw_backslash = true;\n} else {\nnewstr.append(Character.toChars(cp));\n}\ncontinue; /* switch */\n}\n\nif (cp == \'\\\\\') {\nsaw_backslash = false;\nnewstr.append(\'\\\\\');\nnewstr.append(\'\\\\\');\ncontinue; /* switch */\n}\n\nswitch (cp) {\n\ncase \'r\': newstr.append(\'\\r\');\nbreak; /* switch */\n\ncase \'n\': newstr.append(\'\\n\');\nbreak; /* switch */\n\ncase \'f\': newstr.append(\'\\f\');\nbreak; /* switch */\n\n/* PASS a \\b THROUGH!! */\ncase \'b\': newstr.append(""\\\\b"");\nbreak; /* switch */\n\ncase \'t\': newstr.append(\'\\t\');\nbreak; /* switch */\n\ncase \'a\': newstr.append(\'\\007\');\nbreak; /* switch */\n\ncase \'e\': newstr.append(\'\\033\');\nbreak; /* switch */\n\n/*\n* A ""control"" character is what you get when you xor its\n* codepoint with \'@\'==64. This only makes sense for ASCII,\n* and may not yield a ""control"" character after all.\n*\n* Strange but true: ""\\c{"" is "";"", ""\\c}"" is ""="", etc.\n*/\ncase \'c\': {\nif (++i == oldstr.length()) { die(""trailing \\\\c""); }\ncp = oldstr.codePointAt(i);\n/*\n* don\'t need to grok surrogates, as next line blows them up\n*/\nif (cp > 0x7f) { die(""expected ASCII after \\\\c""); }\nnewstr.append(Character.toChars(cp ^ 64));\nbreak; /* switch */\n}\n\ncase \'8\':\ncase \'9\': die(""illegal octal digit"");\n/* NOTREACHED */\n\n/*\n* may be 0 to 2 octal digits following this one\n* so back up one for fallthrough to next case;\n* unread this digit and fall through to next case.\n*/\ncase \'1\':\ncase \'2\':\ncase \'3\':\ncase \'4\':\ncase \'5\':\ncase \'6\':\ncase \'7\': --i;\n/* FALLTHROUGH */\n\n/*\n* Can have 0, 1, or 2 octal digits following a 0\n* this permits larger values than octal 377, up to\n* octal 777.\n*/\ncase \'0\': {\nif (i+1 == oldstr.length()) {\n/* found \\0 at end of string */\nnewstr.append(Character.toChars(0));\nbreak; /* switch */\n}\ni++;\nint digits = 0;\nint j;\nfor (j = 0; j <= 2; j++) {\nif (i+j == oldstr.length()) {\nbreak; /* for */\n}\n/* safe because will unread surrogate */\nint ch = oldstr.charAt(i+j);\nif (ch < \'0\' || ch > \'7\') {\nbreak; /* for */\n}\ndigits++;\n}\nif (digits == 0) {\n--i;\nnewstr.append(\'\\0\');\nbreak; /* switch */\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(\noldstr.substring(i, i+digits), 8);\n} catch (NumberFormatException nfe) {\ndie(""invalid octal value for \\\\0 escape"");\n}\nnewstr.append(Character.toChars(value));\ni += digits-1;\nbreak; /* switch */\n} /* end case \'0\' */\n\ncase \'x\': {\nif (i+2 > oldstr.length()) {\ndie(""string too short for \\\\x escape"");\n}\ni++;\nboolean saw_brace = false;\nif (oldstr.charAt(i) == \'{\') {\n/* ^^^^^^ ok to ignore surrogates here */\ni++;\nsaw_brace = true;\n}\nint j;\nfor (j = 0; j < 8; j++) {\n\nif (!saw_brace && j == 2) {\nbreak; /* for */\n}\n\n/*\n* ASCII test also catches surrogates\n*/\nint ch = oldstr.charAt(i+j);\nif (ch > 127) {\ndie(""illegal non-ASCII hex digit in \\\\x escape"");\n}\n\nif (saw_brace && ch == \'}\') { break; /* for */ }\n\nif (! ( (ch >= \'0\' && ch <= \'9\')\n||\n(ch >= \'a\' && ch <= \'f\')\n||\n(ch >= \'A\' && ch <= \'F\')\n)\n)\n{\ndie(String.format(\n""illegal hex digit #%d \'%c\' in \\\\x"", ch, ch));\n}\n\n}\nif (j == 0) { die(""empty braces in \\\\x{} escape""); }\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\x escape"");\n}\nnewstr.append(Character.toChars(value));\nif (saw_brace) { j++; }\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'u\': {\nif (i+4 > oldstr.length()) {\ndie(""string too short for \\\\u escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 4; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\u escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt( oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\u escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ncase \'U\': {\nif (i+8 > oldstr.length()) {\ndie(""string too short for \\\\U escape"");\n}\ni++;\nint j;\nfor (j = 0; j < 8; j++) {\n/* this also handles the surrogate issue */\nif (oldstr.charAt(i+j) > 127) {\ndie(""illegal non-ASCII hex digit in \\\\U escape"");\n}\n}\nint value = 0;\ntry {\nvalue = Integer.parseInt(oldstr.substring(i, i+j), 16);\n} catch (NumberFormatException nfe) {\ndie(""invalid hex value for \\\\U escape"");\n}\nnewstr.append(Character.toChars(value));\ni += j-1;\nbreak; /* switch */\n}\n\ndefault: newstr.append(\'\\\\\');\nnewstr.append(Character.toChars(cp));\n/*\n* say(String.format(\n* ""DEFAULT unrecognized escape %c passed through"",\n* cp));\n*/\nbreak; /* switch */\n\n}\nsaw_backslash = false;\n}\n\n/* weird to leave one at the end */\nif (saw_backslash) {\nnewstr.append(\'\\\\\');\n}\n\nreturn newstr.toString();\n}\n\n/*\n* Return a string ""U+XX.XXX.XXXX"" etc, where each XX set is the\n* xdigits of the logical Unicode code point. No bloody brain-damaged\n* UTF-16 surrogate crap, just true logical characters.\n*/\npublic final static\nString uniplus(String s) {\nif (s.length() == 0) {\nreturn """";\n}\n/* This is just the minimum; sb will grow as needed. */\nStringBuffer sb = new StringBuffer(2 + 3 * s.length());\nsb.append(""U+"");\nfor (int i = 0; i < s.length(); i++) {\nsb.append(String.format(""%X"", s.codePointAt(i)));\nif (s.codePointAt(i) > Character.MAX_VALUE) {\ni++; /****WE HATES UTF-16! WE HATES IT FOREVERSES!!!****/\n}\nif (i+1 < s.length()) {\nsb.append(""."");\n}\n}\nreturn sb.toString();\n}\n\nprivate static final\nvoid die(String foa) {\nthrow new IllegalArgumentException(foa);\n}\n\nprivate static final\nvoid say(String what) {\nSystem.out.println(what);\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nReview an answer - Decode Ways\n----------Explanation----------\nNow we have done all the necessary work for a simple (but working) recursive implementation:\n----------Code Sample----------\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail);\n}\n\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nreturn numDecodings(encodedText, new Integer[1 + encodedText.length()]);\n}\n\nstatic int numDecodings(String encodedText, Integer[] cache) {\n// check base case for the recursion\nif (encodedText.length() == 0) {\nreturn 1;\n}\n\n// check if this tail is already known in the cache\nif (cache[encodedText.length()] != null) {\nreturn cache[encodedText.length()];\n}\n\n// cache miss -- sum all tails\nint sum = 0;\nfor (int headSize = 1; headSize <= maxHeadSize && headSize <= encodedText.length(); headSize++) {\nString head = encodedText.substring(0, headSize);\nString tail = encodedText.substring(headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\nsum += numDecodings(tail, cache); // pass the cache through\n}\n\n// update the cache\ncache[encodedText.length()] = sum;\nreturn sum;\n}\n\nstatic final int upperLimit = 26;\nstatic final int maxHeadSize = ("""" + upperLimit).length();\n\nstatic int numDecodings(String encodedText) {\nint[] cache = new int[encodedText.length() + 1];\n\n// base case: the empty string at encodedText.length() is 1:\ncache[encodedText.length()] = 1;\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// sum directly into the cache\nfor (int headSize = 1; headSize <= maxHeadSize && headSize + position <= encodedText.length(); headSize++) {\nString head = encodedText.substring(position, position + headSize);\nif (Integer.parseInt(head) > upperLimit) {\nbreak;\n}\ncache[position] += cache[position + headSize];\n}\n}\n\nreturn cache[0];\n}\n\nstatic int numDecodings(String encodedText) {\n// initialize the cache\nint[] cache = {1, 0, 0};\n\nfor (int position = encodedText.length() - 1; position >= 0; position--) {\n// rotate the cache\ncache[2] = cache[1];\ncache[1] = cache[0];\ncache[0] = 0;\n\n// headSize == 1\nif (position + 0 < encodedText.length()) {\nchar c = encodedText.charAt(position + 0);\n\n// 1 .. 9\nif (\'1\' <= c && c <= \'9\') {\ncache[0] += cache[1];\n}\n}\n\n// headSize == 2\nif (position + 1 < encodedText.length()) {\nchar c1 = encodedText.charAt(position + 0);\nchar c2 = encodedText.charAt(position + 1);\n\n// 10 .. 19\nif (\'1\' == c1) {\ncache[0] += cache[2];\n}\n// 20 .. 26\nelse if (\'2\' == c1 && \'0\' <= c2 && c2 <= \'6\') {\ncache[0] += cache[2];\n}\n}\n}\n\nreturn cache[0];\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nFastest way to iterate over all the chars in a String\n----------Explanation----------\n\n----------Code Sample----------\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\n\nfinal Field field = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// avoid this at all costs\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 77.0 72.0 462.0 584.0 127.5 89.5 86.0 159.5 165.0\n2 charAt 38.0 36.5 284.0 32712.5 57.5 48.3 50.3 89.0 91.5\n4 charAt 19.5 18.5 458.6 3169.0 33.0 26.8 27.5 54.1 52.6\n8 charAt 9.8 9.9 100.5 1370.9 17.3 14.4 15.0 26.9 26.4\n16 charAt 6.1 6.5 73.4 857.0 8.4 8.2 8.3 13.6 13.5\n32 charAt 3.9 3.7 54.8 428.9 5.0 4.9 4.7 7.0 7.2\n64 charAt 2.7 2.6 48.2 232.9 3.0 3.2 3.3 3.9 4.0\n128 charAt 2.1 1.9 43.7 138.8 2.1 2.6 2.6 2.4 2.6\n256 charAt 1.9 1.6 42.4 90.6 1.7 2.1 2.1 1.7 1.8\n512 field1 1.7 1.4 40.6 60.5 1.4 1.9 1.9 1.3 1.4\n1,024 field1 1.6 1.4 40.0 45.6 1.2 1.9 2.1 1.0 1.2\n2,048 field1 1.6 1.3 40.0 36.2 1.2 1.8 1.7 0.9 1.1\n4,096 field1 1.6 1.3 39.7 32.6 1.2 1.8 1.7 0.9 1.0\n8,192 field1 1.6 1.3 39.6 30.5 1.2 1.8 1.7 0.9 1.0\n16,384 field1 1.6 1.3 39.8 28.4 1.2 1.8 1.7 0.8 1.0\n32,768 field1 1.6 1.3 40.0 26.7 1.3 1.8 1.7 0.8 1.0\n65,536 field1 1.6 1.3 39.8 26.3 1.3 1.8 1.7 0.8 1.0\n131,072 field1 1.6 1.3 40.1 25.4 1.4 1.9 1.8 0.8 1.0\n262,144 field1 1.6 1.3 39.6 25.2 1.5 1.9 1.9 0.8 1.0\n\nSize WINNER charAt1 charAt2 stream streamPar reuse new1 new2 field1 field2\n1 charAt 74.5 95.5 524.5 783.0 90.5 102.5 90.5 135.0 151.5\n2 charAt 48.5 53.0 305.0 30851.3 59.3 57.5 52.0 88.5 91.8\n4 charAt 28.8 32.1 132.8 2465.1 37.6 33.9 32.3 49.0 47.0\n8 new2 18.0 18.6 63.4 1541.3 18.5 17.9 17.6 25.4 25.8\n16 new2 14.0 14.7 129.4 1034.7 12.5 16.2 12.0 16.0 16.6\n32 new2 7.8 9.1 19.3 431.5 8.1 7.0 6.7 7.9 8.7\n64 reuse 6.1 7.5 11.7 204.7 3.5 3.9 4.3 4.2 4.1\n128 reuse 6.8 6.8 9.0 101.0 2.6 3.0 3.0 2.6 2.7\n256 field2 6.2 6.5 6.9 57.2 2.4 2.7 2.9 2.3 2.3\n512 reuse 4.3 4.9 5.8 28.2 2.0 2.6 2.6 2.1 2.1\n1,024 charAt 2.0 1.8 5.3 17.6 2.1 2.5 3.5 2.0 2.0\n2,048 charAt 1.9 1.7 5.2 11.9 2.2 3.0 2.6 2.0 2.0\n4,096 charAt 1.9 1.7 5.1 8.7 2.1 2.6 2.6 1.9 1.9\n8,192 charAt 1.9 1.7 5.1 7.6 2.2 2.5 2.6 1.9 1.9\n16,384 charAt 1.9 1.7 5.1 6.9 2.2 2.5 2.5 1.9 1.9\n32,768 charAt 1.9 1.7 5.1 6.1 2.2 2.5 2.5 1.9 1.9\n65,536 charAt 1.9 1.7 5.1 5.5 2.2 2.4 2.4 1.9 1.9\n131,072 charAt 1.9 1.7 5.1 5.4 2.3 2.5 2.5 1.9 1.9\n262,144 charAt 1.9 1.7 5.1 5.1 2.3 2.5 2.5 1.9 1.9\n\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.function.IntPredicate;\n\n/**\n* @author Saint Hill \n*/\npublic final class TestStrings {\n\n// we will not test strings longer than 512KM\nfinal int MAX_STRING_SIZE = 1024 * 256;\n\n// for each string size, we will do all the tests\n// this many times\nfinal int TRIES_PER_STRING_SIZE = 1000;\n\npublic static void main(String[] args) throws Exception {\nnew TestStrings().run();\n}\n\nvoid run() throws Exception {\n\n// double the length of the data until it reaches MAX chars long\n// 0,1,2,4,8,16,32,64,128,256 ... \nfinal List sizes = new ArrayList<>();\nfor (int n = 0; n <= MAX_STRING_SIZE; n = (n == 0 ? 1 : n * 2)) {\nsizes.add(n);\n}\n\n// CREATE RANDOM (FOR SHUFFLING ORDER OF TESTS)\nfinal Random random = new Random();\n\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== FORWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n}\n\n// reverse order or string sizes\nCollections.reverse(sizes);\n\nSystem.out.println("""");\nSystem.out.println(""Rate in nanoseconds per character inspected."");\nSystem.out.printf(""==== BACKWARDS (tries per size: %s) ==== \\n"", TRIES_PER_STRING_SIZE);\n\nprintHeadings(TRIES_PER_STRING_SIZE, random);\n\nfor (int size : sizes) {\nreportResults(size, test(size, TRIES_PER_STRING_SIZE, random));\n\n}\n}\n\n///\n///\n/// METHODS OF CHECKING THE CONTENTS\n/// OF A STRING. ALWAYS CHECKING FOR\n/// WHITESPACE (CHAR <=\' \')\n/// \n///\n// CHECK THE STRING CONTENTS\nint charAtMethod1(final String data) {\nfinal int len = data.length();\nfor (int i = 0; i < len; i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// SAME AS ABOVE BUT USE String.length()\n// instead of making a new final local int \nint charAtMethod2(final String data) {\nfor (int i = 0; i < data.length(); i++) {\nif (data.charAt(i) <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// USE new Java-8 String\'s IntStream\n// pass it a PREDICATE to do the checking\nint streamMethod(final String data, final IntPredicate predicate) {\nif (data.chars().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// OH LA LA - GO PARALLEL!!!\nint streamParallelMethod(final String data, IntPredicate predicate) {\nif (data.chars().parallel().anyMatch(predicate)) {\ndoThrow();\n}\nreturn data.length();\n}\n\n// Re-fill a resuable char[] with the contents\n// of the String\'s char[]\nint reuseBuffMethod(final char[] reusable, final String data) {\nfinal int len = data.length();\ndata.getChars(0, len, reusable, 0);\nfor (int i = 0; i < len; i++) {\nif (reusable[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\nint newMethod1(final String data) {\nfinal int len = data.length();\nfinal char[] copy = data.toCharArray();\nfor (int i = 0; i < len; i++) {\nif (copy[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n}\n\n// Obtain a new copy of char[] from String\n// but use FOR-EACH\nint newMethod2(final String data) {\nfor (final char c : data.toCharArray()) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn data.length();\n}\n\n// FANCY!\n// OBTAIN FIELD FOR ACCESS TO THE STRING\'S\n// INTERNAL CHAR[]\nint fieldMethod1(final Field field, final String data) {\ntry {\nfinal char[] chars = (char[]) field.get(data);\nfinal int len = chars.length;\nfor (int i = 0; i < len; i++) {\nif (chars[i] <= \' \') {\ndoThrow();\n}\n}\nreturn len;\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\n}\n\n// same as above but use FOR-EACH\nint fieldMethod2(final Field field, final String data) {\nfinal char[] chars;\ntry {\nchars = (char[]) field.get(data);\n} catch (Exception ex) {\nthrow new RuntimeException(ex);\n}\nfor (final char c : chars) {\nif (c <= \' \') {\ndoThrow();\n}\n}\nreturn chars.length;\n}\n\n/**\n*\n* Make a list of tests. We will shuffle a copy of this list repeatedly\n* while we repeat this test.\n*\n* @param data\n* @return\n*/\nList makeTests(String data) throws Exception {\n// make a list of tests\nfinal List tests = new ArrayList();\n\ntests.add(new Jobber(""charAt1"") {\nint check() {\nreturn charAtMethod1(data);\n}\n});\n\ntests.add(new Jobber(""charAt2"") {\nint check() {\nreturn charAtMethod2(data);\n}\n});\n\ntests.add(new Jobber(""stream"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamMethod(data, predicate);\n}\n});\n\ntests.add(new Jobber(""streamPar"") {\nfinal IntPredicate predicate = new IntPredicate() {\npublic boolean test(int value) {\nreturn value <= \' \';\n}\n};\n\nint check() {\nreturn streamParallelMethod(data, predicate);\n}\n});\n\n// Reusable char[] method\ntests.add(new Jobber(""reuse"") {\nfinal char[] cbuff = new char[MAX_STRING_SIZE];\n\nint check() {\nreturn reuseBuffMethod(cbuff, data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new1"") {\nint check() {\nreturn newMethod1(data);\n}\n});\n\n// New char[] from String\ntests.add(new Jobber(""new2"") {\nint check() {\nreturn newMethod2(data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field1"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod1(field, data);\n}\n});\n\n// Use reflection for field access\ntests.add(new Jobber(""field2"") {\nfinal Field field;\n\n{\nfield = String.class.getDeclaredField(""value"");\nfield.setAccessible(true);\n}\n\nint check() {\nreturn fieldMethod2(field, data);\n}\n});\n\nreturn tests;\n}\n\n/**\n* We use this class to keep trac""""""]']","['To convert a binary string value to a decimal in Java, you can use the built-in methods provided by the Java Standard Library. The most straightforward way is to use the `Integer.parseInt` method, which takes two arguments: the binary string and the radix (base) of the number system. By specifying the radix as 2, you indicate that the string is in binary format. This method will then parse the binary string and return its decimal equivalent as an integer. Another approach is to use the `BigInteger` class, which is useful for handling very large binary numbers that exceed the range of standard integer types. The `BigInteger` class also provides a constructor that accepts a string and a radix, allowing you to convert the binary string to a decimal value. Both methods ensure that the binary string is correctly interpreted and converted to its corresponding decimal value.']","['[\'[\\\'To convert a binary string value to a decimal in Java, you can use the `Integer.parseInt` method with a radix of 2. This method parses the string as a signed integer in the specified radix (base). Here\\\\\\\'s a step-by-step explanation and the corresponding code.\\\\nimport java.util.Scanner;\\\\npublic class BinaryToDecimal {\\\\n    public static void main(String[] args) {\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        System.out.print(""Enter a binary number: "");\\\\n        String binaryString = scanner.nextLine();\\\\n        \\\\n        // Convert binary string to decimal\\\\n        int decimalValue = Integer.parseInt(binaryString, 2);\\\\n        \\\\n        System.out.println(""The decimal value is: "" + decimalValue);\\\\n        scanner.close();\\\\n    }\\\\n}\\\']\']']",0.0416666666666666,0.0526315789473684,1.0,0.0034158838599487,1.0,0.25
lang,Thread,How to make a Java thread wait for another threads output?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesnÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ãƒâ€  context switches  even just   to the OS and back  arenÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],['Most common way to construct:\nThread t1 = new Thread();\nBased on 25 examples'],"['You can use Thread.join() to do that:\n\nThread[] threads = new Thread[numOfThreads];\nfor (int i = 0; i < threads.length; i++) {\n    threads[i] = new Thread(new Runnable() {\n        public void run() {\n            System.out.println(""xxx"");\n        }\n    });\n    threads[i].start();\n}\n\nfor (int i = 0; i < threads.length; i++) {\n    try {\n        threads[i].join();\n    } catch (InterruptedException e) {\n    }\n}\nFor your solution\n\nThread[] threads = new Thread[3];\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\nthreads[i] = new Thread(new Runnable() {\n        ...\n}).start();\n\nfor (int i = 0; i < threads.length; i++) {\n    try {\n        threads[i].join();\n    } catch (InterruptedException e) {\n    }\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nWhat is the difference between atomic / volatile / synchronized?\n----------Explanation----------\nYou are specifically asking about how they internally work , so here you are: \n\nNo synchronization\n----------Code Sample----------\nprivate int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nprivate boolean stopped;\n\npublic void run() {\nwhile(!stopped) {\n//do some work\n}\n}\n\npublic void pleaseStop() {\nstopped = true;\n}\n\nprivate AtomicInteger counter = new AtomicInteger();\n\npublic int getNextUniqueIndex() {\nreturn counter.getAndIncrement();\n}\n\nint current;\ndo {\ncurrent = get();\n} while(!compareAndSet(current, current + 1));\n\nprivate volatile int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nvolatile int i = 0;\nvoid incIBy5() {\ni += 5;\n}\n\nvoid incIBy5() {\nint temp;\nsynchronized(i) { temp = i }\nsynchronized(i) { i = temp + 5 }\n}\n\nsynchronized(new Object()) {\n//thread-safe, SRSLy?\n}\n\nvoid synchronized incIBy5() {\ni += 5 \n}\n\nvoid incIBy5() {\nsynchronized(this) {\ni += 5 \n}\n}\n\nvoid incIBy5() {\nsynchronized(this) {\nint temp = i;\ni = temp + 5;\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava how to pass a thread an extra object\n----------Explanation----------\nWhy not pass the different Thread s different Runnable s?\n----------Code Sample----------\nRunnable r1 = new Runnable() { public void run() { /* this is r1 */ } };\nRunnable r2 = new Runnable() { public void run() { /* this is r2 */ } };\nThread t1 = new Thread(r1);\nThread t2 = new Thread(r2);\nt1.start();\nt2.start();\n\npublic class MyRunnable implements Runnable {\nprivate final String s;\n\npublic MyRunnable(Stirng s) {\nthis.s = s;\n}\n\npublic void run() {\n// do something with s\n}\n}\n\nThread t1 = new Thread(new MyRunnable(""s1""));\nThread t2 = new Thread(new MyRunnable(""s2""));\nt1.start();\nt2.start();\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class ExecutorServiceExample {\nprivate static class CallableExample implements Callable {\nprivate final Object foo;\n\nprivate CallableExample(Object foo) {\nthis.foo = foo;\n}\n\n@Override\npublic Integer call() {\n// do something and return it\nreturn foo.hashCode();\n}\n\n}\n\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nExecutorService e = Executors.newFixedThreadPool(2);\nFuture f1 = e.submit(new CallableExample(""foo""));\nFuture f2 = e.submit(new CallableExample(""bar""));\n\nSystem.out.println(f1.get());\nSystem.out.println(f2.get());\n\ne.shutdown();\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRabbitMQ by Example: Multiple Threads, Channels and Queues\n----------Explanation----------\nA thread pool can be described as a collection of Runnable objects\n(work queue) and a connections of running threads. These threads are\nconstantly running and are checking the work query for new work. If\nthere is new work to be done they execute this Runnable. The Thread\nclass itself provides a method, e.g. execute(Runnable r) to add a new\nRunnable object to the work queue.\n----------Code Sample----------\npublic class Main {\nprivate static final int NTHREDS = 10;\n\npublic static void main(String[] args) {\nExecutorService executor = Executors.newFixedThreadPool(NTHREDS);\nfor (int i = 0; i < 500; i++) {\nRunnable worker = new MyRunnable(10000000L + i);\nexecutor.execute(worker);\n}\n// This will make the executor accept no new threads\n// and finish all existing threads in the queue\nexecutor.shutdown();\n// Wait until all threads are finish\nexecutor.awaitTermination();\nSystem.out.println(""Finished all threads"");\n}\n} \n\nclass CompositeRunnable implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(Runnable a) {\nqueue.add(a);\n}\n\n@Override\npublic void run() {\nfor(Runnable r: queue) {\nr.run();\n}\n}\n}\n\nclass CompositeMessageWorker implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(T message) {\nqueue.add(message);\n}\n\n@Override\npublic void run() {\nfor(T message: queue) {\n// process a message\n}\n}\n}\n\nstatic class Worker extends DefaultConsumer {\n\nString name;\nChannel channel;\nString queue;\nint processed;\nExecutorService executorService;\n\npublic Worker(int prefetch, ExecutorService threadExecutor,\n, Channel c, String q) throws Exception {\nsuper(c);\nchannel = c;\nqueue = q;\nchannel.basicQos(prefetch);\nchannel.basicConsume(queue, false, this);\nexecutorService = threadExecutor;\n}\n\n@Override\npublic void handleDelivery(String consumerTag,\nEnvelope envelope,\nAMQP.BasicProperties properties,\nbyte[] body) throws IOException {\nRunnable task = new VariableLengthTask(this,\nenvelope.getDeliveryTag(),\nchannel);\nexecutorService.submit(task);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nWhere to stop/destroy threads in Android Service class?\n----------Explanation----------\n1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):\n----------Code Sample----------\nprivate volatile Thread runner;\n\npublic synchronized void startThread(){\nif(runner == null){\nrunner = new Thread(this);\nrunner.start();\n}\n}\n\npublic synchronized void stopThread(){\nif(runner != null){\nThread moribund = runner;\nrunner = null;\nmoribund.interrupt();\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n\nif(/*fatal error*/){\nstopThread();\nreturn; //optional in this case since the loop will exit anyways\n}\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nObtaining CPU thread usage in Java\n----------Explanation----------\nYou can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:\n----------Code Sample----------\nprivate int sampleTime = 10000;\nprivate ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();\nprivate RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\nprivate OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();\nprivate Map threadInitialCPU = new HashMap();\nprivate Map threadCPUUsage = new HashMap();\nprivate long initialUptime = runtimeMxBean.getUptime();\n\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\ntry {Thread.sleep(sampleTime);} catch (InterruptedException e) {}\n\nlong upTime = runtimeMxBean.getUptime();\n\nMap threadCurrentCPU = new HashMap();\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\n// CPU over all processes\n//int nrCPUs = osMxBean.getAvailableProcessors();\n// total CPU: CPU % can be more than 100% (devided over multiple cpus)\nlong nrCPUs = 1;\n// elapsedTime is in ms.\nlong elapsedTime = (upTime - initialUptime);\nfor (ThreadInfo info : threadInfos) {\n// elapsedCpu is in ns\nLong initialCPU = threadInitialCPU.get(info.getThreadId());\nif (initialCPU != null) {\nlong elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;\nfloat cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);\nthreadCPUUsage.put(info.getThreadId(), cpuUsage);\n}\n}\n\n// threadCPUUsage contains cpu % per thread\nSystem.out.println(threadCPUUsage);\n// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nThreads Java Inturrupts\n----------Explanation----------\nI\'m not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you\'d do something like:\n----------Code Sample----------\nThething theThing = new TheThing();\n// set it to be a daemon thread before it starts\ntheThing.setDaemon(true);\ntheThing.start();\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to kill the thread now\ntth.shutdown = true;\n}\n\npublic class TheThing extends Thread {\nvolatile boolean shutdown = false;\npublic void run() {\nwhile (!shutdown) {\n...\n// you can also test for shutdown while processing\nif (shutdown) {\nreturn;\n}\n}\n}\n}\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to interrupt the thread now\ntth.interrupt();\n}\n\npublic class TheThing extends Thread {\npublic void run() {\nwhile (!Thread.currentThread().interrupted()) {\n...\n}\n}\n}\n\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\n// catching the interrupted exception clears the interrupt flag,\n// so we need to re-enable it\nThread.currentThread().interrupt();\n// probably you want to stop the thread if it is interrupted\nreturn;\n}\n\ntth.shutdown = true;\n// or tth.interrupt()\ntth.join();\n\n...\nMyHandler handler = new MyHandler();\n// catch the control-c signal, ""TERM"" is another common kill signal\nSignal.handle(new Signal(""INT""), handler);\n...\n\nprivate static class MyHandler implements SignalHandler {\n@Override\npublic void handle(Signal arg0) {\n// interrupt your threads\n// clean up stuff\n// set shutdown flags\n// ...\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow does sleep() method work on given thread and output?\n----------Explanation----------\nYou have created two Runnable objects. If you run them by calling their run method you would get what you imagine:\n----------Code Sample----------\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.run()"");\nm1.run(); // we call run method\nSystem.out.println(""Calling m2.run()"");\nm2.run();\n\nCalling m1.run()\n1\n2\n3\n4\nCalling m2.run()\n1\n2\n3\n4\n\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.start()"");\nm1.start(); // thread calls run method\nSystem.out.println(""Calling m2.start()"");\nm2.start();\n\nCalling m1.start()\nCalling m2.start()\n1 < From thread 1\n1 < From thread 2\n2 ...\n2\n3\n3\n4\n4\n\npublic class Aaa implements Runnable {\npublic void run() {\nfor (int i = 1; i < 5; i++) {\ntry {\nThread.sleep(500); // sleeps thread\n} catch (InterruptedException e) {\nSystem.out.println(e);\n}\nSystem.out.println(i);\n}\n}\n\npublic static void main(String[] args) {\nAaa m1 = new Aaa(); // creating one object\nThread t1 = new Thread(m1); // Its thread\nAaa m2 = new Aaa(); // creating second object of a class\nThread t2 = new Thread(m2); // Its thread\nt1.start(); // calls m\'s run method in a new thread.\nt2.start();\n}\n\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\ncomparison of code performance, threaded versus non-threaded\n----------Explanation----------\nBy putting the join() in the loop, you\'re starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:\n----------Code Sample----------\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\n// Pull thread pool count out into a value so you can easily change it\nint threadCount = 10000;\nThread[] threads = new Thread[threadCount];\n\n// Start all threads\nfor(int i = 0;i < threadCount;i++) {\n// Pass list to each Runnable here\n// Also, I added +i here as I think the intention is \n// to test 10000 possible numbers>5 for primeness - \n// was testing 5 in all loops\nPrimeRunnable pr = new PrimeRunnable(primeStart+i, list);\nThread[i] threads = new Thread(pr);\nthreads[i].start(); // thread is now running in parallel\n}\n\n// All threads now running in parallel\n\n// Then wait for all threads to complete\nfor(int i=0; i threads[i].join();\n}\n}\n\npublic class PrimeRunnable implements Runnable { \nprivate int from;\nprivate List results; // shared but thread-safe\n\npublic PrimeRunnable(int from, List results) {\nthis.from = from;\nthis.results = results;\n}\n\npublic void isPrime(int number) {\nfor(int i = 2;i < from;i++) {\nif((number % i) == 0) {\nreturn;\n}\n}\n// found prime, add to shared results\nthis.results.add(number);\n}\n\npublic void run() {\nisPrime(from); // don\'t increment, just check one number\n} \n}\n\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\nint threadCount = 16; // Experiment with this to find best on your machine\nExecutorService exec = Executors.newFixedThreadPool(threadCount);\n\nint workCount = 10000; // See how # of work is now separate from # of threads?\nfor(int i = 0;i < workCount;i++) {\n// submit work to the svc for execution across the thread pool \nexec.execute(new PrimeRunnable(primeStart+i, list));\n}\n\n// Wait for all tasks to be done or timeout to go off\nexec.awaitTermination(1, TimeUnit.DAYS);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nTomcat Guice/JDBC Memory Leak\n----------Explanation----------\n\n----------Code Sample----------\nSet threadSet = Thread.getAllStackTraces().keySet();\nThread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);\nfor(Thread t:threadArray) {\nif(t.getName().contains(""Abandoned connection cleanup thread"")) {\nsynchronized(t) {\nt.stop(); //don\'t complain, it works\n}\n}\n}\n\ntry {\nAbandonedConnectionCleanupThread.shutdown();\n} catch (InterruptedException e) {\nlogger.warn(""SEVERE problem cleaning up: "" + e.getMessage());\ne.printStackTrace();\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\njava Producer-Consumer Not always terminating\n----------Explanation----------\nAn ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.\n----------Code Sample----------\nProducer: I love: 1 pool-2-thread-2\nProducer: I love: 3 pool-2-thread-4\nProducer: I love: 2 pool-2-thread-3\nProducer: I love: 5 pool-2-thread-2\nProducer: I love: 7 pool-2-thread-2\nProducer: I love: 4 pool-2-thread-5\nProducer: I love: 6 pool-2-thread-6\nProducer: I love: 8 pool-2-thread-7\nProducer: I love: 10 pool-2-thread-2\nProducer: I love: 9 pool-2-thread-5\nProducer: I love: 11 pool-2-thread-8\nProducer: I love: 12 pool-2-thread-9\nProducer: I love: 14 pool-2-thread-10\nProducer: I love: 13 pool-2-thread-2\nProducer: I love: 16 pool-2-thread-10\nProducer: I love: 15 pool-2-thread-11\nProducer: I love: 17 pool-2-thread-12\nProducer: I love: 20 pool-2-thread-14\nProducer: I love: 19 pool-2-thread-10\nProducer: I love: 18 pool-2-thread-13\nProducer: I love: 0 pool-2-thread-1\nProducer: I love: 22 pool-2-thread-12\nProducer: I love: 21 pool-2-thread-15\nProducer: I love: 25 pool-2-thread-3\nProducer: I love: 27 pool-2-thread-12\nProducer: I love: 26 pool-2-thread-10\nProducer: I love: 24 pool-2-thread-15\nProducer: I love: 28 pool-2-thread-1\nProducer: I love: 23 pool-2-thread-16\nProducer: I love: 31 pool-2-thread-11\nProducer: I love: 30 pool-2-thread-16\nProducer: I love: 32 pool-2-thread-1\nProducer: I love: 36 pool-2-thread-3\nConsumer: I love: 2 pool-1-thread-1\n\nConsumer: I love: 9975 pool-1-thread-1\nConsumer: I love: 9977 pool-1-thread-1\nConsumer: I love: 9978 pool-1-thread-1\nConsumer: I love: 9979 pool-1-thread-1\nConsumer: I love: 9981 pool-1-thread-1\nProducer: I love: 9996 pool-2-thread-16\nConsumer: I love: 9984 pool-1-thread-1\nConsumer: I love: 9985 pool-1-thread-1\nConsumer: I love: 9990 pool-1-thread-1\nConsumer: I love: 9992 pool-1-thread-1\nProducer: I love: 9997 pool-2-thread-16\nConsumer: I love: 9994 pool-1-thread-1\nConsumer: I love: 9995 pool-1-thread-1\nConsumer: I love: 9996 pool-1-thread-1\nProducer: I love: 9998 pool-2-thread-16\nProducer: I love: 9999 pool-2-thread-16\nConsumer: I love: 9997 pool-1-thread-1\nConsumer: I love: 9998 pool-1-thread-1\nConsumer: I love: 9999 pool-1-thread-1\nfinally\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava - creating a new thread\n----------Explanation----------\nYou are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:\n----------Code Sample----------\none = new Thread() {\npublic void run() {\ntry {\nSystem.out.println(""Does it work?"");\n\nThread.sleep(1000);\n\nSystem.out.println(""Nope, it doesnt...again."");\n} catch(InterruptedException v) {\nSystem.out.println(v);\n}\n} \n};\n\none.start();\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nStarting a Java class in different threads\n----------Explanation----------\n\n----------Code Sample----------\n$ javac Bar.java\n$ java Bar\nThread ID 9 running\nThread ID 10 running\nThread ID 8 running\nDoing something on thread 9\nDoing something on thread 10\nDoing something on thread 8\nThread ID 9 running\nDoing something on thread 9\nThread ID 8 running\nDoing something on thread 8\nThread ID 10 running\nDoing something on thread 10\n\npublic class Bar\n{\n\nstatic private final class MyOtherClass\n{\npublic void doSomething()\n{\nSystem.out.println(""Doing something on thread ""+Thread.currentThread().getId());\n}\n}\n\nstatic private MyOtherClass myOtherClass=new MyOtherClass();\n\nstatic private final class MyThreadClass implements Runnable\n{\npublic void run()\n{\nwhile (true)\n{\ntry\n{\nThread.sleep(1000);\n}\ncatch (InterruptedException ie)\n{\nSystem.err.println(""Interrupted"");\nreturn;\n}\nSystem.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");\nmyOtherClass.doSomething();\n}\n}\n}\n\nstatic public void main(String[] args)\n{\nThread t1=new Thread(new MyThreadClass());\nThread t2=new Thread(new MyThreadClass());\nThread t3=new Thread(new MyThreadClass());\nt1.start();\nt2.start();\nt3.start();\n}\n\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow can I create a completely-connected graph of clients?\n----------Explanation----------\n\n----------Code Sample----------\nif(localHostName == hostNames[i])\n\nif(localHostName.equals(hostNames[i]))\n\npublic class MyServer implements Runnable {\n\nprivate final String[] hostnames;\n\npublic MyServer(String... hostnames) {\nthis.hostnames = hostnames;\n}\n\npublic void run() {\nfor (String hostname : hostnames) {\n// connect to hostname\n}\n}\n\n}\n\nThread[] threads = new Thread[6];\nthreads[0] = new Thread(new MyServer(""foo"", ""bar""));\nthreads[1] = new Thread(new MyServer(""bar"", ""dog""));\n...\nfor (Thread thread : threads) {\nthread.start();\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully\n----------Explanation----------\n\n----------Code Sample----------\npublic class DaemonThreadPlay {\npublic static void main(String [] args) {\nThread daemonThread = new Thread() {\npublic void run() {\nwhile (true) {\ntry {\nSystem.out.println(""Try block executed"");\nThread.sleep(1000l);\n} catch (Throwable t) {\nt.printStackTrace();\n}\n}\n}\n\n@Override\npublic void finalize() {\nSystem.out.println(""Finalize method called"");\n}\n};\ndaemonThread.setDaemon(true);\ndaemonThread.start();\n\ntry {\nThread.sleep(2500l);\n} catch (Throwable t) {\n//NO-OP\n}\n}\n} \n\nThread shutdownHook = ... // construct thread that somehow\n// knows about all the daemon threads\nRuntime.getRuntime().addShutdownHook(shutdownHook);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nThread.join does not seem to work in my code; am I using it right?\n----------Explanation----------\nSo, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.\n----------Code Sample----------\npublic class ClipSetThread extends Thread {\n\nClipboard sysClip = null;\nTheAppClass theApp = null;\n\nprivate String toClipboard;\n\npublic ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {\ntheApp = app;\nsysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nthis.toClipboard = toClipBoard;\n// !! Check to see if the thread is also alive before trying to join with it...\nif (waitFor != null && waitFor.isAlive()) {\ntry {\nwaitFor.join();\n} catch (InterruptedException e) {\n}\n}\n}\n\n// You should really put your logic into the `run` method in order to allow\n// the code to actually run in a separate thread...otherwise there is no\n// point in using a thread....\n@Override\npublic void run() {\n// Two strings that will hopefully never be on the clipboard\nString checkStr1 = ""9999999999999"";\nString checkStr2 = ""99999999999999"";\n// When we read in the clipboard we want to see if we change these strings from the ones they\n// will never be, if they do change we read the clipboard successfully\nString clipBoardTextBefore = checkStr1;\nString clipBoardTextAfter = checkStr2;\n\n// First get a copy of the current system clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to change the string it means we failed to read the text\nif (clipBoardTextBefore.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT get sysClip text"");\n} else {\n// If we didn\'t failed to get the current text try to change it\nwhile (true) {\ntry {\nsysClip.setContents(new StringSelection(toClipboard), null);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n\n// Now again check to see the clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to read the clipboard text\nif (clipBoardTextAfter.equals(checkStr2)) {\ntheApp.updateOutput(""Could NOT check if sysClip update was successful"");\n} else { // We re-read the clipboard text, see if it changed from the original clipboard text \nif (clipBoardTextAfter.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT successfully set clipboard text"");\n} else {\ntheApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\\n"");\n}\n}\n}\n}\n\n}\n\npublic class Automator extends Thread implements NativeMouseInputListener {\n\n// A ""locking"" object...\nprivate static final Object WAIT_LOCK = new Object();\n\nRobot rob = null;\nTheAppClass theApp = null;\nClipSetThread lastClipSet = null;\nboolean doit = false;\nboolean settingClip = false;\n\npublic void run() {\ntry // to make the Global hook\n{\nGlobalScreen.registerNativeHook();\n} catch (NativeHookException ex) {\ntheApp.updateOutput(""No Global Keyboard or Mouse Hook"");\nreturn;\n}\ntry // to create a robot (can simulate user input such as mouse and keyboard input)\n{\nrob = new Robot();\n} catch (AWTException e1) {\ntheApp.updateOutput(""The Robot could not be created"");\nreturn;\n}\n\n// This is wasteful...\n// while (true) {\n// }\n// Locks do not consume CPU cycles while in the wait state...\nsynchronized (WAIT_LOCK) {\ntry {\nWAIT_LOCK.wait();\n} catch (Exception exp) {\n}\n}\n}\n\npublic void dispose() {\n\n// Tell the thread it can terminate...\nsynchronized (WAIT_LOCK) {\nWAIT_LOCK.notify();\n}\n// This will STOP the current thread (which called this method)\n// while the lastClipSet finishes...\nif (lastClipSet != null && lastClipSet.isAlive()) {\nlastClipSet.join();\n}\n\n}\n\npublic void setClip(String arg) {\nClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);\nlastClipSet = set;\n// You MUST START the thread...\nset.start();\n}\n\n/*...*/\n}\n\nwhile(true)\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\n}\ncatch(Exception e)\n{\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\ncontinue;\n}\nbreak;\n}\n\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n}\ncatch(Exception e)\n{\nretries++;\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\n}\n}\n\npublic class Engine extends Thread {\n\nprivate Robot rob = null;\nprivate PasteThread lastClipSet = null;\n\npublic void setClip(String arg) {\nif (lastClipSet != null && lastClipSet.isAlive()) {\ntry {\nlastClipSet.join();\n} catch (InterruptedException ex) {\nex.printStackTrace();\n}\n}\nPasteThread set = new PasteThread(arg);\nlastClipSet = set;\nlastClipSet.start();\n}\n\npublic void pasteAtCursorLocation(String text) {\nSystem.out.println(""Paste "" + text);\nsetClip(text);\nrob.keyPress(KeyEvent.VK_CONTROL);\nrob.keyPress(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_CONTROL);\n}\n\npublic Engine() throws AWTException {\nrob = new Robot();\nrob.setAutoDelay(250);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException ex) {\n}\npasteAtCursorLocation(""This is a simple test, thanks for watching!"");\n}\n\npublic static void main(String[] args) {\ntry {\nnew Engine();\n} catch (AWTException ex) {\nLogger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);\n}\n\n}\n\npublic class PasteThread extends Thread {\n\nprivate String toPaste;\n\npublic PasteThread(String value) {\n\ntoPaste = value;\n\n}\n\n@Override\npublic void run() {\nClipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nSystem.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));\nsysClip.setContents(new StringSelection(toPaste), null);\nSystem.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));\n}\n\npublic String getClipboardContents(Clipboard clipboard) {\nString value = null;\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\nTransferable contents = clipboard.getContents(null);\nif (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {\ntry {\nvalue = (String) contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n} catch (Exception exp) {\nretries++;\nexp.printStackTrace();\n}\n} else {\nretries++;\n}\n}\nSystem.out.println(successful + ""/"" + retries);\nreturn value;\n}\n}\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow to Pause and Resume a Thread in Java from another Thread\n----------Explanation----------\nSo in this particular case, perhaps change MyThread as follows:\n----------Code Sample----------\nclass MyThread extends Thread {\n\nprivate volatile boolean running = true; // Run unless told to pause\n\n...\n\n@Override\npublic void run()\n{\nfor(int i=0 ; ; i++)\n{\n// Only keep painting while ""running"" is true\n// This is a crude implementation of pausing the thread\nwhile (!running)\nyield;\n\narea.setText(i+"""");\n}\n\npublic void pauseThread() throws InterruptedException\n{\nrunning = false;\n}\n\npublic void resumeThread()\n{\nrunning = true;\n}\n\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nTurning an ExecutorService to daemon in Java\n----------Explanation----------\nYou can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:\n----------Code Sample----------\nExecutorService exec = Executors.newFixedThreadPool(4,\nnew ThreadFactory() {\npublic Thread newThread(Runnable r) {\nThread t = Executors.defaultThreadFactory().newThread(r);\nt.setDaemon(true);\nreturn t;\n}\n});\n\nexec.execute(YourTaskNowWillBeDaemon);\n\nExecutorService exec = MoreExecutors.getExitingExecutorService(\n(ThreadPoolExecutor) Executors.newFixedThreadPool(4), \n100_000, TimeUnit.DAYS//period after which executor will be automatically closed\n//I assume that 100_000 days is enough to simulate infinity\n);\n//exec.execute(YourTask);\nexec.execute(() -> {\nfor (int i = 0; i < 3; i++) {\nSystem.out.println(""daemon"");\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nProblem with synchronizing on String objects?\n----------Explanation----------\nWithout putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:\n----------Code Sample----------\nfinal String firstkey = ""Data-"" + email;\nfinal String key = firstkey.intern();\n\n// do not attempt double-check locking here. I mean it.\nsynchronized(StaticObject) {\ndata = StaticCache.get(key);\nwhile (data == IN_PROGRESS) {\n// another thread is getting the data\nStaticObject.wait();\ndata = StaticCache.get(key);\n}\nif (data == null) {\n// we must get the data\nStaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);\n}\n}\nif (data == null) {\n// we must get the data\ntry {\ndata = server.DoSlowThing(key);\n} finally {\nsynchronized(StaticObject) {\n// WARNING: failure here is fatal, and must be allowed to terminate\n// the app or else waiters will be left forever. Choose a suitable\n// collection type in which replacing the value for a key is guaranteed.\nStaticCache.put(key, data, CURRENT_TIME);\nStaticObject.notifyAll();\n}\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nPossible to catch the OS doing Context Switching on threads?\n----------Explanation----------\n\n----------Code Sample----------\npublic class Test {\npublic static long count = 0;\n\npublic static void main(String[] args) {\nfor (int run = 0; run < 5; ++run) {\nTest.count = 0;\n\nThread[] threads = new Thread[10];\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i] = new Thread(new Runnable() {\npublic void run() {\nfor (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {\nTest.count += 1;\n}\n}\n});\n}\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i].start();\n}\n\nfor (int i = 0; i < threads.length; ++i) {\ntry {\nthreads[i].join();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\nSystem.out.println(Test.count);\n}\n}\n}\n\n1443685504\n1439908180\n1461384255\n1477413204\n1440892041\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nJavaFX periodic background task\n----------Explanation----------\nYou can use Timeline for what matter:\n----------Code Sample----------\nTimeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {\n\n@Override\npublic void handle(ActionEvent""""""]']","[""To make a Java thread wait for another thread's output, you can use various synchronization mechanisms provided by the Java concurrency framework. One common approach is to use the `join()` method of the `Thread` class. When a thread calls the `join()` method on another thread, it will wait until the other thread has finished executing before it continues. This ensures that the first thread can safely access the output produced by the second thread. Another approach is to use higher-level concurrency utilities from the `java.util.concurrent` package, such as `CountDownLatch`, `CyclicBarrier`, or `Future` and `ExecutorService`. These utilities provide more flexible and powerful ways to coordinate the execution of multiple threads and ensure that one thread can wait for the results produced by another thread. For instance, `CountDownLatch` can be used to make a thread wait until a set of operations being performed by other threads is completed. `Future` and `ExecutorService` can be used to submit tasks and retrieve their results once they are done, allowing a thread to wait for the completion of a task and obtain its output. By using these synchronization mechanisms, you can effectively manage the dependencies between threads and ensure that one thread waits for another thread's output before proceeding.""]","['[\'[\\\'To make a Java thread wait for another thread\\\\\\\'s output, you can use the `join()` method. The `join()` method allows one thread to wait for the completion of another thread. Here\\\\\\\'s an example where one thread waits for another thread to complete its execution and provide an output.\\\\nimport java.util.concurrent.atomic.AtomicInteger;\\\\npublic class ThreadWaitExample {\\\\n    public static void main(String[] args) {\\\\n        // Shared variable to hold the result from the first thread\\\\n        AtomicInteger result = new AtomicInteger();\\\\n\\\\n        // First thread that performs some computation and stores the result\\\\n        Thread thread1 = new Thread(() -> {\\\\n            try {\\\\n                // Simulate some work with sleep\\\\n                Thread.sleep(1000);\\\\n                // Store the result\\\\n                result.set(42);\\\\n                System.out.println(""Thread 1 has finished its work."");\\\\n            } catch (InterruptedException e) {\\\\n                Thread.currentThread().interrupt();\\\\n                System.out.println(""Thread 1 was interrupted."");\\\\n            }\\\\n        });\\\\n\\\\n        // Second thread that waits for the first thread to complete\\\\n        Thread thread2 = new Thread(() -> {\\\\n            try {\\\\n                // Wait for thread1 to finish\\\\n                thread1.join();\\\\n                // Use the result from thread1\\\\n                System.out.println(""Thread 2 received result: "" + result.get());\\\\n            } catch (InterruptedException e) {\\\\n                Thread.currentThread().interrupt();\\\\n                System.out.println(""Thread 2 was interrupted."");\\\\n            }\\\\n        });\\\\n\\\\n        // Start both threads\\\\n        thread1.start();\\\\n        thread2.start();\\\\n    }\\\\n}\\\']\']']",0.3877551020408163,1.0,0.2307692307692307,0.0115658362989323,1.0,0.1666666666666666
lang,Thread,When does Javas Thread.sleep throw InterruptedException?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesnÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ãƒâ€  context switches  even just   to the OS and back  arenÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],['Most common way to construct:\nThread t1 = new Thread();\nBased on 25 examples'],"['In this solution, I defined an interface Interruptible, and a method ignoreInterruption which converts an Interruptible to a Runnable:\n\npublic class Foo {\n\n  public static void main(String... args) {\n    new Thread(ignoreInterruption(Foo::bar)).start();\n    new Thread(ignoreInterruption(() -> Foo.baz(1, 2, 3))).start();\n  }\n\n  static void bar() throws InterruptedException {\n    // do something\n    Thread.sleep(1000);\n  }\n\n  static void baz(int a, int b, int c) throws InterruptedException {\n    // do something\n    Thread.sleep(1000);\n  }  \n\n  interface Interruptible {\n    public void run() throws InterruptedException;\n  }\n\n  static Runnable ignoreInterruption(Interruptible interruptible) {\n    return () -> { \n      try {\n        interruptible.run();\n      }\n      catch(InterruptedException ie) {\n        // ignored\n      }\n    };\n  }\n\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nWhat is the difference between atomic / volatile / synchronized?\n----------Explanation----------\nYou are specifically asking about how they internally work , so here you are: \n\nNo synchronization\n----------Code Sample----------\nprivate int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nprivate boolean stopped;\n\npublic void run() {\nwhile(!stopped) {\n//do some work\n}\n}\n\npublic void pleaseStop() {\nstopped = true;\n}\n\nprivate AtomicInteger counter = new AtomicInteger();\n\npublic int getNextUniqueIndex() {\nreturn counter.getAndIncrement();\n}\n\nint current;\ndo {\ncurrent = get();\n} while(!compareAndSet(current, current + 1));\n\nprivate volatile int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nvolatile int i = 0;\nvoid incIBy5() {\ni += 5;\n}\n\nvoid incIBy5() {\nint temp;\nsynchronized(i) { temp = i }\nsynchronized(i) { i = temp + 5 }\n}\n\nsynchronized(new Object()) {\n//thread-safe, SRSLy?\n}\n\nvoid synchronized incIBy5() {\ni += 5 \n}\n\nvoid incIBy5() {\nsynchronized(this) {\ni += 5 \n}\n}\n\nvoid incIBy5() {\nsynchronized(this) {\nint temp = i;\ni = temp + 5;\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava how to pass a thread an extra object\n----------Explanation----------\nWhy not pass the different Thread s different Runnable s?\n----------Code Sample----------\nRunnable r1 = new Runnable() { public void run() { /* this is r1 */ } };\nRunnable r2 = new Runnable() { public void run() { /* this is r2 */ } };\nThread t1 = new Thread(r1);\nThread t2 = new Thread(r2);\nt1.start();\nt2.start();\n\npublic class MyRunnable implements Runnable {\nprivate final String s;\n\npublic MyRunnable(Stirng s) {\nthis.s = s;\n}\n\npublic void run() {\n// do something with s\n}\n}\n\nThread t1 = new Thread(new MyRunnable(""s1""));\nThread t2 = new Thread(new MyRunnable(""s2""));\nt1.start();\nt2.start();\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class ExecutorServiceExample {\nprivate static class CallableExample implements Callable {\nprivate final Object foo;\n\nprivate CallableExample(Object foo) {\nthis.foo = foo;\n}\n\n@Override\npublic Integer call() {\n// do something and return it\nreturn foo.hashCode();\n}\n\n}\n\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nExecutorService e = Executors.newFixedThreadPool(2);\nFuture f1 = e.submit(new CallableExample(""foo""));\nFuture f2 = e.submit(new CallableExample(""bar""));\n\nSystem.out.println(f1.get());\nSystem.out.println(f2.get());\n\ne.shutdown();\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRabbitMQ by Example: Multiple Threads, Channels and Queues\n----------Explanation----------\nA thread pool can be described as a collection of Runnable objects\n(work queue) and a connections of running threads. These threads are\nconstantly running and are checking the work query for new work. If\nthere is new work to be done they execute this Runnable. The Thread\nclass itself provides a method, e.g. execute(Runnable r) to add a new\nRunnable object to the work queue.\n----------Code Sample----------\npublic class Main {\nprivate static final int NTHREDS = 10;\n\npublic static void main(String[] args) {\nExecutorService executor = Executors.newFixedThreadPool(NTHREDS);\nfor (int i = 0; i < 500; i++) {\nRunnable worker = new MyRunnable(10000000L + i);\nexecutor.execute(worker);\n}\n// This will make the executor accept no new threads\n// and finish all existing threads in the queue\nexecutor.shutdown();\n// Wait until all threads are finish\nexecutor.awaitTermination();\nSystem.out.println(""Finished all threads"");\n}\n} \n\nclass CompositeRunnable implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(Runnable a) {\nqueue.add(a);\n}\n\n@Override\npublic void run() {\nfor(Runnable r: queue) {\nr.run();\n}\n}\n}\n\nclass CompositeMessageWorker implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(T message) {\nqueue.add(message);\n}\n\n@Override\npublic void run() {\nfor(T message: queue) {\n// process a message\n}\n}\n}\n\nstatic class Worker extends DefaultConsumer {\n\nString name;\nChannel channel;\nString queue;\nint processed;\nExecutorService executorService;\n\npublic Worker(int prefetch, ExecutorService threadExecutor,\n, Channel c, String q) throws Exception {\nsuper(c);\nchannel = c;\nqueue = q;\nchannel.basicQos(prefetch);\nchannel.basicConsume(queue, false, this);\nexecutorService = threadExecutor;\n}\n\n@Override\npublic void handleDelivery(String consumerTag,\nEnvelope envelope,\nAMQP.BasicProperties properties,\nbyte[] body) throws IOException {\nRunnable task = new VariableLengthTask(this,\nenvelope.getDeliveryTag(),\nchannel);\nexecutorService.submit(task);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nWhere to stop/destroy threads in Android Service class?\n----------Explanation----------\n1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):\n----------Code Sample----------\nprivate volatile Thread runner;\n\npublic synchronized void startThread(){\nif(runner == null){\nrunner = new Thread(this);\nrunner.start();\n}\n}\n\npublic synchronized void stopThread(){\nif(runner != null){\nThread moribund = runner;\nrunner = null;\nmoribund.interrupt();\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n\nif(/*fatal error*/){\nstopThread();\nreturn; //optional in this case since the loop will exit anyways\n}\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nObtaining CPU thread usage in Java\n----------Explanation----------\nYou can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:\n----------Code Sample----------\nprivate int sampleTime = 10000;\nprivate ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();\nprivate RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\nprivate OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();\nprivate Map threadInitialCPU = new HashMap();\nprivate Map threadCPUUsage = new HashMap();\nprivate long initialUptime = runtimeMxBean.getUptime();\n\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\ntry {Thread.sleep(sampleTime);} catch (InterruptedException e) {}\n\nlong upTime = runtimeMxBean.getUptime();\n\nMap threadCurrentCPU = new HashMap();\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\n// CPU over all processes\n//int nrCPUs = osMxBean.getAvailableProcessors();\n// total CPU: CPU % can be more than 100% (devided over multiple cpus)\nlong nrCPUs = 1;\n// elapsedTime is in ms.\nlong elapsedTime = (upTime - initialUptime);\nfor (ThreadInfo info : threadInfos) {\n// elapsedCpu is in ns\nLong initialCPU = threadInitialCPU.get(info.getThreadId());\nif (initialCPU != null) {\nlong elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;\nfloat cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);\nthreadCPUUsage.put(info.getThreadId(), cpuUsage);\n}\n}\n\n// threadCPUUsage contains cpu % per thread\nSystem.out.println(threadCPUUsage);\n// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nThreads Java Inturrupts\n----------Explanation----------\nI\'m not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you\'d do something like:\n----------Code Sample----------\nThething theThing = new TheThing();\n// set it to be a daemon thread before it starts\ntheThing.setDaemon(true);\ntheThing.start();\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to kill the thread now\ntth.shutdown = true;\n}\n\npublic class TheThing extends Thread {\nvolatile boolean shutdown = false;\npublic void run() {\nwhile (!shutdown) {\n...\n// you can also test for shutdown while processing\nif (shutdown) {\nreturn;\n}\n}\n}\n}\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to interrupt the thread now\ntth.interrupt();\n}\n\npublic class TheThing extends Thread {\npublic void run() {\nwhile (!Thread.currentThread().interrupted()) {\n...\n}\n}\n}\n\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\n// catching the interrupted exception clears the interrupt flag,\n// so we need to re-enable it\nThread.currentThread().interrupt();\n// probably you want to stop the thread if it is interrupted\nreturn;\n}\n\ntth.shutdown = true;\n// or tth.interrupt()\ntth.join();\n\n...\nMyHandler handler = new MyHandler();\n// catch the control-c signal, ""TERM"" is another common kill signal\nSignal.handle(new Signal(""INT""), handler);\n...\n\nprivate static class MyHandler implements SignalHandler {\n@Override\npublic void handle(Signal arg0) {\n// interrupt your threads\n// clean up stuff\n// set shutdown flags\n// ...\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow does sleep() method work on given thread and output?\n----------Explanation----------\nYou have created two Runnable objects. If you run them by calling their run method you would get what you imagine:\n----------Code Sample----------\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.run()"");\nm1.run(); // we call run method\nSystem.out.println(""Calling m2.run()"");\nm2.run();\n\nCalling m1.run()\n1\n2\n3\n4\nCalling m2.run()\n1\n2\n3\n4\n\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.start()"");\nm1.start(); // thread calls run method\nSystem.out.println(""Calling m2.start()"");\nm2.start();\n\nCalling m1.start()\nCalling m2.start()\n1 < From thread 1\n1 < From thread 2\n2 ...\n2\n3\n3\n4\n4\n\npublic class Aaa implements Runnable {\npublic void run() {\nfor (int i = 1; i < 5; i++) {\ntry {\nThread.sleep(500); // sleeps thread\n} catch (InterruptedException e) {\nSystem.out.println(e);\n}\nSystem.out.println(i);\n}\n}\n\npublic static void main(String[] args) {\nAaa m1 = new Aaa(); // creating one object\nThread t1 = new Thread(m1); // Its thread\nAaa m2 = new Aaa(); // creating second object of a class\nThread t2 = new Thread(m2); // Its thread\nt1.start(); // calls m\'s run method in a new thread.\nt2.start();\n}\n\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\ncomparison of code performance, threaded versus non-threaded\n----------Explanation----------\nBy putting the join() in the loop, you\'re starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:\n----------Code Sample----------\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\n// Pull thread pool count out into a value so you can easily change it\nint threadCount = 10000;\nThread[] threads = new Thread[threadCount];\n\n// Start all threads\nfor(int i = 0;i < threadCount;i++) {\n// Pass list to each Runnable here\n// Also, I added +i here as I think the intention is \n// to test 10000 possible numbers>5 for primeness - \n// was testing 5 in all loops\nPrimeRunnable pr = new PrimeRunnable(primeStart+i, list);\nThread[i] threads = new Thread(pr);\nthreads[i].start(); // thread is now running in parallel\n}\n\n// All threads now running in parallel\n\n// Then wait for all threads to complete\nfor(int i=0; i threads[i].join();\n}\n}\n\npublic class PrimeRunnable implements Runnable { \nprivate int from;\nprivate List results; // shared but thread-safe\n\npublic PrimeRunnable(int from, List results) {\nthis.from = from;\nthis.results = results;\n}\n\npublic void isPrime(int number) {\nfor(int i = 2;i < from;i++) {\nif((number % i) == 0) {\nreturn;\n}\n}\n// found prime, add to shared results\nthis.results.add(number);\n}\n\npublic void run() {\nisPrime(from); // don\'t increment, just check one number\n} \n}\n\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\nint threadCount = 16; // Experiment with this to find best on your machine\nExecutorService exec = Executors.newFixedThreadPool(threadCount);\n\nint workCount = 10000; // See how # of work is now separate from # of threads?\nfor(int i = 0;i < workCount;i++) {\n// submit work to the svc for execution across the thread pool \nexec.execute(new PrimeRunnable(primeStart+i, list));\n}\n\n// Wait for all tasks to be done or timeout to go off\nexec.awaitTermination(1, TimeUnit.DAYS);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nTomcat Guice/JDBC Memory Leak\n----------Explanation----------\n\n----------Code Sample----------\nSet threadSet = Thread.getAllStackTraces().keySet();\nThread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);\nfor(Thread t:threadArray) {\nif(t.getName().contains(""Abandoned connection cleanup thread"")) {\nsynchronized(t) {\nt.stop(); //don\'t complain, it works\n}\n}\n}\n\ntry {\nAbandonedConnectionCleanupThread.shutdown();\n} catch (InterruptedException e) {\nlogger.warn(""SEVERE problem cleaning up: "" + e.getMessage());\ne.printStackTrace();\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\njava Producer-Consumer Not always terminating\n----------Explanation----------\nAn ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.\n----------Code Sample----------\nProducer: I love: 1 pool-2-thread-2\nProducer: I love: 3 pool-2-thread-4\nProducer: I love: 2 pool-2-thread-3\nProducer: I love: 5 pool-2-thread-2\nProducer: I love: 7 pool-2-thread-2\nProducer: I love: 4 pool-2-thread-5\nProducer: I love: 6 pool-2-thread-6\nProducer: I love: 8 pool-2-thread-7\nProducer: I love: 10 pool-2-thread-2\nProducer: I love: 9 pool-2-thread-5\nProducer: I love: 11 pool-2-thread-8\nProducer: I love: 12 pool-2-thread-9\nProducer: I love: 14 pool-2-thread-10\nProducer: I love: 13 pool-2-thread-2\nProducer: I love: 16 pool-2-thread-10\nProducer: I love: 15 pool-2-thread-11\nProducer: I love: 17 pool-2-thread-12\nProducer: I love: 20 pool-2-thread-14\nProducer: I love: 19 pool-2-thread-10\nProducer: I love: 18 pool-2-thread-13\nProducer: I love: 0 pool-2-thread-1\nProducer: I love: 22 pool-2-thread-12\nProducer: I love: 21 pool-2-thread-15\nProducer: I love: 25 pool-2-thread-3\nProducer: I love: 27 pool-2-thread-12\nProducer: I love: 26 pool-2-thread-10\nProducer: I love: 24 pool-2-thread-15\nProducer: I love: 28 pool-2-thread-1\nProducer: I love: 23 pool-2-thread-16\nProducer: I love: 31 pool-2-thread-11\nProducer: I love: 30 pool-2-thread-16\nProducer: I love: 32 pool-2-thread-1\nProducer: I love: 36 pool-2-thread-3\nConsumer: I love: 2 pool-1-thread-1\n\nConsumer: I love: 9975 pool-1-thread-1\nConsumer: I love: 9977 pool-1-thread-1\nConsumer: I love: 9978 pool-1-thread-1\nConsumer: I love: 9979 pool-1-thread-1\nConsumer: I love: 9981 pool-1-thread-1\nProducer: I love: 9996 pool-2-thread-16\nConsumer: I love: 9984 pool-1-thread-1\nConsumer: I love: 9985 pool-1-thread-1\nConsumer: I love: 9990 pool-1-thread-1\nConsumer: I love: 9992 pool-1-thread-1\nProducer: I love: 9997 pool-2-thread-16\nConsumer: I love: 9994 pool-1-thread-1\nConsumer: I love: 9995 pool-1-thread-1\nConsumer: I love: 9996 pool-1-thread-1\nProducer: I love: 9998 pool-2-thread-16\nProducer: I love: 9999 pool-2-thread-16\nConsumer: I love: 9997 pool-1-thread-1\nConsumer: I love: 9998 pool-1-thread-1\nConsumer: I love: 9999 pool-1-thread-1\nfinally\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava - creating a new thread\n----------Explanation----------\nYou are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:\n----------Code Sample----------\none = new Thread() {\npublic void run() {\ntry {\nSystem.out.println(""Does it work?"");\n\nThread.sleep(1000);\n\nSystem.out.println(""Nope, it doesnt...again."");\n} catch(InterruptedException v) {\nSystem.out.println(v);\n}\n} \n};\n\none.start();\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nStarting a Java class in different threads\n----------Explanation----------\n\n----------Code Sample----------\n$ javac Bar.java\n$ java Bar\nThread ID 9 running\nThread ID 10 running\nThread ID 8 running\nDoing something on thread 9\nDoing something on thread 10\nDoing something on thread 8\nThread ID 9 running\nDoing something on thread 9\nThread ID 8 running\nDoing something on thread 8\nThread ID 10 running\nDoing something on thread 10\n\npublic class Bar\n{\n\nstatic private final class MyOtherClass\n{\npublic void doSomething()\n{\nSystem.out.println(""Doing something on thread ""+Thread.currentThread().getId());\n}\n}\n\nstatic private MyOtherClass myOtherClass=new MyOtherClass();\n\nstatic private final class MyThreadClass implements Runnable\n{\npublic void run()\n{\nwhile (true)\n{\ntry\n{\nThread.sleep(1000);\n}\ncatch (InterruptedException ie)\n{\nSystem.err.println(""Interrupted"");\nreturn;\n}\nSystem.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");\nmyOtherClass.doSomething();\n}\n}\n}\n\nstatic public void main(String[] args)\n{\nThread t1=new Thread(new MyThreadClass());\nThread t2=new Thread(new MyThreadClass());\nThread t3=new Thread(new MyThreadClass());\nt1.start();\nt2.start();\nt3.start();\n}\n\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow can I create a completely-connected graph of clients?\n----------Explanation----------\n\n----------Code Sample----------\nif(localHostName == hostNames[i])\n\nif(localHostName.equals(hostNames[i]))\n\npublic class MyServer implements Runnable {\n\nprivate final String[] hostnames;\n\npublic MyServer(String... hostnames) {\nthis.hostnames = hostnames;\n}\n\npublic void run() {\nfor (String hostname : hostnames) {\n// connect to hostname\n}\n}\n\n}\n\nThread[] threads = new Thread[6];\nthreads[0] = new Thread(new MyServer(""foo"", ""bar""));\nthreads[1] = new Thread(new MyServer(""bar"", ""dog""));\n...\nfor (Thread thread : threads) {\nthread.start();\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully\n----------Explanation----------\n\n----------Code Sample----------\npublic class DaemonThreadPlay {\npublic static void main(String [] args) {\nThread daemonThread = new Thread() {\npublic void run() {\nwhile (true) {\ntry {\nSystem.out.println(""Try block executed"");\nThread.sleep(1000l);\n} catch (Throwable t) {\nt.printStackTrace();\n}\n}\n}\n\n@Override\npublic void finalize() {\nSystem.out.println(""Finalize method called"");\n}\n};\ndaemonThread.setDaemon(true);\ndaemonThread.start();\n\ntry {\nThread.sleep(2500l);\n} catch (Throwable t) {\n//NO-OP\n}\n}\n} \n\nThread shutdownHook = ... // construct thread that somehow\n// knows about all the daemon threads\nRuntime.getRuntime().addShutdownHook(shutdownHook);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nThread.join does not seem to work in my code; am I using it right?\n----------Explanation----------\nSo, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.\n----------Code Sample----------\npublic class ClipSetThread extends Thread {\n\nClipboard sysClip = null;\nTheAppClass theApp = null;\n\nprivate String toClipboard;\n\npublic ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {\ntheApp = app;\nsysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nthis.toClipboard = toClipBoard;\n// !! Check to see if the thread is also alive before trying to join with it...\nif (waitFor != null && waitFor.isAlive()) {\ntry {\nwaitFor.join();\n} catch (InterruptedException e) {\n}\n}\n}\n\n// You should really put your logic into the `run` method in order to allow\n// the code to actually run in a separate thread...otherwise there is no\n// point in using a thread....\n@Override\npublic void run() {\n// Two strings that will hopefully never be on the clipboard\nString checkStr1 = ""9999999999999"";\nString checkStr2 = ""99999999999999"";\n// When we read in the clipboard we want to see if we change these strings from the ones they\n// will never be, if they do change we read the clipboard successfully\nString clipBoardTextBefore = checkStr1;\nString clipBoardTextAfter = checkStr2;\n\n// First get a copy of the current system clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to change the string it means we failed to read the text\nif (clipBoardTextBefore.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT get sysClip text"");\n} else {\n// If we didn\'t failed to get the current text try to change it\nwhile (true) {\ntry {\nsysClip.setContents(new StringSelection(toClipboard), null);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n\n// Now again check to see the clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to read the clipboard text\nif (clipBoardTextAfter.equals(checkStr2)) {\ntheApp.updateOutput(""Could NOT check if sysClip update was successful"");\n} else { // We re-read the clipboard text, see if it changed from the original clipboard text \nif (clipBoardTextAfter.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT successfully set clipboard text"");\n} else {\ntheApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\\n"");\n}\n}\n}\n}\n\n}\n\npublic class Automator extends Thread implements NativeMouseInputListener {\n\n// A ""locking"" object...\nprivate static final Object WAIT_LOCK = new Object();\n\nRobot rob = null;\nTheAppClass theApp = null;\nClipSetThread lastClipSet = null;\nboolean doit = false;\nboolean settingClip = false;\n\npublic void run() {\ntry // to make the Global hook\n{\nGlobalScreen.registerNativeHook();\n} catch (NativeHookException ex) {\ntheApp.updateOutput(""No Global Keyboard or Mouse Hook"");\nreturn;\n}\ntry // to create a robot (can simulate user input such as mouse and keyboard input)\n{\nrob = new Robot();\n} catch (AWTException e1) {\ntheApp.updateOutput(""The Robot could not be created"");\nreturn;\n}\n\n// This is wasteful...\n// while (true) {\n// }\n// Locks do not consume CPU cycles while in the wait state...\nsynchronized (WAIT_LOCK) {\ntry {\nWAIT_LOCK.wait();\n} catch (Exception exp) {\n}\n}\n}\n\npublic void dispose() {\n\n// Tell the thread it can terminate...\nsynchronized (WAIT_LOCK) {\nWAIT_LOCK.notify();\n}\n// This will STOP the current thread (which called this method)\n// while the lastClipSet finishes...\nif (lastClipSet != null && lastClipSet.isAlive()) {\nlastClipSet.join();\n}\n\n}\n\npublic void setClip(String arg) {\nClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);\nlastClipSet = set;\n// You MUST START the thread...\nset.start();\n}\n\n/*...*/\n}\n\nwhile(true)\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\n}\ncatch(Exception e)\n{\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\ncontinue;\n}\nbreak;\n}\n\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n}\ncatch(Exception e)\n{\nretries++;\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\n}\n}\n\npublic class Engine extends Thread {\n\nprivate Robot rob = null;\nprivate PasteThread lastClipSet = null;\n\npublic void setClip(String arg) {\nif (lastClipSet != null && lastClipSet.isAlive()) {\ntry {\nlastClipSet.join();\n} catch (InterruptedException ex) {\nex.printStackTrace();\n}\n}\nPasteThread set = new PasteThread(arg);\nlastClipSet = set;\nlastClipSet.start();\n}\n\npublic void pasteAtCursorLocation(String text) {\nSystem.out.println(""Paste "" + text);\nsetClip(text);\nrob.keyPress(KeyEvent.VK_CONTROL);\nrob.keyPress(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_CONTROL);\n}\n\npublic Engine() throws AWTException {\nrob = new Robot();\nrob.setAutoDelay(250);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException ex) {\n}\npasteAtCursorLocation(""This is a simple test, thanks for watching!"");\n}\n\npublic static void main(String[] args) {\ntry {\nnew Engine();\n} catch (AWTException ex) {\nLogger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);\n}\n\n}\n\npublic class PasteThread extends Thread {\n\nprivate String toPaste;\n\npublic PasteThread(String value) {\n\ntoPaste = value;\n\n}\n\n@Override\npublic void run() {\nClipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nSystem.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));\nsysClip.setContents(new StringSelection(toPaste), null);\nSystem.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));\n}\n\npublic String getClipboardContents(Clipboard clipboard) {\nString value = null;\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\nTransferable contents = clipboard.getContents(null);\nif (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {\ntry {\nvalue = (String) contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n} catch (Exception exp) {\nretries++;\nexp.printStackTrace();\n}\n} else {\nretries++;\n}\n}\nSystem.out.println(successful + ""/"" + retries);\nreturn value;\n}\n}\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow to Pause and Resume a Thread in Java from another Thread\n----------Explanation----------\nSo in this particular case, perhaps change MyThread as follows:\n----------Code Sample----------\nclass MyThread extends Thread {\n\nprivate volatile boolean running = true; // Run unless told to pause\n\n...\n\n@Override\npublic void run()\n{\nfor(int i=0 ; ; i++)\n{\n// Only keep painting while ""running"" is true\n// This is a crude implementation of pausing the thread\nwhile (!running)\nyield;\n\narea.setText(i+"""");\n}\n\npublic void pauseThread() throws InterruptedException\n{\nrunning = false;\n}\n\npublic void resumeThread()\n{\nrunning = true;\n}\n\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nTurning an ExecutorService to daemon in Java\n----------Explanation----------\nYou can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:\n----------Code Sample----------\nExecutorService exec = Executors.newFixedThreadPool(4,\nnew ThreadFactory() {\npublic Thread newThread(Runnable r) {\nThread t = Executors.defaultThreadFactory().newThread(r);\nt.setDaemon(true);\nreturn t;\n}\n});\n\nexec.execute(YourTaskNowWillBeDaemon);\n\nExecutorService exec = MoreExecutors.getExitingExecutorService(\n(ThreadPoolExecutor) Executors.newFixedThreadPool(4), \n100_000, TimeUnit.DAYS//period after which executor will be automatically closed\n//I assume that 100_000 days is enough to simulate infinity\n);\n//exec.execute(YourTask);\nexec.execute(() -> {\nfor (int i = 0; i < 3; i++) {\nSystem.out.println(""daemon"");\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nProblem with synchronizing on String objects?\n----------Explanation----------\nWithout putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:\n----------Code Sample----------\nfinal String firstkey = ""Data-"" + email;\nfinal String key = firstkey.intern();\n\n// do not attempt double-check locking here. I mean it.\nsynchronized(StaticObject) {\ndata = StaticCache.get(key);\nwhile (data == IN_PROGRESS) {\n// another thread is getting the data\nStaticObject.wait();\ndata = StaticCache.get(key);\n}\nif (data == null) {\n// we must get the data\nStaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);\n}\n}\nif (data == null) {\n// we must get the data\ntry {\ndata = server.DoSlowThing(key);\n} finally {\nsynchronized(StaticObject) {\n// WARNING: failure here is fatal, and must be allowed to terminate\n// the app or else waiters will be left forever. Choose a suitable\n// collection type in which replacing the value for a key is guaranteed.\nStaticCache.put(key, data, CURRENT_TIME);\nStaticObject.notifyAll();\n}\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nPossible to catch the OS doing Context Switching on threads?\n----------Explanation----------\n\n----------Code Sample----------\npublic class Test {\npublic static long count = 0;\n\npublic static void main(String[] args) {\nfor (int run = 0; run < 5; ++run) {\nTest.count = 0;\n\nThread[] threads = new Thread[10];\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i] = new Thread(new Runnable() {\npublic void run() {\nfor (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {\nTest.count += 1;\n}\n}\n});\n}\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i].start();\n}\n\nfor (int i = 0; i < threads.length; ++i) {\ntry {\nthreads[i].join();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\nSystem.out.println(Test.count);\n}\n}\n}\n\n1443685504\n1439908180\n1461384255\n1477413204\n1440892041\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nJavaFX periodic background task\n----------Explanation----------\nYou can use Timeline for what matter:\n----------Code Sample----------\nTimeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {\n\n@Override\npublic void handle(ActionEvent""""""]']","['In Java, the Thread.sleep method is used to pause the execution of the current thread for a specified period of time. However, this method can throw an InterruptedException. This exception is thrown when another thread interrupts the current thread while it is sleeping. An interruption is a signal that indicates that the thread should stop what it is doing and do something else. This is typically done by calling the interrupt method on the thread that is sleeping. When the sleeping thread detects the interruption, it throws the InterruptedException, allowing the thread to handle the interruption appropriately, such as by cleaning up resources or terminating gracefully.']","['[\'[\\\'The `Thread.sleep` method in Java is used to pause the execution of the current thread for a specified period of time. However, this method can throw an `InterruptedException` if another thread interrupts the current thread while it is sleeping. Below is an example that demonstrates this behavior. In this example, we create a thread that goes to sleep for 5 seconds. Meanwhile, the main thread interrupts the sleeping thread, causing it to throw an `InterruptedException`.\\\\npublic class SleepExample {\\\\n    public static void main(String[] args) {\\\\n        Thread thread = new Thread(new Runnable() {\\\\n            @Override\\\\n            public void run() {\\\\n                try {\\\\n                    System.out.println(""Thread is going to sleep for 5 seconds."");\\\\n                    Thread.sleep(5000);\\\\n                    System.out.println(""Thread woke up after sleeping."");\\\\n                } catch (InterruptedException e) {\\\\n                    System.out.println(""Thread was interrupted while sleeping."");\\\\n                }\\\\n            }\\\\n        });\\\\n        thread.start();\\\\n\\\\n        // Main thread sleeps for 2 seconds before interrupting the other thread\\\\n        try {\\\\n            Thread.sleep(2000);\\\\n        } catch (InterruptedException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n\\\\n        // Interrupt the sleeping thread\\\\n        thread.interrupt();\\\\n    }\\\\n}\\\\npublic class SleepExample {\\\\n    public static void main(String[] args) {\\\\n        Thread thread = new Thread(new Runnable() {\\\\n            @Override\\\\n            public void run() {\\\\n                try {\\\\n                    System.out.println(""Thread is going to sleep for 5 seconds."");\\\\n                    Thread.sleep(5000);\\\\n                    System.out.println(""Thread woke up after sleeping."");\\\\n                } catch (InterruptedException e) {\\\\n                    System.out.println(""Thread was interrupted while sleeping."");\\\\n                }\\\\n            }\\\\n        });\\\\n        thread.start();\\\\n\\\\n        // Main thread sleeps for 2 seconds before interrupting the other thread\\\\n        try {\\\\n            Thread.sleep(2000);\\\\n        } catch (InterruptedException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n\\\\n        // Interrupt the sleeping thread\\\\n        thread.interrupt();\\\\n    }\\\\n}\\\']\']']",0.0204081632653061,0.3333333333333333,0.1333333333333333,0.0088967971530249,0.1666666666666666,0.1666666666666666
lang,Thread,Java: Thread.currentThread().sleep(x) vs. Thread.sleep(x),['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesnÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ãƒâ€  context switches  even just   to the OS and back  arenÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],['Most common way to construct:\nThread t1 = new Thread();\nBased on 25 examples'],"['The Thread.interrupt() method interrupts the specific Thread that the instance references to:\n\nThread x = getSomeThreadInstance();\nx.interrupt();\nThe x variable can refer to any thread instance.\n\nThe Thread.currentThread().interrupt() method is the same as before, but applied to the current Thread, interrupting only the current thread of execution. It is equivalent to:\n\nThread x = Thread.currentThread();\nx.interrupt();\nAbout Thread.sleep() and Thread.currentThread().sleep() there is no difference. sleep() is a static method on the Thread class, and makes no difference on the way you call it. Calling it causes the current thread of execution to pause for the indicated amount of time.\n\nNonetheless, one should not call static method on an instance, which means static method should be called in a static way.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nWhat is the difference between atomic / volatile / synchronized?\n----------Explanation----------\nYou are specifically asking about how they internally work , so here you are: \n\nNo synchronization\n----------Code Sample----------\nprivate int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nprivate boolean stopped;\n\npublic void run() {\nwhile(!stopped) {\n//do some work\n}\n}\n\npublic void pleaseStop() {\nstopped = true;\n}\n\nprivate AtomicInteger counter = new AtomicInteger();\n\npublic int getNextUniqueIndex() {\nreturn counter.getAndIncrement();\n}\n\nint current;\ndo {\ncurrent = get();\n} while(!compareAndSet(current, current + 1));\n\nprivate volatile int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nvolatile int i = 0;\nvoid incIBy5() {\ni += 5;\n}\n\nvoid incIBy5() {\nint temp;\nsynchronized(i) { temp = i }\nsynchronized(i) { i = temp + 5 }\n}\n\nsynchronized(new Object()) {\n//thread-safe, SRSLy?\n}\n\nvoid synchronized incIBy5() {\ni += 5 \n}\n\nvoid incIBy5() {\nsynchronized(this) {\ni += 5 \n}\n}\n\nvoid incIBy5() {\nsynchronized(this) {\nint temp = i;\ni = temp + 5;\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava how to pass a thread an extra object\n----------Explanation----------\nWhy not pass the different Thread s different Runnable s?\n----------Code Sample----------\nRunnable r1 = new Runnable() { public void run() { /* this is r1 */ } };\nRunnable r2 = new Runnable() { public void run() { /* this is r2 */ } };\nThread t1 = new Thread(r1);\nThread t2 = new Thread(r2);\nt1.start();\nt2.start();\n\npublic class MyRunnable implements Runnable {\nprivate final String s;\n\npublic MyRunnable(Stirng s) {\nthis.s = s;\n}\n\npublic void run() {\n// do something with s\n}\n}\n\nThread t1 = new Thread(new MyRunnable(""s1""));\nThread t2 = new Thread(new MyRunnable(""s2""));\nt1.start();\nt2.start();\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class ExecutorServiceExample {\nprivate static class CallableExample implements Callable {\nprivate final Object foo;\n\nprivate CallableExample(Object foo) {\nthis.foo = foo;\n}\n\n@Override\npublic Integer call() {\n// do something and return it\nreturn foo.hashCode();\n}\n\n}\n\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nExecutorService e = Executors.newFixedThreadPool(2);\nFuture f1 = e.submit(new CallableExample(""foo""));\nFuture f2 = e.submit(new CallableExample(""bar""));\n\nSystem.out.println(f1.get());\nSystem.out.println(f2.get());\n\ne.shutdown();\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRabbitMQ by Example: Multiple Threads, Channels and Queues\n----------Explanation----------\nA thread pool can be described as a collection of Runnable objects\n(work queue) and a connections of running threads. These threads are\nconstantly running and are checking the work query for new work. If\nthere is new work to be done they execute this Runnable. The Thread\nclass itself provides a method, e.g. execute(Runnable r) to add a new\nRunnable object to the work queue.\n----------Code Sample----------\npublic class Main {\nprivate static final int NTHREDS = 10;\n\npublic static void main(String[] args) {\nExecutorService executor = Executors.newFixedThreadPool(NTHREDS);\nfor (int i = 0; i < 500; i++) {\nRunnable worker = new MyRunnable(10000000L + i);\nexecutor.execute(worker);\n}\n// This will make the executor accept no new threads\n// and finish all existing threads in the queue\nexecutor.shutdown();\n// Wait until all threads are finish\nexecutor.awaitTermination();\nSystem.out.println(""Finished all threads"");\n}\n} \n\nclass CompositeRunnable implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(Runnable a) {\nqueue.add(a);\n}\n\n@Override\npublic void run() {\nfor(Runnable r: queue) {\nr.run();\n}\n}\n}\n\nclass CompositeMessageWorker implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(T message) {\nqueue.add(message);\n}\n\n@Override\npublic void run() {\nfor(T message: queue) {\n// process a message\n}\n}\n}\n\nstatic class Worker extends DefaultConsumer {\n\nString name;\nChannel channel;\nString queue;\nint processed;\nExecutorService executorService;\n\npublic Worker(int prefetch, ExecutorService threadExecutor,\n, Channel c, String q) throws Exception {\nsuper(c);\nchannel = c;\nqueue = q;\nchannel.basicQos(prefetch);\nchannel.basicConsume(queue, false, this);\nexecutorService = threadExecutor;\n}\n\n@Override\npublic void handleDelivery(String consumerTag,\nEnvelope envelope,\nAMQP.BasicProperties properties,\nbyte[] body) throws IOException {\nRunnable task = new VariableLengthTask(this,\nenvelope.getDeliveryTag(),\nchannel);\nexecutorService.submit(task);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nWhere to stop/destroy threads in Android Service class?\n----------Explanation----------\n1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):\n----------Code Sample----------\nprivate volatile Thread runner;\n\npublic synchronized void startThread(){\nif(runner == null){\nrunner = new Thread(this);\nrunner.start();\n}\n}\n\npublic synchronized void stopThread(){\nif(runner != null){\nThread moribund = runner;\nrunner = null;\nmoribund.interrupt();\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n\nif(/*fatal error*/){\nstopThread();\nreturn; //optional in this case since the loop will exit anyways\n}\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nObtaining CPU thread usage in Java\n----------Explanation----------\nYou can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:\n----------Code Sample----------\nprivate int sampleTime = 10000;\nprivate ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();\nprivate RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\nprivate OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();\nprivate Map threadInitialCPU = new HashMap();\nprivate Map threadCPUUsage = new HashMap();\nprivate long initialUptime = runtimeMxBean.getUptime();\n\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\ntry {Thread.sleep(sampleTime);} catch (InterruptedException e) {}\n\nlong upTime = runtimeMxBean.getUptime();\n\nMap threadCurrentCPU = new HashMap();\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\n// CPU over all processes\n//int nrCPUs = osMxBean.getAvailableProcessors();\n// total CPU: CPU % can be more than 100% (devided over multiple cpus)\nlong nrCPUs = 1;\n// elapsedTime is in ms.\nlong elapsedTime = (upTime - initialUptime);\nfor (ThreadInfo info : threadInfos) {\n// elapsedCpu is in ns\nLong initialCPU = threadInitialCPU.get(info.getThreadId());\nif (initialCPU != null) {\nlong elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;\nfloat cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);\nthreadCPUUsage.put(info.getThreadId(), cpuUsage);\n}\n}\n\n// threadCPUUsage contains cpu % per thread\nSystem.out.println(threadCPUUsage);\n// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nThreads Java Inturrupts\n----------Explanation----------\nI\'m not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you\'d do something like:\n----------Code Sample----------\nThething theThing = new TheThing();\n// set it to be a daemon thread before it starts\ntheThing.setDaemon(true);\ntheThing.start();\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to kill the thread now\ntth.shutdown = true;\n}\n\npublic class TheThing extends Thread {\nvolatile boolean shutdown = false;\npublic void run() {\nwhile (!shutdown) {\n...\n// you can also test for shutdown while processing\nif (shutdown) {\nreturn;\n}\n}\n}\n}\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to interrupt the thread now\ntth.interrupt();\n}\n\npublic class TheThing extends Thread {\npublic void run() {\nwhile (!Thread.currentThread().interrupted()) {\n...\n}\n}\n}\n\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\n// catching the interrupted exception clears the interrupt flag,\n// so we need to re-enable it\nThread.currentThread().interrupt();\n// probably you want to stop the thread if it is interrupted\nreturn;\n}\n\ntth.shutdown = true;\n// or tth.interrupt()\ntth.join();\n\n...\nMyHandler handler = new MyHandler();\n// catch the control-c signal, ""TERM"" is another common kill signal\nSignal.handle(new Signal(""INT""), handler);\n...\n\nprivate static class MyHandler implements SignalHandler {\n@Override\npublic void handle(Signal arg0) {\n// interrupt your threads\n// clean up stuff\n// set shutdown flags\n// ...\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow does sleep() method work on given thread and output?\n----------Explanation----------\nYou have created two Runnable objects. If you run them by calling their run method you would get what you imagine:\n----------Code Sample----------\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.run()"");\nm1.run(); // we call run method\nSystem.out.println(""Calling m2.run()"");\nm2.run();\n\nCalling m1.run()\n1\n2\n3\n4\nCalling m2.run()\n1\n2\n3\n4\n\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.start()"");\nm1.start(); // thread calls run method\nSystem.out.println(""Calling m2.start()"");\nm2.start();\n\nCalling m1.start()\nCalling m2.start()\n1 < From thread 1\n1 < From thread 2\n2 ...\n2\n3\n3\n4\n4\n\npublic class Aaa implements Runnable {\npublic void run() {\nfor (int i = 1; i < 5; i++) {\ntry {\nThread.sleep(500); // sleeps thread\n} catch (InterruptedException e) {\nSystem.out.println(e);\n}\nSystem.out.println(i);\n}\n}\n\npublic static void main(String[] args) {\nAaa m1 = new Aaa(); // creating one object\nThread t1 = new Thread(m1); // Its thread\nAaa m2 = new Aaa(); // creating second object of a class\nThread t2 = new Thread(m2); // Its thread\nt1.start(); // calls m\'s run method in a new thread.\nt2.start();\n}\n\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\ncomparison of code performance, threaded versus non-threaded\n----------Explanation----------\nBy putting the join() in the loop, you\'re starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:\n----------Code Sample----------\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\n// Pull thread pool count out into a value so you can easily change it\nint threadCount = 10000;\nThread[] threads = new Thread[threadCount];\n\n// Start all threads\nfor(int i = 0;i < threadCount;i++) {\n// Pass list to each Runnable here\n// Also, I added +i here as I think the intention is \n// to test 10000 possible numbers>5 for primeness - \n// was testing 5 in all loops\nPrimeRunnable pr = new PrimeRunnable(primeStart+i, list);\nThread[i] threads = new Thread(pr);\nthreads[i].start(); // thread is now running in parallel\n}\n\n// All threads now running in parallel\n\n// Then wait for all threads to complete\nfor(int i=0; i threads[i].join();\n}\n}\n\npublic class PrimeRunnable implements Runnable { \nprivate int from;\nprivate List results; // shared but thread-safe\n\npublic PrimeRunnable(int from, List results) {\nthis.from = from;\nthis.results = results;\n}\n\npublic void isPrime(int number) {\nfor(int i = 2;i < from;i++) {\nif((number % i) == 0) {\nreturn;\n}\n}\n// found prime, add to shared results\nthis.results.add(number);\n}\n\npublic void run() {\nisPrime(from); // don\'t increment, just check one number\n} \n}\n\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\nint threadCount = 16; // Experiment with this to find best on your machine\nExecutorService exec = Executors.newFixedThreadPool(threadCount);\n\nint workCount = 10000; // See how # of work is now separate from # of threads?\nfor(int i = 0;i < workCount;i++) {\n// submit work to the svc for execution across the thread pool \nexec.execute(new PrimeRunnable(primeStart+i, list));\n}\n\n// Wait for all tasks to be done or timeout to go off\nexec.awaitTermination(1, TimeUnit.DAYS);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nTomcat Guice/JDBC Memory Leak\n----------Explanation----------\n\n----------Code Sample----------\nSet threadSet = Thread.getAllStackTraces().keySet();\nThread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);\nfor(Thread t:threadArray) {\nif(t.getName().contains(""Abandoned connection cleanup thread"")) {\nsynchronized(t) {\nt.stop(); //don\'t complain, it works\n}\n}\n}\n\ntry {\nAbandonedConnectionCleanupThread.shutdown();\n} catch (InterruptedException e) {\nlogger.warn(""SEVERE problem cleaning up: "" + e.getMessage());\ne.printStackTrace();\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\njava Producer-Consumer Not always terminating\n----------Explanation----------\nAn ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.\n----------Code Sample----------\nProducer: I love: 1 pool-2-thread-2\nProducer: I love: 3 pool-2-thread-4\nProducer: I love: 2 pool-2-thread-3\nProducer: I love: 5 pool-2-thread-2\nProducer: I love: 7 pool-2-thread-2\nProducer: I love: 4 pool-2-thread-5\nProducer: I love: 6 pool-2-thread-6\nProducer: I love: 8 pool-2-thread-7\nProducer: I love: 10 pool-2-thread-2\nProducer: I love: 9 pool-2-thread-5\nProducer: I love: 11 pool-2-thread-8\nProducer: I love: 12 pool-2-thread-9\nProducer: I love: 14 pool-2-thread-10\nProducer: I love: 13 pool-2-thread-2\nProducer: I love: 16 pool-2-thread-10\nProducer: I love: 15 pool-2-thread-11\nProducer: I love: 17 pool-2-thread-12\nProducer: I love: 20 pool-2-thread-14\nProducer: I love: 19 pool-2-thread-10\nProducer: I love: 18 pool-2-thread-13\nProducer: I love: 0 pool-2-thread-1\nProducer: I love: 22 pool-2-thread-12\nProducer: I love: 21 pool-2-thread-15\nProducer: I love: 25 pool-2-thread-3\nProducer: I love: 27 pool-2-thread-12\nProducer: I love: 26 pool-2-thread-10\nProducer: I love: 24 pool-2-thread-15\nProducer: I love: 28 pool-2-thread-1\nProducer: I love: 23 pool-2-thread-16\nProducer: I love: 31 pool-2-thread-11\nProducer: I love: 30 pool-2-thread-16\nProducer: I love: 32 pool-2-thread-1\nProducer: I love: 36 pool-2-thread-3\nConsumer: I love: 2 pool-1-thread-1\n\nConsumer: I love: 9975 pool-1-thread-1\nConsumer: I love: 9977 pool-1-thread-1\nConsumer: I love: 9978 pool-1-thread-1\nConsumer: I love: 9979 pool-1-thread-1\nConsumer: I love: 9981 pool-1-thread-1\nProducer: I love: 9996 pool-2-thread-16\nConsumer: I love: 9984 pool-1-thread-1\nConsumer: I love: 9985 pool-1-thread-1\nConsumer: I love: 9990 pool-1-thread-1\nConsumer: I love: 9992 pool-1-thread-1\nProducer: I love: 9997 pool-2-thread-16\nConsumer: I love: 9994 pool-1-thread-1\nConsumer: I love: 9995 pool-1-thread-1\nConsumer: I love: 9996 pool-1-thread-1\nProducer: I love: 9998 pool-2-thread-16\nProducer: I love: 9999 pool-2-thread-16\nConsumer: I love: 9997 pool-1-thread-1\nConsumer: I love: 9998 pool-1-thread-1\nConsumer: I love: 9999 pool-1-thread-1\nfinally\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava - creating a new thread\n----------Explanation----------\nYou are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:\n----------Code Sample----------\none = new Thread() {\npublic void run() {\ntry {\nSystem.out.println(""Does it work?"");\n\nThread.sleep(1000);\n\nSystem.out.println(""Nope, it doesnt...again."");\n} catch(InterruptedException v) {\nSystem.out.println(v);\n}\n} \n};\n\none.start();\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nStarting a Java class in different threads\n----------Explanation----------\n\n----------Code Sample----------\n$ javac Bar.java\n$ java Bar\nThread ID 9 running\nThread ID 10 running\nThread ID 8 running\nDoing something on thread 9\nDoing something on thread 10\nDoing something on thread 8\nThread ID 9 running\nDoing something on thread 9\nThread ID 8 running\nDoing something on thread 8\nThread ID 10 running\nDoing something on thread 10\n\npublic class Bar\n{\n\nstatic private final class MyOtherClass\n{\npublic void doSomething()\n{\nSystem.out.println(""Doing something on thread ""+Thread.currentThread().getId());\n}\n}\n\nstatic private MyOtherClass myOtherClass=new MyOtherClass();\n\nstatic private final class MyThreadClass implements Runnable\n{\npublic void run()\n{\nwhile (true)\n{\ntry\n{\nThread.sleep(1000);\n}\ncatch (InterruptedException ie)\n{\nSystem.err.println(""Interrupted"");\nreturn;\n}\nSystem.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");\nmyOtherClass.doSomething();\n}\n}\n}\n\nstatic public void main(String[] args)\n{\nThread t1=new Thread(new MyThreadClass());\nThread t2=new Thread(new MyThreadClass());\nThread t3=new Thread(new MyThreadClass());\nt1.start();\nt2.start();\nt3.start();\n}\n\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow can I create a completely-connected graph of clients?\n----------Explanation----------\n\n----------Code Sample----------\nif(localHostName == hostNames[i])\n\nif(localHostName.equals(hostNames[i]))\n\npublic class MyServer implements Runnable {\n\nprivate final String[] hostnames;\n\npublic MyServer(String... hostnames) {\nthis.hostnames = hostnames;\n}\n\npublic void run() {\nfor (String hostname : hostnames) {\n// connect to hostname\n}\n}\n\n}\n\nThread[] threads = new Thread[6];\nthreads[0] = new Thread(new MyServer(""foo"", ""bar""));\nthreads[1] = new Thread(new MyServer(""bar"", ""dog""));\n...\nfor (Thread thread : threads) {\nthread.start();\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully\n----------Explanation----------\n\n----------Code Sample----------\npublic class DaemonThreadPlay {\npublic static void main(String [] args) {\nThread daemonThread = new Thread() {\npublic void run() {\nwhile (true) {\ntry {\nSystem.out.println(""Try block executed"");\nThread.sleep(1000l);\n} catch (Throwable t) {\nt.printStackTrace();\n}\n}\n}\n\n@Override\npublic void finalize() {\nSystem.out.println(""Finalize method called"");\n}\n};\ndaemonThread.setDaemon(true);\ndaemonThread.start();\n\ntry {\nThread.sleep(2500l);\n} catch (Throwable t) {\n//NO-OP\n}\n}\n} \n\nThread shutdownHook = ... // construct thread that somehow\n// knows about all the daemon threads\nRuntime.getRuntime().addShutdownHook(shutdownHook);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nThread.join does not seem to work in my code; am I using it right?\n----------Explanation----------\nSo, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.\n----------Code Sample----------\npublic class ClipSetThread extends Thread {\n\nClipboard sysClip = null;\nTheAppClass theApp = null;\n\nprivate String toClipboard;\n\npublic ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {\ntheApp = app;\nsysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nthis.toClipboard = toClipBoard;\n// !! Check to see if the thread is also alive before trying to join with it...\nif (waitFor != null && waitFor.isAlive()) {\ntry {\nwaitFor.join();\n} catch (InterruptedException e) {\n}\n}\n}\n\n// You should really put your logic into the `run` method in order to allow\n// the code to actually run in a separate thread...otherwise there is no\n// point in using a thread....\n@Override\npublic void run() {\n// Two strings that will hopefully never be on the clipboard\nString checkStr1 = ""9999999999999"";\nString checkStr2 = ""99999999999999"";\n// When we read in the clipboard we want to see if we change these strings from the ones they\n// will never be, if they do change we read the clipboard successfully\nString clipBoardTextBefore = checkStr1;\nString clipBoardTextAfter = checkStr2;\n\n// First get a copy of the current system clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to change the string it means we failed to read the text\nif (clipBoardTextBefore.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT get sysClip text"");\n} else {\n// If we didn\'t failed to get the current text try to change it\nwhile (true) {\ntry {\nsysClip.setContents(new StringSelection(toClipboard), null);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n\n// Now again check to see the clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to read the clipboard text\nif (clipBoardTextAfter.equals(checkStr2)) {\ntheApp.updateOutput(""Could NOT check if sysClip update was successful"");\n} else { // We re-read the clipboard text, see if it changed from the original clipboard text \nif (clipBoardTextAfter.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT successfully set clipboard text"");\n} else {\ntheApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\\n"");\n}\n}\n}\n}\n\n}\n\npublic class Automator extends Thread implements NativeMouseInputListener {\n\n// A ""locking"" object...\nprivate static final Object WAIT_LOCK = new Object();\n\nRobot rob = null;\nTheAppClass theApp = null;\nClipSetThread lastClipSet = null;\nboolean doit = false;\nboolean settingClip = false;\n\npublic void run() {\ntry // to make the Global hook\n{\nGlobalScreen.registerNativeHook();\n} catch (NativeHookException ex) {\ntheApp.updateOutput(""No Global Keyboard or Mouse Hook"");\nreturn;\n}\ntry // to create a robot (can simulate user input such as mouse and keyboard input)\n{\nrob = new Robot();\n} catch (AWTException e1) {\ntheApp.updateOutput(""The Robot could not be created"");\nreturn;\n}\n\n// This is wasteful...\n// while (true) {\n// }\n// Locks do not consume CPU cycles while in the wait state...\nsynchronized (WAIT_LOCK) {\ntry {\nWAIT_LOCK.wait();\n} catch (Exception exp) {\n}\n}\n}\n\npublic void dispose() {\n\n// Tell the thread it can terminate...\nsynchronized (WAIT_LOCK) {\nWAIT_LOCK.notify();\n}\n// This will STOP the current thread (which called this method)\n// while the lastClipSet finishes...\nif (lastClipSet != null && lastClipSet.isAlive()) {\nlastClipSet.join();\n}\n\n}\n\npublic void setClip(String arg) {\nClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);\nlastClipSet = set;\n// You MUST START the thread...\nset.start();\n}\n\n/*...*/\n}\n\nwhile(true)\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\n}\ncatch(Exception e)\n{\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\ncontinue;\n}\nbreak;\n}\n\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n}\ncatch(Exception e)\n{\nretries++;\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\n}\n}\n\npublic class Engine extends Thread {\n\nprivate Robot rob = null;\nprivate PasteThread lastClipSet = null;\n\npublic void setClip(String arg) {\nif (lastClipSet != null && lastClipSet.isAlive()) {\ntry {\nlastClipSet.join();\n} catch (InterruptedException ex) {\nex.printStackTrace();\n}\n}\nPasteThread set = new PasteThread(arg);\nlastClipSet = set;\nlastClipSet.start();\n}\n\npublic void pasteAtCursorLocation(String text) {\nSystem.out.println(""Paste "" + text);\nsetClip(text);\nrob.keyPress(KeyEvent.VK_CONTROL);\nrob.keyPress(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_CONTROL);\n}\n\npublic Engine() throws AWTException {\nrob = new Robot();\nrob.setAutoDelay(250);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException ex) {\n}\npasteAtCursorLocation(""This is a simple test, thanks for watching!"");\n}\n\npublic static void main(String[] args) {\ntry {\nnew Engine();\n} catch (AWTException ex) {\nLogger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);\n}\n\n}\n\npublic class PasteThread extends Thread {\n\nprivate String toPaste;\n\npublic PasteThread(String value) {\n\ntoPaste = value;\n\n}\n\n@Override\npublic void run() {\nClipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nSystem.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));\nsysClip.setContents(new StringSelection(toPaste), null);\nSystem.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));\n}\n\npublic String getClipboardContents(Clipboard clipboard) {\nString value = null;\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\nTransferable contents = clipboard.getContents(null);\nif (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {\ntry {\nvalue = (String) contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n} catch (Exception exp) {\nretries++;\nexp.printStackTrace();\n}\n} else {\nretries++;\n}\n}\nSystem.out.println(successful + ""/"" + retries);\nreturn value;\n}\n}\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow to Pause and Resume a Thread in Java from another Thread\n----------Explanation----------\nSo in this particular case, perhaps change MyThread as follows:\n----------Code Sample----------\nclass MyThread extends Thread {\n\nprivate volatile boolean running = true; // Run unless told to pause\n\n...\n\n@Override\npublic void run()\n{\nfor(int i=0 ; ; i++)\n{\n// Only keep painting while ""running"" is true\n// This is a crude implementation of pausing the thread\nwhile (!running)\nyield;\n\narea.setText(i+"""");\n}\n\npublic void pauseThread() throws InterruptedException\n{\nrunning = false;\n}\n\npublic void resumeThread()\n{\nrunning = true;\n}\n\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nTurning an ExecutorService to daemon in Java\n----------Explanation----------\nYou can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:\n----------Code Sample----------\nExecutorService exec = Executors.newFixedThreadPool(4,\nnew ThreadFactory() {\npublic Thread newThread(Runnable r) {\nThread t = Executors.defaultThreadFactory().newThread(r);\nt.setDaemon(true);\nreturn t;\n}\n});\n\nexec.execute(YourTaskNowWillBeDaemon);\n\nExecutorService exec = MoreExecutors.getExitingExecutorService(\n(ThreadPoolExecutor) Executors.newFixedThreadPool(4), \n100_000, TimeUnit.DAYS//period after which executor will be automatically closed\n//I assume that 100_000 days is enough to simulate infinity\n);\n//exec.execute(YourTask);\nexec.execute(() -> {\nfor (int i = 0; i < 3; i++) {\nSystem.out.println(""daemon"");\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nProblem with synchronizing on String objects?\n----------Explanation----------\nWithout putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:\n----------Code Sample----------\nfinal String firstkey = ""Data-"" + email;\nfinal String key = firstkey.intern();\n\n// do not attempt double-check locking here. I mean it.\nsynchronized(StaticObject) {\ndata = StaticCache.get(key);\nwhile (data == IN_PROGRESS) {\n// another thread is getting the data\nStaticObject.wait();\ndata = StaticCache.get(key);\n}\nif (data == null) {\n// we must get the data\nStaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);\n}\n}\nif (data == null) {\n// we must get the data\ntry {\ndata = server.DoSlowThing(key);\n} finally {\nsynchronized(StaticObject) {\n// WARNING: failure here is fatal, and must be allowed to terminate\n// the app or else waiters will be left forever. Choose a suitable\n// collection type in which replacing the value for a key is guaranteed.\nStaticCache.put(key, data, CURRENT_TIME);\nStaticObject.notifyAll();\n}\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nPossible to catch the OS doing Context Switching on threads?\n----------Explanation----------\n\n----------Code Sample----------\npublic class Test {\npublic static long count = 0;\n\npublic static void main(String[] args) {\nfor (int run = 0; run < 5; ++run) {\nTest.count = 0;\n\nThread[] threads = new Thread[10];\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i] = new Thread(new Runnable() {\npublic void run() {\nfor (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {\nTest.count += 1;\n}\n}\n});\n}\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i].start();\n}\n\nfor (int i = 0; i < threads.length; ++i) {\ntry {\nthreads[i].join();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\nSystem.out.println(Test.count);\n}\n}\n}\n\n1443685504\n1439908180\n1461384255\n1477413204\n1440892041\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nJavaFX periodic background task\n----------Explanation----------\nYou can use Timeline for what matter:\n----------Code Sample----------\nTimeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {\n\n@Override\npublic void handle(ActionEvent""""""]']","[""In Java, both Thread.currentThread().sleep(x) and Thread.sleep(x) are used to pause the execution of the current thread for a specified period of time, where 'x' is the duration in milliseconds. However, there is a subtle difference in their usage. Thread.sleep(x) is a static method of the Thread class, and it always causes the currently executing thread to sleep. On the other hand, Thread.currentThread().sleep(x) is a redundant way of calling the same static method, as Thread.currentThread() returns a reference to the currently executing thread, and then calling sleep(x) on this reference still invokes the static method Thread.sleep(x). Therefore, using Thread.sleep(x) directly is the preferred and more straightforward approach. Both methods achieve the same result, but Thread.sleep(x) is simpler and more idiomatic.""]","['[\'[\\\'The question is about the difference between `Thread.currentThread().sleep(x)` and `Thread.sleep(x)` in Java. Both methods are used to pause the execution of the current thread for a specified period of time. However, `Thread.currentThread().sleep(x)` is redundant because `Thread.sleep(x)` already operates on the current thread. Here\\\\\\\'s an example to demonstrate this:\\\\npublic class SleepExample {\\\\n    public static void main(String[] args) {\\\\n        Runnable task = () -> {\\\\n            try {\\\\n                // Using Thread.sleep(x)\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" is going to sleep for 1 second using Thread.sleep(x)"");\\\\n                Thread.sleep(1000);\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" woke up after 1 second using Thread.sleep(x)"");\\\\n\\\\n                // Using Thread.currentThread().sleep(x)\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" is going to sleep for 1 second using Thread.currentThread().sleep(x)"");\\\\n                Thread.currentThread().sleep(1000);\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" woke up after 1 second using Thread.currentThread().sleep(x)"");\\\\n            } catch (InterruptedException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        };\\\\n\\\\n        Thread thread = new Thread(task);\\\\n        thread.start();\\\\n    }\\\\n}\\\\npublic class SleepExample {\\\\n    public static void main(String[] args) {\\\\n        Runnable task = () -> {\\\\n            try {\\\\n                // Using Thread.sleep(x)\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" is going to sleep for 1 second using Thread.sleep(x)"");\\\\n                Thread.sleep(1000);\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" woke up after 1 second using Thread.sleep(x)"");\\\\n\\\\n                // Using Thread.currentThread().sleep(x)\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" is going to sleep for 1 second using Thread.currentThread().sleep(x)"");\\\\n                Thread.currentThread().sleep(1000);\\\\n                System.out.println(""Thread "" + Thread.currentThread().getName() + "" woke up after 1 second using Thread.currentThread().sleep(x)"");\\\\n            } catch (InterruptedException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        };\\\\n\\\\n        Thread thread = new Thread(task);\\\\n        thread.start();\\\\n    }\\\\n}\\\']\']']",0.5102040816326531,0.3333333333333333,0.0714285714285714,0.3487544483985765,0.875,0.0555555555555555
lang,Thread,How a thread should close itself in Java?,['<p>(on the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up.\nif more than one thread is waiting on the monitor Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ this will wake <em>all of them up</em>.\nHowever  only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¨ the others will then be blocked until they can acquire the monitor s lock.</p>\nThe OS doesnÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t even try to   schedule the sleeping thread until requested time has passed.</p>\nThe OS is free to immediately give the thread another timeslice    or to give some other thread or process the CPU the yielding thread   just gave up.</p>\n<p>Threads also lose the remainder of their timeslice when they perform   blocking IO and under a few other circumstances.\nIf a thread works   through the entire timeslice  the OS forcibly takes control roughly as   if <code>yield()</code> had been called  so that other processes can run.</p>\nimprove system   responsiveness (at the expense of time Ã¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ãƒâ€  context switches  even just   to the OS and back  arenÃ¢â‚¬Å¡Ãƒâ€žÃƒÂ¶Ã¢Ë†Å¡Ãƒâ€˜Ã¢Ë†Å¡Ã‚Â¥t free).\nMeasure and test against goals you   care about  as always.</p> </blockquote>\n<p><code>sleep()</code> sends the Thread to sleep as it was before  it just packs the context and stops executing for a predefined time.\nSo in order to wake it up before the due time  you need to know the Thread reference.\nIt s mostly used for time-synchronization (e.g. wake in exactly 3.5 seconds) and/or hard-coded fairness (just sleep for a while and let others threads work).</p>\n<p><code>wait()</code>  on the contrary  is a thread (or message) synchronization mechanism that allows you to notify a Thread of which you have no stored reference (nor care).\nBasically using notify() you are sending a message (that might even not be received at all and normally you don t care).</p>\n<p>They could be implemented in the same manner in the underlying OS  or not at all (as previous versions of Java had no real multithreading; probably some small VMs doesn t do that either).\nDon t forget Java runs on a VM  so your code will be transformed in something different according to the VM/OS/HW it runs on.</p>\nmethod needs to be called from a loop in order to deal with false alarm.</p></li> <li><p><code>wait()</code> method must be called from synchronized context (i.e.  synchronized method or block)  otherwise  it will throw <code>IllegalMonitorStateException</code></p></li> </ol>\n<p>There are some difference key notes i conclude after working on wait and sleep  first take a look on sample using wait() and sleep():</p>\nThe major difference is to wait to release the lock or monitor while sleep doesn t release any lock or monitor while waiting.\nWait is used for inter-thread communication while sleep is used to introduce pause on execution.</strong> </p>\nif you have more then one thread in waiting state and you want to wake all of those thread).\nmethod is used for inter-thread communication because if a thread goes in waiting state you ll need another thread to wake that thread.</p>\nLike if you want something should happen after few seconds like in a game after user s turn you want the user to wait until the computer plays then you can mention the <code>sleep()</code> method.</p>\n<p>And there is a similarity between both methods: they both are checked statement so you need try catch or throws to access these methods.</p>\nThe thread keeps the monitors it has aquired   -- i.e. if the thread is currently in a synchronized block or method no other thread can enter this block or method.\n<p>Note that sleep is a static method  which means that it always affects   the current thread (the one that is executing the sleep method).\nUsing it is possible to halt a thread other   than the current thread.\nA suspended thread keeps all its monitors and   since this state is not interruptable it is deadlock prone.</p>\nWait is called on an object  not a   thread; we call this object the  lock object. \nthen releases this lock  and adds the thread to the  wait list    associated with the lock.\nLater  another thread can synchronize on the   same lock object and call <code>lock.notify()</code>.\nBasically  <code>wait()</code>/<code>notify()</code> is like   <code>sleep()</code>/<code>interrupt()</code>  only the active thread does not need a direct   pointer to the sleeping thread  but only to the shared lock object.</p> </blockquote>\nthe thread stops working until the object being waited-on is notified  generally by other threads.</li> </ul>'],['Most common way to construct:\nThread t1 = new Thread();\nBased on 25 examples'],['You can add a method like this as any blocking IO operation will throw an IOException:-\n\npublic void close() throws IOException {\n    this.socket.close();\n}\nFrom the javadoc:-\n\nCloses this socket. Any thread currently blocked in accept() will throw a SocketException.'],"['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nWhat is the difference between atomic / volatile / synchronized?\n----------Explanation----------\nYou are specifically asking about how they internally work , so here you are: \n\nNo synchronization\n----------Code Sample----------\nprivate int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nprivate boolean stopped;\n\npublic void run() {\nwhile(!stopped) {\n//do some work\n}\n}\n\npublic void pleaseStop() {\nstopped = true;\n}\n\nprivate AtomicInteger counter = new AtomicInteger();\n\npublic int getNextUniqueIndex() {\nreturn counter.getAndIncrement();\n}\n\nint current;\ndo {\ncurrent = get();\n} while(!compareAndSet(current, current + 1));\n\nprivate volatile int counter;\n\npublic int getNextUniqueIndex() {\nreturn counter++; \n}\n\nvolatile int i = 0;\nvoid incIBy5() {\ni += 5;\n}\n\nvoid incIBy5() {\nint temp;\nsynchronized(i) { temp = i }\nsynchronized(i) { i = temp + 5 }\n}\n\nsynchronized(new Object()) {\n//thread-safe, SRSLy?\n}\n\nvoid synchronized incIBy5() {\ni += 5 \n}\n\nvoid incIBy5() {\nsynchronized(this) {\ni += 5 \n}\n}\n\nvoid incIBy5() {\nsynchronized(this) {\nint temp = i;\ni = temp + 5;\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nJava how to pass a thread an extra object\n----------Explanation----------\nWhy not pass the different Thread s different Runnable s?\n----------Code Sample----------\nRunnable r1 = new Runnable() { public void run() { /* this is r1 */ } };\nRunnable r2 = new Runnable() { public void run() { /* this is r2 */ } };\nThread t1 = new Thread(r1);\nThread t2 = new Thread(r2);\nt1.start();\nt2.start();\n\npublic class MyRunnable implements Runnable {\nprivate final String s;\n\npublic MyRunnable(Stirng s) {\nthis.s = s;\n}\n\npublic void run() {\n// do something with s\n}\n}\n\nThread t1 = new Thread(new MyRunnable(""s1""));\nThread t2 = new Thread(new MyRunnable(""s2""));\nt1.start();\nt2.start();\n\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class ExecutorServiceExample {\nprivate static class CallableExample implements Callable {\nprivate final Object foo;\n\nprivate CallableExample(Object foo) {\nthis.foo = foo;\n}\n\n@Override\npublic Integer call() {\n// do something and return it\nreturn foo.hashCode();\n}\n\n}\n\npublic static void main(String[] args) throws InterruptedException, ExecutionException {\nExecutorService e = Executors.newFixedThreadPool(2);\nFuture f1 = e.submit(new CallableExample(""foo""));\nFuture f2 = e.submit(new CallableExample(""bar""));\n\nSystem.out.println(f1.get());\nSystem.out.println(f2.get());\n\ne.shutdown();\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nRabbitMQ by Example: Multiple Threads, Channels and Queues\n----------Explanation----------\nA thread pool can be described as a collection of Runnable objects\n(work queue) and a connections of running threads. These threads are\nconstantly running and are checking the work query for new work. If\nthere is new work to be done they execute this Runnable. The Thread\nclass itself provides a method, e.g. execute(Runnable r) to add a new\nRunnable object to the work queue.\n----------Code Sample----------\npublic class Main {\nprivate static final int NTHREDS = 10;\n\npublic static void main(String[] args) {\nExecutorService executor = Executors.newFixedThreadPool(NTHREDS);\nfor (int i = 0; i < 500; i++) {\nRunnable worker = new MyRunnable(10000000L + i);\nexecutor.execute(worker);\n}\n// This will make the executor accept no new threads\n// and finish all existing threads in the queue\nexecutor.shutdown();\n// Wait until all threads are finish\nexecutor.awaitTermination();\nSystem.out.println(""Finished all threads"");\n}\n} \n\nclass CompositeRunnable implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(Runnable a) {\nqueue.add(a);\n}\n\n@Override\npublic void run() {\nfor(Runnable r: queue) {\nr.run();\n}\n}\n}\n\nclass CompositeMessageWorker implements Runnable {\n\nprotected Queue queue = new LinkedList<>();\n\npublic void add(T message) {\nqueue.add(message);\n}\n\n@Override\npublic void run() {\nfor(T message: queue) {\n// process a message\n}\n}\n}\n\nstatic class Worker extends DefaultConsumer {\n\nString name;\nChannel channel;\nString queue;\nint processed;\nExecutorService executorService;\n\npublic Worker(int prefetch, ExecutorService threadExecutor,\n, Channel c, String q) throws Exception {\nsuper(c);\nchannel = c;\nqueue = q;\nchannel.basicQos(prefetch);\nchannel.basicConsume(queue, false, this);\nexecutorService = threadExecutor;\n}\n\n@Override\npublic void handleDelivery(String consumerTag,\nEnvelope envelope,\nAMQP.BasicProperties properties,\nbyte[] body) throws IOException {\nRunnable task = new VariableLengthTask(this,\nenvelope.getDeliveryTag(),\nchannel);\nexecutorService.submit(task);\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nWhere to stop/destroy threads in Android Service class?\n----------Explanation----------\n1) Thread.stop() has been deprecated for quite some time now, as it can leave dependent variables in inconsistent states in some circumstances. See this Sun answer page for more details (Edit: that link is now dead, see this page for why not to use Thread.stop() ). A preferred method of stopping and starting a thread is as follows (assuming your thread will run somewhat indefinitely):\n----------Code Sample----------\nprivate volatile Thread runner;\n\npublic synchronized void startThread(){\nif(runner == null){\nrunner = new Thread(this);\nrunner.start();\n}\n}\n\npublic synchronized void stopThread(){\nif(runner != null){\nThread moribund = runner;\nrunner = null;\nmoribund.interrupt();\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n}\n}\n\npublic void run(){\nwhile(Thread.currentThread() == runner){\n//do stuff which can be interrupted if necessary\n\nif(/*fatal error*/){\nstopThread();\nreturn; //optional in this case since the loop will exit anyways\n}\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nObtaining CPU thread usage in Java\n----------Explanation----------\nYou can use ThreadMXBean to get cpu usage statistics from all running threads. In the example below the CPU usage per thread is calculated:\n----------Code Sample----------\nprivate int sampleTime = 10000;\nprivate ThreadMXBean threadMxBean = ManagementFactory.getThreadMXBean();\nprivate RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\nprivate OperatingSystemMXBean osMxBean = ManagementFactory.getOperatingSystemMXBean();\nprivate Map threadInitialCPU = new HashMap();\nprivate Map threadCPUUsage = new HashMap();\nprivate long initialUptime = runtimeMxBean.getUptime();\n\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadInitialCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\ntry {Thread.sleep(sampleTime);} catch (InterruptedException e) {}\n\nlong upTime = runtimeMxBean.getUptime();\n\nMap threadCurrentCPU = new HashMap();\nThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(false, false);\nfor (ThreadInfo info : threadInfos) {\nthreadCurrentCPU.put(info.getThreadId(), threadMxBean.getThreadCpuTime(info.getThreadId()));\n}\n\n// CPU over all processes\n//int nrCPUs = osMxBean.getAvailableProcessors();\n// total CPU: CPU % can be more than 100% (devided over multiple cpus)\nlong nrCPUs = 1;\n// elapsedTime is in ms.\nlong elapsedTime = (upTime - initialUptime);\nfor (ThreadInfo info : threadInfos) {\n// elapsedCpu is in ns\nLong initialCPU = threadInitialCPU.get(info.getThreadId());\nif (initialCPU != null) {\nlong elapsedCpu = threadCurrentCPU.get(info.getThreadId()) - initialCPU;\nfloat cpuUsage = elapsedCpu / (elapsedTime * 1000000F * nrCPUs);\nthreadCPUUsage.put(info.getThreadId(), cpuUsage);\n}\n}\n\n// threadCPUUsage contains cpu % per thread\nSystem.out.println(threadCPUUsage);\n// You can use osMxBean.getThreadInfo(theadId) to get information on every thread reported in threadCPUUsage and analyze the most CPU intentive threads\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nThreads Java Inturrupts\n----------Explanation----------\nI\'m not sure what the ""that"" is. As others have mentioned, the JVM finishes when the last non-daemon thread finishes. At that point the JVM kills all daemon threads and exits. If you want a background thread to be killed on shutdown then you\'d do something like:\n----------Code Sample----------\nThething theThing = new TheThing();\n// set it to be a daemon thread before it starts\ntheThing.setDaemon(true);\ntheThing.start();\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to kill the thread now\ntth.shutdown = true;\n}\n\npublic class TheThing extends Thread {\nvolatile boolean shutdown = false;\npublic void run() {\nwhile (!shutdown) {\n...\n// you can also test for shutdown while processing\nif (shutdown) {\nreturn;\n}\n}\n}\n}\n\nvoid connect(String portName) throws Exception {\nThread thh = new TheThing(""blaghname"");\nthh.start();\n...\n// we are ready to interrupt the thread now\ntth.interrupt();\n}\n\npublic class TheThing extends Thread {\npublic void run() {\nwhile (!Thread.currentThread().interrupted()) {\n...\n}\n}\n}\n\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\n// catching the interrupted exception clears the interrupt flag,\n// so we need to re-enable it\nThread.currentThread().interrupt();\n// probably you want to stop the thread if it is interrupted\nreturn;\n}\n\ntth.shutdown = true;\n// or tth.interrupt()\ntth.join();\n\n...\nMyHandler handler = new MyHandler();\n// catch the control-c signal, ""TERM"" is another common kill signal\nSignal.handle(new Signal(""INT""), handler);\n...\n\nprivate static class MyHandler implements SignalHandler {\n@Override\npublic void handle(Signal arg0) {\n// interrupt your threads\n// clean up stuff\n// set shutdown flags\n// ...\n}\n}\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nHow does sleep() method work on given thread and output?\n----------Explanation----------\nYou have created two Runnable objects. If you run them by calling their run method you would get what you imagine:\n----------Code Sample----------\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.run()"");\nm1.run(); // we call run method\nSystem.out.println(""Calling m2.run()"");\nm2.run();\n\nCalling m1.run()\n1\n2\n3\n4\nCalling m2.run()\n1\n2\n3\n4\n\nAaa m1=new Aaa(); // creating one object\nAaa m2=new Aaa(); // creating second object of a class\nSystem.out.println(""Calling m1.start()"");\nm1.start(); // thread calls run method\nSystem.out.println(""Calling m2.start()"");\nm2.start();\n\nCalling m1.start()\nCalling m2.start()\n1 < From thread 1\n1 < From thread 2\n2 ...\n2\n3\n3\n4\n4\n\npublic class Aaa implements Runnable {\npublic void run() {\nfor (int i = 1; i < 5; i++) {\ntry {\nThread.sleep(500); // sleeps thread\n} catch (InterruptedException e) {\nSystem.out.println(e);\n}\nSystem.out.println(i);\n}\n}\n\npublic static void main(String[] args) {\nAaa m1 = new Aaa(); // creating one object\nThread t1 = new Thread(m1); // Its thread\nAaa m2 = new Aaa(); // creating second object of a class\nThread t2 = new Thread(m2); // Its thread\nt1.start(); // calls m\'s run method in a new thread.\nt2.start();\n}\n\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\ncomparison of code performance, threaded versus non-threaded\n----------Explanation----------\nBy putting the join() in the loop, you\'re starting a thread, then waiting for that thread to stop before running the next one. I think you probably want something more like this:\n----------Code Sample----------\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\n// Pull thread pool count out into a value so you can easily change it\nint threadCount = 10000;\nThread[] threads = new Thread[threadCount];\n\n// Start all threads\nfor(int i = 0;i < threadCount;i++) {\n// Pass list to each Runnable here\n// Also, I added +i here as I think the intention is \n// to test 10000 possible numbers>5 for primeness - \n// was testing 5 in all loops\nPrimeRunnable pr = new PrimeRunnable(primeStart+i, list);\nThread[i] threads = new Thread(pr);\nthreads[i].start(); // thread is now running in parallel\n}\n\n// All threads now running in parallel\n\n// Then wait for all threads to complete\nfor(int i=0; i threads[i].join();\n}\n}\n\npublic class PrimeRunnable implements Runnable { \nprivate int from;\nprivate List results; // shared but thread-safe\n\npublic PrimeRunnable(int from, List results) {\nthis.from = from;\nthis.results = results;\n}\n\npublic void isPrime(int number) {\nfor(int i = 2;i < from;i++) {\nif((number % i) == 0) {\nreturn;\n}\n}\n// found prime, add to shared results\nthis.results.add(number);\n}\n\npublic void run() {\nisPrime(from); // don\'t increment, just check one number\n} \n}\n\npublic static void main(String[] args) {\nint primeStart = 5;\n\n// Make thread-safe list for adding results to\nList list = Collections.synchronizedList(new ArrayList());\n\nint threadCount = 16; // Experiment with this to find best on your machine\nExecutorService exec = Executors.newFixedThreadPool(threadCount);\n\nint workCount = 10000; // See how # of work is now separate from # of threads?\nfor(int i = 0;i < workCount;i++) {\n// submit work to the svc for execution across the thread pool \nexec.execute(new PrimeRunnable(primeStart+i, list));\n}\n\n// Wait for all tasks to be done or timeout to go off\nexec.awaitTermination(1, TimeUnit.DAYS);\n}\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nTomcat Guice/JDBC Memory Leak\n----------Explanation----------\n\n----------Code Sample----------\nSet threadSet = Thread.getAllStackTraces().keySet();\nThread[] threadArray = threadSet.toArray(new Thread[threadSet.size()]);\nfor(Thread t:threadArray) {\nif(t.getName().contains(""Abandoned connection cleanup thread"")) {\nsynchronized(t) {\nt.stop(); //don\'t complain, it works\n}\n}\n}\n\ntry {\nAbandonedConnectionCleanupThread.shutdown();\n} catch (InterruptedException e) {\nlogger.warn(""SEVERE problem cleaning up: "" + e.getMessage());\ne.printStackTrace();\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\njava Producer-Consumer Not always terminating\n----------Explanation----------\nAn ExecutorService is a pool of threads with a queue of tasks. Adding another queue just adds complexity and increases the chance you will do something incorrect. I suggest you just use the queue already there.\n----------Code Sample----------\nProducer: I love: 1 pool-2-thread-2\nProducer: I love: 3 pool-2-thread-4\nProducer: I love: 2 pool-2-thread-3\nProducer: I love: 5 pool-2-thread-2\nProducer: I love: 7 pool-2-thread-2\nProducer: I love: 4 pool-2-thread-5\nProducer: I love: 6 pool-2-thread-6\nProducer: I love: 8 pool-2-thread-7\nProducer: I love: 10 pool-2-thread-2\nProducer: I love: 9 pool-2-thread-5\nProducer: I love: 11 pool-2-thread-8\nProducer: I love: 12 pool-2-thread-9\nProducer: I love: 14 pool-2-thread-10\nProducer: I love: 13 pool-2-thread-2\nProducer: I love: 16 pool-2-thread-10\nProducer: I love: 15 pool-2-thread-11\nProducer: I love: 17 pool-2-thread-12\nProducer: I love: 20 pool-2-thread-14\nProducer: I love: 19 pool-2-thread-10\nProducer: I love: 18 pool-2-thread-13\nProducer: I love: 0 pool-2-thread-1\nProducer: I love: 22 pool-2-thread-12\nProducer: I love: 21 pool-2-thread-15\nProducer: I love: 25 pool-2-thread-3\nProducer: I love: 27 pool-2-thread-12\nProducer: I love: 26 pool-2-thread-10\nProducer: I love: 24 pool-2-thread-15\nProducer: I love: 28 pool-2-thread-1\nProducer: I love: 23 pool-2-thread-16\nProducer: I love: 31 pool-2-thread-11\nProducer: I love: 30 pool-2-thread-16\nProducer: I love: 32 pool-2-thread-1\nProducer: I love: 36 pool-2-thread-3\nConsumer: I love: 2 pool-1-thread-1\n\nConsumer: I love: 9975 pool-1-thread-1\nConsumer: I love: 9977 pool-1-thread-1\nConsumer: I love: 9978 pool-1-thread-1\nConsumer: I love: 9979 pool-1-thread-1\nConsumer: I love: 9981 pool-1-thread-1\nProducer: I love: 9996 pool-2-thread-16\nConsumer: I love: 9984 pool-1-thread-1\nConsumer: I love: 9985 pool-1-thread-1\nConsumer: I love: 9990 pool-1-thread-1\nConsumer: I love: 9992 pool-1-thread-1\nProducer: I love: 9997 pool-2-thread-16\nConsumer: I love: 9994 pool-1-thread-1\nConsumer: I love: 9995 pool-1-thread-1\nConsumer: I love: 9996 pool-1-thread-1\nProducer: I love: 9998 pool-2-thread-16\nProducer: I love: 9999 pool-2-thread-16\nConsumer: I love: 9997 pool-1-thread-1\nConsumer: I love: 9998 pool-1-thread-1\nConsumer: I love: 9999 pool-1-thread-1\nfinally\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava - creating a new thread\n----------Explanation----------\nYou are calling the one.start() method in the run method of your Thread. But the run method will only be called when a thread is already started. Do this instead:\n----------Code Sample----------\none = new Thread() {\npublic void run() {\ntry {\nSystem.out.println(""Does it work?"");\n\nThread.sleep(1000);\n\nSystem.out.println(""Nope, it doesnt...again."");\n} catch(InterruptedException v) {\nSystem.out.println(v);\n}\n} \n};\n\none.start();\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nStarting a Java class in different threads\n----------Explanation----------\n\n----------Code Sample----------\n$ javac Bar.java\n$ java Bar\nThread ID 9 running\nThread ID 10 running\nThread ID 8 running\nDoing something on thread 9\nDoing something on thread 10\nDoing something on thread 8\nThread ID 9 running\nDoing something on thread 9\nThread ID 8 running\nDoing something on thread 8\nThread ID 10 running\nDoing something on thread 10\n\npublic class Bar\n{\n\nstatic private final class MyOtherClass\n{\npublic void doSomething()\n{\nSystem.out.println(""Doing something on thread ""+Thread.currentThread().getId());\n}\n}\n\nstatic private MyOtherClass myOtherClass=new MyOtherClass();\n\nstatic private final class MyThreadClass implements Runnable\n{\npublic void run()\n{\nwhile (true)\n{\ntry\n{\nThread.sleep(1000);\n}\ncatch (InterruptedException ie)\n{\nSystem.err.println(""Interrupted"");\nreturn;\n}\nSystem.out.println(""Thread ID ""+Thread.currentThread().getId()+"" running"");\nmyOtherClass.doSomething();\n}\n}\n}\n\nstatic public void main(String[] args)\n{\nThread t1=new Thread(new MyThreadClass());\nThread t2=new Thread(new MyThreadClass());\nThread t3=new Thread(new MyThreadClass());\nt1.start();\nt2.start();\nt3.start();\n}\n\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nHow can I create a completely-connected graph of clients?\n----------Explanation----------\n\n----------Code Sample----------\nif(localHostName == hostNames[i])\n\nif(localHostName.equals(hostNames[i]))\n\npublic class MyServer implements Runnable {\n\nprivate final String[] hostnames;\n\npublic MyServer(String... hostnames) {\nthis.hostnames = hostnames;\n}\n\npublic void run() {\nfor (String hostname : hostnames) {\n// connect to hostname\n}\n}\n\n}\n\nThread[] threads = new Thread[6];\nthreads[0] = new Thread(new MyServer(""foo"", ""bar""));\nthreads[1] = new Thread(new MyServer(""bar"", ""dog""));\n...\nfor (Thread thread : threads) {\nthread.start();\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nHow does the JVM terminate daemon threads? or How to write daemon threads that terminate gracefully\n----------Explanation----------\n\n----------Code Sample----------\npublic class DaemonThreadPlay {\npublic static void main(String [] args) {\nThread daemonThread = new Thread() {\npublic void run() {\nwhile (true) {\ntry {\nSystem.out.println(""Try block executed"");\nThread.sleep(1000l);\n} catch (Throwable t) {\nt.printStackTrace();\n}\n}\n}\n\n@Override\npublic void finalize() {\nSystem.out.println(""Finalize method called"");\n}\n};\ndaemonThread.setDaemon(true);\ndaemonThread.start();\n\ntry {\nThread.sleep(2500l);\n} catch (Throwable t) {\n//NO-OP\n}\n}\n} \n\nThread shutdownHook = ... // construct thread that somehow\n// knows about all the daemon threads\nRuntime.getRuntime().addShutdownHook(shutdownHook);\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nThread.join does not seem to work in my code; am I using it right?\n----------Explanation----------\nSo, firstly, you never call start on the ClipSetThread . You should also check to see if the thread is still alive before joining it.\n----------Code Sample----------\npublic class ClipSetThread extends Thread {\n\nClipboard sysClip = null;\nTheAppClass theApp = null;\n\nprivate String toClipboard;\n\npublic ClipSetThread(TheAppClass app, Thread waitFor, String toClipBoard) {\ntheApp = app;\nsysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nthis.toClipboard = toClipBoard;\n// !! Check to see if the thread is also alive before trying to join with it...\nif (waitFor != null && waitFor.isAlive()) {\ntry {\nwaitFor.join();\n} catch (InterruptedException e) {\n}\n}\n}\n\n// You should really put your logic into the `run` method in order to allow\n// the code to actually run in a separate thread...otherwise there is no\n// point in using a thread....\n@Override\npublic void run() {\n// Two strings that will hopefully never be on the clipboard\nString checkStr1 = ""9999999999999"";\nString checkStr2 = ""99999999999999"";\n// When we read in the clipboard we want to see if we change these strings from the ones they\n// will never be, if they do change we read the clipboard successfully\nString clipBoardTextBefore = checkStr1;\nString clipBoardTextAfter = checkStr2;\n\n// First get a copy of the current system clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to change the string it means we failed to read the text\nif (clipBoardTextBefore.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT get sysClip text"");\n} else {\n// If we didn\'t failed to get the current text try to change it\nwhile (true) {\ntry {\nsysClip.setContents(new StringSelection(toClipboard), null);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n\n// Now again check to see the clipboard text\nwhile (true) {\ntry {\nTransferable contents = sysClip.getContents(null);\nclipBoardTextAfter = (String) contents.getTransferData(DataFlavor.stringFlavor);\n} catch (Exception e) {\ntry {\nThread.sleep(20);\n} catch (InterruptedException e1) {\n}\ncontinue;\n}\nbreak;\n}\n// If we failed to read the clipboard text\nif (clipBoardTextAfter.equals(checkStr2)) {\ntheApp.updateOutput(""Could NOT check if sysClip update was successful"");\n} else { // We re-read the clipboard text, see if it changed from the original clipboard text \nif (clipBoardTextAfter.equals(checkStr1)) {\ntheApp.updateOutput(""Could NOT successfully set clipboard text"");\n} else {\ntheApp.updateOutput(""Set Clipboard Text:"" + toClipboard + ""\\n"");\n}\n}\n}\n}\n\n}\n\npublic class Automator extends Thread implements NativeMouseInputListener {\n\n// A ""locking"" object...\nprivate static final Object WAIT_LOCK = new Object();\n\nRobot rob = null;\nTheAppClass theApp = null;\nClipSetThread lastClipSet = null;\nboolean doit = false;\nboolean settingClip = false;\n\npublic void run() {\ntry // to make the Global hook\n{\nGlobalScreen.registerNativeHook();\n} catch (NativeHookException ex) {\ntheApp.updateOutput(""No Global Keyboard or Mouse Hook"");\nreturn;\n}\ntry // to create a robot (can simulate user input such as mouse and keyboard input)\n{\nrob = new Robot();\n} catch (AWTException e1) {\ntheApp.updateOutput(""The Robot could not be created"");\nreturn;\n}\n\n// This is wasteful...\n// while (true) {\n// }\n// Locks do not consume CPU cycles while in the wait state...\nsynchronized (WAIT_LOCK) {\ntry {\nWAIT_LOCK.wait();\n} catch (Exception exp) {\n}\n}\n}\n\npublic void dispose() {\n\n// Tell the thread it can terminate...\nsynchronized (WAIT_LOCK) {\nWAIT_LOCK.notify();\n}\n// This will STOP the current thread (which called this method)\n// while the lastClipSet finishes...\nif (lastClipSet != null && lastClipSet.isAlive()) {\nlastClipSet.join();\n}\n\n}\n\npublic void setClip(String arg) {\nClipSetThread set = new ClipSetThread(theApp, lastClipSet, arg);\nlastClipSet = set;\n// You MUST START the thread...\nset.start();\n}\n\n/*...*/\n}\n\nwhile(true)\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\n}\ncatch(Exception e)\n{\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\ncontinue;\n}\nbreak;\n}\n\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\n{\ntry \n{\nTransferable contents = sysClip.getContents(null);\nclipBoardTextBefore = (String)contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n}\ncatch(Exception e)\n{\nretries++;\ntry {Thread.sleep(20);} catch (InterruptedException e1) {}\n}\n}\n\npublic class Engine extends Thread {\n\nprivate Robot rob = null;\nprivate PasteThread lastClipSet = null;\n\npublic void setClip(String arg) {\nif (lastClipSet != null && lastClipSet.isAlive()) {\ntry {\nlastClipSet.join();\n} catch (InterruptedException ex) {\nex.printStackTrace();\n}\n}\nPasteThread set = new PasteThread(arg);\nlastClipSet = set;\nlastClipSet.start();\n}\n\npublic void pasteAtCursorLocation(String text) {\nSystem.out.println(""Paste "" + text);\nsetClip(text);\nrob.keyPress(KeyEvent.VK_CONTROL);\nrob.keyPress(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_V);\nrob.keyRelease(KeyEvent.VK_CONTROL);\n}\n\npublic Engine() throws AWTException {\nrob = new Robot();\nrob.setAutoDelay(250);\ntry {\nThread.sleep(5000);\n} catch (InterruptedException ex) {\n}\npasteAtCursorLocation(""This is a simple test, thanks for watching!"");\n}\n\npublic static void main(String[] args) {\ntry {\nnew Engine();\n} catch (AWTException ex) {\nLogger.getLogger(Engine.class.getName()).log(Level.SEVERE, null, ex);\n}\n\n}\n\npublic class PasteThread extends Thread {\n\nprivate String toPaste;\n\npublic PasteThread(String value) {\n\ntoPaste = value;\n\n}\n\n@Override\npublic void run() {\nClipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();\nSystem.out.println(""Current clipboard contents = "" + getClipboardContents(sysClip));\nsysClip.setContents(new StringSelection(toPaste), null);\nSystem.out.println(""New clipboard contents = "" + getClipboardContents(sysClip));\n}\n\npublic String getClipboardContents(Clipboard clipboard) {\nString value = null;\nboolean successful = false;\nint retries = 0;\nwhile (!successful && retries < 20) {\nTransferable contents = clipboard.getContents(null);\nif (contents.isDataFlavorSupported(DataFlavor.stringFlavor)) {\ntry {\nvalue = (String) contents.getTransferData(DataFlavor.stringFlavor);\nsuccessful = true;\n} catch (Exception exp) {\nretries++;\nexp.printStackTrace();\n}\n} else {\nretries++;\n}\n}\nSystem.out.println(successful + ""/"" + retries);\nreturn value;\n}\n}\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow to Pause and Resume a Thread in Java from another Thread\n----------Explanation----------\nSo in this particular case, perhaps change MyThread as follows:\n----------Code Sample----------\nclass MyThread extends Thread {\n\nprivate volatile boolean running = true; // Run unless told to pause\n\n...\n\n@Override\npublic void run()\n{\nfor(int i=0 ; ; i++)\n{\n// Only keep painting while ""running"" is true\n// This is a crude implementation of pausing the thread\nwhile (!running)\nyield;\n\narea.setText(i+"""");\n}\n\npublic void pauseThread() throws InterruptedException\n{\nrunning = false;\n}\n\npublic void resumeThread()\n{\nrunning = true;\n}\n\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nTurning an ExecutorService to daemon in Java\n----------Explanation----------\nYou can use ThreadFactory to set threads inside Executor to daemons. This will affect executor service in a way that it will also become daemon thread so it (and threads handled by it) will stop if there will be no other non-daemon thread. Here is simple example:\n----------Code Sample----------\nExecutorService exec = Executors.newFixedThreadPool(4,\nnew ThreadFactory() {\npublic Thread newThread(Runnable r) {\nThread t = Executors.defaultThreadFactory().newThread(r);\nt.setDaemon(true);\nreturn t;\n}\n});\n\nexec.execute(YourTaskNowWillBeDaemon);\n\nExecutorService exec = MoreExecutors.getExitingExecutorService(\n(ThreadPoolExecutor) Executors.newFixedThreadPool(4), \n100_000, TimeUnit.DAYS//period after which executor will be automatically closed\n//I assume that 100_000 days is enough to simulate infinity\n);\n//exec.execute(YourTask);\nexec.execute(() -> {\nfor (int i = 0; i < 3; i++) {\nSystem.out.println(""daemon"");\ntry {\nTimeUnit.SECONDS.sleep(1);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}\n});\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nProblem with synchronizing on String objects?\n----------Explanation----------\nWithout putting my brain fully into gear, from a quick scan of what you say it looks as though you need to intern() your Strings:\n----------Code Sample----------\nfinal String firstkey = ""Data-"" + email;\nfinal String key = firstkey.intern();\n\n// do not attempt double-check locking here. I mean it.\nsynchronized(StaticObject) {\ndata = StaticCache.get(key);\nwhile (data == IN_PROGRESS) {\n// another thread is getting the data\nStaticObject.wait();\ndata = StaticCache.get(key);\n}\nif (data == null) {\n// we must get the data\nStaticCache.put(key, IN_PROGRESS, TIME_MAX_VALUE);\n}\n}\nif (data == null) {\n// we must get the data\ntry {\ndata = server.DoSlowThing(key);\n} finally {\nsynchronized(StaticObject) {\n// WARNING: failure here is fatal, and must be allowed to terminate\n// the app or else waiters will be left forever. Choose a suitable\n// collection type in which replacing the value for a key is guaranteed.\nStaticCache.put(key, data, CURRENT_TIME);\nStaticObject.notifyAll();\n}\n}\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nPossible to catch the OS doing Context Switching on threads?\n----------Explanation----------\n\n----------Code Sample----------\npublic class Test {\npublic static long count = 0;\n\npublic static void main(String[] args) {\nfor (int run = 0; run < 5; ++run) {\nTest.count = 0;\n\nThread[] threads = new Thread[10];\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i] = new Thread(new Runnable() {\npublic void run() {\nfor (long i = 0; i < (10 * 1000 * 1000 * 1000); ++i) {\nTest.count += 1;\n}\n}\n});\n}\n\nfor (int i = 0; i < threads.length; ++i) {\nthreads[i].start();\n}\n\nfor (int i = 0; i < threads.length; ++i) {\ntry {\nthreads[i].join();\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n}\n\nSystem.out.println(Test.count);\n}\n}\n}\n\n1443685504\n1439908180\n1461384255\n1477413204\n1440892041\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nJavaFX periodic background task\n----------Explanation----------\nYou can use Timeline for what matter:\n----------Code Sample----------\nTimeline fiveSecondsWonder = new Timeline(new KeyFrame(Duration.seconds(5), new EventHandler() {\n\n@Override\npublic void handle(ActionEvent""""""]']","['In Java, a thread can close itself by gracefully terminating its execution. This is typically done by ensuring that the run method of the thread completes. One common approach is to use a flag variable that the thread periodically checks to determine whether it should continue running or terminate. This flag can be a volatile boolean variable, which ensures visibility of changes across threads. When the flag is set to false, the thread can perform any necessary cleanup operations and then exit the run method, thereby terminating itself. Another approach is to handle interruptions properly. The thread can periodically check its interrupted status using the Thread.interrupted() method and exit the run method if it has been interrupted. This allows the thread to respond to interruption requests and terminate gracefully. It is important to avoid using methods like System.exit() within a thread, as this will terminate the entire Java application, not just the individual thread.']","['[\'[\\\'To address the question of how a thread should close itself in Java, we can use a flag to signal the thread to stop running. This is a common approach to gracefully shut down a thread. The thread periodically checks this flag and exits its run method when the flag is set. Below is an example demonstrating this approach.\\\\nimport java.util.concurrent.atomic.AtomicBoolean;\\\\nclass StoppableThread extends Thread {\\\\n    private final AtomicBoolean running = new AtomicBoolean(false);\\\\n\\\\n    public void startThread() {\\\\n        running.set(true);\\\\n        start();\\\\n    }\\\\n\\\\n    public void stopThread() {\\\\n        running.set(false);\\\\n    }\\\\n\\\\n    @Override\\\\n    public void run() {\\\\n        while (running.get()) {\\\\n            try {\\\\n                // Simulate some work with sleep\\\\n                System.out.println(""Thread is running..."");\\\\n                Thread.sleep(1000);\\\\n            } catch (InterruptedException e) {\\\\n                Thread.currentThread().interrupt();\\\\n                System.out.println(""Thread was interrupted"");\\\\n            }\\\\n        }\\\\n        System.out.println(""Thread is stopping..."");\\\\n    }\\\\n\\\\n    public static void main(String[] args) throws InterruptedException {\\\\n        StoppableThread thread = new StoppableThread();\\\\n        thread.startThread();\\\\n        Thread.sleep(5000); // Let the thread run for a while\\\\n        thread.stopThread();\\\\n    }\\\\n}\\\']\']']",0.1428571428571428,0.3333333333333333,0.1428571428571428,0.8514234875444839,0.1111111111111111,0.1666666666666666
net,Socket,Java sending and receiving file (byte[]) over sockets,['Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>\n<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.\nBuffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>\n<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.\n<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.\nServers with threadpools  or with threads handling more than one connection each  now become possible.\nIf only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.\nWith non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.\nA <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>\nSelectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.\npattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>\n<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>\nI don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>'],['Most common way to construct:\nServerSocket server = Ã‰;\nSocket s = server.accept();\nBased on 78 examples'],"['Take a look at the tutorial on Reading from and Writing to a Socket.\n\nTo write a byte array to a socket you would:\n\nbyte[] message = ...;\nSocket socket=new Socket(ipAddress, port);\nOutputStream socketOutputStream = socket.getOutputStream();\nsocketOutputStream.write(message);\nSimilarly, to read, you would use socket.getInputStream.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCreate ""Hello World"" WebSocket example\n----------Explanation----------\nCreate server Socket (System.Net.Sockets) bind it to specific port, and keep listening with asynchronous accepting of connections. Something like that:\n----------Code Sample----------\nSocket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);\nserverSocket.Bind(new IPEndPoint(IPAddress.Any, 8080));\nserverSocket.Listen(128);\nserverSocket.BeginAccept(null, 0, OnAccept, null);\nprivate void OnAccept(IAsyncResult result) {\ntry {\nSocket client = null;\nif (serverSocket != null && serverSocket.IsBound) {\nclient = serverSocket.EndAccept(result);\n}\nif (client != null) {\n/* Handshaking and managing ClientSocket */\n}\n} catch(SocketException exception) {\n\n} finally {\nif (serverSocket != null && serverSocket.IsBound) {\nserverSocket.BeginAccept(null, 0, OnAccept, null);\n}\n}\n}\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nstatic private string guid = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";\nprivate string AcceptKey(ref string key) {\nstring longKey = key + guid;\nSHA1 sha1 = SHA1CryptoServiceProvider.Create();\nbyte[] hashBytes = sha1.ComputeHash(System.Text.Encoding.ASCII.GetBytes(longKey));\nreturn Convert.ToBase64String(hashBytes);\n}\n\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nsocket.io / parameters on connection\n----------Explanation----------\n2) There is an easier and more reliable (because there is no risk to access an undefined property of handshaken object) way to get query parameter inside connection handler:\n----------Code Sample----------\nconsole.log(socket.handshake.query.param);\n\n$(document).ready(function() {\nvar socket = io.connect(\'\', {query: \'name=something\'});\n\n// [...]\n\nsocket.on(\'some_event_from_server\', function(data, cb) {});\n\n// [...]\n\n$(\'#someButton\').click(function() {\nsocket.emit(\'markers_add\', {some: \'data\'}); //send `markers_add` message to server within main namespace\n});\n\n$(\'#someOtherButton\').click(function() {\nsocket.emit(\'icon_sets_add\', {some: \'thing\'}, function(response) {\n//server may response to this request. see server side code below\n});\n});\n});\n\nio.on(\'connection\', function(socket) { //connection handler of main namespace\nsocket.on(\'markers_add\', function(data) { /* ... */ });\nsocket.on(\'icon_sets_add\', function(data, cb) {\n// do something\ncb({some: \'response\'});\n});\n\n// [...]\n\nsocket.emit(\'some_event_from_server\', {}); //server sends a message to a client\n\n//BTW, now it should be OK:\nconsole.log(socket.handshake.query.name);\n});\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nJava sending and receiving file (byte[]) over sockets\n----------Explanation----------\nServer\n----------Code Sample----------\npublic class Server {\npublic static void main(String[] args) throws IOException {\nServerSocket serverSocket = null;\n\ntry {\nserverSocket = new ServerSocket(4444);\n} catch (IOException ex) {\nSystem.out.println(""Can\'t setup server on this port number. "");\n}\n\nSocket socket = null;\nInputStream in = null;\nOutputStream out = null;\n\ntry {\nsocket = serverSocket.accept();\n} catch (IOException ex) {\nSystem.out.println(""Can\'t accept client connection. "");\n}\n\ntry {\nin = socket.getInputStream();\n} catch (IOException ex) {\nSystem.out.println(""Can\'t get socket input stream. "");\n}\n\ntry {\nout = new FileOutputStream(""M:\\\\test2.xml"");\n} catch (FileNotFoundException ex) {\nSystem.out.println(""File not found. "");\n}\n\nbyte[] bytes = new byte[16*1024];\n\nint count;\nwhile ((count = in.read(bytes)) > 0) {\nout.write(bytes, 0, count);\n}\n\nout.close();\nin.close();\nsocket.close();\nserverSocket.close();\n}\n}\n\npublic class Client {\npublic static void main(String[] args) throws IOException {\nSocket socket = null;\nString host = ""127.0.0.1"";\n\nsocket = new Socket(host, 4444);\n\nFile file = new File(""M:\\\\test.xml"");\n// Get the size of the file\nlong length = file.length();\nbyte[] bytes = new byte[16 * 1024];\nInputStream in = new FileInputStream(file);\nOutputStream out = socket.getOutputStream();\n\nint count;\nwhile ((count = in.read(bytes)) > 0) {\nout.write(bytes, 0, count);\n}\n\nout.close();\nin.close();\nsocket.close();\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nChrome & Safari revert to xhr-polling rather than websockets with socket.io\n----------Explanation----------\nHere\'s a sample code for the cross domain file which you can include in your code and see if that makes your server run with websockets.\n----------Code Sample----------\nvar net = require(""net"");\n\n// Node.js \n\nvar Policy = net.createServer(function(socket)\n{\nsocket.setEncoding(\'utf8\');\nsocket.on(\'connect\',function(){\nconsole.log(""Policy Request"");\nsocket.end("""");\n});\n});\n\nPolicy.listen(843);\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava RMI + SSL + Compression = IMPOSSIBLE!\n----------Explanation----------\nA Socket always is based by an object implementing SocketImpl . Thus, having a custom socket in fact means using a custom SocketImpl class. Here is an implementation based on a pair of streams (and a base socket, for closing purposes):\n----------Code Sample----------\n/**\n* A SocketImpl implementation which works on a pair\n* of streams.\n*\n* A instance of this class represents an already\n* connected socket, thus all the methods relating to\n* connecting, accepting and such are not implemented.\n*\n* The implemented methods are {@link #getInputStream},\n* {@link #getOutputStream}, {@link #available} and the\n* shutdown methods {@link #close}, {@link #shutdownInput},\n* {@link #shutdownOutput}.\n*/\nprivate static class WrappingSocketImpl extends SocketImpl {\nprivate InputStream inStream;\nprivate OutputStream outStream;\n\nprivate Socket base;\n\nWrappingSocketImpl(StreamPair pair, Socket base) {\nthis.inStream = pair.input;\nthis.outStream = pair.output;\nthis.base = base;\n}\n\nprotected InputStream getInputStream() {\nreturn inStream;\n}\n\nprotected OutputStream getOutputStream() {\nreturn outStream;\n}\n\nprotected int available() throws IOException {\nreturn inStream.available();\n}\n\nprotected void close() throws IOException {\nbase.close();\n}\n\nprotected void shutdownInput() throws IOException {\nbase.shutdownInput();\n// TODO: inStream.close() ?\n}\n\nprotected void shutdownOutput() throws IOException {\nbase.shutdownOutput();\n// TODO: outStream.close()?\n}\n\nprotected void create(boolean stream) {\nif(!stream) {\nthrow new IllegalArgumentException(""datagram socket not supported."");\n}\n}\n\npublic Object getOption(int optID) {\nSystem.err.println(""getOption("" + optID + "")"");\nreturn null;\n}\n\npublic void setOption(int optID, Object value) {\n// noop, as we don\'t have any options.\n}\n\n// unsupported operations\n\nprotected void connect(String host, int port) {\nSystem.err.println(""connect("" + host + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\n\nprotected void connect(InetAddress address, int port) {\nSystem.err.println(""connect("" + address + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void connect(SocketAddress addr, int timeout) {\nSystem.err.println(""connect("" + addr + "", "" + timeout + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void bind(InetAddress host, int port) {\nSystem.err.println(""bind("" + host + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void listen(int backlog) {\nSystem.err.println(""listen("" + backlog + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void accept(SocketImpl otherSide) {\nSystem.err.println(""accept("" + otherSide + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void sendUrgentData(int data) {\nSystem.err.println(""sendUrgentData()"");\nthrow new UnsupportedOperationException();\n}\n}\n\n/**\n* A simple holder class for a pair of streams.\n*/\npublic static class StreamPair {\npublic InputStream input;\npublic OutputStream output;\npublic StreamPair(InputStream in, OutputStream out) {\nthis.input = in; this.output = out;\n}\n}\n\n/**\n* A base class for RMI socket factories which do their\n* work by wrapping the streams of Sockets from another\n* Socket factory.\n*\n* Subclasses have to overwrite the {@link #wrap} method.\n*\n* Instances of this class can be used as both client and\n* server socket factories, or as only one of them.\n*/\npublic abstract class WrappingSocketFactory \nextends RMISocketFactory\nimplements Serializable\n{\n\n/**\n* The base client socket factory. This will be serialized.\n*/\nprivate RMIClientSocketFactory baseCFactory;\n\n/**\n* The base server socket factory. This will not be serialized,\n* since the server socket factory is used only on the server side.\n*/\nprivate transient RMIServerSocketFactory baseSFactory;\n\n/**\n* Wraps a pair of streams.\n* Subclasses must implement this method to do the actual\n* work.\n* @param input the input stream from the base socket.\n* @param output the output stream to the base socket.\n* @param server if true, we are constructing a socket in\n* {@link ServerSocket#accept}. If false, this is a pure\n* client socket.\n*/\nprotected abstract StreamPair wrap(InputStream input,\nOutputStream output,\nboolean server);\n\n/**\n* Creates a client socket and connects it to the given host/port pair.\n*\n* This retrieves a socket to the host/port from the base client\n* socket factory and then wraps a new socket (with a custom SocketImpl)\n* around it.\n* @param host the host we want to be connected with.\n* @param port the port we want to be connected with.\n* @return a new Socket connected to the host/port pair.\n* @throws IOException if something goes wrong.\n*/\npublic Socket createSocket(String host, int port)\nthrows IOException\n{\nSocket baseSocket = baseCFactory.createSocket(host, port);\n\nStreamPair streams = this.wrap(baseSocket.getInputStream(),\nbaseSocket.getOutputStream(),\nfalse);\n\nSocketImpl wrappingImpl = new WrappingSocketImpl(streams, baseSocket);\n\nreturn new Socket(wrappingImpl) {\npublic boolean isConnected() { return true; }\n};\n\n}\n\n/**\n* A server socket subclass which wraps our custom sockets around the\n* sockets retrieves by a base server socket.\n*\n* We only override enough methods to work. Basically, this is\n* a unbound server socket, which handles {@link #accept} specially.\n*/\nprivate class WrappingServerSocket extends ServerSocket {\nprivate ServerSocket base;\n\npublic WrappingServerSocket(ServerSocket b)\nthrows IOException\n{\nthis.base = b;\n}\n\n/**\n* returns the local port this ServerSocket is bound to.\n*/\npublic int getLocalPort() {\nreturn base.getLocalPort();\n}\n\n/**\n* accepts a connection from some remote host.\n* This will accept a socket from the base socket, and then\n* wrap a new custom socket around it.\n*/\npublic Socket accept() throws IOException {\n\nfinal Socket baseSocket = base.accept();\nStreamPair streams =\nWrappingSocketFactory.this.wrap(baseSocket.getInputStream(),\nbaseSocket.getOutputStream(),\ntrue);\n\nSocketImpl wrappingImpl =\nnew WrappingSocketImpl(streams, baseSocket);\n\n// For some reason, this seems to work only as a\n// anonymous direct subclass of Socket, not as a\n// external subclass. Strange.\nSocket result = new Socket(wrappingImpl) {\npublic boolean isConnected() { return true; }\npublic boolean isBound() { return true; }\npublic int getLocalPort() {\nreturn baseSocket.getLocalPort();\n}\npublic InetAddress getLocalAddress() {\nreturn baseSocket.getLocalAddress();\n}\n};\n\nreturn result;\n}\n}\n\n/**\n* Creates a server socket listening on the given port.\n*\n* This retrieves a ServerSocket listening on the given port\n* from the base server socket factory, and then creates a \n* custom server socket, which on {@link ServerSocket#accept accept}\n* wraps new Sockets (with a custom SocketImpl) around the sockets\n* from the base server socket.\n* @param host the host we want to be connected with.\n* @param port the port we want to be connected with.\n* @return a new Socket connected to the host/port pair.\n* @throws IOException if something goes wrong.\n*/\npublic ServerSocket createServerSocket(int port)\nthrows IOException\n{\nfinal ServerSocket baseSocket = getSSFac().createServerSocket(port);\nServerSocket ss = new WrappingServerSocket(baseSocket);\nreturn ss;\n}\n\n}\n\nprotected StreamPair wrap(InputStream in, OutputStream out, boolean server)\n{\nInputStream wrappedIn = in;\nOutputStream wrappedOut = new FilterOutputStream(out) {\npublic void write(int b) throws IOException {\nSystem.err.println(""write(.)"");\nsuper.write(b);\n}\npublic void write(byte[] b, int off, int len)\nthrows IOException {\nSystem.err.println(""write("" + len + "")"");\nsuper.out.write(b, off, len);\n}\npublic void flush() throws IOException {\nSystem.err.println(""flush()"");\nsuper.flush();\n}\n};\nreturn new StreamPair(wrappedIn, wrappedOut);\n}\n\n[example] write(14)\n[example] flush()\n[example] write(287)\n[example] flush()\n[example] flush()\n[example] flush()\n[example] write(1)\n[example] flush()\n[example] write(425)\n[example] flush()\n[example] flush()\n\n/**\n* An RMISocketFactory which enables compressed transmission.\n* We use {@link #CompressingInputStream} and {@link #CompressingOutputStream}\n* for this.\n*\n* As we extend WrappingSocketFactory, this can be used on top of another\n* {@link RMISocketFactory}.\n*/\npublic class CompressedRMISocketFactory\nextends WrappingSocketFactory\n{\n\nprivate static final long serialVersionUID = 1;\n\n//------------ Constructors -----------------\n\n/**\n* Creates a CompressedRMISocketFactory based on a pair of\n* socket factories.\n*\n* @param cFac the base socket factory used for creating client\n* sockets. This may be {@code null}, then we will use the\n* {@linkplain RMISocketFactory#getDefault() default socket factory}\n* of client system where this object is finally used for\n* creating sockets.\n* If not null, it should be serializable.\n* @param sFac the base socket factory used for creating server\n* sockets. This may be {@code null}, then we will use the\n* {@linkplain RMISocketFactory#getDefault() default RMI Socket factory}.\n* This will not be serialized to the client.\n*/\npublic CompressedRMISocketFactory(RMIClientSocketFactory cFac,\nRMIServerSocketFactory sFac) {\nsuper(cFac, sFac);\n}\n\n// [snipped more constructors]\n\n//-------------- Implementation -------------\n\n/**\n* wraps a pair of streams into compressing/decompressing streams.\n*/\nprotected StreamPair wrap(InputStream in, OutputStream out,\nboolean server)\n{\nreturn new StreamPair(new DecompressingInputStream(in),\nnew CompressingOutputStream(out));\n}\n}\n\nCompressedRMISocketFactory fac =\nnew CompressedRMISocketFactory(new SslRMIClientSocketFactory(),\nnew SslRMIServerSocketFactory());\n\nRemote server =\nUnicastRemoteObject.exportObject(new EchoServerImpl(),\n0, fac, fac);\nSystem.err.println(""server: "" + server);\n\nRegistry registry =\nLocateRegistry.createRegistry(Registry.REGISTRY_PORT);\n\nregistry.bind(""echo"", server);\n\nRegistry registry =\nLocateRegistry.getRegistry(""localhost"",\nRegistry.REGISTRY_PORT);\n\nEchoServer es = (EchoServer)registry.lookup(""echo"");\nSystem.err.println(""es: "" + es);\nSystem.out.println(es.echo(""hallo""));\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nVariables by reference or by value? Java\n----------Explanation----------\nContinuing the int analogy:\n----------Code Sample----------\nint a;\nint b;\n\na = 5;\nb = a;\na = 6;\n\nSocket d;\nSocket s;\n\nd = /* ... create and connect a socket... */;\ns = d;\nd = null;\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nJava Generics enforcing compatible wildcards\n----------Explanation----------\nSeems that it\'s better to parameterize Socket and Wire with color:\n----------Code Sample----------\ninterface Socket {}\ninterface Wire {}\n\nclass RedSocket implements Socket {}\nclass GreenSocket implements Socket {}\nclass RedWire implements Wire {}\nclass GreenWire implements Wire {}\n\nnew Connection(); // ok\nnew Connection(); // ok\nnew Connection(); // error\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to send a list of files over a socket in Java\n----------Explanation----------\n\n----------Code Sample----------\nString directory = ...;\nString hostDomain = ...;\nint port = ...;\n\nFile[] files = new File(directory).listFiles();\n\nSocket socket = new Socket(InetAddress.getByName(hostDomain), port);\n\nBufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\nDataOutputStream dos = new DataOutputStream(bos);\n\ndos.writeInt(files.length);\n\nfor(File file : files)\n{\nlong length = file.length();\ndos.writeLong(length);\n\nString name = file.getName();\ndos.writeUTF(name);\n\nFileInputStream fis = new FileInputStream(file);\nBufferedInputStream bis = new BufferedInputStream(fis);\n\nint theByte = 0;\nwhile((theByte = bis.read()) != -1) bos.write(theByte);\n\nbis.close();\n}\n\ndos.close();\n\nString dirPath = ...;\n\nServerSocket serverSocket = ...;\nSocket socket = serverSocket.accept();\n\nBufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\nDataInputStream dis = new DataInputStream(bis);\n\nint filesCount = dis.readInt();\nFile[] files = new File[filesCount];\n\nfor(int i = 0; i < filesCount; i++)\n{\nlong fileLength = dis.readLong();\nString fileName = dis.readUTF();\n\nfiles[i] = new File(dirPath + ""/"" + fileName);\n\nFileOutputStream fos = new FileOutputStream(files[i]);\nBufferedOutputStream bos = new BufferedOutputStream(fos);\n\nfor(int j = 0; j < fileLength; j++) bos.write(bis.read());\n\nbos.close();\n}\n\ndis.close();\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to wait for a WebSocket\'s readyState to change\n----------Explanation----------\nThis is simple and it work perfectly... you can add condition about maximal time, or number of try to make it more robust...\n----------Code Sample----------\nfunction sendMessage(msg){\n// Wait until the state of the socket is not ready and send the message when it is...\nwaitForSocketConnection(ws, function(){\nconsole.log(""message sent!!!"");\nws.send(msg);\n});\n}\n\n// Make the function wait until the connection is made...\nfunction waitForSocketConnection(socket, callback){\nsetTimeout(\nfunction () {\nif (socket.readyState === 1) {\nconsole.log(""Connection is made"")\nif(callback != null){\ncallback();\n}\nreturn;\n\n} else {\nconsole.log(""wait for connection..."")\nwaitForSocketConnection(socket, callback);\n}\n\n}, 5); // wait 5 milisecond for the connection...\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nSocket IO reconnect?\n----------Explanation----------\nSo your initSocket , should be something like\n----------Code Sample----------\nfunction initSocket(__bool){ \nif(__bool == true){ \nif ( !socket ) { \nsocket = io.connect(\'http://xxx.xxx.xxx.xxx:8081\', {secure:false}); \nsocket.on(\'connect\', function(){console.log(\'connected\')}); \nsocket.on(\'disconnect\', function (){console.log(\'disconnected\')});\n} else {\nsocket.socket.connect(); // Yep, socket.socket ( 2 times )\n}\n}else{\nsocket.disconnect();\n// socket = null; <<< We don\'t need this anymore\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nSending a message to all clients (Client - Server communication)\n----------Explanation----------\nHere\'s the Server class:\n----------Code Sample----------\npublic class Server {\nprivate ArrayList clientList;\nprivate LinkedBlockingQueue messages;\nprivate ServerSocket serverSocket;\n\npublic Server(int port) {\nclientList = new ArrayList();\nmessages = new LinkedBlockingQueue();\nserverSocket = new ServerSocket(port);\n\nThread accept = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nSocket s = serverSocket.accept();\nclientList.add(new ConnectionToClient(s));\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\naccept.setDaemon(true);\naccept.start();\n\nThread messageHandling = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nObject message = messages.take();\n// Do some handling here...\nSystem.out.println(""Message Received: "" + message);\n}\ncatch(InterruptedException e){ }\n}\n}\n};\n\nmessageHandling.setDaemon(true);\nmessageHandling.start();\n}\n\nprivate class ConnectionToClient {\nObjectInputStream in;\nObjectOutputStream out;\nSocket socket;\n\nConnectionToClient(Socket socket) throws IOException {\nthis.socket = socket;\nin = new ObjectInputStream(socket.getInputStream());\nout = new ObjectOutputStream(socket.getOutputStream());\n\nThread read = new Thread(){\npublic void run(){\nwhile(true){\ntry{\nObject obj = in.readObject();\nmessages.put(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\nread.setDaemon(true); // terminate when main ends\nread.start();\n}\n\npublic void write(Object obj) {\ntry{\nout.writeObject(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n\npublic void sendToOne(int index, Object message)throws IndexOutOfBoundsException {\nclientList.get(index).write(message);\n}\n\npublic void sendToAll(Object message){\nfor(ConnectionToClient client : clientList)\nclient.write(message);\n}\n\n}\n\npublic class Client {\nprivate ConnectionToServer server;\nprivate LinkedBlockingQueue messages;\nprivate Socket socket;\n\npublic Client(String IPAddress, int port) throws IOException{\nsocket = new Socket(IPAddress, port);\nmessages = new LinkedBlokingQueue();\nserver = new ConnecionToServer(socket);\n\nThread messageHandling = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nObject message = messages.take();\n// Do some handling here...\nSystem.out.println(""Message Received: "" + message);\n}\ncatch(InterruptedException e){ }\n}\n}\n};\n\nmessageHandling.setDaemon(true);\nmessageHandling.start();\n}\n\nprivate class ConnectionToServer {\nObjectInputStream in;\nObjectOutputStream out;\nSocket socket;\n\nConnectionToServer(Socket socket) throws IOException {\nthis.socket = socket;\nin = new ObjectInputStream(socket.getInputStream());\nout = new ObjectOutputStream(socket.getOutputStream());\n\nThread read = new Thread(){\npublic void run(){\nwhile(true){\ntry{\nObject obj = in.readObject();\nmessages.put(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\nread.setDaemon(true);\nread.start();\n}\n\nprivate void write(Object obj) {\ntry{\nout.writeObject(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n\n\n}\n\npublic void send(Object obj) {\nserver.write(obj);\n}\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nsocket programming multiple client to one server\n----------Explanation----------\nFor every client you need to start separate thread. Example:\n----------Code Sample----------\npublic class EchoThread extends Thread {\nprotected Socket socket;\n\npublic EchoThread(Socket clientSocket) {\nthis.socket = clientSocket;\n}\n\npublic void run() {\nInputStream inp = null;\nBufferedReader brinp = null;\nDataOutputStream out = null;\ntry {\ninp = socket.getInputStream();\nbrinp = new BufferedReader(new InputStreamReader(inp));\nout = new DataOutputStream(socket.getOutputStream());\n} catch (IOException e) {\nreturn;\n}\nString line;\nwhile (true) {\ntry {\nline = brinp.readLine();\nif ((line == null) || line.equalsIgnoreCase(""QUIT"")) {\nsocket.close();\nreturn;\n} else {\nout.writeBytes(line + ""\\n\\r"");\nout.flush();\n}\n} catch (IOException e) {\ne.printStackTrace();\nreturn;\n}\n}\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nSending a message to a client via its socket.id\n----------Explanation----------\nAlso you should be avoiding sending messages like so, since that is part of Socket.IO internally and may change:\n----------Code Sample----------\nio.sockets.socket(id).emit(\'hello\');\n\n// the clients hash stores the sockets\n// the users hash stores the username of the connected user and its socket.id\nio.sockets.on(\'connection\', function (socket) {\n// get the handshake and the session object\nvar hs = socket.handshake;\nusers[hs.session.username] = socket.id; // connected user with its socket.id\nclients[socket.id] = socket; // add the client data to the hash\n...\nsocket.on(\'disconnect\', function () {\ndelete clients[socket.id]; // remove the client from the array\ndelete users[hs.session.username]; // remove connected user & socket.id\n});\n}\n\n// we want at some point to send a message to user \'alex\'\nif (users[\'alex\']) {\n// we get the socket.id for the user alex\n// and with that we can sent him a message using his socket (stored in clients)\nclients[users[\'alex\']].emit(""Hello Alex, how\'ve you been"");\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nSocket.io emit from Express controllers\n----------Explanation----------\nYou can use a pattern based on standard JS closures. The main export in logs.js will not be the controller function itself, but a factory function that will accept all needed dependencies, and create the controller:\n----------Code Sample----------\nexports.create = function(socket) {\nreturn function(req, res) {\n// write body of api request to mongodb\nsocket.emit();\n}\n}\n\napp.route(\'/logs\').post(logs.create(socket));\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nBufferedWriter and socket in java, write has no effect\n----------Explanation----------\nYour code is correct. I tested it with a generic server that will echo whatever the client sends and it worked fine (with no changes). It could be that the server your using is faulty. One thing I noticed was that for my server I needed to append a new line character every time I wrote to the output stream, for it to actually send the data. I\'m willing to bet that\'s why your GUI isn\'t receiving anything. Here\'s the client thread class from my server:\n----------Code Sample----------\nclass ClientThread extends Thread {\n\nprivate Socket sock;\nprivate InputStream in;\nprivate OutputStream out;\n\nClientThread( Socket sock ) {\nthis.sock = sock;\ntry {\nthis.in = sock.getInputStream();\nthis.out = sock.getOutputStream();\n} catch ( IOException e ) {\ne.printStackTrace();\n}\n}\n\n//Echos whatever the client sends to it\npublic void run() {\nBufferedReader bufIn = new BufferedReader( new InputStreamReader( in ) );\nBufferedWriter bufOut = new BufferedWriter( new OutputStreamWriter( out ) );\nwhile ( true ) {\ntry {\nString msg = bufIn.readLine();\nSystem.out.println( ""Received: "" + msg );\nbufOut.write( msg );\nbufOut.newLine(); //HERE!!!!!!\nbufOut.flush();\n} catch ( IOException e ) {\ne.printStackTrace();\n}\n\n}\n}\n\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow do I access instantiated WebSockets in Jetty 9?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-java prettyprint-override"">@WebSocket\npublic class ChatSocket {\npublic Session session;\n\n@OnWebSocketConnect\npublic void onConnect(Session session) {\nthis.session = session;\nChatRoom.getInstance().join(this);\n}\n\n@OnWebSocketMessage\npublic void onText(String message) {\nChatRoom.getInstance().writeAllMembers(""Hello all"");\n}\n\n@OnWebSocketClose\npublic void onClose(int statusCode, String reason) {\nChatRoom.getInstance().part(this);\n}\n}\n\npublic class ChatRoom {\nprivate static final ChatRoom INSTANCE = new ChatRoom();\n\npublic static ChatRoom getInstance()\n{\nreturn INSTANCE;\n}\n\nprivate List members = new ArrayList<>();\n\npublic void join(ChatSocket socket) \n{\nmembers.add(socket);\n}\n\npublic void part(ChatSocket socket) \n{\nmembers.remove(socket);\n}\n\npublic void writeAllMembers(String message) \n{\nfor(ChatSocket member: members)\n{\nmember.session.getRemote().sendStringByFuture(message);\n}\n}\n\npublic void writeSpecificMember(String memberName, String message) \n{\nChatSocket member = findMemberByName(memberName);\nmember.session.getRemote().sendStringByFuture(message);\n}\n\npublic ChatSocket findMemberByName(String memberName) \n{\n// left as exercise to reader\n}\n}\n\nclass=""lang-java prettyprint-override"">ChatRoom.getInstance().writeSpecificMember(""alex"", ""Hello"");\n\n// or\n\nChatRoom.getInstance().writeAllMembers(""Hello all"");\n\nclass=""lang-java prettyprint-override"">@WebSocket\npublic class ChatSocket {\npublic ChatRoom chatroom;\n\npublic ChatSocket(ChatRoom chatroom)\n{\nthis.chatroom = chatroom;\n}\n\n@OnWebSocketConnect\npublic void onConnect(Session session) {\nchatroom.join(this);\n}\n\n@OnWebSocketMessage\npublic void onText(String message) {\nchatroom.writeAllMembers(message);\n}\n\n@OnWebSocketClose\npublic void onClose(int statusCode, String reason) {\nchatroom.part(this);\n}\n}\n\npublic class ChatCreator implements WebSocketCreator\n{\nprivate ChatRoom chatroom;\n\npublic ChatCreator(ChatRoom chatroom)\n{\nthis.chatroom = chatroom;\n}\n\npublic Object createWebSocket(UpgradeRequest request, \nUpgradeResponse response)\n{\n// We want to create the Chat Socket and associate\n// it with our chatroom implementation\nreturn new ChatSocket(chatroom);\n}\n}\n\npublic class ChatHandler extends WebSocketHandler\n{\nprivate ChatRoom chatroom = new ChatRoom();\n\n@Override\npublic void configure(WebSocketServletFactory factory)\n{\nfactory.setCreator(new ChatCreator(chatroom));\n}\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nJava: Multithreading & UDP Socket Programming\n----------Explanation----------\nThe (basic) model for the server is that the only thing it does is receive socket connections... the server relies on a handler to handle those connections and that\'s it. If you try to build that model it would look something like this:\n----------Code Sample----------\nclass Server{\nprivate final ServerSocket serverSocket;\nprivate final ExecutorService pool;\n\npublic Server(int port, int poolSize) throws IOException {\nserverSocket = new ServerSocket(port);\npool = Executors.newFixedThreadPool(poolSize);\n}\n\npublic void serve() {\ntry {\nwhile(true) {\npool.execute(new Handler(serverSocket.accept()));\n}\n} catch (IOException ex) {\npool.shutdown();\n}\n}\n}\n\nclass Handler implements Runnable {\nprivate final Socket socket;\nHandler(Socket socket) { this.socket = socket; }\npublic void run() {\n// receive the datagram packets\n}\n}\n\npublic void run()\n{\nwhile(true)\n{\n// receive UDP packets\n// process the UDP packets\n}\n}\n\n\npublic static void main(String[] args) throws IOException\n{\n// start your client\nnew Client().start();\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nAndroid Manifest - ""Has No Default Constructor"" With Activity/Runnable Class\n----------Explanation----------\nAndroid Activity classes must have a default constructor that takes no parameters. Your ChatConnect class has this constructor:\n----------Code Sample----------\npublic ChatConnect(Socket s){\nsocket = s;\n}\n\npublic ChatConnect(){\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nHow to send a message to a particular client with socket.io\n----------Explanation----------\nA pair of username and socket should be stored in an object like this:\n----------Code Sample----------\nvar users = {\n\'userA@example.com\': [socket object],\n\'userB@example.com\': [socket object],\n\'userC@example.com\': [socket object]\n}\n\n{\nto:[the other receiver\'s username as a string],\nfrom:[the person who sent the message as string],\nmessage:[the message to be sent as string]\n}\n\nusers[data.to].emit(\'receivedMessage\', data)\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nAndroid: continuous socket write\n----------Explanation--""""""]']","[""To send and receive files as byte arrays over sockets in Java, you need to establish a client-server architecture using Java's networking and I/O libraries. On the server side, you create a ServerSocket to listen for incoming connections. When a client connects, the server accepts the connection and uses InputStream and OutputStream to read from and write to the socket. The file to be sent is read into a byte array using FileInputStream, and this byte array is then sent over the OutputStream of the socket. On the client side, a Socket is created to connect to the server. The client uses InputStream to receive the byte array from the server and OutputStream to send any data back if needed. The received byte array can be written to a file using FileOutputStream. Proper exception handling and resource management (like closing streams and sockets) are crucial to ensure the robustness of the application. This approach allows for efficient file transfer over a network using Java's standard libraries.""]","['[\'[\\\'In this example, we will demonstrate how to send and receive a file (as a byte array) over sockets in Java. We will create two classes: `FileSender` and `FileReceiver`. The `FileSender` class will read a file from the disk, convert it to a byte array, and send it over a socket to the `FileReceiver` class, which will receive the byte array and write it back to a file on the disk.\\\\nimport java.io.*;\\\\nimport java.net.*;\\\\n// FileSender class\\\\npublic class FileSender {\\\\n    public static void main(String[] args) {\\\\n        String filePath = ""path/to/source/file"";\\\\n        String serverAddress = ""localhost"";\\\\n        int port = 12345;\\\\n\\\\n        try (Socket socket = new Socket(serverAddress, port);\\\\n             FileInputStream fileInputStream = new FileInputStream(filePath);\\\\n             BufferedInputStream bufferedInputStream = new BufferedInputStream(fileInputStream);\\\\n             OutputStream outputStream = socket.getOutputStream()) {\\\\n\\\\n            byte[] fileBytes = new byte[(int) new File(filePath).length()];\\\\n            bufferedInputStream.read(fileBytes, 0, fileBytes.length);\\\\n            outputStream.write(fileBytes, 0, fileBytes.length);\\\\n            outputStream.flush();\\\\n\\\\n            System.out.println(""File sent successfully."");\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\\n\\\\n// FileReceiver class\\\\npublic class FileReceiver {\\\\n    public static void main(String[] args) {\\\\n        int port = 12345;\\\\n        String outputFilePath = ""path/to/destination/file"";\\\\n\\\\n        try (ServerSocket serverSocket = new ServerSocket(port);\\\\n             Socket socket = serverSocket.accept();\\\\n             InputStream inputStream = socket.getInputStream();\\\\n             FileOutputStream fileOutputStream = new FileOutputStream(outputFilePath);\\\\n             BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(fileOutputStream)) {\\\\n\\\\n            byte[] buffer = new byte[4096];\\\\n            int bytesRead;\\\\n            while ((bytesRead = inputStream.read(buffer)) != -1) {\\\\n                bufferedOutputStream.write(buffer, 0, bytesRead);\\\\n            }\\\\n            bufferedOutputStream.flush();\\\\n\\\\n            System.out.println(""File received successfully."");\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0625,0.25,0.5714285714285714,0.0009199632014719,1.0,0.4285714285714285
net,Socket,Sending compressed JPG image over socket,['Therefore  you have to create a bunch of different threads if your server has a bunch of open <code>Socket</code>s.</p>\n<p>A <code>SocketChannel</code> is a non-blocking way to read from sockets  so that you can have one thread communicate with a bunch of open connections at once.\nBuffer</code>s are another feature of NIO that allows you to access the underlying data from reads and writes to avoid the overhead of copying data into new arrays.</p>\n<p>In a nutshell  up to Java 1.3  all I/O was of the blocking type.\n<p>The basic point of NIO  introduced in Java 1.4  was to make the functionality of traditional UNIX-style multiplexed non-blocking I/O available in Java.\nServers with threadpools  or with threads handling more than one connection each  now become possible.\nIf only part of a buffer can be written immediately  with blocking I/O your thread will simply block until the entirety can be written.\nWith non-blocking I/O  your thread gets a return value of how much was written  leaving it up to you to handle the left-over for the next round.\nA <code>Buffer</code> takes care of such mechanical details by explicitly implementing a producer/consumer pattern for filling and draining  it being understood that your threads and the JVM s kernel will <em>not</em>\nSelectors</code>  if one channel takes 1 seconds for processing  and there are 10 channels in queue  it means you have to wait 10 seconds before next polling which is untolerable.\npattern  the task is smaller  it s more like thread-per-task  and tasks could be read  write  biz process etc. for more detail  you can take a look at <strong>\n<p>If you are really fancy at one thread  the bottom-line is at least you shold have pooled I/O threads  because I/O operations is often oders of magnitude slower than instruction-processing cycles  you would not want the precious one thread being blocked by I/O  and this is exactly <strong>NodeJS</strong>\nI don t think so  NIO programming is complex  and multi-threads is not naturally evil  Keep in mind that modern operating systems and CPU s become better and better at multitasking  so the overheads of multithreading becomes smaller over time.</p>'],['Most common way to construct:\nServerSocket server = Ã‰;\nSocket s = server.accept();\nBased on 78 examples'],"['Actually the code looks ok. Here\'s a complete code, that works fine on my machine:\n\nimport java.awt.*;\nimport java.awt.image.BufferedImage;\nimport java.net.*;\n\nimport javax.imageio.ImageIO;\nimport javax.swing.*;\n\npublic class Server {\n  public static void main(String[] args) throws Exception {\n    BufferedImage screencapture = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));\n    try (ServerSocket serv = new ServerSocket(25000)) {\n      System.out.println(""waiting..."");\n      try (Socket socket = serv.accept()) {\n        System.out.println(""client connected"");\n        ImageIO.write(screencapture, ""jpg"", socket.getOutputStream());\n        System.out.println(""sent"");\n      }\n    }\n  }\n}\n\nclass Client {\n  public static void main(String[] args) throws Exception {\n    try(Socket socket = new Socket(""localhost"", 25000)){\n      BufferedImage image = ImageIO.read(socket.getInputStream());\n      JLabel label = new JLabel(new ImageIcon(image));\n      JFrame f = new JFrame(""vnc"");\n      f.getContentPane().add(label);\n      f.pack();\n      f.setVisible(true);\n    }\n  }\n}\nThough this will only work if you close the socket after sending the images. It will fail if you\'ll just try to send a few images over the same socket. See https://stackoverflow.com/a/6973863/211205.']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCreate ""Hello World"" WebSocket example\n----------Explanation----------\nCreate server Socket (System.Net.Sockets) bind it to specific port, and keep listening with asynchronous accepting of connections. Something like that:\n----------Code Sample----------\nSocket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.IP);\nserverSocket.Bind(new IPEndPoint(IPAddress.Any, 8080));\nserverSocket.Listen(128);\nserverSocket.BeginAccept(null, 0, OnAccept, null);\nprivate void OnAccept(IAsyncResult result) {\ntry {\nSocket client = null;\nif (serverSocket != null && serverSocket.IsBound) {\nclient = serverSocket.EndAccept(result);\n}\nif (client != null) {\n/* Handshaking and managing ClientSocket */\n}\n} catch(SocketException exception) {\n\n} finally {\nif (serverSocket != null && serverSocket.IsBound) {\nserverSocket.BeginAccept(null, 0, OnAccept, null);\n}\n}\n}\nGET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: 13\nstatic private string guid = ""258EAFA5-E914-47DA-95CA-C5AB0DC85B11"";\nprivate string AcceptKey(ref string key) {\nstring longKey = key + guid;\nSHA1 sha1 = SHA1CryptoServiceProvider.Create();\nbyte[] hashBytes = sha1.ComputeHash(System.Text.Encoding.ASCII.GetBytes(longKey));\nreturn Convert.ToBase64String(hashBytes);\n}\n\nHTTP/1.1 101 Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nsocket.io / parameters on connection\n----------Explanation----------\n2) There is an easier and more reliable (because there is no risk to access an undefined property of handshaken object) way to get query parameter inside connection handler:\n----------Code Sample----------\nconsole.log(socket.handshake.query.param);\n\n$(document).ready(function() {\nvar socket = io.connect(\'\', {query: \'name=something\'});\n\n// [...]\n\nsocket.on(\'some_event_from_server\', function(data, cb) {});\n\n// [...]\n\n$(\'#someButton\').click(function() {\nsocket.emit(\'markers_add\', {some: \'data\'}); //send `markers_add` message to server within main namespace\n});\n\n$(\'#someOtherButton\').click(function() {\nsocket.emit(\'icon_sets_add\', {some: \'thing\'}, function(response) {\n//server may response to this request. see server side code below\n});\n});\n});\n\nio.on(\'connection\', function(socket) { //connection handler of main namespace\nsocket.on(\'markers_add\', function(data) { /* ... */ });\nsocket.on(\'icon_sets_add\', function(data, cb) {\n// do something\ncb({some: \'response\'});\n});\n\n// [...]\n\nsocket.emit(\'some_event_from_server\', {}); //server sends a message to a client\n\n//BTW, now it should be OK:\nconsole.log(socket.handshake.query.name);\n});\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nJava sending and receiving file (byte[]) over sockets\n----------Explanation----------\nServer\n----------Code Sample----------\npublic class Server {\npublic static void main(String[] args) throws IOException {\nServerSocket serverSocket = null;\n\ntry {\nserverSocket = new ServerSocket(4444);\n} catch (IOException ex) {\nSystem.out.println(""Can\'t setup server on this port number. "");\n}\n\nSocket socket = null;\nInputStream in = null;\nOutputStream out = null;\n\ntry {\nsocket = serverSocket.accept();\n} catch (IOException ex) {\nSystem.out.println(""Can\'t accept client connection. "");\n}\n\ntry {\nin = socket.getInputStream();\n} catch (IOException ex) {\nSystem.out.println(""Can\'t get socket input stream. "");\n}\n\ntry {\nout = new FileOutputStream(""M:\\\\test2.xml"");\n} catch (FileNotFoundException ex) {\nSystem.out.println(""File not found. "");\n}\n\nbyte[] bytes = new byte[16*1024];\n\nint count;\nwhile ((count = in.read(bytes)) > 0) {\nout.write(bytes, 0, count);\n}\n\nout.close();\nin.close();\nsocket.close();\nserverSocket.close();\n}\n}\n\npublic class Client {\npublic static void main(String[] args) throws IOException {\nSocket socket = null;\nString host = ""127.0.0.1"";\n\nsocket = new Socket(host, 4444);\n\nFile file = new File(""M:\\\\test.xml"");\n// Get the size of the file\nlong length = file.length();\nbyte[] bytes = new byte[16 * 1024];\nInputStream in = new FileInputStream(file);\nOutputStream out = socket.getOutputStream();\n\nint count;\nwhile ((count = in.read(bytes)) > 0) {\nout.write(bytes, 0, count);\n}\n\nout.close();\nin.close();\nsocket.close();\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nChrome & Safari revert to xhr-polling rather than websockets with socket.io\n----------Explanation----------\nHere\'s a sample code for the cross domain file which you can include in your code and see if that makes your server run with websockets.\n----------Code Sample----------\nvar net = require(""net"");\n\n// Node.js \n\nvar Policy = net.createServer(function(socket)\n{\nsocket.setEncoding(\'utf8\');\nsocket.on(\'connect\',function(){\nconsole.log(""Policy Request"");\nsocket.end("""");\n});\n});\n\nPolicy.listen(843);\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava RMI + SSL + Compression = IMPOSSIBLE!\n----------Explanation----------\nA Socket always is based by an object implementing SocketImpl . Thus, having a custom socket in fact means using a custom SocketImpl class. Here is an implementation based on a pair of streams (and a base socket, for closing purposes):\n----------Code Sample----------\n/**\n* A SocketImpl implementation which works on a pair\n* of streams.\n*\n* A instance of this class represents an already\n* connected socket, thus all the methods relating to\n* connecting, accepting and such are not implemented.\n*\n* The implemented methods are {@link #getInputStream},\n* {@link #getOutputStream}, {@link #available} and the\n* shutdown methods {@link #close}, {@link #shutdownInput},\n* {@link #shutdownOutput}.\n*/\nprivate static class WrappingSocketImpl extends SocketImpl {\nprivate InputStream inStream;\nprivate OutputStream outStream;\n\nprivate Socket base;\n\nWrappingSocketImpl(StreamPair pair, Socket base) {\nthis.inStream = pair.input;\nthis.outStream = pair.output;\nthis.base = base;\n}\n\nprotected InputStream getInputStream() {\nreturn inStream;\n}\n\nprotected OutputStream getOutputStream() {\nreturn outStream;\n}\n\nprotected int available() throws IOException {\nreturn inStream.available();\n}\n\nprotected void close() throws IOException {\nbase.close();\n}\n\nprotected void shutdownInput() throws IOException {\nbase.shutdownInput();\n// TODO: inStream.close() ?\n}\n\nprotected void shutdownOutput() throws IOException {\nbase.shutdownOutput();\n// TODO: outStream.close()?\n}\n\nprotected void create(boolean stream) {\nif(!stream) {\nthrow new IllegalArgumentException(""datagram socket not supported."");\n}\n}\n\npublic Object getOption(int optID) {\nSystem.err.println(""getOption("" + optID + "")"");\nreturn null;\n}\n\npublic void setOption(int optID, Object value) {\n// noop, as we don\'t have any options.\n}\n\n// unsupported operations\n\nprotected void connect(String host, int port) {\nSystem.err.println(""connect("" + host + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\n\nprotected void connect(InetAddress address, int port) {\nSystem.err.println(""connect("" + address + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void connect(SocketAddress addr, int timeout) {\nSystem.err.println(""connect("" + addr + "", "" + timeout + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void bind(InetAddress host, int port) {\nSystem.err.println(""bind("" + host + "", "" + port + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void listen(int backlog) {\nSystem.err.println(""listen("" + backlog + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void accept(SocketImpl otherSide) {\nSystem.err.println(""accept("" + otherSide + "")"");\nthrow new UnsupportedOperationException();\n}\n\nprotected void sendUrgentData(int data) {\nSystem.err.println(""sendUrgentData()"");\nthrow new UnsupportedOperationException();\n}\n}\n\n/**\n* A simple holder class for a pair of streams.\n*/\npublic static class StreamPair {\npublic InputStream input;\npublic OutputStream output;\npublic StreamPair(InputStream in, OutputStream out) {\nthis.input = in; this.output = out;\n}\n}\n\n/**\n* A base class for RMI socket factories which do their\n* work by wrapping the streams of Sockets from another\n* Socket factory.\n*\n* Subclasses have to overwrite the {@link #wrap} method.\n*\n* Instances of this class can be used as both client and\n* server socket factories, or as only one of them.\n*/\npublic abstract class WrappingSocketFactory \nextends RMISocketFactory\nimplements Serializable\n{\n\n/**\n* The base client socket factory. This will be serialized.\n*/\nprivate RMIClientSocketFactory baseCFactory;\n\n/**\n* The base server socket factory. This will not be serialized,\n* since the server socket factory is used only on the server side.\n*/\nprivate transient RMIServerSocketFactory baseSFactory;\n\n/**\n* Wraps a pair of streams.\n* Subclasses must implement this method to do the actual\n* work.\n* @param input the input stream from the base socket.\n* @param output the output stream to the base socket.\n* @param server if true, we are constructing a socket in\n* {@link ServerSocket#accept}. If false, this is a pure\n* client socket.\n*/\nprotected abstract StreamPair wrap(InputStream input,\nOutputStream output,\nboolean server);\n\n/**\n* Creates a client socket and connects it to the given host/port pair.\n*\n* This retrieves a socket to the host/port from the base client\n* socket factory and then wraps a new socket (with a custom SocketImpl)\n* around it.\n* @param host the host we want to be connected with.\n* @param port the port we want to be connected with.\n* @return a new Socket connected to the host/port pair.\n* @throws IOException if something goes wrong.\n*/\npublic Socket createSocket(String host, int port)\nthrows IOException\n{\nSocket baseSocket = baseCFactory.createSocket(host, port);\n\nStreamPair streams = this.wrap(baseSocket.getInputStream(),\nbaseSocket.getOutputStream(),\nfalse);\n\nSocketImpl wrappingImpl = new WrappingSocketImpl(streams, baseSocket);\n\nreturn new Socket(wrappingImpl) {\npublic boolean isConnected() { return true; }\n};\n\n}\n\n/**\n* A server socket subclass which wraps our custom sockets around the\n* sockets retrieves by a base server socket.\n*\n* We only override enough methods to work. Basically, this is\n* a unbound server socket, which handles {@link #accept} specially.\n*/\nprivate class WrappingServerSocket extends ServerSocket {\nprivate ServerSocket base;\n\npublic WrappingServerSocket(ServerSocket b)\nthrows IOException\n{\nthis.base = b;\n}\n\n/**\n* returns the local port this ServerSocket is bound to.\n*/\npublic int getLocalPort() {\nreturn base.getLocalPort();\n}\n\n/**\n* accepts a connection from some remote host.\n* This will accept a socket from the base socket, and then\n* wrap a new custom socket around it.\n*/\npublic Socket accept() throws IOException {\n\nfinal Socket baseSocket = base.accept();\nStreamPair streams =\nWrappingSocketFactory.this.wrap(baseSocket.getInputStream(),\nbaseSocket.getOutputStream(),\ntrue);\n\nSocketImpl wrappingImpl =\nnew WrappingSocketImpl(streams, baseSocket);\n\n// For some reason, this seems to work only as a\n// anonymous direct subclass of Socket, not as a\n// external subclass. Strange.\nSocket result = new Socket(wrappingImpl) {\npublic boolean isConnected() { return true; }\npublic boolean isBound() { return true; }\npublic int getLocalPort() {\nreturn baseSocket.getLocalPort();\n}\npublic InetAddress getLocalAddress() {\nreturn baseSocket.getLocalAddress();\n}\n};\n\nreturn result;\n}\n}\n\n/**\n* Creates a server socket listening on the given port.\n*\n* This retrieves a ServerSocket listening on the given port\n* from the base server socket factory, and then creates a \n* custom server socket, which on {@link ServerSocket#accept accept}\n* wraps new Sockets (with a custom SocketImpl) around the sockets\n* from the base server socket.\n* @param host the host we want to be connected with.\n* @param port the port we want to be connected with.\n* @return a new Socket connected to the host/port pair.\n* @throws IOException if something goes wrong.\n*/\npublic ServerSocket createServerSocket(int port)\nthrows IOException\n{\nfinal ServerSocket baseSocket = getSSFac().createServerSocket(port);\nServerSocket ss = new WrappingServerSocket(baseSocket);\nreturn ss;\n}\n\n}\n\nprotected StreamPair wrap(InputStream in, OutputStream out, boolean server)\n{\nInputStream wrappedIn = in;\nOutputStream wrappedOut = new FilterOutputStream(out) {\npublic void write(int b) throws IOException {\nSystem.err.println(""write(.)"");\nsuper.write(b);\n}\npublic void write(byte[] b, int off, int len)\nthrows IOException {\nSystem.err.println(""write("" + len + "")"");\nsuper.out.write(b, off, len);\n}\npublic void flush() throws IOException {\nSystem.err.println(""flush()"");\nsuper.flush();\n}\n};\nreturn new StreamPair(wrappedIn, wrappedOut);\n}\n\n[example] write(14)\n[example] flush()\n[example] write(287)\n[example] flush()\n[example] flush()\n[example] flush()\n[example] write(1)\n[example] flush()\n[example] write(425)\n[example] flush()\n[example] flush()\n\n/**\n* An RMISocketFactory which enables compressed transmission.\n* We use {@link #CompressingInputStream} and {@link #CompressingOutputStream}\n* for this.\n*\n* As we extend WrappingSocketFactory, this can be used on top of another\n* {@link RMISocketFactory}.\n*/\npublic class CompressedRMISocketFactory\nextends WrappingSocketFactory\n{\n\nprivate static final long serialVersionUID = 1;\n\n//------------ Constructors -----------------\n\n/**\n* Creates a CompressedRMISocketFactory based on a pair of\n* socket factories.\n*\n* @param cFac the base socket factory used for creating client\n* sockets. This may be {@code null}, then we will use the\n* {@linkplain RMISocketFactory#getDefault() default socket factory}\n* of client system where this object is finally used for\n* creating sockets.\n* If not null, it should be serializable.\n* @param sFac the base socket factory used for creating server\n* sockets. This may be {@code null}, then we will use the\n* {@linkplain RMISocketFactory#getDefault() default RMI Socket factory}.\n* This will not be serialized to the client.\n*/\npublic CompressedRMISocketFactory(RMIClientSocketFactory cFac,\nRMIServerSocketFactory sFac) {\nsuper(cFac, sFac);\n}\n\n// [snipped more constructors]\n\n//-------------- Implementation -------------\n\n/**\n* wraps a pair of streams into compressing/decompressing streams.\n*/\nprotected StreamPair wrap(InputStream in, OutputStream out,\nboolean server)\n{\nreturn new StreamPair(new DecompressingInputStream(in),\nnew CompressingOutputStream(out));\n}\n}\n\nCompressedRMISocketFactory fac =\nnew CompressedRMISocketFactory(new SslRMIClientSocketFactory(),\nnew SslRMIServerSocketFactory());\n\nRemote server =\nUnicastRemoteObject.exportObject(new EchoServerImpl(),\n0, fac, fac);\nSystem.err.println(""server: "" + server);\n\nRegistry registry =\nLocateRegistry.createRegistry(Registry.REGISTRY_PORT);\n\nregistry.bind(""echo"", server);\n\nRegistry registry =\nLocateRegistry.getRegistry(""localhost"",\nRegistry.REGISTRY_PORT);\n\nEchoServer es = (EchoServer)registry.lookup(""echo"");\nSystem.err.println(""es: "" + es);\nSystem.out.println(es.echo(""hallo""));\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nVariables by reference or by value? Java\n----------Explanation----------\nContinuing the int analogy:\n----------Code Sample----------\nint a;\nint b;\n\na = 5;\nb = a;\na = 6;\n\nSocket d;\nSocket s;\n\nd = /* ... create and connect a socket... */;\ns = d;\nd = null;\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nJava Generics enforcing compatible wildcards\n----------Explanation----------\nSeems that it\'s better to parameterize Socket and Wire with color:\n----------Code Sample----------\ninterface Socket {}\ninterface Wire {}\n\nclass RedSocket implements Socket {}\nclass GreenSocket implements Socket {}\nclass RedWire implements Wire {}\nclass GreenWire implements Wire {}\n\nnew Connection(); // ok\nnew Connection(); // ok\nnew Connection(); // error\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to send a list of files over a socket in Java\n----------Explanation----------\n\n----------Code Sample----------\nString directory = ...;\nString hostDomain = ...;\nint port = ...;\n\nFile[] files = new File(directory).listFiles();\n\nSocket socket = new Socket(InetAddress.getByName(hostDomain), port);\n\nBufferedOutputStream bos = new BufferedOutputStream(socket.getOutputStream());\nDataOutputStream dos = new DataOutputStream(bos);\n\ndos.writeInt(files.length);\n\nfor(File file : files)\n{\nlong length = file.length();\ndos.writeLong(length);\n\nString name = file.getName();\ndos.writeUTF(name);\n\nFileInputStream fis = new FileInputStream(file);\nBufferedInputStream bis = new BufferedInputStream(fis);\n\nint theByte = 0;\nwhile((theByte = bis.read()) != -1) bos.write(theByte);\n\nbis.close();\n}\n\ndos.close();\n\nString dirPath = ...;\n\nServerSocket serverSocket = ...;\nSocket socket = serverSocket.accept();\n\nBufferedInputStream bis = new BufferedInputStream(socket.getInputStream());\nDataInputStream dis = new DataInputStream(bis);\n\nint filesCount = dis.readInt();\nFile[] files = new File[filesCount];\n\nfor(int i = 0; i < filesCount; i++)\n{\nlong fileLength = dis.readLong();\nString fileName = dis.readUTF();\n\nfiles[i] = new File(dirPath + ""/"" + fileName);\n\nFileOutputStream fos = new FileOutputStream(files[i]);\nBufferedOutputStream bos = new BufferedOutputStream(fos);\n\nfor(int j = 0; j < fileLength; j++) bos.write(bis.read());\n\nbos.close();\n}\n\ndis.close();\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to wait for a WebSocket\'s readyState to change\n----------Explanation----------\nThis is simple and it work perfectly... you can add condition about maximal time, or number of try to make it more robust...\n----------Code Sample----------\nfunction sendMessage(msg){\n// Wait until the state of the socket is not ready and send the message when it is...\nwaitForSocketConnection(ws, function(){\nconsole.log(""message sent!!!"");\nws.send(msg);\n});\n}\n\n// Make the function wait until the connection is made...\nfunction waitForSocketConnection(socket, callback){\nsetTimeout(\nfunction () {\nif (socket.readyState === 1) {\nconsole.log(""Connection is made"")\nif(callback != null){\ncallback();\n}\nreturn;\n\n} else {\nconsole.log(""wait for connection..."")\nwaitForSocketConnection(socket, callback);\n}\n\n}, 5); // wait 5 milisecond for the connection...\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nSocket IO reconnect?\n----------Explanation----------\nSo your initSocket , should be something like\n----------Code Sample----------\nfunction initSocket(__bool){ \nif(__bool == true){ \nif ( !socket ) { \nsocket = io.connect(\'http://xxx.xxx.xxx.xxx:8081\', {secure:false}); \nsocket.on(\'connect\', function(){console.log(\'connected\')}); \nsocket.on(\'disconnect\', function (){console.log(\'disconnected\')});\n} else {\nsocket.socket.connect(); // Yep, socket.socket ( 2 times )\n}\n}else{\nsocket.disconnect();\n// socket = null; <<< We don\'t need this anymore\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nSending a message to all clients (Client - Server communication)\n----------Explanation----------\nHere\'s the Server class:\n----------Code Sample----------\npublic class Server {\nprivate ArrayList clientList;\nprivate LinkedBlockingQueue messages;\nprivate ServerSocket serverSocket;\n\npublic Server(int port) {\nclientList = new ArrayList();\nmessages = new LinkedBlockingQueue();\nserverSocket = new ServerSocket(port);\n\nThread accept = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nSocket s = serverSocket.accept();\nclientList.add(new ConnectionToClient(s));\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\naccept.setDaemon(true);\naccept.start();\n\nThread messageHandling = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nObject message = messages.take();\n// Do some handling here...\nSystem.out.println(""Message Received: "" + message);\n}\ncatch(InterruptedException e){ }\n}\n}\n};\n\nmessageHandling.setDaemon(true);\nmessageHandling.start();\n}\n\nprivate class ConnectionToClient {\nObjectInputStream in;\nObjectOutputStream out;\nSocket socket;\n\nConnectionToClient(Socket socket) throws IOException {\nthis.socket = socket;\nin = new ObjectInputStream(socket.getInputStream());\nout = new ObjectOutputStream(socket.getOutputStream());\n\nThread read = new Thread(){\npublic void run(){\nwhile(true){\ntry{\nObject obj = in.readObject();\nmessages.put(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\nread.setDaemon(true); // terminate when main ends\nread.start();\n}\n\npublic void write(Object obj) {\ntry{\nout.writeObject(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n\npublic void sendToOne(int index, Object message)throws IndexOutOfBoundsException {\nclientList.get(index).write(message);\n}\n\npublic void sendToAll(Object message){\nfor(ConnectionToClient client : clientList)\nclient.write(message);\n}\n\n}\n\npublic class Client {\nprivate ConnectionToServer server;\nprivate LinkedBlockingQueue messages;\nprivate Socket socket;\n\npublic Client(String IPAddress, int port) throws IOException{\nsocket = new Socket(IPAddress, port);\nmessages = new LinkedBlokingQueue();\nserver = new ConnecionToServer(socket);\n\nThread messageHandling = new Thread() {\npublic void run(){\nwhile(true){\ntry{\nObject message = messages.take();\n// Do some handling here...\nSystem.out.println(""Message Received: "" + message);\n}\ncatch(InterruptedException e){ }\n}\n}\n};\n\nmessageHandling.setDaemon(true);\nmessageHandling.start();\n}\n\nprivate class ConnectionToServer {\nObjectInputStream in;\nObjectOutputStream out;\nSocket socket;\n\nConnectionToServer(Socket socket) throws IOException {\nthis.socket = socket;\nin = new ObjectInputStream(socket.getInputStream());\nout = new ObjectOutputStream(socket.getOutputStream());\n\nThread read = new Thread(){\npublic void run(){\nwhile(true){\ntry{\nObject obj = in.readObject();\nmessages.put(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n}\n};\n\nread.setDaemon(true);\nread.start();\n}\n\nprivate void write(Object obj) {\ntry{\nout.writeObject(obj);\n}\ncatch(IOException e){ e.printStackTrace(); }\n}\n\n\n}\n\npublic void send(Object obj) {\nserver.write(obj);\n}\n}\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nsocket programming multiple client to one server\n----------Explanation----------\nFor every client you need to start separate thread. Example:\n----------Code Sample----------\npublic class EchoThread extends Thread {\nprotected Socket socket;\n\npublic EchoThread(Socket clientSocket) {\nthis.socket = clientSocket;\n}\n\npublic void run() {\nInputStream inp = null;\nBufferedReader brinp = null;\nDataOutputStream out = null;\ntry {\ninp = socket.getInputStream();\nbrinp = new BufferedReader(new InputStreamReader(inp));\nout = new DataOutputStream(socket.getOutputStream());\n} catch (IOException e) {\nreturn;\n}\nString line;\nwhile (true) {\ntry {\nline = brinp.readLine();\nif ((line == null) || line.equalsIgnoreCase(""QUIT"")) {\nsocket.close();\nreturn;\n} else {\nout.writeBytes(line + ""\\n\\r"");\nout.flush();\n}\n} catch (IOException e) {\ne.printStackTrace();\nreturn;\n}\n}\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\nSending a message to a client via its socket.id\n----------Explanation----------\nAlso you should be avoiding sending messages like so, since that is part of Socket.IO internally and may change:\n----------Code Sample----------\nio.sockets.socket(id).emit(\'hello\');\n\n// the clients hash stores the sockets\n// the users hash stores the username of the connected user and its socket.id\nio.sockets.on(\'connection\', function (socket) {\n// get the handshake and the session object\nvar hs = socket.handshake;\nusers[hs.session.username] = socket.id; // connected user with its socket.id\nclients[socket.id] = socket; // add the client data to the hash\n...\nsocket.on(\'disconnect\', function () {\ndelete clients[socket.id]; // remove the client from the array\ndelete users[hs.session.username]; // remove connected user & socket.id\n});\n}\n\n// we want at some point to send a message to user \'alex\'\nif (users[\'alex\']) {\n// we get the socket.id for the user alex\n// and with that we can sent him a message using his socket (stored in clients)\nclients[users[\'alex\']].emit(""Hello Alex, how\'ve you been"");\n}\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nSocket.io emit from Express controllers\n----------Explanation----------\nYou can use a pattern based on standard JS closures. The main export in logs.js will not be the controller function itself, but a factory function that will accept all needed dependencies, and create the controller:\n----------Code Sample----------\nexports.create = function(socket) {\nreturn function(req, res) {\n// write body of api request to mongodb\nsocket.emit();\n}\n}\n\napp.route(\'/logs\').post(logs.create(socket));\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nBufferedWriter and socket in java, write has no effect\n----------Explanation----------\nYour code is correct. I tested it with a generic server that will echo whatever the client sends and it worked fine (with no changes). It could be that the server your using is faulty. One thing I noticed was that for my server I needed to append a new line character every time I wrote to the output stream, for it to actually send the data. I\'m willing to bet that\'s why your GUI isn\'t receiving anything. Here\'s the client thread class from my server:\n----------Code Sample----------\nclass ClientThread extends Thread {\n\nprivate Socket sock;\nprivate InputStream in;\nprivate OutputStream out;\n\nClientThread( Socket sock ) {\nthis.sock = sock;\ntry {\nthis.in = sock.getInputStream();\nthis.out = sock.getOutputStream();\n} catch ( IOException e ) {\ne.printStackTrace();\n}\n}\n\n//Echos whatever the client sends to it\npublic void run() {\nBufferedReader bufIn = new BufferedReader( new InputStreamReader( in ) );\nBufferedWriter bufOut = new BufferedWriter( new OutputStreamWriter( out ) );\nwhile ( true ) {\ntry {\nString msg = bufIn.readLine();\nSystem.out.println( ""Received: "" + msg );\nbufOut.write( msg );\nbufOut.newLine(); //HERE!!!!!!\nbufOut.flush();\n} catch ( IOException e ) {\ne.printStackTrace();\n}\n\n}\n}\n\n}\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nHow do I access instantiated WebSockets in Jetty 9?\n----------Explanation----------\n\n----------Code Sample----------\nclass=""lang-java prettyprint-override"">@WebSocket\npublic class ChatSocket {\npublic Session session;\n\n@OnWebSocketConnect\npublic void onConnect(Session session) {\nthis.session = session;\nChatRoom.getInstance().join(this);\n}\n\n@OnWebSocketMessage\npublic void onText(String message) {\nChatRoom.getInstance().writeAllMembers(""Hello all"");\n}\n\n@OnWebSocketClose\npublic void onClose(int statusCode, String reason) {\nChatRoom.getInstance().part(this);\n}\n}\n\npublic class ChatRoom {\nprivate static final ChatRoom INSTANCE = new ChatRoom();\n\npublic static ChatRoom getInstance()\n{\nreturn INSTANCE;\n}\n\nprivate List members = new ArrayList<>();\n\npublic void join(ChatSocket socket) \n{\nmembers.add(socket);\n}\n\npublic void part(ChatSocket socket) \n{\nmembers.remove(socket);\n}\n\npublic void writeAllMembers(String message) \n{\nfor(ChatSocket member: members)\n{\nmember.session.getRemote().sendStringByFuture(message);\n}\n}\n\npublic void writeSpecificMember(String memberName, String message) \n{\nChatSocket member = findMemberByName(memberName);\nmember.session.getRemote().sendStringByFuture(message);\n}\n\npublic ChatSocket findMemberByName(String memberName) \n{\n// left as exercise to reader\n}\n}\n\nclass=""lang-java prettyprint-override"">ChatRoom.getInstance().writeSpecificMember(""alex"", ""Hello"");\n\n// or\n\nChatRoom.getInstance().writeAllMembers(""Hello all"");\n\nclass=""lang-java prettyprint-override"">@WebSocket\npublic class ChatSocket {\npublic ChatRoom chatroom;\n\npublic ChatSocket(ChatRoom chatroom)\n{\nthis.chatroom = chatroom;\n}\n\n@OnWebSocketConnect\npublic void onConnect(Session session) {\nchatroom.join(this);\n}\n\n@OnWebSocketMessage\npublic void onText(String message) {\nchatroom.writeAllMembers(message);\n}\n\n@OnWebSocketClose\npublic void onClose(int statusCode, String reason) {\nchatroom.part(this);\n}\n}\n\npublic class ChatCreator implements WebSocketCreator\n{\nprivate ChatRoom chatroom;\n\npublic ChatCreator(ChatRoom chatroom)\n{\nthis.chatroom = chatroom;\n}\n\npublic Object createWebSocket(UpgradeRequest request, \nUpgradeResponse response)\n{\n// We want to create the Chat Socket and associate\n// it with our chatroom implementation\nreturn new ChatSocket(chatroom);\n}\n}\n\npublic class ChatHandler extends WebSocketHandler\n{\nprivate ChatRoom chatroom = new ChatRoom();\n\n@Override\npublic void configure(WebSocketServletFactory factory)\n{\nfactory.setCreator(new ChatCreator(chatroom));\n}\n}\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nJava: Multithreading & UDP Socket Programming\n----------Explanation----------\nThe (basic) model for the server is that the only thing it does is receive socket connections... the server relies on a handler to handle those connections and that\'s it. If you try to build that model it would look something like this:\n----------Code Sample----------\nclass Server{\nprivate final ServerSocket serverSocket;\nprivate final ExecutorService pool;\n\npublic Server(int port, int poolSize) throws IOException {\nserverSocket = new ServerSocket(port);\npool = Executors.newFixedThreadPool(poolSize);\n}\n\npublic void serve() {\ntry {\nwhile(true) {\npool.execute(new Handler(serverSocket.accept()));\n}\n} catch (IOException ex) {\npool.shutdown();\n}\n}\n}\n\nclass Handler implements Runnable {\nprivate final Socket socket;\nHandler(Socket socket) { this.socket = socket; }\npublic void run() {\n// receive the datagram packets\n}\n}\n\npublic void run()\n{\nwhile(true)\n{\n// receive UDP packets\n// process the UDP packets\n}\n}\n\n\npublic static void main(String[] args) throws IOException\n{\n// start your client\nnew Client().start();\n}\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\nAndroid Manifest - ""Has No Default Constructor"" With Activity/Runnable Class\n----------Explanation----------\nAndroid Activity classes must have a default constructor that takes no parameters. Your ChatConnect class has this constructor:\n----------Code Sample----------\npublic ChatConnect(Socket s){\nsocket = s;\n}\n\npublic ChatConnect(){\n}\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nHow to send a message to a particular client with socket.io\n----------Explanation----------\nA pair of username and socket should be stored in an object like this:\n----------Code Sample----------\nvar users = {\n\'userA@example.com\': [socket object],\n\'userB@example.com\': [socket object],\n\'userC@example.com\': [socket object]\n}\n\n{\nto:[the other receiver\'s username as a string],\nfrom:[the person who sent the message as string],\nmessage:[the message to be sent as string]\n}\n\nusers[data.to].emit(\'receivedMessage\', data)\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nAndroid: continuous socket write\n----------Explanation--""""""]']","[""To send a compressed JPG image over a socket in Java, you need to follow several steps. First, read the JPG image file into a byte array. This can be done using Java's ImageIO class to read the image and then writing it to a ByteArrayOutputStream. Once you have the image data in a byte array, you can compress it using a suitable compression algorithm, although JPG is already a compressed format. Next, establish a socket connection to the server using Java's Socket class. Once the connection is established, obtain the OutputStream from the socket and write the byte array containing the image data to this stream. On the server side, you will need to read the incoming data from the InputStream of the socket and reconstruct the image from the byte array. Ensure proper handling of exceptions and resource management, such as closing streams and sockets, to avoid memory leaks and other issues. This process involves both client-side and server-side programming to handle the transmission and reception of the image data over the network.""]","['[\'[\\\'To send a compressed JPG image over a socket in Java, we need to follow these steps: 1. Read the image file from the disk. 2. Compress the image to JPG format if it is not already in that format. 3. Establish a socket connection to the server. 4. Send the compressed image data over the socket. 5. Close the socket connection. Below is a Java code example that demonstrates how to achieve this.\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.ByteArrayOutputStream;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport java.io.OutputStream;\\\\nimport java.net.Socket;\\\\nimport javax.imageio.ImageIO;\\\\npublic class ImageSender {\\\\n    public static void main(String[] args) {\\\\n        String imagePath = ""path/to/your/image.jpg"";\\\\n        String serverAddress = ""localhost"";\\\\n        int serverPort = 12345;\\\\n\\\\n        try {\\\\n            // Read the image from the file\\\\n            BufferedImage image = ImageIO.read(new File(imagePath));\\\\n\\\\n            // Compress the image to JPG format\\\\n            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\\\\n            ImageIO.write(image, ""jpg"", byteArrayOutputStream);\\\\n            byte[] imageData = byteArrayOutputStream.toByteArray();\\\\n\\\\n            // Establish a socket connection\\\\n            Socket socket = new Socket(serverAddress, serverPort);\\\\n            OutputStream outputStream = socket.getOutputStream();\\\\n\\\\n            // Send the image data over the socket\\\\n            outputStream.write(imageData);\\\\n            outputStream.flush();\\\\n\\\\n            // Close the socket connection\\\\n            outputStream.close();\\\\n            socket.close();\\\\n\\\\n            System.out.println(""Image sent successfully."");\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0625,0.25,0.024390243902439,0.0009199632014719,0.1111111111111111,0.125
sql,Connection,Authentication during connection to MongoDB server instance using Java,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']","[""Following on from Bob Kuhar's accepted answer, in Mongo3 the mechanism has change to SHA1 from challenge response as shown in the code snippet. I need to update the code snippet as follows:\n\n...\nimport com.mongodb.MongoClient;\nimport com.mongodb.MongoCredential;\nimport com.mongodb.ServerAddress;\n...\n\n// Manage the mongo db connection...\nList<ServerAddress> seeds = new ArrayList<ServerAddress>();\nseeds.add( new ServerAddress(configuration.getMongoHost(), configuration.getMongoPort() ));\nList<MongoCredential> credentials = new ArrayList<MongoCredential>();\ncredentials.add(\n    MongoCredential.createScramSha1Credential(\n        configuration.getMongoUser(),\n        configuration.getMongoDb(),\n        configuration.getMongoPassword().toCharArray()\n    )\n);\nMongoClient mongo = new MongoClient( seeds, credentials );""]",['nan'],"['To authenticate during a connection to a MongoDB server instance using Java, you need to use the MongoDB Java driver, which provides the necessary classes and methods for establishing a secure connection. The process involves specifying the credentials (username and password) and the database to authenticate against. You typically create a MongoClientSettings object where you configure the server address, credentials, and other connection options. The MongoCredential class is used to create the credentials, which are then added to the MongoClientSettings. Once the settings are configured, you create a MongoClient instance using these settings. This client instance is then used to interact with the MongoDB server, ensuring that all operations are authenticated. Proper error handling should be implemented to manage any authentication failures or connection issues.']","['[\'[\\\'To connect to a MongoDB server instance with authentication using Java, we will use the MongoDB Java driver. The following example demonstrates how to establish a connection to a MongoDB server with authentication credentials. We will use the `MongoClient` class from the MongoDB Java driver to create a connection. The credentials will be provided using the `MongoCredential` class. The connection settings will be configured using the `MongoClientSettings` class. Finally, we will connect to a specific database and collection to verify the connection.\\\\nimport com.mongodb.MongoClientSettings;\\\\nimport com.mongodb.MongoCredential;\\\\nimport com.mongodb.ServerAddress;\\\\nimport com.mongodb.client.MongoClient;\\\\nimport com.mongodb.client.MongoClients;\\\\nimport com.mongodb.client.MongoDatabase;\\\\nimport java.util.Collections;\\\\npublic class MongoDBAuthExample {\\\\n    public static void main(String[] args) {\\\\n        // MongoDB server address and port\\\\n        String host = ""localhost"";\\\\n        int port = 27017;\\\\n\\\\n        // Database and authentication credentials\\\\n        String databaseName = ""myDatabase"";\\\\n        String username = ""myUsername"";\\\\n        String password = ""myPassword"";\\\\n\\\\n        // Create MongoCredential object\\\\n        MongoCredential credential = MongoCredential.createCredential(username, databaseName, password.toCharArray());\\\\n\\\\n        // Create MongoClientSettings object\\\\n        MongoClientSettings settings = MongoClientSettings.builder()\\\\n                .applyToClusterSettings(builder -> builder.hosts(Collections.singletonList(new ServerAddress(host, port))))\\\\n                .credential(credential)\\\\n                .build();\\\\n\\\\n        // Create MongoClient object\\\\n        MongoClient mongoClient = MongoClients.create(settings);\\\\n\\\\n        // Connect to the database\\\\n        MongoDatabase database = mongoClient.getDatabase(databaseName);\\\\n\\\\n        // Print a success message\\\\n        System.out.println(""Connected to the database successfully"");\\\\n\\\\n        // Close the MongoClient\\\\n        mongoClient.close();\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.75,0.25,1.0,1.0,0.1
sql,Connection,How to get database url from java.sql.Connection?,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']",['I believe you can use the DatabaseMetaData object from the Connection and then get the URL. Try:\n\nDatabaseMetaData dmd = connection.getMetaData();\nString url = dmd.getURL();'],['nan'],"['To get the database URL from a java.sql.Connection object, you can use the getMetaData() method of the Connection class to retrieve a DatabaseMetaData object. The DatabaseMetaData object provides comprehensive information about the database, including the URL. By calling the getURL() method on the DatabaseMetaData object, you can obtain the URL of the database to which the Connection object is connected. This approach is useful for logging, debugging, or dynamically adjusting application behavior based on the database connection details.']","['[\'[\\\'To get the database URL from a java.sql.Connection object, you can use the getMetaData() method of the Connection class, which returns a DatabaseMetaData object. Then, you can call the getURL() method on the DatabaseMetaData object to retrieve the database URL. Below is an example of how to achieve this:\\\\nimport java.sql.Connection;\\\\nimport java.sql.DatabaseMetaData;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.SQLException;\\\\npublic class DatabaseURLExample {\\\\n    public static void main(String[] args) {\\\\n        Connection connection = null;\\\\n        try {\\\\n            // Establish the connection\\\\n            String url = ""jdbc:mysql://localhost:3306/mydatabase"";\\\\n            String user = ""root"";\\\\n            String password = ""password"";\\\\n            connection = DriverManager.getConnection(url, user, password);\\\\n\\\\n            // Get the DatabaseMetaData object\\\\n            DatabaseMetaData metaData = connection.getMetaData();\\\\n\\\\n            // Retrieve the database URL\\\\n            String dbUrl = metaData.getURL();\\\\n            System.out.println(""Database URL: "" + dbUrl);\\\\n        } catch (SQLException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close the connection\\\\n            if (connection != null) {\\\\n                try {\\\\n                    connection.close();\\\\n                } catch (SQLException e) {\\\\n                    e.printStackTrace();\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,1.0,1.0,1.0,0.25,0.3333333333333333
sql,Connection,How to get database schema name when using oracle jdbc connection?,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']","['You can get schema name using\n\nConnection conn = \nDriverManager.getConnection(""jdbc:oracle:thin:@server:port:SID"",prop);    \nDatabaseMetaData databaseMetaData = conn.getMetaData();\nSystem.out.println(""schema name >>>> ""+databaseMetaData.getUserName());']",['nan'],"['To get the database schema name when using an Oracle JDBC connection, you typically need to query the database metadata. The `DatabaseMetaData` interface in JDBC provides methods to retrieve various metadata about the database, including the schema name. When you establish a connection to the Oracle database using JDBC, you can call the `getMetaData` method on the `Connection` object to obtain a `DatabaseMetaData` instance. From this instance, you can use the `getUserName` method to retrieve the name of the current schema, which is usually the same as the username used to connect to the database. Additionally, you can use the `getSchemas` method to retrieve a list of all available schemas in the database. This approach ensures that you can dynamically obtain the schema name without hardcoding it, making your application more flexible and adaptable to different environments.']","['[\'[\\\'To get the database schema name when using an Oracle JDBC connection, you can query the `SYS_CONTEXT` function. This function can provide various pieces of information about the current session. Specifically, you can use the `USERENV` namespace with the `CURRENT_SCHEMA` parameter to get the current schema name. Below is a Java code example that demonstrates how to achieve this.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.PreparedStatement;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.SQLException;\\\\npublic class GetSchemaName {\\\\n    public static void main(String[] args) {\\\\n        String jdbcUrl = ""jdbc:oracle:thin:@//localhost:1521/yourDB"";\\\\n        String username = ""yourUsername"";\\\\n        String password = ""yourPassword"";\\\\n\\\\n        Connection connection = null;\\\\n        PreparedStatement preparedStatement = null;\\\\n        ResultSet resultSet = null;\\\\n\\\\n        try {\\\\n            // Establish the connection\\\\n            connection = DriverManager.getConnection(jdbcUrl, username, password);\\\\n\\\\n            // Query to get the current schema name\\\\n            String query = ""SELECT SYS_CONTEXT(\\\\\\\'USERENV\\\\\\\', \\\\\\\'CURRENT_SCHEMA\\\\\\\') AS schema_name FROM dual"";\\\\n            preparedStatement = connection.prepareStatement(query);\\\\n\\\\n            // Execute the query\\\\n            resultSet = preparedStatement.executeQuery();\\\\n\\\\n            // Process the result\\\\n            if (resultSet.next()) {\\\\n                String schemaName = resultSet.getString(""schema_name"");\\\\n                System.out.println(""Current Schema Name: "" + schemaName);\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close resources\\\\n            try {\\\\n                if (resultSet != null) resultSet.close();\\\\n                if (preparedStatement != null) preparedStatement.close();\\\\n                if (connection != null) connection.close();\\\\n            } catch (SQLException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,0.75,0.2,1.0,0.1666666666666666,0.2
sql,Connection,Connect Java to a MySQL database,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']","['To create database through Java code, you must use executeUpdate(sql) instead of executeQuery(sql); and connect to the mysql database as root:\n\nconnection =  DriverManager.getConnection(\n    ""jdbc:mysql://localhost:3306/mysql?zeroDateTimeBehavior=convertToNull"",\n    ""root"", ""root""\n);\nStatement st = connection.createStatement();\nst.executeUpdate(sql);\nst.close();']",['nan'],"['To connect Java to a MySQL database, you need to follow several steps. First, ensure you have the MySQL JDBC driver, which is a library that allows Java applications to interact with MySQL databases. You can download the driver from the MySQL website or include it as a dependency in your project using a build tool like Maven or Gradle. Next, load the JDBC driver in your Java application using the Class.forName() method. This step is necessary to register the driver with the DriverManager. After loading the driver, establish a connection to the database using the DriverManager.getConnection() method. This method requires a database URL, which typically includes the protocol (jdbc:mysql://), the hostname or IP address of the MySQL server, the port number (default is 3306), and the database name. Additionally, you need to provide the database username and password. Once the connection is established, you can create a Statement or PreparedStatement object to execute SQL queries and retrieve results. Finally, always close the database connection, statement, and result set objects to free up resources and avoid potential memory leaks. Proper exception handling using try-catch blocks is also essential to manage SQL exceptions that may occur during the process.']","['[\'[\\\'To connect Java to a MySQL database, you need to follow these steps: 1. Add the MySQL JDBC driver to your project. 2. Establish a connection to the database using the DriverManager class. 3. Execute SQL queries using the Statement or PreparedStatement class. 4. Process the results using the ResultSet class. Below is an example code that demonstrates how to connect to a MySQL database, execute a simple query, and process the results.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.SQLException;\\\\nimport java.sql.Statement;\\\\npublic class MySQLConnectionExample {\\\\n    public static void main(String[] args) {\\\\n        // Database URL\\\\n        String url = ""jdbc:mysql://localhost:3306/mydatabase"";\\\\n        // Database credentials\\\\n        String username = ""root"";\\\\n        String password = ""password"";\\\\n\\\\n        Connection connection = null;\\\\n        Statement statement = null;\\\\n        ResultSet resultSet = null;\\\\n\\\\n        try {\\\\n            // Establish the connection\\\\n            connection = DriverManager.getConnection(url, username, password);\\\\n            System.out.println(""Connection established successfully."");\\\\n\\\\n            // Create a statement\\\\n            statement = connection.createStatement();\\\\n\\\\n            // Execute a query\\\\n            String sql = ""SELECT id, name, email FROM users"";\\\\n            resultSet = statement.executeQuery(sql);\\\\n\\\\n            // Process the result set\\\\n            while (resultSet.next()) {\\\\n                int id = resultSet.getInt(""id"");\\\\n                String name = resultSet.getString(""name"");\\\\n                String email = resultSet.getString(""email"");\\\\n                System.out.println(""ID: "" + id + "", Name: "" + name + "", Email: "" + email);\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close resources\\\\n            try {\\\\n                if (resultSet != null) resultSet.close();\\\\n                if (statement != null) statement.close();\\\\n                if (connection != null) connection.close();\\\\n            } catch (SQLException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0666666666666666,1.0,0.5,1.0,1.0,0.1428571428571428
sql,Connection,Should you set up database connection properties in server.xml or context.xml,['could allow a malicious proxy to perform a MITM attack to get the plaintext password  so it is False by default and must be explicitly enabled.</p> <p>See <a href= https://mysql-net.github.io/MySqlConnector/connection-options/  rel= noreferrer >MySQL .NET Connection String Options</a></p> <p>you could also try adding <code>useSSL=false</code>\n<li><code>allowPublicKeyRetrieval=true</code> = to allow the client to automatically request the public key from the server.\n<p>The defaults for initiating a connection to a MySQL server were changed in the recent past  and (from a quick look through the most popular questions and answers on stack overflow) the new values are causing a lot of confusion.\nWhat is worse is that the standard advice seems to be to disable SSL altogether  which is a bit of a disaster in the making.</p>\n<p>Now  if your connection is genuinely not exposed to the network (localhost only) or you are working in a non-production environment with no real data  then sure: there s no harm in disabling SSL by including the option <code>useSSL=false</code>.</p>\n<p>For everyone else  the following set of options are required to get SSL working with certificate and host verification:</p>\n<p>As an added bonus  seeing as you re already playing with the options  it is simple to disable the weak SSL protocols too:</p>\n<p>First  make sure you have a valid certificate generated for the MySQL server host  and that the CA certificate is installed onto the client host (if you are using self-signed  then you ll likely need to do this manually  but for the popular public CAs it ll already be there).</p>\n<p>Next  make sure that the java keystore contains all the CA certificates.\n<p>Then finally  update the connection string to include all the required options  which on Debian/Ubuntu would be something a bit like (adapt as required):</p>'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']","['A connection pool operates by performing the work of creating connections ahead of time. In the case of a JDBC connection pool, a pool of Connection objects is created at the time the application server starts. The client can access the connection object in connection pool and return the object to pool once the db work is completed.\n\nContext.xml\n\n   <Resource name=""jdbc/TestDB"" auth=""Container"" type=""javax.sql.DataSource"" \nmaxActive=""100"" maxIdle=""30"" maxWait=""10000"" username=""root"" password="""" \ndriverClassName=""com.mysql.jdbc.Driver""               \nurl=""jdbc:mysql://localhost:3306/cdcol""/>\n//This should be added in the servers context,xml file. For example if you are using apache server then the context.xml will be found in C:\\apache-tomcat-6.0.26\\conf\\Context.xml\n\nweb.xml\n\n  <resource-ref>\n      <description>DB Connection</description>\n      <res-ref-name>jdbc/TestDB</res-ref-name>\n      <res-type>javax.sql.DataSource</res-type>\n      <res-auth>Container</res-auth>\n  </resource-ref>\n//This should be added in the web.xml of the local project. (Not in server\'s web.xml).\n\nContext ctx=new InitialContext();\n          Context envContext = (Context)ctx.lookup(""java:comp/env"");\n          DataSource ds=(DataSource)envContext.lookup(""jdbc/TestDB"");//TestDB is the Database Name\n          con=ds.getConnection();\n          stmt = con.createStatement();']",['nan'],"[""When deciding whether to set up database connection properties in server.xml or context.xml, it is important to understand the implications and use cases for each. The server.xml file is used for global configurations that apply to the entire server, making it suitable for settings that should be consistent across all web applications deployed on the server. This includes configurations like server ports, global resources, and shared database connections. On the other hand, context.xml is used for application-specific configurations. This file allows you to define settings that are unique to a particular web application, such as database connection properties that are only relevant to that application. Using context.xml provides greater flexibility and isolation, as changes to one application's configuration do not affect others. Therefore, if you need a database connection that is shared across multiple applications, server.xml is appropriate. If the connection is specific to a single application, context.xml is the better choice.""]","['[\'[\\\'To address the question of whether to set up database connection properties in server.xml or context.xml, we will provide an example of setting up a database connection in context.xml. This is generally the preferred method because it allows for more granular control over individual web applications. The context.xml file is used to define the context for a web application, including its database connection properties. Below is an example of how to set up a database connection in context.xml for a Java web application using Apache Tomcat.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.SQLException;\\\\npublic class DatabaseConnection {\\\\n    public static void main(String[] args) {\\\\n        Connection connection = null;\\\\n        try {\\\\n            // Load the JDBC driver\\\\n            Class.forName(""com.mysql.cj.jdbc.Driver"");\\\\n\\\\n            // Establish the connection\\\\n            connection = DriverManager.getConnection(\\\\n                ""jdbc:mysql://localhost:3306/mydatabase"", ""username"", ""password"");\\\\n\\\\n            if (connection != null) {\\\\n                System.out.println(""Connected to the database!"");\\\\n            } else {\\\\n                System.out.println(""Failed to make connection!"");\\\\n            }\\\\n        } catch (ClassNotFoundException e) {\\\\n            System.out.println(""JDBC Driver not found."");\\\\n            e.printStackTrace();\\\\n        } catch (SQLException e) {\\\\n            System.out.println(""Connection failed."");\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            if (connection != null) {\\\\n                try {\\\\n                    connection.close();\\\\n                } catch (SQLException e) {\\\\n                    e.printStackTrace();\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\\\n// context.xml configuration example\\\\n/*\\\\n<Context>\\\\n    <Resource name=""jdbc/MyDB"" auth=""Container"" type=""javax.sql.DataSource""\\\\n              maxTotal=""100"" maxIdle=""30"" maxWaitMillis=""10000""\\\\n              username=""username"" password=""password"" driverClassName=""com.mysql.cj.jdbc.Driver""\\\\n              url=""jdbc:mysql://localhost:3306/mydatabase""/>\\\\n</Context>\\\\n*/\\\']\']']",0.2,0.25,0.0416666666666666,1.0,1.0,0.2
sql,ResultSet,HSQLDB delete row(s) from JDBC resultset,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],['Most common way to construct:\nPreparedStatement pstmt = Ã‰;\nResultSet rs = pstmt.executeQuery();\nBased on 77 examples'],"['Specify the cursor holdability in the code:\n\nc.prepareStatement(select,\n     ResultSet.TYPE_SCROLL_INSENSITIVE,\n     ResultSet.CONCUR_UPDATABLE,\n     ResultSet.HOLD_CURSORS_OVER_COMMIT);\nThe problem seems to be that HSQLDB JDBC driver uses ResultSet.CLOSE_CURSOS_AT_COMMIT as the default value.']",['nan'],"[""To delete rows from a JDBC ResultSet when using HSQLDB, you need to understand that ResultSet itself does not directly support row deletion. Instead, you should use the ResultSet's concurrency and updatability features in conjunction with SQL DELETE statements. First, ensure that the ResultSet is created with the appropriate concurrency mode, such as ResultSet.CONCUR_UPDATABLE, and type, such as ResultSet.TYPE_SCROLL_SENSITIVE. This allows the ResultSet to reflect changes made to the database. Then, iterate through the ResultSet to identify the rows you want to delete. For each row, use the ResultSet's deleteRow() method to mark the row for deletion. After marking the rows, the changes must be committed to the database using the commit() method of the Connection object. This process ensures that the rows are deleted from the database. Additionally, handle any SQL exceptions that may arise during this process to ensure robust error handling.""]","['[\'[\\\'To delete rows from a JDBC ResultSet in HSQLDB, you need to use the ResultSet\\\\\\\'s deleteRow() method. This method deletes the current row in the ResultSet. Below is an example of how to achieve this. The code connects to an HSQLDB database, executes a query to retrieve a ResultSet, iterates through the ResultSet to find rows that match a certain condition, and deletes those rows.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.SQLException;\\\\nimport java.sql.Statement;\\\\npublic class HSQLDBDeleteRowExample {\\\\n    public static void main(String[] args) {\\\\n        Connection connection = null;\\\\n        Statement statement = null;\\\\n        ResultSet resultSet = null;\\\\n\\\\n        try {\\\\n            // Load the HSQLDB JDBC driver\\\\n            Class.forName(""org.hsqldb.jdbc.JDBCDriver"");\\\\n\\\\n            // Connect to the database\\\\n            connection = DriverManager.getConnection(""jdbc:hsqldb:mem:mymemdb"", ""SA"", """");\\\\n\\\\n            // Create a statement object\\\\n            statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);\\\\n\\\\n            // Execute a query to get a ResultSet\\\\n            resultSet = statement.executeQuery(""SELECT * FROM my_table"");\\\\n\\\\n            // Iterate through the ResultSet\\\\n            while (resultSet.next()) {\\\\n                // Check if the current row matches the condition for deletion\\\\n                if (resultSet.getInt(""id"") == 1) { // Example condition\\\\n                    // Delete the current row\\\\n                    resultSet.deleteRow();\\\\n                }\\\\n            }\\\\n        } catch (ClassNotFoundException | SQLException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close the ResultSet, Statement, and Connection\\\\n            try {\\\\n                if (resultSet != null) resultSet.close();\\\\n                if (statement != null) statement.close();\\\\n                if (connection != null) connection.close();\\\\n            } catch (SQLException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0263157894736842,0.75,0.3333333333333333,1.0,0.1111111111111111,0.2
sql,ResultSet,How to programmatically create a Java ResultSet from custom data with no database,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],['Most common way to construct:\nPreparedStatement pstmt = Ã‰;\nResultSet rs = pstmt.executeQuery();\nBased on 77 examples'],"['Why you are getting ""Closed resultset:next"" error, see here:\n\nWhy am I getting ResultSet is closed error when I never closed any\n\nI suppose you are not using some ORM framework like Hibernate.\n\nIn this case, map the resultset data in the DAO or build an object mapper yourself, which maps the ResultSet to a some Data Transfer Object. Then pass this object to the createExcel() method.\n\nSomething like this:\n\nResultSet rs = myDao.getResult();\nList<ExcelDto> excelDtos = new ArrayList<>();\nExcelDto excelDto;\nwhile (rs.next()) {      \n    excelDto = new ExcelDto();    \n    dto.setXCol(rs.getString(""XColumn""))\n    excelDtos.add(dto);  \n}\nexcelCreator.createExcel(excelDtos);\nThen in the excelCreator you can work with an ArrayList instead of ResultSet.']",['nan'],"['To programmatically create a Java ResultSet from custom data without using a database, you need to simulate the behavior of a ResultSet. This can be achieved by creating a custom implementation of the ResultSet interface. The ResultSet interface in Java is part of the java.sql package and is typically used to represent the result set of a database query. However, you can create a mock ResultSet by implementing the necessary methods to handle your custom data.\n\nFirst, you need to define a class that implements the ResultSet interface. This class will need to manage the data you want to represent, typically stored in a collection such as a List or an array. You will need to implement methods like next(), getString(), getInt(), and others to retrieve data from your custom data structure.\n\nThe next() method should iterate over your data collection, moving the cursor to the next row of data. Methods like getString() and getInt() should return the appropriate data from the current row based on the column index or column name provided.\n\nAdditionally, you will need to handle other methods required by the ResultSet interface, such as close(), wasNull(), and various getXXX() methods for different data types. Implementing these methods ensures that your custom ResultSet behaves similarly to a real ResultSet obtained from a database query.\n\nBy carefully implementing these methods, you can create a fully functional ResultSet that operates on your custom data, allowing you to use it in your Java applications without the need for an actual database.']","['[\'[\\\'To create a Java ResultSet from custom data without using a database, we can use the `RowSet` interface, specifically the `CachedRowSet` implementation provided by the `javax.sql.rowset` package. This allows us to create a disconnected `ResultSet` that can be populated with custom data. Below is an example of how to achieve this:\\\\nimport javax.sql.rowset.CachedRowSet;\\\\nimport javax.sql.rowset.RowSetProvider;\\\\nimport java.sql.SQLException;\\\\npublic class CustomResultSetExample {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Create a CachedRowSet instance\\\\n            CachedRowSet rowSet = RowSetProvider.newFactory().createCachedRowSet();\\\\n\\\\n            // Define the structure of the RowSet\\\\n            rowSet.setMetaData(createMetaData());\\\\n\\\\n            // Populate the RowSet with custom data\\\\n            populateRowSet(rowSet);\\\\n\\\\n            // Iterate through the RowSet and print the data\\\\n            while (rowSet.next()) {\\\\n                System.out.println(""ID: "" + rowSet.getInt(""id"") + "", Name: "" + rowSet.getString(""name"") + "", Age: "" + rowSet.getInt(""age""));\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n\\\\n    private static void populateRowSet(CachedRowSet rowSet) throws SQLException {\\\\n        // Insert custom data into the RowSet\\\\n        rowSet.moveToInsertRow();\\\\n        rowSet.updateInt(""id"", 1);\\\\n        rowSet.updateString(""name"", ""John Doe"");\\\\n        rowSet.updateInt(""age"", 30);\\\\n        rowSet.insertRow();\\\\n\\\\n        rowSet.moveToInsertRow();\\\\n        rowSet.updateInt(""id"", 2);\\\\n        rowSet.updateString(""name"", ""Jane Smith"");\\\\n        rowSet.updateInt(""age"", 25);\\\\n        rowSet.insertRow();\\\\n\\\\n        rowSet.moveToCurrentRow();\\\\n    }\\\\n\\\\n    private static javax.sql.RowSetMetaData createMetaData() throws SQLException {\\\\n        // Create metadata for the RowSet\\\\n        javax.sql.rowset.RowSetMetaDataImpl metaData = new javax.sql.rowset.RowSetMetaDataImpl();\\\\n        metaData.setColumnCount(3);\\\\n        metaData.setColumnName(1, ""id"");\\\\n        metaData.setColumnType(1, java.sql.Types.INTEGER);\\\\n        metaData.setColumnName(2, ""name"");\\\\n        metaData.setColumnType(2, java.sql.Types.VARCHAR);\\\\n        metaData.setColumnName(3, ""age"");\\\\n        metaData.setColumnType(3, java.sql.Types.INTEGER);\\\\n        return metaData;\\\\n    }\\\\n}\\\']\']']",0.0263157894736842,0.75,0.875,1.0,0.0833333333333333,0.5
sql,ResultSet,Retrieve column names from java.sql.ResultSet,['<p>That s correct  initially the <code>ResultSet</code> s cursor is pointing to before the first row  if the first call to <code>next()</code> returns <code>false</code>\n<p>If you want to report an empty set  add a variable counting the items read.\n<p>The  check for any results  call ResultSet.next() moves the cursor to the first row  so use the do {...} while() syntax to process that row while continuing to process remaining rows returned by the loop.</p>\nUse  do...while  to process the first row  while continuing to process remaining rows\n<p>According to the most viable answer the suggestion is to use  isBeforeFirst() .\nYou check whether there is something in your  resultset  and don t advance your cursor.\nYou can also just call isBeforeFirst() to test if there are any rows returned without advancing the cursor  then proceed normally.\nFirst generates an exception if done on a resultset from type  forward only .\nalways moves to the next row  so if you are planning on doing any reading from the result set you need to take that into account.</p>\nAlthough there are methods for  backing up   they are not supported for all types of result sets.</p>\n<p>(Edited as @martin comments below; the OP code as written would not compile because <code>iVal</code> is not initialised)</p>\n<p>You could create an utility method to retrieve an optional value of any Java type from a given ResultSet  previously casted.</p>\n<p>Unfortunately  getObject(columnName  Class) does not return null  but the default value for given Java type  so 2 calls are required </p>\nThere will be no zeros returned for empty value in the database</p>\n<p>For convenience  you can create a wrapper class around ResultSet that returns null values when <code>ResultSet</code>\n<p>In general  however  forwarding and rewinding cursors may be quite inefficient for large result sets.\nAnother option in SQL Server would be to calculate the total number of rows directly in your SQL statement:</p>\n<p>Most drivers support forward only resultset - so method like last  beforeFirst etc are not supported.</p>\n<p>The first approach is suitable if you are also getting the data in the same loop - otherwise the resultSet has already been iterated and can not be used again.</p>\n<p>In most cases the requirement is to get the number of rows a query would return without fetching the rows.\nIterating through the result set to find the row count is almost same as processing the data.\n<p>Your function will return the size of a ResultSet  but its cursor will be set after last record  so without rewinding it by calling beforeFirst()  first() or previous() you won t be able to read its rows  and rewinding methods won t work with forward only ResultSet (you ll get the same exception you re getting in your second code fragment).</p>\n<p>There are very few circumstances where the row count is actually needed prior to reading the result set  especially in a language like Java.\nThe only case I think of where a row count would be necessary is when the row count is the only data you need(in which case a count query would be superior).\nOtherwise  you are better off using a wrapper object to represent your table data  and storing these objects in a dynamic container such as an ArrayList.\nFor every solution that requires knowing the row count before reading the result set  you can probably think of a solution that does so without knowing the row count before reading without much effort.\nBy thinking of solutions that bypass the need to know the row count before processing  you save the ResultSet the trouble of scrolling to the end of the result set  then back to the beginning (which can be a VERY expensive operation for large result sets).\nFirst  you should never return a <code>HashMap</code>  which is a specific implementation.\nSo i save the current ResultSet position and restore it after i created the maps.</p>\nI reduced that to only one array-acces each for-loop iteration.'],['Most common way to construct:\nPreparedStatement pstmt = Ã‰;\nResultSet rs = pstmt.executeQuery();\nBased on 77 examples'],"['You can use the the ResultSetMetaData (http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html) object for that, like this:\n\nResultSet rs = stmt.executeQuery(""SELECT * FROM table"");\nResultSetMetaData rsmd = rs.getMetaData();\nString firstColumnName = rsmd.getColumnName(1);']",['nan'],"['To retrieve column names from a java.sql.ResultSet, you need to utilize the ResultSetMetaData interface. ResultSetMetaData provides methods to get information about the types and properties of the columns in a ResultSet. First, you obtain the ResultSetMetaData object from the ResultSet by calling the getMetaData() method. Once you have the ResultSetMetaData object, you can use the getColumnCount() method to determine the number of columns in the ResultSet. Then, you can iterate through the columns using a loop, and for each column index, you can call the getColumnName(int column) method to retrieve the name of the column. This approach allows you to dynamically access the column names without hardcoding them, making your code more flexible and adaptable to changes in the database schema.']","['[\'[\\\'To retrieve column names from a java.sql.ResultSet, you can use the ResultSetMetaData class. The ResultSetMetaData object can be obtained from the ResultSet object, and it provides information about the columns of the ResultSet. Below is an example of how to achieve this.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.ResultSetMetaData;\\\\nimport java.sql.SQLException;\\\\nimport java.sql.Statement;\\\\npublic class RetrieveColumnNames {\\\\n    public static void main(String[] args) {\\\\n        String url = ""jdbc:your_database_url"";\\\\n        String user = ""your_database_user"";\\\\n        String password = ""your_database_password"";\\\\n\\\\n        Connection connection = null;\\\\n        Statement statement = null;\\\\n        ResultSet resultSet = null;\\\\n\\\\n        try {\\\\n            // Establish the connection\\\\n            connection = DriverManager.getConnection(url, user, password);\\\\n\\\\n            // Create a statement\\\\n            statement = connection.createStatement();\\\\n\\\\n            // Execute a query\\\\n            resultSet = statement.executeQuery(""SELECT * FROM your_table_name"");\\\\n\\\\n            // Get ResultSetMetaData\\\\n            ResultSetMetaData metaData = resultSet.getMetaData();\\\\n\\\\n            // Get the number of columns\\\\n            int columnCount = metaData.getColumnCount();\\\\n\\\\n            // Retrieve column names\\\\n            for (int i = 1; i <= columnCount; i++) {\\\\n                String columnName = metaData.getColumnName(i);\\\\n                System.out.println(""Column "" + i + "": "" + columnName);\\\\n            }\\\\n        } catch (SQLException e) {\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close resources\\\\n            try {\\\\n                if (resultSet != null) resultSet.close();\\\\n                if (statement != null) statement.close();\\\\n                if (connection != null) connection.close();\\\\n            } catch (SQLException e) {\\\\n                e.printStackTrace();\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.0263157894736842,0.25,0.25,1.0,1.0,0.25
util,ArrayList,How to sort a Map by Value (ArrayList) size in Java?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],"['Most common way to construct:\nArrayList list = new ArrayList();\nBased on 161 examples\n\n void\tsort()\n\n          Sorts this list.\n\n\nsort\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic void sort()\nUse java.util.Collections.sort(List).']","[""If you are using java-8, here's also a way to do this:\n\nList<String> keys = unsortedMap.entrySet()\n                   .stream()\n                   .sorted((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()))\n                   .map(Map.Entry::getKey)\n                   .collect(Collectors.toList());\nSystem.out.println(keys); //[C, A, B]\nWhat it does is:\n\nget a Stream of the entries of your map\nsort the entries by the the size of each arraylist\nmap each entry to its corresponding key\ncollect the result in a List\nIf you want you could also write the sorted line as :\n\n.sorted(Comparator.comparing(e -> e.getValue().size(), Comparator.reverseOrder()))""]","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nJava, Using Iterator to search an ArrayList and delete matching objects\n----------Explanation----------\nYou don\'t need them on one line, just use remove to remove an item when it matches:\n----------Code Sample----------\nimport java.util.*;\npublic class ListExample {\npublic static final void main(String[] args) {\nList list = new ArrayList(5);\nString targetCaption = ""match"";\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nIterator it = list.iterator();\nwhile (it.hasNext()) {\nif (it.next().getFriendCaption().equals(targetCaption)) {\nit.remove();\n// If you know it\'s unique, you could `break;` here\n}\n}\n}\nprivate static class Friend {\nprivate String friendCaption;\npublic Friend(String fc) {\nthis.friendCaption = fc;\n}\npublic String getFriendCaption() {\nreturn this.friendCaption;\n}\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDetect and prevent duplicate names ArrayList\n----------Explanation----------\n\n----------Code Sample----------\npublic class Fraction {\nint x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? true\n\npublic class Fraction {\npublic int x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n@Override\npublic boolean equals(Object o) {\nif (o==null) return false;\nif (o==this) return true;\nif (!(o instanceof Fraction) return false;\nFraction f = (Fraction) o;\nreturn f.x == x && f.y ==y;\n}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? false\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nJava: How to read a text file\n----------Explanation----------\nYou can use Files#readAllLines() to get all lines of a text file into a List<String> .\n----------Code Sample----------\nList numbers = new ArrayList<>();\nfor (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {\nfor (String part : line.split(""\\\\s+"")) {\nInteger i = Integer.valueOf(part);\nnumbers.add(i);\n}\n}\n\nList numbers = Files.lines(Paths.get(""/path/to/test.txt""))\n.map(line -> line.split(""\\\\s+"")).flatMap(Arrays::stream)\n.map(Integer::valueOf)\n.collect(Collectors.toList());\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to capture a list of specific type with mockito\n----------Explanation----------\nThe nested generics-problem can be avoided with the @Captor annotation :\n----------Code Sample----------\n@RunWith(MockitoJUnitRunner.class)\npublic class Test{\n\n@Mock\nprivate Service service;\n\n@Captor\nprivate ArgumentCaptor> captor;\n\n@Test \npublic void shouldDoStuffWithListValues() {\n//...\nverify(service).doStuff(captor.capture()));\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nHow to sort ArrayList using Comparator?\n----------Explanation----------\nUse the Collections.sort(List, Comparator) method:\n----------Code Sample----------\nCollections.sort(students, Student.getCompByName());\n\nList students = new ArrayList();\n\npublic static void main(String[] args) {\nStudent[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};\nList students = new ArrayList(Arrays.asList(studentArr));\nCollections.sort(students, Student.getCompByName());\n\nfor(Student student:students){\nSystem.out.println(student.getName());\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nhow to use an array list?\n----------Explanation----------\nThe following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:\n----------Code Sample----------\nimport java.util.*;\n\n//...\n\nList list = new ArrayList();\nlist.add(""Hello!"");\nlist.add(""How are you?"");\n\nSystem.out.println(list.get(0)); // prints ""Hello!""\n\nfor (String s : list) {\nSystem.out.println(s);\n} // prints ""Hello!"", ""How are you?""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nwhat is the sense of final ArrayList?\n----------Explanation----------\nThis means that you cannot rebind the variable to point to a different collection instance :\n----------Code Sample----------\nfinal List list = new ArrayList();\nlist = new ArrayList(); // Since `list\' is final, this won\'t compile\n\nfinal List list = Collections.unmodifiableList(new ArrayList(...));\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to add strings into an arraylist between two strings\n----------Explanation----------\nThird, to do what you ask for, there is overloaded method add for choosing position :\n----------Code Sample----------\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(1,""Maybe""); //insert into position 1 and shift everything to the right.\n\n[Yes, Maybe, No]\n\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(1, ""Or"");\nlist.add(3, ""Or"");\nSystem.out.println(list);\n\n[Yes, Or, No, Or, Maybe]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nList orList = addOr(list);\nSystem.out.println(orList);\n}\n\npublic static List addOr(List list){\nList newList = new ArrayList<>();\nint count = 0;\nfor(String text : list){\ncount++;\nnewList.add(text);\nif (count != list.size()){\nnewList.add(""Or"");\n}\n}\nreturn newList;\n}\n\n[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nString niceOutput = addOr(list);\nSystem.out.println(""Choose from following options: "" + niceOutput);\n} \n\npublic static String addOr(List list){\nString orText = """";\nint count = 0;\nfor(String text : list){\ncount++;\norText += \'\\\'\' + text + \'\\\'\';\nif (count != list.size()){\norText += "" or "";\n}\n}\nreturn orText; \n}\n\nChoose from following options: \'Yes\' or \'No\' or \'Maybe\' or \'Probably\' or \'Never\'\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?\n----------Explanation----------\nYou can change the behaviour of ArrayList\n----------Code Sample----------\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nsuper.add(mt);\nCollections.sort(list, comparator);\nreturn true;\n}\n}; \n\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nint index = Collections.binarySearch(this, mt);\nif (index < 0) index = ~index;\nsuper.add(index, mt);\nreturn true;\n}\n};\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nDynamic initialization of ArrayList\n----------Explanation----------\n\n----------Code Sample----------\nprivate void setModel(Class type) {\nArrayList arrayList = new ArrayList();\n}\n\nprivate ArrayList getModel(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\npublic class Tester {\n\nprivate ArrayList getModels(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = (ArrayList) t.getModels(Data.class);\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = (ArrayList) t.getModels(Magic.class);\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Tester {\n\nprivate ArrayList getModel() {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = t.getModel();\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = t.getModel();\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Data {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Data() {\n}\n\n\npublic Data(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n\npublic class Magic {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Magic() {\n}\n\n\npublic Magic(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava Velocity foreach loop\n----------Explanation----------\nFor an ArrayList populated as below --\n----------Code Sample----------\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\n\n#foreach($iter in $list)\n$!iter\n#set($list_str=$!list_str+$!iter+"","")\n#end\n$!list_str\n\ntry\nto\nfigure\nit\ntry,to,figure,it,\n\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\nlist.add(null);\n\ntry\nto\nfigure\nit\n\ntry,to,figure,it,$!iter,\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nArrayList contains case sensitivity\n----------Explanation----------\nYou can use this exactly like you\'d use any other ArrayList. You can pass this List out to other code, and external code won\'t have to understand any string wrapper classes.\n----------Code Sample----------\npublic class CustomStringList3 extends ArrayList {\n@Override\npublic boolean contains(Object o) {\nString paramStr = (String)o;\nfor (String s : this) {\nif (paramStr.equalsIgnoreCase(s)) return true;\n}\nreturn false;\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\n\'Catch branch is identical\' however still requires me to catch it\n----------Explanation----------\nYou can collapse exception branches if they\'re identical, and with the multi-catch syntax, you\'ll wind up with one catch statement that does the same thing as your three:\n----------Code Sample----------\ntry {\nFileInputStream e = new FileInputStream(""outings.ser"");\nObjectInputStream inputStream = new ObjectInputStream(e);\nreturn (ArrayList)inputStream.readObject();\n} catch (ClassNotFoundException | IOException var3) {\nvar3.printStackTrace();\n}\nreturn null;\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nPassing ArrayList of string arrays from one activity to another in android\n----------Explanation----------\nYou can use intents\n----------Code Sample----------\nArrayList mylist = new ArrayList(); \nIntent intent = new Intent(ActivityName.this, Second.class);\nintent.putStringArrayListExtra(""key"", mylist);\nstartActivity(intent);\n\nIntent i = getIntent(); \nArrayList list = i.getStringArrayListExtra(""key"");\n\nname The name of the extra data, with package prefix.\nvalue The ArrayList data value.\n\nReturns the same Intent object, for chaining multiple calls into a single statement.\n\nString[] people = {\n""Mike Strong"",\n""Jennifer Anniston"",\n""Tom Bennet"",\n""Leander Paes"",\n""Liam Nesson"",\n""George Clooney"",\n""Barack Obama"",\n""Steve Jobs"",\n""Larry Page"",\n""Sergey Brin"",\n""Steve Wozniak""\n};\nString[] people1 = {\n""raghu"", \n""hello""\n};\n\n\nArrayList list = new ArrayList();\nlist.add(people);\nlist.add(people1);\nIntent i = new Intent(MainActivity.this,SecondActivity.class);\ni.putExtra(""key"", list);\nstartActivity(i); \n\nIntent in = getIntent();\nArrayList list =(ArrayList) in.getSerializableExtra(""key"");\nfor(int i=0;i {\nString s[]= list.get(i);\nfor(int iv=0;iv Log.i(""..............:"",""""+s[iv]);\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?\n----------Explanation----------\nHow is the HashMap declaration expressed in that scope? It should be:\n----------Code Sample----------\nHashMap dictMap\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap> dictMap\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nJava: How to efficiently read from database?\n----------Explanation----------\n\n----------Code Sample----------\ndouble[] data1 = new double[data.size()];\nfor(int a = 0; a < data1.length; ++a) {\ndata1[a]=data.get(a);\n}\n\ndouble[] data1 = data.toArray(new double[data.size()]);\n\nArrayList data = new ArrayList();\n\nArrayList data = new ArrayList(AMOUNT_OF_RECORDS);\n\nselect distinct price_open from stock_data ...\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nJava ArrayList and HashMap on-the-fly\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList() {\n{\nadd(""value1"");\nadd(""value2"");\n}\n};\n\nMap map = new HashMap() {\n{\nput(""key1"", ""value1"");\nput(""key2"", ""value2"");\n}\n};\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\njava multidimensional arraylist\n----------Explanation----------\nYou have to create a new ArrayList for each new row. Replacing\n----------Code Sample----------\nworkArray.clear();\n\nworkArray = new ArrayList();\n\nArrayList workArray = new ArrayList(); \n\nArrayList> workMatrix = new ArrayList<>();\nArrayList workArray = new ArrayList<>(); \nworkMatrix.add(workArray);\n\n// This prints ""true"": The first element of the matrix\n// and the workArray are IDENTICAL. (Not only equal, \n// but really IDENTICAL)\nSystem.out.println(workMatrix.get(0) == workArray);\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nArrayList initialization equivalent to array initialization\n----------Explanation----------\nArrays.asList can help here:\n----------Code Sample----------\nnew ArrayList(Arrays.asList(1,2,3,5,8,13,21));\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nHow can I calculate the difference between two ArrayLists?\n----------Explanation----------\nIn Java, you can use the Collection interface\'s removeAll method.\n----------Code Sample----------\n// Create a couple ArrayList objects and populate them\n// with some delicious fruits.\nCollection firstList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\n}};\n\nCollection secondList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\nadd(""banana"");\nadd(""strawberry"");\n}};\n\n// Show the ""before"" lists\nSystem.out.println(""First List: "" + firstList);\nSystem.out.println(""Second List: "" + secondList);\n\n// Remove all elements in firstList from secondList\nsecondList.removeAll(firstList);\n\n// Show the ""after"" list\nSystem.out.println(""Result: "" + secondList);\n\nFirst List: [apple, orange]\nSecond List: [apple, orange, banana, strawberry]\nResult: [banana, strawberry]\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nBaseExpandableListAdapter add child programmatically\n----------Explanation----------\nin which i\'ve initialize ExpandableListAdapter\n----------Code Sample----------\n/*\n* view types\n*/\nSortCategoryExpand sortCategoryExpand = new SortCategoryExpand();\n\nprivate static final int VIEW_1 = 0;\nprivate static final int View_2 = 1;\nprivate static final int View_3=2;\n* data\nprivate Context context = null;\nArrayList groups = new ArrayList();\npublic ExpandableListAdapter(Context context) {\nthis.context = context;\n}\n@Override\npublic int getChildType(int groupPosition, int childPosition) {\nint type = -1;\nif (groupPosition == 2) {\ntype = View_3;\n}\nelse if (groupPosition == 1) {\ntype = View_2;\n}else {\ntype = View_1;\nreturn type;\npublic int getChildTypeCount() {\n// Past and Future Travel Plans\nreturn 3;\npublic Object getChild(int groupPosition, int childPosition) {\nreturn groups.get(groupPosition).entryItems.get(childPosition);\npublic long getChildId(int groupPosition, int childPosition) {\nreturn childPosition;\npublic View getChildView(int groupPosition, int childPosition,\nboolean isLastChild, View convertView, ViewGroup parent) {\n// get the type of the group this child belongs\nType viewType = groups.get(groupPosition).type;\nView view = convertView;\nif (viewType == Type.Data1) {\nif (view == null) {\nview = LayoutInflater.from(context).inflate(\nR.layout.category_absence_line_item, parent, false);\nData1ViewHolder holder = new Data1ViewHolder ();\nholder.txtSubject = (TextView) view.findViewById(R.id.subject);\nholder.txtFromUser = (TextView) view.findViewById(R.id.user);\nholder.txtStartDate = (TextView) view\n.findViewById(R.id.startDate);\nholder.txtEndDate = (TextView) view.findViewById(R.id.endDate);\nview.setTag(holder);\n}\nData1ViewHolder holder = (Data1ViewHolder ) view.getTag();\nEntryItem entryItem = (EntryItem) getChild(groupPosition,\nchildPosition);\nif (entryItem.subject.equals(""None"")) {\nholder.txtSubject.setText(""None"");\n} else {\nholder.txtSubject.setText("""" + entryItem.subject);\nif (entryItem.fromUser.equals(""None"")) {\nholder.txtFromUser.setText("""");\n} else if (entryItem.fromUser.equals(""anyType{}"")) {\nholder.txtFromUser.setText(""From User : "");\nholder.txtFromUser.setText(""From User : "" + entryItem.fromUser);\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)\n.equals(""01-Jan-1970"")) {\nholder.txtStartDate.setText(""Start Date : None"");\n} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(\nentryItem.startDate).equals(""03-Mar-3800"")) {\nholder.txtStartDate.setText("""");\nholder.txtStartDate.setText(""Start Date : ""\n+ new SimpleDateFormat(""dd-MMM-yyyy"")\n.format(entryItem.startDate));\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)\nholder.txtEndDate.setText(""Due Date : None"");\nentryItem.endDate).equals(""03-Mar-3800"")) {\nholder.txtEndDate.setText(""Due Date : ""\n.format(entryItem.endDate));\n}else ifviewType == Type.Data2){\nR.layout.category_ticket_line_item, parent, false);\nData2ViewHolder holder = new Data2ViewHolder ();\nData2ViewHolder holder = (Data2ViewHolder ) view.getTag();\nelse if(viewType == Type.Data3){\nR.layout.category_timesheet_line_item, parent, false);\nData3ViewHolder holder = new Data3ViewHolder ();\nData3ViewHolder holder = (Data3ViewHolder ) view.getTag();\nreturn view;\npublic int getChildrenCount(int groupPosition) {\nreturn groups.get(groupPosition).entryItems.size();\npublic Object getGroup(int groupPosition) {\nreturn groups.get(groupPosition);\npublic int getGroupCount() {\nreturn groups.size();\npublic long getGroupId(int groupPosition) {\nreturn groupPosition;\npublic View getGroupView(int groupPosition, boolean isExpanded,\nView convertView, ViewGroup parent) {\nview = null;\nR.layout.expandable_list_group_absenceview, parent,\nfalse);\nholder.textabsence = (TextView) view\n.findViewById(R.id.AbsencegroupHeader);\nholder.imageAbsence = (ImageView) view\n.findViewById(R.id.AbsenceexpandableIcon);\nholder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""\n+ groups.get(groupPosition).entryItems.size() + "")"");\nif (groups.get(groupPosition).entryItems.size() == 0) {\nholder.imageAbsence.setVisibility(View.INVISIBLE);\nint imageResourceId = isExpanded ? android.R.drawable.arrow_up_float\n: android.R.drawable.arrow_down_float;\nholder.imageAbsence.setImageResource(imageResourceId);\nholder.imageAbsence.setVisibility(View.VISIBLE);\n}else if(viewType == Type.Data2) {\nR.layout.expandable_list_group_ticketview, parent,\nholder.textticket = (TextView) view\n.findViewById(R.id.TicketgroupHeader);\nholder.imageTicket= (ImageView) view\n.findViewById(R.id.TicketexpandableIcon);\nData2ViewHolder holder = (Data2ViewHolder) view.getTag();\nholder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""\nholder.imageTicket.setVisibility(View.INVISIBLE);\nholder.imageTicket.setImageResource(imageResourceId);\nholder.imageTicket.setVisibility(View.VISIBLE);\nelse if(viewType == Type.Data3) {\nR.layout.expandable_list_group_timesheetview, parent,\nholder.texttimesheet = (TextView) view\n.findViewById(R.id.TimesheetgroupHeader);\nholder.imageTimesheet= (ImageView) view\n.findViewById(R.id.TimesheetexpandableIcon);\nholder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""\nholder.imageTimesheet.setVisibility(View.INVISIBLE);\nholder.imageTimesheet.setImageResource(imageResourceId);\nholder.imageTimesheet.setVisibility(View.VISIBLE);\npublic boolean hasStableIds() {\nreturn true;\npublic boolean isChildSelectable(int groupPosition, int childPosition) {\npublic void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {\ngroups.clear();\nif (aryAbsence != null) {\nGroup g1 = new Group();\ng1.type = Type.Absence;\ng1.entryItems.clear();\ng1.entryItems = new ArrayList(aryAbsence);\ngroups.add(g1);\nif (aryTicket != null) {\nGroup g2 = new Group();\ng2.type = Type.Ticket;\ng2.entryItems.clear();\ng2.entryItems = new ArrayList(aryTicket);\ngroups.add(g2);\nif (aryTimeSheet != null) {\nGroup g3 = new Group();\ng3.type = Type.TimeSheet;\ng3.entryItems.clear();\ng3.entryItems = new ArrayList(aryTimeSheet);\ngroups.add(g3);\nnotifyDataSetChanged();\n* Holder for the Past view type\npublic static class Data1ViewHolder {\npublic ImageView imageAbsence;\npublic TextView textabsence;\npublic TextView txtEndDate;\npublic TextView txtStartDate;\npublic TextView txtFromUser;\npublic TextView txtSubject;\npublic static class Data2ViewHolder {\npublic ImageView imageTicket;\npublic TextView textticket;\npublic static class Data3ViewHolder {\npublic ImageView imageTimesheet;\npublic TextView texttimesheet;\n* Wrapper for each group that contains the list elements and the type of\n* travel.\npublic static class Group {\npublic enum Type {\nData_1,Data_2,Data_3;\n};\npublic Type type;\nArrayList entryItems = new ArrayList();\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nModifier static is only allowed in constant variable declarations\n----------Explanation----------\nYou can make the Control class static.\n----------Code Sample----------\nprivate static class Control {\n^^^^^^\n\n// Ok to have static members:\npublic static ArrayList keys = new ArrayList();\n\n...\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nWhy are variables declared with their interface name in Java?\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList();\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nHow do I find out what type each object is in a ArrayList?\n----------Explanation----------\n\n----------Code Sample----------\nArrayList list = ...;\n// List list = ...;\nforeach (object o in list) {\nif (o is int) {\nHandleInt((int)o);\n}\nelse if (o is string) {\nHandleString((string)o);\n}\n...\n}\n\nArrayList list = ...;\nfor (Object o : list) {\nif (o.getClass().equals(Integer.class)) {\nhandleInt((int)o);\n}\nelse if (o.getClass().equals(String.class)) {\nhandleString((String)o);\n}\n...\n}\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nNullPointerException when I try to call a method outside my main method\n----------Explanation----------\n\n----------Code Sample----------\nimport java.util.*;\n\npublic class SummationPuzzle \n{\n\npublic static ArrayList fsList;\npublic static ArrayList lastW;\npublic static ArrayList finaList;\n\n/**\n* Reads in 3 words entered by user and converts the first two string into a single ArrayList\n* takes the third string entered and converts it into it\'s own ArrayList\n* @param firstW\n* @param secondW\n* @param thirdW\n*/\npublic static void convertStr(String firstW, String secondW, String thirdW)\n{\nString combined = new String(firstW + secondW); \nfor(int i = 0; i< combined.length(); i++)\n{\nfsList.add(combined.charAt(i));\nfor(int j = 0; j< thirdW.length(); j++)\n{\nlastW.add(thirdW.charAt(j));\n}\n}\nremoveDuplicate(fsList, lastW);\n//feeds the resulting lists into the removeDuplicate method\n}\n\n/**\n* Combines two ArrayList into a one ArrayList with single instances of the char\n* @param fsList\n* @param lastW\n*/\npublic static void removeDuplicate(ArrayList fsList, ArrayList lastW)\n{\npublic static ArrayList fsList = new ArrayList();\npublic static ArrayList lastW = new ArrayList();\npublic static ArrayList finaList = new ArrayList();\ntempList.addAll(fsList);\ntempList.addAll(lastW);\nfor(char dupLetter : tempList)\n{\nif(!finaList.contains(dupLetter))\n{\nfinaList.add(dupLetter);\n}\n}\nSystem.out.println(finaList + ""This is the list with duplicates removed"");\nassignNum(finaList, lastW);\n//feeds results into the assignNum method\n}\n\n/**\n* Assigns a random number to the char that resides at each address in the ArrayList\n* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program\n* assigns that character the value of ""1""\n* @param finaList\n* @param lastW\n*/\npublic static void assignNum(ArrayList finaList, ArrayList lastW)\n{\nchar[] assignLetter= new char[finaList.size()];\nRandom r = new Random();\nfor(int i = 0; i< assignLetter.length; i++)\n{\nassignLetter[i] = finaList.get(i);\nassignLetter[i] = (char)r.nextInt(assignLetter.length);\nSystem.out.println((long)assignLetter[i]);\nif(lastW.get(0).equals(assignLetter[i]))\n{\nassignLetter[i] = 1;\n}\n}\n\nSystem.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");\n\n}\n\n\n//main method\npublic static void main(String[] args)\n\n{\n//Receive user input\nScanner userIn = new Scanner(System.in);\nSystem.out.println(""Please enter your first word"");\nString firstW = userIn.next().trim();\nSystem.out.println(""Please enter your Second word"");\nString secondW = userIn.next().trim();\nSystem.out.println(""Please enter your Third word"");\nString thirdW = userIn.next().trim();\n\n\n//print the summation puzzle\nSystem.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);\nconvertStr(firstW, secondW, thirdW);\n}\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow to sort an ArrayList in Java\n----------Explanation----------\nUse a Comparator like this:\n----------Code Sample----------\nList fruits= new ArrayList();\n\nFruit fruit;\nfor(int i = 0; i < 100; i++)\n{\nfruit = new Fruit();\nfruit.setname(...);\nfruits.add(fruit);\n}\n\n// Sorting\nCollections.sort(fruits, new Comparator() {\n@Override\npublic int compare(Fruit fruit2, Fruit fruit1)\n{\n\nreturn fruit1.fruitName.compareTo(fruit2.fruitName);\n}\n});\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow to pass an ArrayList to a varargs method parameter?\n----------Explanation----------\nUse the toArray(T[] arr) method.\n----------Code Sample----------\n.getMap(locations.toArray(new WorldLocation[locations.size()]))\n\npublic static void method(String... strs) {\nfor (String s : strs)\nSystem.out.println(s);\n}\n\n...\nList strs = new ArrayList();\nstrs.add(""hello"");\nstrs.add(""wordld"");\n\nmethod(strs.toArray(new String[strs.size()]));\n// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nRemove Duplicates from ArrayList filled with POJOs\n----------Explanation----------\n\n----------Code Sample----------\npackage test.urlstore;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\n\npublic class DuplicateDemo{\n\npublic static void main(String[] args) throws Exception {\nList urlStores = new ArrayList();\nUrlStore usg = new UrlStore(""google"");\nUrlStore usy = new UrlStore(""yahoo"");\nUrlStore usb = new UrlStore(""bing"");\nUrlStore usa = new UrlStore(""ask"");\nUrlStore usd = new UrlStore(""duckduckgo"");\n\n\nusg.setData(""mail"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""doc"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusy.setData(""search"");\nurlStores.add(usy);\nusy.setData(""search"");\nurlStores.add(usy);\nusb.setData(""search"");\nurlStores.add(usb);\nusb.setData(""search"");\nurlStores.add(usb);\nusa.setData(""search"");\nurlStores.add(usa);\nusd.setData(""search"");\nurlStores.add(usd);\n\nSystem.out.println(""before removing duplicates"");\n// before removing duplicates\nfor (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n}\n\nSystem.out.println(""\\n\\nafter removing duplicates"");\n//removing duplicates\nSet uniqueUrlStores = new HashSet(urlStores);\n\n//After removing duplicates\nfor (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n\n}\n\n}\n\n\n\nstatic class UrlStore {\n\npublic String url;\npublic String data;\n\npublic UrlStore(String url) {\nthis.url = url;\n}\n\npublic void setData(String data) {\nthis.data = data;\n}\n\n@Override\npublic String toString() {\nreturn ""UrlStore [url="" + url + "", data="" + data + ""]"";\n}\n\n@Override\npublic int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((data == null) ? 0 : data.hashCode());\nresult = prime * result + ((url == null) ? 0 : url.hashCode());\nreturn result;\n}\n\n@Override\npublic boolean equals(Object obj) {\nif (this == obj)\nreturn true;\nif (obj == null)\nreturn false;\nif (getClass() != obj.getClass())\nreturn false;\nUrlStore other = (UrlStore) obj;\nif (data == null) {\nif (other.data != null)\nreturn false;\n} else if (!data.equals(other.data))\nreturn false;\nif (url == null) {\nif (other.url != null)\nreturn false;\n} else if (!url.equals(other.url))\nreturn false;\nreturn true;\n}\n\n\n} \n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nWhat is the fastest way to split Integer into digits?\n----------Explanation----------\nA simple test like this one compares both approaches. """"""]']","[""To sort a Map by the size of its ArrayList values in Java, you need to follow a series of steps. First, you should understand that a Map in Java does not maintain any order by default. Therefore, to sort it, you will need to convert the Map entries into a List. Once you have the List of Map entries, you can use the Collections.sort() method or the List's sort() method to sort the entries based on the size of the ArrayList values. This can be achieved by providing a custom Comparator that compares the sizes of the ArrayLists. After sorting, you can create a new LinkedHashMap to maintain the insertion order of the sorted entries. Finally, you can populate this LinkedHashMap with the sorted entries, which will give you a Map sorted by the size of its ArrayList values.""]","['[\'[\\\'To sort a Map by the size of its ArrayList values in Java, we can use a combination of Java\\\\\\\'s Stream API and Comparator. The idea is to convert the Map into a Stream, sort the Stream based on the size of the ArrayList values, and then collect the sorted entries into a LinkedHashMap to maintain the order. Below is a complete example demonstrating this approach.\\\\nimport java.util.*;\\\\nimport java.util.stream.Collectors;\\\\npublic class SortMapByValueSize {\\\\n    public static void main(String[] args) {\\\\n        // Sample map with ArrayList values\\\\n        Map<String, ArrayList<Integer>> map = new HashMap<>();\\\\n        map.put(""A"", new ArrayList<>(Arrays.asList(1, 2, 3)));\\\\n        map.put(""B"", new ArrayList<>(Arrays.asList(1, 2)));\\\\n        map.put(""C"", new ArrayList<>(Arrays.asList(1, 2, 3, 4)));\\\\n        map.put(""D"", new ArrayList<>(Arrays.asList(1)));\\\\n\\\\n        // Sorting the map by the size of ArrayList values\\\\n        Map<String, ArrayList<Integer>> sortedMap = map.entrySet()\\\\n                .stream()\\\\n                .sorted((e1, e2) -> Integer.compare(e1.getValue().size(), e2.getValue().size()))\\\\n                .collect(Collectors.toMap(\\\\n                        Map.Entry::getKey,\\\\n                        Map.Entry::getValue,\\\\n                        (e1, e2) -> e1,\\\\n                        LinkedHashMap::new\\\\n                ));\\\\n\\\\n        // Printing the sorted map\\\\n        sortedMap.forEach((key, value) -> System.out.println(key + ""="" + value));\\\\n    }\\\\n}\\\']\']']",0.0297029702970297,0.1,0.4285714285714285,0.0018331805682859,0.1428571428571428,0.1
util,ArrayList,How to convert comma-separated String to ArrayList?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],"['Most common way to construct:\nArrayList list = new ArrayList();\nBased on 161 examples\n\n void\tsort()\n\n          Sorts this list.\n\n\nsort\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic void sort()\nUse java.util.Collections.sort(List).']","['Here is another one for converting CSV to ArrayList:\n\nString str=""string,with,comma"";\nArrayList aList= new ArrayList(Arrays.asList(str.split("","")));\nfor(int i=0;i<aList.size();i++)\n{\n    System.out.println("" -->""+aList.get(i));\n}\nPrints you\n\n-->string\n-->with\n-->comma']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nJava, Using Iterator to search an ArrayList and delete matching objects\n----------Explanation----------\nYou don\'t need them on one line, just use remove to remove an item when it matches:\n----------Code Sample----------\nimport java.util.*;\npublic class ListExample {\npublic static final void main(String[] args) {\nList list = new ArrayList(5);\nString targetCaption = ""match"";\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nIterator it = list.iterator();\nwhile (it.hasNext()) {\nif (it.next().getFriendCaption().equals(targetCaption)) {\nit.remove();\n// If you know it\'s unique, you could `break;` here\n}\n}\n}\nprivate static class Friend {\nprivate String friendCaption;\npublic Friend(String fc) {\nthis.friendCaption = fc;\n}\npublic String getFriendCaption() {\nreturn this.friendCaption;\n}\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDetect and prevent duplicate names ArrayList\n----------Explanation----------\n\n----------Code Sample----------\npublic class Fraction {\nint x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? true\n\npublic class Fraction {\npublic int x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n@Override\npublic boolean equals(Object o) {\nif (o==null) return false;\nif (o==this) return true;\nif (!(o instanceof Fraction) return false;\nFraction f = (Fraction) o;\nreturn f.x == x && f.y ==y;\n}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? false\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nJava: How to read a text file\n----------Explanation----------\nYou can use Files#readAllLines() to get all lines of a text file into a List<String> .\n----------Code Sample----------\nList numbers = new ArrayList<>();\nfor (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {\nfor (String part : line.split(""\\\\s+"")) {\nInteger i = Integer.valueOf(part);\nnumbers.add(i);\n}\n}\n\nList numbers = Files.lines(Paths.get(""/path/to/test.txt""))\n.map(line -> line.split(""\\\\s+"")).flatMap(Arrays::stream)\n.map(Integer::valueOf)\n.collect(Collectors.toList());\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to capture a list of specific type with mockito\n----------Explanation----------\nThe nested generics-problem can be avoided with the @Captor annotation :\n----------Code Sample----------\n@RunWith(MockitoJUnitRunner.class)\npublic class Test{\n\n@Mock\nprivate Service service;\n\n@Captor\nprivate ArgumentCaptor> captor;\n\n@Test \npublic void shouldDoStuffWithListValues() {\n//...\nverify(service).doStuff(captor.capture()));\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nHow to sort ArrayList using Comparator?\n----------Explanation----------\nUse the Collections.sort(List, Comparator) method:\n----------Code Sample----------\nCollections.sort(students, Student.getCompByName());\n\nList students = new ArrayList();\n\npublic static void main(String[] args) {\nStudent[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};\nList students = new ArrayList(Arrays.asList(studentArr));\nCollections.sort(students, Student.getCompByName());\n\nfor(Student student:students){\nSystem.out.println(student.getName());\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nhow to use an array list?\n----------Explanation----------\nThe following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:\n----------Code Sample----------\nimport java.util.*;\n\n//...\n\nList list = new ArrayList();\nlist.add(""Hello!"");\nlist.add(""How are you?"");\n\nSystem.out.println(list.get(0)); // prints ""Hello!""\n\nfor (String s : list) {\nSystem.out.println(s);\n} // prints ""Hello!"", ""How are you?""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nwhat is the sense of final ArrayList?\n----------Explanation----------\nThis means that you cannot rebind the variable to point to a different collection instance :\n----------Code Sample----------\nfinal List list = new ArrayList();\nlist = new ArrayList(); // Since `list\' is final, this won\'t compile\n\nfinal List list = Collections.unmodifiableList(new ArrayList(...));\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to add strings into an arraylist between two strings\n----------Explanation----------\nThird, to do what you ask for, there is overloaded method add for choosing position :\n----------Code Sample----------\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(1,""Maybe""); //insert into position 1 and shift everything to the right.\n\n[Yes, Maybe, No]\n\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(1, ""Or"");\nlist.add(3, ""Or"");\nSystem.out.println(list);\n\n[Yes, Or, No, Or, Maybe]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nList orList = addOr(list);\nSystem.out.println(orList);\n}\n\npublic static List addOr(List list){\nList newList = new ArrayList<>();\nint count = 0;\nfor(String text : list){\ncount++;\nnewList.add(text);\nif (count != list.size()){\nnewList.add(""Or"");\n}\n}\nreturn newList;\n}\n\n[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nString niceOutput = addOr(list);\nSystem.out.println(""Choose from following options: "" + niceOutput);\n} \n\npublic static String addOr(List list){\nString orText = """";\nint count = 0;\nfor(String text : list){\ncount++;\norText += \'\\\'\' + text + \'\\\'\';\nif (count != list.size()){\norText += "" or "";\n}\n}\nreturn orText; \n}\n\nChoose from following options: \'Yes\' or \'No\' or \'Maybe\' or \'Probably\' or \'Never\'\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?\n----------Explanation----------\nYou can change the behaviour of ArrayList\n----------Code Sample----------\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nsuper.add(mt);\nCollections.sort(list, comparator);\nreturn true;\n}\n}; \n\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nint index = Collections.binarySearch(this, mt);\nif (index < 0) index = ~index;\nsuper.add(index, mt);\nreturn true;\n}\n};\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nDynamic initialization of ArrayList\n----------Explanation----------\n\n----------Code Sample----------\nprivate void setModel(Class type) {\nArrayList arrayList = new ArrayList();\n}\n\nprivate ArrayList getModel(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\npublic class Tester {\n\nprivate ArrayList getModels(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = (ArrayList) t.getModels(Data.class);\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = (ArrayList) t.getModels(Magic.class);\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Tester {\n\nprivate ArrayList getModel() {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = t.getModel();\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = t.getModel();\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Data {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Data() {\n}\n\n\npublic Data(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n\npublic class Magic {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Magic() {\n}\n\n\npublic Magic(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava Velocity foreach loop\n----------Explanation----------\nFor an ArrayList populated as below --\n----------Code Sample----------\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\n\n#foreach($iter in $list)\n$!iter\n#set($list_str=$!list_str+$!iter+"","")\n#end\n$!list_str\n\ntry\nto\nfigure\nit\ntry,to,figure,it,\n\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\nlist.add(null);\n\ntry\nto\nfigure\nit\n\ntry,to,figure,it,$!iter,\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nArrayList contains case sensitivity\n----------Explanation----------\nYou can use this exactly like you\'d use any other ArrayList. You can pass this List out to other code, and external code won\'t have to understand any string wrapper classes.\n----------Code Sample----------\npublic class CustomStringList3 extends ArrayList {\n@Override\npublic boolean contains(Object o) {\nString paramStr = (String)o;\nfor (String s : this) {\nif (paramStr.equalsIgnoreCase(s)) return true;\n}\nreturn false;\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\n\'Catch branch is identical\' however still requires me to catch it\n----------Explanation----------\nYou can collapse exception branches if they\'re identical, and with the multi-catch syntax, you\'ll wind up with one catch statement that does the same thing as your three:\n----------Code Sample----------\ntry {\nFileInputStream e = new FileInputStream(""outings.ser"");\nObjectInputStream inputStream = new ObjectInputStream(e);\nreturn (ArrayList)inputStream.readObject();\n} catch (ClassNotFoundException | IOException var3) {\nvar3.printStackTrace();\n}\nreturn null;\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nPassing ArrayList of string arrays from one activity to another in android\n----------Explanation----------\nYou can use intents\n----------Code Sample----------\nArrayList mylist = new ArrayList(); \nIntent intent = new Intent(ActivityName.this, Second.class);\nintent.putStringArrayListExtra(""key"", mylist);\nstartActivity(intent);\n\nIntent i = getIntent(); \nArrayList list = i.getStringArrayListExtra(""key"");\n\nname The name of the extra data, with package prefix.\nvalue The ArrayList data value.\n\nReturns the same Intent object, for chaining multiple calls into a single statement.\n\nString[] people = {\n""Mike Strong"",\n""Jennifer Anniston"",\n""Tom Bennet"",\n""Leander Paes"",\n""Liam Nesson"",\n""George Clooney"",\n""Barack Obama"",\n""Steve Jobs"",\n""Larry Page"",\n""Sergey Brin"",\n""Steve Wozniak""\n};\nString[] people1 = {\n""raghu"", \n""hello""\n};\n\n\nArrayList list = new ArrayList();\nlist.add(people);\nlist.add(people1);\nIntent i = new Intent(MainActivity.this,SecondActivity.class);\ni.putExtra(""key"", list);\nstartActivity(i); \n\nIntent in = getIntent();\nArrayList list =(ArrayList) in.getSerializableExtra(""key"");\nfor(int i=0;i {\nString s[]= list.get(i);\nfor(int iv=0;iv Log.i(""..............:"",""""+s[iv]);\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?\n----------Explanation----------\nHow is the HashMap declaration expressed in that scope? It should be:\n----------Code Sample----------\nHashMap dictMap\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap> dictMap\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nJava: How to efficiently read from database?\n----------Explanation----------\n\n----------Code Sample----------\ndouble[] data1 = new double[data.size()];\nfor(int a = 0; a < data1.length; ++a) {\ndata1[a]=data.get(a);\n}\n\ndouble[] data1 = data.toArray(new double[data.size()]);\n\nArrayList data = new ArrayList();\n\nArrayList data = new ArrayList(AMOUNT_OF_RECORDS);\n\nselect distinct price_open from stock_data ...\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nJava ArrayList and HashMap on-the-fly\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList() {\n{\nadd(""value1"");\nadd(""value2"");\n}\n};\n\nMap map = new HashMap() {\n{\nput(""key1"", ""value1"");\nput(""key2"", ""value2"");\n}\n};\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\njava multidimensional arraylist\n----------Explanation----------\nYou have to create a new ArrayList for each new row. Replacing\n----------Code Sample----------\nworkArray.clear();\n\nworkArray = new ArrayList();\n\nArrayList workArray = new ArrayList(); \n\nArrayList> workMatrix = new ArrayList<>();\nArrayList workArray = new ArrayList<>(); \nworkMatrix.add(workArray);\n\n// This prints ""true"": The first element of the matrix\n// and the workArray are IDENTICAL. (Not only equal, \n// but really IDENTICAL)\nSystem.out.println(workMatrix.get(0) == workArray);\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nArrayList initialization equivalent to array initialization\n----------Explanation----------\nArrays.asList can help here:\n----------Code Sample----------\nnew ArrayList(Arrays.asList(1,2,3,5,8,13,21));\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nHow can I calculate the difference between two ArrayLists?\n----------Explanation----------\nIn Java, you can use the Collection interface\'s removeAll method.\n----------Code Sample----------\n// Create a couple ArrayList objects and populate them\n// with some delicious fruits.\nCollection firstList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\n}};\n\nCollection secondList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\nadd(""banana"");\nadd(""strawberry"");\n}};\n\n// Show the ""before"" lists\nSystem.out.println(""First List: "" + firstList);\nSystem.out.println(""Second List: "" + secondList);\n\n// Remove all elements in firstList from secondList\nsecondList.removeAll(firstList);\n\n// Show the ""after"" list\nSystem.out.println(""Result: "" + secondList);\n\nFirst List: [apple, orange]\nSecond List: [apple, orange, banana, strawberry]\nResult: [banana, strawberry]\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nBaseExpandableListAdapter add child programmatically\n----------Explanation----------\nin which i\'ve initialize ExpandableListAdapter\n----------Code Sample----------\n/*\n* view types\n*/\nSortCategoryExpand sortCategoryExpand = new SortCategoryExpand();\n\nprivate static final int VIEW_1 = 0;\nprivate static final int View_2 = 1;\nprivate static final int View_3=2;\n* data\nprivate Context context = null;\nArrayList groups = new ArrayList();\npublic ExpandableListAdapter(Context context) {\nthis.context = context;\n}\n@Override\npublic int getChildType(int groupPosition, int childPosition) {\nint type = -1;\nif (groupPosition == 2) {\ntype = View_3;\n}\nelse if (groupPosition == 1) {\ntype = View_2;\n}else {\ntype = View_1;\nreturn type;\npublic int getChildTypeCount() {\n// Past and Future Travel Plans\nreturn 3;\npublic Object getChild(int groupPosition, int childPosition) {\nreturn groups.get(groupPosition).entryItems.get(childPosition);\npublic long getChildId(int groupPosition, int childPosition) {\nreturn childPosition;\npublic View getChildView(int groupPosition, int childPosition,\nboolean isLastChild, View convertView, ViewGroup parent) {\n// get the type of the group this child belongs\nType viewType = groups.get(groupPosition).type;\nView view = convertView;\nif (viewType == Type.Data1) {\nif (view == null) {\nview = LayoutInflater.from(context).inflate(\nR.layout.category_absence_line_item, parent, false);\nData1ViewHolder holder = new Data1ViewHolder ();\nholder.txtSubject = (TextView) view.findViewById(R.id.subject);\nholder.txtFromUser = (TextView) view.findViewById(R.id.user);\nholder.txtStartDate = (TextView) view\n.findViewById(R.id.startDate);\nholder.txtEndDate = (TextView) view.findViewById(R.id.endDate);\nview.setTag(holder);\n}\nData1ViewHolder holder = (Data1ViewHolder ) view.getTag();\nEntryItem entryItem = (EntryItem) getChild(groupPosition,\nchildPosition);\nif (entryItem.subject.equals(""None"")) {\nholder.txtSubject.setText(""None"");\n} else {\nholder.txtSubject.setText("""" + entryItem.subject);\nif (entryItem.fromUser.equals(""None"")) {\nholder.txtFromUser.setText("""");\n} else if (entryItem.fromUser.equals(""anyType{}"")) {\nholder.txtFromUser.setText(""From User : "");\nholder.txtFromUser.setText(""From User : "" + entryItem.fromUser);\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)\n.equals(""01-Jan-1970"")) {\nholder.txtStartDate.setText(""Start Date : None"");\n} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(\nentryItem.startDate).equals(""03-Mar-3800"")) {\nholder.txtStartDate.setText("""");\nholder.txtStartDate.setText(""Start Date : ""\n+ new SimpleDateFormat(""dd-MMM-yyyy"")\n.format(entryItem.startDate));\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)\nholder.txtEndDate.setText(""Due Date : None"");\nentryItem.endDate).equals(""03-Mar-3800"")) {\nholder.txtEndDate.setText(""Due Date : ""\n.format(entryItem.endDate));\n}else ifviewType == Type.Data2){\nR.layout.category_ticket_line_item, parent, false);\nData2ViewHolder holder = new Data2ViewHolder ();\nData2ViewHolder holder = (Data2ViewHolder ) view.getTag();\nelse if(viewType == Type.Data3){\nR.layout.category_timesheet_line_item, parent, false);\nData3ViewHolder holder = new Data3ViewHolder ();\nData3ViewHolder holder = (Data3ViewHolder ) view.getTag();\nreturn view;\npublic int getChildrenCount(int groupPosition) {\nreturn groups.get(groupPosition).entryItems.size();\npublic Object getGroup(int groupPosition) {\nreturn groups.get(groupPosition);\npublic int getGroupCount() {\nreturn groups.size();\npublic long getGroupId(int groupPosition) {\nreturn groupPosition;\npublic View getGroupView(int groupPosition, boolean isExpanded,\nView convertView, ViewGroup parent) {\nview = null;\nR.layout.expandable_list_group_absenceview, parent,\nfalse);\nholder.textabsence = (TextView) view\n.findViewById(R.id.AbsencegroupHeader);\nholder.imageAbsence = (ImageView) view\n.findViewById(R.id.AbsenceexpandableIcon);\nholder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""\n+ groups.get(groupPosition).entryItems.size() + "")"");\nif (groups.get(groupPosition).entryItems.size() == 0) {\nholder.imageAbsence.setVisibility(View.INVISIBLE);\nint imageResourceId = isExpanded ? android.R.drawable.arrow_up_float\n: android.R.drawable.arrow_down_float;\nholder.imageAbsence.setImageResource(imageResourceId);\nholder.imageAbsence.setVisibility(View.VISIBLE);\n}else if(viewType == Type.Data2) {\nR.layout.expandable_list_group_ticketview, parent,\nholder.textticket = (TextView) view\n.findViewById(R.id.TicketgroupHeader);\nholder.imageTicket= (ImageView) view\n.findViewById(R.id.TicketexpandableIcon);\nData2ViewHolder holder = (Data2ViewHolder) view.getTag();\nholder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""\nholder.imageTicket.setVisibility(View.INVISIBLE);\nholder.imageTicket.setImageResource(imageResourceId);\nholder.imageTicket.setVisibility(View.VISIBLE);\nelse if(viewType == Type.Data3) {\nR.layout.expandable_list_group_timesheetview, parent,\nholder.texttimesheet = (TextView) view\n.findViewById(R.id.TimesheetgroupHeader);\nholder.imageTimesheet= (ImageView) view\n.findViewById(R.id.TimesheetexpandableIcon);\nholder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""\nholder.imageTimesheet.setVisibility(View.INVISIBLE);\nholder.imageTimesheet.setImageResource(imageResourceId);\nholder.imageTimesheet.setVisibility(View.VISIBLE);\npublic boolean hasStableIds() {\nreturn true;\npublic boolean isChildSelectable(int groupPosition, int childPosition) {\npublic void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {\ngroups.clear();\nif (aryAbsence != null) {\nGroup g1 = new Group();\ng1.type = Type.Absence;\ng1.entryItems.clear();\ng1.entryItems = new ArrayList(aryAbsence);\ngroups.add(g1);\nif (aryTicket != null) {\nGroup g2 = new Group();\ng2.type = Type.Ticket;\ng2.entryItems.clear();\ng2.entryItems = new ArrayList(aryTicket);\ngroups.add(g2);\nif (aryTimeSheet != null) {\nGroup g3 = new Group();\ng3.type = Type.TimeSheet;\ng3.entryItems.clear();\ng3.entryItems = new ArrayList(aryTimeSheet);\ngroups.add(g3);\nnotifyDataSetChanged();\n* Holder for the Past view type\npublic static class Data1ViewHolder {\npublic ImageView imageAbsence;\npublic TextView textabsence;\npublic TextView txtEndDate;\npublic TextView txtStartDate;\npublic TextView txtFromUser;\npublic TextView txtSubject;\npublic static class Data2ViewHolder {\npublic ImageView imageTicket;\npublic TextView textticket;\npublic static class Data3ViewHolder {\npublic ImageView imageTimesheet;\npublic TextView texttimesheet;\n* Wrapper for each group that contains the list elements and the type of\n* travel.\npublic static class Group {\npublic enum Type {\nData_1,Data_2,Data_3;\n};\npublic Type type;\nArrayList entryItems = new ArrayList();\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nModifier static is only allowed in constant variable declarations\n----------Explanation----------\nYou can make the Control class static.\n----------Code Sample----------\nprivate static class Control {\n^^^^^^\n\n// Ok to have static members:\npublic static ArrayList keys = new ArrayList();\n\n...\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nWhy are variables declared with their interface name in Java?\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList();\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nHow do I find out what type each object is in a ArrayList?\n----------Explanation----------\n\n----------Code Sample----------\nArrayList list = ...;\n// List list = ...;\nforeach (object o in list) {\nif (o is int) {\nHandleInt((int)o);\n}\nelse if (o is string) {\nHandleString((string)o);\n}\n...\n}\n\nArrayList list = ...;\nfor (Object o : list) {\nif (o.getClass().equals(Integer.class)) {\nhandleInt((int)o);\n}\nelse if (o.getClass().equals(String.class)) {\nhandleString((String)o);\n}\n...\n}\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nNullPointerException when I try to call a method outside my main method\n----------Explanation----------\n\n----------Code Sample----------\nimport java.util.*;\n\npublic class SummationPuzzle \n{\n\npublic static ArrayList fsList;\npublic static ArrayList lastW;\npublic static ArrayList finaList;\n\n/**\n* Reads in 3 words entered by user and converts the first two string into a single ArrayList\n* takes the third string entered and converts it into it\'s own ArrayList\n* @param firstW\n* @param secondW\n* @param thirdW\n*/\npublic static void convertStr(String firstW, String secondW, String thirdW)\n{\nString combined = new String(firstW + secondW); \nfor(int i = 0; i< combined.length(); i++)\n{\nfsList.add(combined.charAt(i));\nfor(int j = 0; j< thirdW.length(); j++)\n{\nlastW.add(thirdW.charAt(j));\n}\n}\nremoveDuplicate(fsList, lastW);\n//feeds the resulting lists into the removeDuplicate method\n}\n\n/**\n* Combines two ArrayList into a one ArrayList with single instances of the char\n* @param fsList\n* @param lastW\n*/\npublic static void removeDuplicate(ArrayList fsList, ArrayList lastW)\n{\npublic static ArrayList fsList = new ArrayList();\npublic static ArrayList lastW = new ArrayList();\npublic static ArrayList finaList = new ArrayList();\ntempList.addAll(fsList);\ntempList.addAll(lastW);\nfor(char dupLetter : tempList)\n{\nif(!finaList.contains(dupLetter))\n{\nfinaList.add(dupLetter);\n}\n}\nSystem.out.println(finaList + ""This is the list with duplicates removed"");\nassignNum(finaList, lastW);\n//feeds results into the assignNum method\n}\n\n/**\n* Assigns a random number to the char that resides at each address in the ArrayList\n* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program\n* assigns that character the value of ""1""\n* @param finaList\n* @param lastW\n*/\npublic static void assignNum(ArrayList finaList, ArrayList lastW)\n{\nchar[] assignLetter= new char[finaList.size()];\nRandom r = new Random();\nfor(int i = 0; i< assignLetter.length; i++)\n{\nassignLetter[i] = finaList.get(i);\nassignLetter[i] = (char)r.nextInt(assignLetter.length);\nSystem.out.println((long)assignLetter[i]);\nif(lastW.get(0).equals(assignLetter[i]))\n{\nassignLetter[i] = 1;\n}\n}\n\nSystem.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");\n\n}\n\n\n//main method\npublic static void main(String[] args)\n\n{\n//Receive user input\nScanner userIn = new Scanner(System.in);\nSystem.out.println(""Please enter your first word"");\nString firstW = userIn.next().trim();\nSystem.out.println(""Please enter your Second word"");\nString secondW = userIn.next().trim();\nSystem.out.println(""Please enter your Third word"");\nString thirdW = userIn.next().trim();\n\n\n//print the summation puzzle\nSystem.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);\nconvertStr(firstW, secondW, thirdW);\n}\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow to sort an ArrayList in Java\n----------Explanation----------\nUse a Comparator like this:\n----------Code Sample----------\nList fruits= new ArrayList();\n\nFruit fruit;\nfor(int i = 0; i < 100; i++)\n{\nfruit = new Fruit();\nfruit.setname(...);\nfruits.add(fruit);\n}\n\n// Sorting\nCollections.sort(fruits, new Comparator() {\n@Override\npublic int compare(Fruit fruit2, Fruit fruit1)\n{\n\nreturn fruit1.fruitName.compareTo(fruit2.fruitName);\n}\n});\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow to pass an ArrayList to a varargs method parameter?\n----------Explanation----------\nUse the toArray(T[] arr) method.\n----------Code Sample----------\n.getMap(locations.toArray(new WorldLocation[locations.size()]))\n\npublic static void method(String... strs) {\nfor (String s : strs)\nSystem.out.println(s);\n}\n\n...\nList strs = new ArrayList();\nstrs.add(""hello"");\nstrs.add(""wordld"");\n\nmethod(strs.toArray(new String[strs.size()]));\n// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nRemove Duplicates from ArrayList filled with POJOs\n----------Explanation----------\n\n----------Code Sample----------\npackage test.urlstore;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\n\npublic class DuplicateDemo{\n\npublic static void main(String[] args) throws Exception {\nList urlStores = new ArrayList();\nUrlStore usg = new UrlStore(""google"");\nUrlStore usy = new UrlStore(""yahoo"");\nUrlStore usb = new UrlStore(""bing"");\nUrlStore usa = new UrlStore(""ask"");\nUrlStore usd = new UrlStore(""duckduckgo"");\n\n\nusg.setData(""mail"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""doc"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusy.setData(""search"");\nurlStores.add(usy);\nusy.setData(""search"");\nurlStores.add(usy);\nusb.setData(""search"");\nurlStores.add(usb);\nusb.setData(""search"");\nurlStores.add(usb);\nusa.setData(""search"");\nurlStores.add(usa);\nusd.setData(""search"");\nurlStores.add(usd);\n\nSystem.out.println(""before removing duplicates"");\n// before removing duplicates\nfor (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n}\n\nSystem.out.println(""\\n\\nafter removing duplicates"");\n//removing duplicates\nSet uniqueUrlStores = new HashSet(urlStores);\n\n//After removing duplicates\nfor (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n\n}\n\n}\n\n\n\nstatic class UrlStore {\n\npublic String url;\npublic String data;\n\npublic UrlStore(String url) {\nthis.url = url;\n}\n\npublic void setData(String data) {\nthis.data = data;\n}\n\n@Override\npublic String toString() {\nreturn ""UrlStore [url="" + url + "", data="" + data + ""]"";\n}\n\n@Override\npublic int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((data == null) ? 0 : data.hashCode());\nresult = prime * result + ((url == null) ? 0 : url.hashCode());\nreturn result;\n}\n\n@Override\npublic boolean equals(Object obj) {\nif (this == obj)\nreturn true;\nif (obj == null)\nreturn false;\nif (getClass() != obj.getClass())\nreturn false;\nUrlStore other = (UrlStore) obj;\nif (data == null) {\nif (other.data != null)\nreturn false;\n} else if (!data.equals(other.data))\nreturn false;\nif (url == null) {\nif (other.url != null)\nreturn false;\n} else if (!url.equals(other.url))\nreturn false;\nreturn true;\n}\n\n\n} \n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nWhat is the fastest way to split Integer into digits?\n----------Explanation----------\nA simple test like this one compares both approaches. """"""]']","['To convert a comma-separated String to an ArrayList in Java, you need to follow a series of steps. First, you split the String using the comma as a delimiter. This can be achieved using the split() method of the String class, which returns an array of substrings. Once you have the array of substrings, you can convert this array into an ArrayList. This can be done by using the Arrays.asList() method, which takes an array and returns a fixed-size list backed by the specified array. Finally, you can create a new ArrayList from this list if you need a resizable list. This process ensures that each element separated by a comma in the original String becomes an individual element in the ArrayList.']","['[\'[\\\'To convert a comma-separated String to an ArrayList in Java, you can use the `split` method of the `String` class to break the string into an array of substrings, and then use the `Arrays.asList` method to convert that array into a list. Finally, you can create an `ArrayList` from that list. Here is a step-by-step example:\\\\nimport java.util.ArrayList;\\\\nimport java.util.Arrays;\\\\npublic class CommaSeparatedStringToArrayList {\\\\n    public static void main(String[] args) {\\\\n        // Example comma-separated string\\\\n        String commaSeparatedString = ""apple,banana,orange,grape"";\\\\n        \\\\n        // Split the string by commas\\\\n        String[] itemsArray = commaSeparatedString.split("","");\\\\n        \\\\n        // Convert the array to a list\\\\n        ArrayList<String> itemsList = new ArrayList<>(Arrays.asList(itemsArray));\\\\n        \\\\n        // Print the ArrayList\\\\n        System.out.println(itemsList);\\\\n    }\\\\n}\\\']\']']",0.0396039603960396,0.1,0.8181818181818182,0.0009165902841429,1.0,0.3333333333333333
util,ArrayList,How to get ArrayList<Integer> and Scanner to play nice?,['The list returned from asList has <strong>fixed size</strong>.\nSo  if you want to be able to add or remove elements from the returned list in your code  you ll need to wrap it in a new <code>ArrayList</code>.\nThe list returned from <code>asList()</code> is backed by the original array.\nIf you modify the original array  the list will be modified as well.\nhttps://github.com/google/guava/wiki/CollectionUtilitiesExplained#static-constructors  rel= noreferrer >factory methods</a> allow the types to be inferred most of the time.\nBut it s not the only reason (and Java 7 isn t everywhere yet): the shorthand syntax is also very handy  and the methods initializers  as seen above  allow to write more expressive code.\nUse the JDK s <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html  rel= noreferrer ><code>Arrays</code></a> class and its <a href= https://docs.oracle.com/en/java/javase/18/docs/api/java.base/java/util/Arrays.html#asList(T...)  rel= noreferrer ><code>asList()</code></a>\nAPI s methods by way of simply extending an <code>AbstractList</code>\n(so  adding or removing elements is unsupported)  however it allows calls to <code>set()</code> to override elements.\nstatic factory method in order to create a <code>List</code> literal.\nFilling twice a big list is exactly what you don t want to do because it will create another <code>Object[]</code> array each time the capacity needs to be extended.</p>\n<p>Fortunately the JDK implementation is fast and <code>Arrays.asList(a[])</code> is very well done.\nArrayList where the Object[] data points directly to the array.</p>\n<pre><code>// in Arrays @SafeVarargs public static &lt;T&gt; List&lt;T&gt; asList(T... a) {     return new ArrayList&lt;&gt;(a); } //still in Arrays  creating a private unseen class private static class ArrayList&lt;E&gt;\n<p>The dangerous side is that <strong>if you change the initial array  you change the List !</strong>\n<p><strong>Summary</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>many</em> more use-cases than <code>LinkedList</code>.\nIn <code>LinkedList</code> inserting an element takes O(n) time and accessing also takes O(n) time but <code>LinkedList</code> uses more memory than <code>ArrayList</code>.</p> <p><code>LinkedList</code> and <code>ArrayList</code> are two different implementations of the <code>List</code> interface.\nAs with standard linked list and array operations  the various methods will have different algorithmic runtimes.</p> <p>For <a href= https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/LinkedList.html  rel= noreferrer ><code>LinkedList&lt;E&gt;</code></a></p> <ul> <li><code>get(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>getFirst()</code> and <code>getLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>add(int index  E element)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>addFirst()</code> and <code>addLast()</code>/<code>add()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>remove(int index)</code> is <em>O(n)</em> (with <em>n/4</em> steps on average)  but <em>O(1)</em> when <code>index = 0</code> or <code>index = list.size() - 1</code> (in this case  you can also use <code>removeFirst()</code> and <code>removeLast()</code>).\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>Iterator.remove()</code> is <em>O(1)</em>. <strong>\nOne of the main benefits of</strong> <code>LinkedList&lt;E&gt;</code></li> <li><code>ListIterator.add(E element)</code> is <em>O(1)</em>. <strong>\nsteps in the worst case (start of list)</sup></p> <p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>  but only sequential access of elements.\nIn other words  you can walk the list forwards or backwards  but finding a position in the list takes time proportional to the size of the list.\nJavadoc says <em>&quot;operations that index into the list will traverse the list from the beginning or the end  whichever is closer&quot;</em>  so those methods are <em>O(n)</em>\n(<em>n/4</em> steps) on average  though <em>O(1)</em> for <code>index = 0</code>.</p> <p><code>ArrayList&lt;E&gt;</code>  on the other hand  allow fast random read access  so you can grab any element in constant time.\nBut adding or removing from anywhere but the end requires shifting all the latter elements over  either to make an opening or fill the gap.\nIterating over either kind of List is practically equally cheap.\nIn an array list  the remainder of the array needs to be <em>moved</em> (i.e. copied).\nthe desired position can be computed mathematically and accessed in <em>O(1)</em>.</p> <p>\nAnother benefit of using a <code>LinkedList</code> arises when you add or remove from the head of the list  since those operations are <em>O(1)</em>  while they are <em>O(n)</em> for <code>ArrayList</code>.\nLinkedList</code> for adding and removing from the head  but it is not a <code>List</code>.</p> <p>\nAlso  if you have large lists  keep in mind that memory usage is also different.\nEach element of a <code>LinkedList</code> has more overhead since pointers to the next and previous elements are also stored.\nThe default initial capacity of an <code>ArrayList</code> is pretty small (10 from Java 1.4 - 1.8).\nBut since the underlying implementation is an array  the array must be resized if you add a lot of elements.\nTo avoid the high cost of resizing when you know you re going to add a lot of elements  construct the <code>ArrayList</code>\nIf the data structures perspective is used to understand the two structures  a LinkedList is basically a sequential data structure which contains a head Node.\nThe Node is a wrapper for two components : a value of type T [accepted through generics] and another reference to the Node linked to it.\nAddition of elements takes linear time in LinkedList as stated above.</p> <p>An ArrayList is a growable array.\nUnder the hood  when an element is added  and the ArrayList is already full to capacity  it creates another array with a size which is greater than previous size.\nThe elements are then copied from previous array to new one and the elements that are to be added are also placed at the specified indices.</p>\n<p>Thus far  nobody seems to have addressed the memory footprint of each of these lists besides the general consensus that a <code>LinkedList</code> is  lots more  than an <code>ArrayList</code>\nIn practice  the capacity of the backing array in an <code>ArrayList</code> is generally larger than its current element count.</p>\nAs CompressedOops is default now from mid JDK6 and up  the values below for 64-bit machines will basically match their 32-bit counterparts  unless of course you specifically turn it off.</p>\n<p>The result clearly shows that <code>LinkedList</code> is a whole lot more than <code>ArrayList</code>  especially with a very high element count.\nNote the reason for the mods is because all objects in java will take up a multiple of 8 bytes space regardless of whether it is all used or not.</p>\nAny indexed operation requires a traversal  i.e. has O(n) performance.\nThis is not obvious in the source code  leading to algorithms O(n) slower than if <code>ArrayList</code> was used.</li> <li>\n<p>ArrayLists are good for write-once-read-many or appenders  but bad at add/remove from the front or middle.</p>\nAs someone who has been doing operational performance engineering on very large scale SOA web services for about a decade  I would prefer the behavior of LinkedList over ArrayList.\nWhile the steady-state throughput of LinkedList is worse and therefore might lead to buying more hardware -- the behavior of ArrayList under pressure could lead to apps in a cluster expanding their arrays in near synchronicity and for large array sizes could lead to lack of responsiveness in the app and an outage  while under pressure  which is catastrophic behavior.</p>\n<p>Similarly  you can get better throughput in an app from the default throughput tenured garbage collector  but once you get java apps with 10GB heaps you can wind up locking up the app for 25 seconds during a Full GCs which causes timeouts and failures in SOA apps and blows your SLAs if it occurs too often.\nEven though the CMS collector takes more resources and does not achieve the same raw throughput  it is a much better choice because it has more predictable and smaller latency.</p> <p>\nArrayList is only a better choice for performance if all you mean by performance is throughput and you can ignore latency.\nI d like to add that ArrayList will optimize for sequential reading of memory and minimize cache-line and TLB misses  etc.\nThe copying overhead when the array grows past the bounds is likely inconsequential by comparison (and can be done by efficient CPU operations).\nThe only situations where a LinkedList might make sense would be something highly contrived where you had thousands of Lists any one of which might grow to be GB-sized  but where no good guess could be made at allocation-time of the List and setting them all to GB-sized would blow up the heap.\nAnd if you found some problem like that  then it really does call for reengineering whatever your solution is (and I don t like to lightly suggest reengineering old code because I myself maintain piles and piles of old code  but that d be a very good case of where the original design has simply run out of runway and does need to be chucked).\nThere are some very specific algorithms where a LinkedList is called for  but those are very  very rare and the algorithm will usually specifically depend on LinkedList s ability to insert and delete elements in the middle of the list relatively quickly  once you ve navigated there with a ListIterator.</p>\n<p>There is one common use case in which LinkedList outperforms ArrayList: that of a queue.\nHowever  if your goal is performance  instead of LinkedList you should also consider using an ArrayBlockingQueue (if you can determine an upper bound on your queue size ahead of time  and can afford to allocate all the memory up front)  or this <a href= http://www.javaspecialists.eu/archive/Issue027.html  rel= noreferrer >CircularArrayList implementation</a>.\n<code>LinkedList</code> is fast for appending or deleting large elements at the ends of a list  but slow to access a specific element.\n<p>Edit/Remove is faster in <code>LinkedList</code> than <code>ArrayList</code>.</p>\n<p><code>ArrayList</code>  backed by <code>Array</code>  which needs to be double the size  is worse in large volume application.</p>\n//Note: ArrayList is 26 time faster here than LinkedList for addAll()\n//Note: ArrayList is 9 times faster than LinkedList for add sequentially\n//Note: LinkedList is 3000 nanosecond faster than ArrayList for insert randomly.\n//Note: LinkedList is 10 millisecond faster than ArrayList while removing item.\n//Note: Linked List is 500 Milliseconds faster than ArrayList\n<p><code>ArrayList</code> is essentially an array.\n<code>LinkedList</code> is implemented as a double linked list.\n<p>The <code>get</code> is pretty clear. O(1) for <code>ArrayList</code>  because <code>ArrayList</code> allow random access by using index.\nO(n) for <code>LinkedList</code>  because it needs to find the index first.\n<p><code>LinkedList</code> is faster in add and remove  but slower in get.\n<p>Classes that has a natural sort order (a class Number  as an example) should implement the Comparable interface  whilst classes that has no natural sort order (a class Chair  as an example) should be provided with a Comparator (or an anonymous Comparator class).</p>\n<p>With Java 8 you can use a method reference for your comparator:</p>'],"['Most common way to construct:\nArrayList list = new ArrayList();\nBased on 161 examples\n\n void\tsort()\n\n          Sorts this list.\n\n\nsort\n\nThis is a method placeholder, which does not actually exist in the API. The description below should suggest how to achieve the behavior that this method would provide, if it existed.\npublic void sort()\nUse java.util.Collections.sort(List).']",['Your problem is here :\n\n while(scan.hasNextInt()){  <-- This will loop untill you enter any non integer value\n     list.add(scan.nextInt());\n  }\nYou just have to enter a character say e.g q once you finished entering all the integer values and then your program will print expected results.\n\nSample Input :14 17 18 33 54 1 4 6 q'],"['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nJava, Using Iterator to search an ArrayList and delete matching objects\n----------Explanation----------\nYou don\'t need them on one line, just use remove to remove an item when it matches:\n----------Code Sample----------\nimport java.util.*;\npublic class ListExample {\npublic static final void main(String[] args) {\nList list = new ArrayList(5);\nString targetCaption = ""match"";\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nlist.add(new Friend(""match""));\nlist.add(new Friend(""non-match""));\nIterator it = list.iterator();\nwhile (it.hasNext()) {\nif (it.next().getFriendCaption().equals(targetCaption)) {\nit.remove();\n// If you know it\'s unique, you could `break;` here\n}\n}\n}\nprivate static class Friend {\nprivate String friendCaption;\npublic Friend(String fc) {\nthis.friendCaption = fc;\n}\npublic String getFriendCaption() {\nreturn this.friendCaption;\n}\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nDetect and prevent duplicate names ArrayList\n----------Explanation----------\n\n----------Code Sample----------\npublic class Fraction {\nint x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? true\n\npublic class Fraction {\npublic int x, int y;\npublic Fraction(int x, int y) { this.x=x;this.y=y;}\n@Override\npublic boolean equals(Object o) {\nif (o==null) return false;\nif (o==this) return true;\nif (!(o instanceof Fraction) return false;\nFraction f = (Fraction) o;\nreturn f.x == x && f.y ==y;\n}\n}\n\nList fractions = new ArrayList();\nFraction f1 = new Fraction(1,2);\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nif (!fractions.contains(f1))\nSystem.out.println(""added fraction? ""+fractions.add(f1));\n\nadded fraction? true\nadded fraction? false\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nJava: How to read a text file\n----------Explanation----------\nYou can use Files#readAllLines() to get all lines of a text file into a List<String> .\n----------Code Sample----------\nList numbers = new ArrayList<>();\nfor (String line : Files.readAllLines(Paths.get(""/path/to/file.txt""))) {\nfor (String part : line.split(""\\\\s+"")) {\nInteger i = Integer.valueOf(part);\nnumbers.add(i);\n}\n}\n\nList numbers = Files.lines(Paths.get(""/path/to/test.txt""))\n.map(line -> line.split(""\\\\s+"")).flatMap(Arrays::stream)\n.map(Integer::valueOf)\n.collect(Collectors.toList());\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to capture a list of specific type with mockito\n----------Explanation----------\nThe nested generics-problem can be avoided with the @Captor annotation :\n----------Code Sample----------\n@RunWith(MockitoJUnitRunner.class)\npublic class Test{\n\n@Mock\nprivate Service service;\n\n@Captor\nprivate ArgumentCaptor> captor;\n\n@Test \npublic void shouldDoStuffWithListValues() {\n//...\nverify(service).doStuff(captor.capture()));\n}\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nHow to sort ArrayList using Comparator?\n----------Explanation----------\nUse the Collections.sort(List, Comparator) method:\n----------Code Sample----------\nCollections.sort(students, Student.getCompByName());\n\nList students = new ArrayList();\n\npublic static void main(String[] args) {\nStudent[] studentArr = new Student[]{new Student(""Mike""),new Student(""Hector""), new Student(""Reggie""),new Student(""zark"")};\nList students = new ArrayList(Arrays.asList(studentArr));\nCollections.sort(students, Student.getCompByName());\n\nfor(Student student:students){\nSystem.out.println(student.getName());\n}\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nhow to use an array list?\n----------Explanation----------\nThe following snippet gives an example that shows how to get an element from a List at a specified index, and also how to use the advanced for-each loop to iterate through all elements:\n----------Code Sample----------\nimport java.util.*;\n\n//...\n\nList list = new ArrayList();\nlist.add(""Hello!"");\nlist.add(""How are you?"");\n\nSystem.out.println(list.get(0)); // prints ""Hello!""\n\nfor (String s : list) {\nSystem.out.println(s);\n} // prints ""Hello!"", ""How are you?""\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nwhat is the sense of final ArrayList?\n----------Explanation----------\nThis means that you cannot rebind the variable to point to a different collection instance :\n----------Code Sample----------\nfinal List list = new ArrayList();\nlist = new ArrayList(); // Since `list\' is final, this won\'t compile\n\nfinal List list = Collections.unmodifiableList(new ArrayList(...));\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to add strings into an arraylist between two strings\n----------Explanation----------\nThird, to do what you ask for, there is overloaded method add for choosing position :\n----------Code Sample----------\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(1,""Maybe""); //insert into position 1 and shift everything to the right.\n\n[Yes, Maybe, No]\n\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(1, ""Or"");\nlist.add(3, ""Or"");\nSystem.out.println(list);\n\n[Yes, Or, No, Or, Maybe]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nList orList = addOr(list);\nSystem.out.println(orList);\n}\n\npublic static List addOr(List list){\nList newList = new ArrayList<>();\nint count = 0;\nfor(String text : list){\ncount++;\nnewList.add(text);\nif (count != list.size()){\nnewList.add(""Or"");\n}\n}\nreturn newList;\n}\n\n[Yes, Or, No, Or, Maybe, Or, Probably, Or, Never]\n\npublic static void main(String[] args) {\nList list = new ArrayList();\nlist.add(""Yes"");\nlist.add(""No"");\nlist.add(""Maybe"");\nlist.add(""Probably"");\nlist.add(""Never"");\n\nString niceOutput = addOr(list);\nSystem.out.println(""Choose from following options: "" + niceOutput);\n} \n\npublic static String addOr(List list){\nString orText = """";\nint count = 0;\nfor(String text : list){\ncount++;\norText += \'\\\'\' + text + \'\\\'\';\nif (count != list.size()){\norText += "" or "";\n}\n}\nreturn orText; \n}\n\nChoose from following options: \'Yes\' or \'No\' or \'Maybe\' or \'Probably\' or \'Never\'\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nJava List Sorting: Is there a way to keep a list permantly sorted automatically like TreeMap?\n----------Explanation----------\nYou can change the behaviour of ArrayList\n----------Code Sample----------\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nsuper.add(mt);\nCollections.sort(list, comparator);\nreturn true;\n}\n}; \n\nList list = new ArrayList() {\npublic boolean add(MyType mt) {\nint index = Collections.binarySearch(this, mt);\nif (index < 0) index = ~index;\nsuper.add(index, mt);\nreturn true;\n}\n};\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nDynamic initialization of ArrayList\n----------Explanation----------\n\n----------Code Sample----------\nprivate void setModel(Class type) {\nArrayList arrayList = new ArrayList();\n}\n\nprivate ArrayList getModel(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\npublic class Tester {\n\nprivate ArrayList getModels(Class type) {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = (ArrayList) t.getModels(Data.class);\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = (ArrayList) t.getModels(Magic.class);\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Tester {\n\nprivate ArrayList getModel() {\nArrayList arrayList = new ArrayList();\nreturn arrayList;\n}\n\n\npublic static void main(String[] args) {\nData data = new Data(12, ""test_12"");\nMagic magic = new Magic(123, ""test_123"");\n\nTester t = new Tester();\n\nArrayList datas = t.getModel();\ndatas.add(data);\nfor(Data data2 : datas) {\nSystem.out.println(data2);\n}\n\nArrayList magics = t.getModel();\nmagics.add(magic);\nfor(Magic magic2 : magics) {\nSystem.out.println(magic2);\n}\n\n}\n\n}\n\npublic class Data {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Data() {\n}\n\n\npublic Data(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n\npublic class Magic {\n\nprivate Integer id;\nprivate String name;\n\n\npublic Magic() {\n}\n\n\npublic Magic(Integer id, String name) {\nsuper();\nthis.id = id;\nthis.name = name;\n}\n\n\npublic Integer getId() {\nreturn id;\n}\n\npublic void setId(Integer id) {\nthis.id = id;\n}\n\npublic String getName() {\nreturn name;\n}\n\npublic void setName(String name) {\nthis.name = name;\n}\n\n\n@Override\npublic String toString() {\nreturn ""Data ["" + (id != null ? ""id="" + id + "", "" : """") + (name != null ? ""name="" + name : """") + ""]"";\n}\n\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nJava Velocity foreach loop\n----------Explanation----------\nFor an ArrayList populated as below --\n----------Code Sample----------\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\n\n#foreach($iter in $list)\n$!iter\n#set($list_str=$!list_str+$!iter+"","")\n#end\n$!list_str\n\ntry\nto\nfigure\nit\ntry,to,figure,it,\n\nArrayList list=new ArrayList();\nlist.add(""try"");\nlist.add(""to"");\nlist.add(""figure"");\nlist.add(""it"");\nlist.add(null);\n\ntry\nto\nfigure\nit\n\ntry,to,figure,it,$!iter,\n*******************end of usage scenario 11***************** \n\n*******************usage scenario 12********************** \n----------usage scenario----------\nArrayList contains case sensitivity\n----------Explanation----------\nYou can use this exactly like you\'d use any other ArrayList. You can pass this List out to other code, and external code won\'t have to understand any string wrapper classes.\n----------Code Sample----------\npublic class CustomStringList3 extends ArrayList {\n@Override\npublic boolean contains(Object o) {\nString paramStr = (String)o;\nfor (String s : this) {\nif (paramStr.equalsIgnoreCase(s)) return true;\n}\nreturn false;\n}\n}\n*******************end of usage scenario 12***************** \n\n*******************usage scenario 13********************** \n----------usage scenario----------\n\'Catch branch is identical\' however still requires me to catch it\n----------Explanation----------\nYou can collapse exception branches if they\'re identical, and with the multi-catch syntax, you\'ll wind up with one catch statement that does the same thing as your three:\n----------Code Sample----------\ntry {\nFileInputStream e = new FileInputStream(""outings.ser"");\nObjectInputStream inputStream = new ObjectInputStream(e);\nreturn (ArrayList)inputStream.readObject();\n} catch (ClassNotFoundException | IOException var3) {\nvar3.printStackTrace();\n}\nreturn null;\n*******************end of usage scenario 13***************** \n\n*******************usage scenario 14********************** \n----------usage scenario----------\nPassing ArrayList of string arrays from one activity to another in android\n----------Explanation----------\nYou can use intents\n----------Code Sample----------\nArrayList mylist = new ArrayList(); \nIntent intent = new Intent(ActivityName.this, Second.class);\nintent.putStringArrayListExtra(""key"", mylist);\nstartActivity(intent);\n\nIntent i = getIntent(); \nArrayList list = i.getStringArrayListExtra(""key"");\n\nname The name of the extra data, with package prefix.\nvalue The ArrayList data value.\n\nReturns the same Intent object, for chaining multiple calls into a single statement.\n\nString[] people = {\n""Mike Strong"",\n""Jennifer Anniston"",\n""Tom Bennet"",\n""Leander Paes"",\n""Liam Nesson"",\n""George Clooney"",\n""Barack Obama"",\n""Steve Jobs"",\n""Larry Page"",\n""Sergey Brin"",\n""Steve Wozniak""\n};\nString[] people1 = {\n""raghu"", \n""hello""\n};\n\n\nArrayList list = new ArrayList();\nlist.add(people);\nlist.add(people1);\nIntent i = new Intent(MainActivity.this,SecondActivity.class);\ni.putExtra(""key"", list);\nstartActivity(i); \n\nIntent in = getIntent();\nArrayList list =(ArrayList) in.getSerializableExtra(""key"");\nfor(int i=0;i {\nString s[]= list.get(i);\nfor(int iv=0;iv Log.i(""..............:"",""""+s[iv]);\n}\n*******************end of usage scenario 14***************** \n\n*******************usage scenario 15********************** \n----------usage scenario----------\nHashMap(key: String, value: ArrayList) returns an Object instead of ArrayList?\n----------Explanation----------\nHow is the HashMap declaration expressed in that scope? It should be:\n----------Code Sample----------\nHashMap dictMap\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap dictMap = new HashMap();\n...\nArrayList current = dictMap.get(dictCode);\n\nHashMap> dictMap\n*******************end of usage scenario 15***************** \n\n*******************usage scenario 16********************** \n----------usage scenario----------\nJava: How to efficiently read from database?\n----------Explanation----------\n\n----------Code Sample----------\ndouble[] data1 = new double[data.size()];\nfor(int a = 0; a < data1.length; ++a) {\ndata1[a]=data.get(a);\n}\n\ndouble[] data1 = data.toArray(new double[data.size()]);\n\nArrayList data = new ArrayList();\n\nArrayList data = new ArrayList(AMOUNT_OF_RECORDS);\n\nselect distinct price_open from stock_data ...\n*******************end of usage scenario 16***************** \n\n*******************usage scenario 17********************** \n----------usage scenario----------\nJava ArrayList and HashMap on-the-fly\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList() {\n{\nadd(""value1"");\nadd(""value2"");\n}\n};\n\nMap map = new HashMap() {\n{\nput(""key1"", ""value1"");\nput(""key2"", ""value2"");\n}\n};\n*******************end of usage scenario 17***************** \n\n*******************usage scenario 18********************** \n----------usage scenario----------\njava multidimensional arraylist\n----------Explanation----------\nYou have to create a new ArrayList for each new row. Replacing\n----------Code Sample----------\nworkArray.clear();\n\nworkArray = new ArrayList();\n\nArrayList workArray = new ArrayList(); \n\nArrayList> workMatrix = new ArrayList<>();\nArrayList workArray = new ArrayList<>(); \nworkMatrix.add(workArray);\n\n// This prints ""true"": The first element of the matrix\n// and the workArray are IDENTICAL. (Not only equal, \n// but really IDENTICAL)\nSystem.out.println(workMatrix.get(0) == workArray);\n*******************end of usage scenario 18***************** \n\n*******************usage scenario 19********************** \n----------usage scenario----------\nArrayList initialization equivalent to array initialization\n----------Explanation----------\nArrays.asList can help here:\n----------Code Sample----------\nnew ArrayList(Arrays.asList(1,2,3,5,8,13,21));\n*******************end of usage scenario 19***************** \n\n*******************usage scenario 20********************** \n----------usage scenario----------\nHow can I calculate the difference between two ArrayLists?\n----------Explanation----------\nIn Java, you can use the Collection interface\'s removeAll method.\n----------Code Sample----------\n// Create a couple ArrayList objects and populate them\n// with some delicious fruits.\nCollection firstList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\n}};\n\nCollection secondList = new ArrayList() {{\nadd(""apple"");\nadd(""orange"");\nadd(""banana"");\nadd(""strawberry"");\n}};\n\n// Show the ""before"" lists\nSystem.out.println(""First List: "" + firstList);\nSystem.out.println(""Second List: "" + secondList);\n\n// Remove all elements in firstList from secondList\nsecondList.removeAll(firstList);\n\n// Show the ""after"" list\nSystem.out.println(""Result: "" + secondList);\n\nFirst List: [apple, orange]\nSecond List: [apple, orange, banana, strawberry]\nResult: [banana, strawberry]\n*******************end of usage scenario 20***************** \n\n*******************usage scenario 21********************** \n----------usage scenario----------\nBaseExpandableListAdapter add child programmatically\n----------Explanation----------\nin which i\'ve initialize ExpandableListAdapter\n----------Code Sample----------\n/*\n* view types\n*/\nSortCategoryExpand sortCategoryExpand = new SortCategoryExpand();\n\nprivate static final int VIEW_1 = 0;\nprivate static final int View_2 = 1;\nprivate static final int View_3=2;\n* data\nprivate Context context = null;\nArrayList groups = new ArrayList();\npublic ExpandableListAdapter(Context context) {\nthis.context = context;\n}\n@Override\npublic int getChildType(int groupPosition, int childPosition) {\nint type = -1;\nif (groupPosition == 2) {\ntype = View_3;\n}\nelse if (groupPosition == 1) {\ntype = View_2;\n}else {\ntype = View_1;\nreturn type;\npublic int getChildTypeCount() {\n// Past and Future Travel Plans\nreturn 3;\npublic Object getChild(int groupPosition, int childPosition) {\nreturn groups.get(groupPosition).entryItems.get(childPosition);\npublic long getChildId(int groupPosition, int childPosition) {\nreturn childPosition;\npublic View getChildView(int groupPosition, int childPosition,\nboolean isLastChild, View convertView, ViewGroup parent) {\n// get the type of the group this child belongs\nType viewType = groups.get(groupPosition).type;\nView view = convertView;\nif (viewType == Type.Data1) {\nif (view == null) {\nview = LayoutInflater.from(context).inflate(\nR.layout.category_absence_line_item, parent, false);\nData1ViewHolder holder = new Data1ViewHolder ();\nholder.txtSubject = (TextView) view.findViewById(R.id.subject);\nholder.txtFromUser = (TextView) view.findViewById(R.id.user);\nholder.txtStartDate = (TextView) view\n.findViewById(R.id.startDate);\nholder.txtEndDate = (TextView) view.findViewById(R.id.endDate);\nview.setTag(holder);\n}\nData1ViewHolder holder = (Data1ViewHolder ) view.getTag();\nEntryItem entryItem = (EntryItem) getChild(groupPosition,\nchildPosition);\nif (entryItem.subject.equals(""None"")) {\nholder.txtSubject.setText(""None"");\n} else {\nholder.txtSubject.setText("""" + entryItem.subject);\nif (entryItem.fromUser.equals(""None"")) {\nholder.txtFromUser.setText("""");\n} else if (entryItem.fromUser.equals(""anyType{}"")) {\nholder.txtFromUser.setText(""From User : "");\nholder.txtFromUser.setText(""From User : "" + entryItem.fromUser);\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.startDate)\n.equals(""01-Jan-1970"")) {\nholder.txtStartDate.setText(""Start Date : None"");\n} else if (new SimpleDateFormat(""dd-MMM-yyyy"").format(\nentryItem.startDate).equals(""03-Mar-3800"")) {\nholder.txtStartDate.setText("""");\nholder.txtStartDate.setText(""Start Date : ""\n+ new SimpleDateFormat(""dd-MMM-yyyy"")\n.format(entryItem.startDate));\nif (new SimpleDateFormat(""dd-MMM-yyyy"").format(entryItem.endDate)\nholder.txtEndDate.setText(""Due Date : None"");\nentryItem.endDate).equals(""03-Mar-3800"")) {\nholder.txtEndDate.setText(""Due Date : ""\n.format(entryItem.endDate));\n}else ifviewType == Type.Data2){\nR.layout.category_ticket_line_item, parent, false);\nData2ViewHolder holder = new Data2ViewHolder ();\nData2ViewHolder holder = (Data2ViewHolder ) view.getTag();\nelse if(viewType == Type.Data3){\nR.layout.category_timesheet_line_item, parent, false);\nData3ViewHolder holder = new Data3ViewHolder ();\nData3ViewHolder holder = (Data3ViewHolder ) view.getTag();\nreturn view;\npublic int getChildrenCount(int groupPosition) {\nreturn groups.get(groupPosition).entryItems.size();\npublic Object getGroup(int groupPosition) {\nreturn groups.get(groupPosition);\npublic int getGroupCount() {\nreturn groups.size();\npublic long getGroupId(int groupPosition) {\nreturn groupPosition;\npublic View getGroupView(int groupPosition, boolean isExpanded,\nView convertView, ViewGroup parent) {\nview = null;\nR.layout.expandable_list_group_absenceview, parent,\nfalse);\nholder.textabsence = (TextView) view\n.findViewById(R.id.AbsencegroupHeader);\nholder.imageAbsence = (ImageView) view\n.findViewById(R.id.AbsenceexpandableIcon);\nholder.textabsence.setText(""Human Resource Absence"" + "" "" + ""(""\n+ groups.get(groupPosition).entryItems.size() + "")"");\nif (groups.get(groupPosition).entryItems.size() == 0) {\nholder.imageAbsence.setVisibility(View.INVISIBLE);\nint imageResourceId = isExpanded ? android.R.drawable.arrow_up_float\n: android.R.drawable.arrow_down_float;\nholder.imageAbsence.setImageResource(imageResourceId);\nholder.imageAbsence.setVisibility(View.VISIBLE);\n}else if(viewType == Type.Data2) {\nR.layout.expandable_list_group_ticketview, parent,\nholder.textticket = (TextView) view\n.findViewById(R.id.TicketgroupHeader);\nholder.imageTicket= (ImageView) view\n.findViewById(R.id.TicketexpandableIcon);\nData2ViewHolder holder = (Data2ViewHolder) view.getTag();\nholder.textticket.setText(""Ticket Approvals"" + "" "" + ""(""\nholder.imageTicket.setVisibility(View.INVISIBLE);\nholder.imageTicket.setImageResource(imageResourceId);\nholder.imageTicket.setVisibility(View.VISIBLE);\nelse if(viewType == Type.Data3) {\nR.layout.expandable_list_group_timesheetview, parent,\nholder.texttimesheet = (TextView) view\n.findViewById(R.id.TimesheetgroupHeader);\nholder.imageTimesheet= (ImageView) view\n.findViewById(R.id.TimesheetexpandableIcon);\nholder.texttimesheet.setText(""TimeSheet Approvals"" + "" "" + ""(""\nholder.imageTimesheet.setVisibility(View.INVISIBLE);\nholder.imageTimesheet.setImageResource(imageResourceId);\nholder.imageTimesheet.setVisibility(View.VISIBLE);\npublic boolean hasStableIds() {\nreturn true;\npublic boolean isChildSelectable(int groupPosition, int childPosition) {\npublic void setupTrips(ArrayList aryAbsence,ArrayList aryTicket, ArrayList aryTimeSheet) {\ngroups.clear();\nif (aryAbsence != null) {\nGroup g1 = new Group();\ng1.type = Type.Absence;\ng1.entryItems.clear();\ng1.entryItems = new ArrayList(aryAbsence);\ngroups.add(g1);\nif (aryTicket != null) {\nGroup g2 = new Group();\ng2.type = Type.Ticket;\ng2.entryItems.clear();\ng2.entryItems = new ArrayList(aryTicket);\ngroups.add(g2);\nif (aryTimeSheet != null) {\nGroup g3 = new Group();\ng3.type = Type.TimeSheet;\ng3.entryItems.clear();\ng3.entryItems = new ArrayList(aryTimeSheet);\ngroups.add(g3);\nnotifyDataSetChanged();\n* Holder for the Past view type\npublic static class Data1ViewHolder {\npublic ImageView imageAbsence;\npublic TextView textabsence;\npublic TextView txtEndDate;\npublic TextView txtStartDate;\npublic TextView txtFromUser;\npublic TextView txtSubject;\npublic static class Data2ViewHolder {\npublic ImageView imageTicket;\npublic TextView textticket;\npublic static class Data3ViewHolder {\npublic ImageView imageTimesheet;\npublic TextView texttimesheet;\n* Wrapper for each group that contains the list elements and the type of\n* travel.\npublic static class Group {\npublic enum Type {\nData_1,Data_2,Data_3;\n};\npublic Type type;\nArrayList entryItems = new ArrayList();\n*******************end of usage scenario 21***************** \n\n*******************usage scenario 22********************** \n----------usage scenario----------\nModifier static is only allowed in constant variable declarations\n----------Explanation----------\nYou can make the Control class static.\n----------Code Sample----------\nprivate static class Control {\n^^^^^^\n\n// Ok to have static members:\npublic static ArrayList keys = new ArrayList();\n\n...\n*******************end of usage scenario 22***************** \n\n*******************usage scenario 23********************** \n----------usage scenario----------\nWhy are variables declared with their interface name in Java?\n----------Explanation----------\n\n----------Code Sample----------\nList list = new ArrayList();\n*******************end of usage scenario 23***************** \n\n*******************usage scenario 24********************** \n----------usage scenario----------\nHow do I find out what type each object is in a ArrayList?\n----------Explanation----------\n\n----------Code Sample----------\nArrayList list = ...;\n// List list = ...;\nforeach (object o in list) {\nif (o is int) {\nHandleInt((int)o);\n}\nelse if (o is string) {\nHandleString((string)o);\n}\n...\n}\n\nArrayList list = ...;\nfor (Object o : list) {\nif (o.getClass().equals(Integer.class)) {\nhandleInt((int)o);\n}\nelse if (o.getClass().equals(String.class)) {\nhandleString((String)o);\n}\n...\n}\n*******************end of usage scenario 24***************** \n\n*******************usage scenario 25********************** \n----------usage scenario----------\nNullPointerException when I try to call a method outside my main method\n----------Explanation----------\n\n----------Code Sample----------\nimport java.util.*;\n\npublic class SummationPuzzle \n{\n\npublic static ArrayList fsList;\npublic static ArrayList lastW;\npublic static ArrayList finaList;\n\n/**\n* Reads in 3 words entered by user and converts the first two string into a single ArrayList\n* takes the third string entered and converts it into it\'s own ArrayList\n* @param firstW\n* @param secondW\n* @param thirdW\n*/\npublic static void convertStr(String firstW, String secondW, String thirdW)\n{\nString combined = new String(firstW + secondW); \nfor(int i = 0; i< combined.length(); i++)\n{\nfsList.add(combined.charAt(i));\nfor(int j = 0; j< thirdW.length(); j++)\n{\nlastW.add(thirdW.charAt(j));\n}\n}\nremoveDuplicate(fsList, lastW);\n//feeds the resulting lists into the removeDuplicate method\n}\n\n/**\n* Combines two ArrayList into a one ArrayList with single instances of the char\n* @param fsList\n* @param lastW\n*/\npublic static void removeDuplicate(ArrayList fsList, ArrayList lastW)\n{\npublic static ArrayList fsList = new ArrayList();\npublic static ArrayList lastW = new ArrayList();\npublic static ArrayList finaList = new ArrayList();\ntempList.addAll(fsList);\ntempList.addAll(lastW);\nfor(char dupLetter : tempList)\n{\nif(!finaList.contains(dupLetter))\n{\nfinaList.add(dupLetter);\n}\n}\nSystem.out.println(finaList + ""This is the list with duplicates removed"");\nassignNum(finaList, lastW);\n//feeds results into the assignNum method\n}\n\n/**\n* Assigns a random number to the char that resides at each address in the ArrayList\n* if the First char in the lastW ArrayList is present in the finaList ArrayList then the program\n* assigns that character the value of ""1""\n* @param finaList\n* @param lastW\n*/\npublic static void assignNum(ArrayList finaList, ArrayList lastW)\n{\nchar[] assignLetter= new char[finaList.size()];\nRandom r = new Random();\nfor(int i = 0; i< assignLetter.length; i++)\n{\nassignLetter[i] = finaList.get(i);\nassignLetter[i] = (char)r.nextInt(assignLetter.length);\nSystem.out.println((long)assignLetter[i]);\nif(lastW.get(0).equals(assignLetter[i]))\n{\nassignLetter[i] = 1;\n}\n}\n\nSystem.out.println(assignLetter.toString() + ""This is the list with numbers assigned"");\n\n}\n\n\n//main method\npublic static void main(String[] args)\n\n{\n//Receive user input\nScanner userIn = new Scanner(System.in);\nSystem.out.println(""Please enter your first word"");\nString firstW = userIn.next().trim();\nSystem.out.println(""Please enter your Second word"");\nString secondW = userIn.next().trim();\nSystem.out.println(""Please enter your Third word"");\nString thirdW = userIn.next().trim();\n\n\n//print the summation puzzle\nSystem.out.println(firstW+ "" + "" + secondW + "" = ""+ thirdW);\nconvertStr(firstW, secondW, thirdW);\n}\n}\n*******************end of usage scenario 25***************** \n\n*******************usage scenario 26********************** \n----------usage scenario----------\nHow to sort an ArrayList in Java\n----------Explanation----------\nUse a Comparator like this:\n----------Code Sample----------\nList fruits= new ArrayList();\n\nFruit fruit;\nfor(int i = 0; i < 100; i++)\n{\nfruit = new Fruit();\nfruit.setname(...);\nfruits.add(fruit);\n}\n\n// Sorting\nCollections.sort(fruits, new Comparator() {\n@Override\npublic int compare(Fruit fruit2, Fruit fruit1)\n{\n\nreturn fruit1.fruitName.compareTo(fruit2.fruitName);\n}\n});\n*******************end of usage scenario 26***************** \n\n*******************usage scenario 27********************** \n----------usage scenario----------\nHow to pass an ArrayList to a varargs method parameter?\n----------Explanation----------\nUse the toArray(T[] arr) method.\n----------Code Sample----------\n.getMap(locations.toArray(new WorldLocation[locations.size()]))\n\npublic static void method(String... strs) {\nfor (String s : strs)\nSystem.out.println(s);\n}\n\n...\nList strs = new ArrayList();\nstrs.add(""hello"");\nstrs.add(""wordld"");\n\nmethod(strs.toArray(new String[strs.size()]));\n// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n...\n*******************end of usage scenario 27***************** \n\n*******************usage scenario 28********************** \n----------usage scenario----------\nRemove Duplicates from ArrayList filled with POJOs\n----------Explanation----------\n\n----------Code Sample----------\npackage test.urlstore;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Set;\n\n\npublic class DuplicateDemo{\n\npublic static void main(String[] args) throws Exception {\nList urlStores = new ArrayList();\nUrlStore usg = new UrlStore(""google"");\nUrlStore usy = new UrlStore(""yahoo"");\nUrlStore usb = new UrlStore(""bing"");\nUrlStore usa = new UrlStore(""ask"");\nUrlStore usd = new UrlStore(""duckduckgo"");\n\n\nusg.setData(""mail"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""doc"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusg.setData(""search"");\nurlStores.add(usg);\nusg = new UrlStore(""google"");\nusy.setData(""search"");\nurlStores.add(usy);\nusy.setData(""search"");\nurlStores.add(usy);\nusb.setData(""search"");\nurlStores.add(usb);\nusb.setData(""search"");\nurlStores.add(usb);\nusa.setData(""search"");\nurlStores.add(usa);\nusd.setData(""search"");\nurlStores.add(usd);\n\nSystem.out.println(""before removing duplicates"");\n// before removing duplicates\nfor (Iterator iterator = urlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n}\n\nSystem.out.println(""\\n\\nafter removing duplicates"");\n//removing duplicates\nSet uniqueUrlStores = new HashSet(urlStores);\n\n//After removing duplicates\nfor (Iterator iterator = uniqueUrlStores.iterator(); iterator.hasNext();) {\nUrlStore urlStore = (UrlStore) iterator.next();\nSystem.out.println(urlStore.toString());\n\n}\n\n}\n\n\n\nstatic class UrlStore {\n\npublic String url;\npublic String data;\n\npublic UrlStore(String url) {\nthis.url = url;\n}\n\npublic void setData(String data) {\nthis.data = data;\n}\n\n@Override\npublic String toString() {\nreturn ""UrlStore [url="" + url + "", data="" + data + ""]"";\n}\n\n@Override\npublic int hashCode() {\nfinal int prime = 31;\nint result = 1;\nresult = prime * result + ((data == null) ? 0 : data.hashCode());\nresult = prime * result + ((url == null) ? 0 : url.hashCode());\nreturn result;\n}\n\n@Override\npublic boolean equals(Object obj) {\nif (this == obj)\nreturn true;\nif (obj == null)\nreturn false;\nif (getClass() != obj.getClass())\nreturn false;\nUrlStore other = (UrlStore) obj;\nif (data == null) {\nif (other.data != null)\nreturn false;\n} else if (!data.equals(other.data))\nreturn false;\nif (url == null) {\nif (other.url != null)\nreturn false;\n} else if (!url.equals(other.url))\nreturn false;\nreturn true;\n}\n\n\n} \n}\n*******************end of usage scenario 28***************** \n\n*******************usage scenario 29********************** \n----------usage scenario----------\nWhat is the fastest way to split Integer into digits?\n----------Explanation----------\nA simple test like this one compares both approaches. """"""]']","[""To get ArrayList<Integer> and Scanner to work well together in Java, you need to understand how to properly use the Scanner class to read input and then store that input into an ArrayList of Integers. The Scanner class is used to parse primitive types and strings using regular expressions. When working with an ArrayList of Integers, you typically want to read a series of integer inputs from the user. To achieve this, you can use the Scanner's nextInt() method to read integers from the input. You would then add these integers to the ArrayList using the add() method. It's important to handle potential exceptions, such as InputMismatchException, which can occur if the input is not an integer. Additionally, you should consider how to terminate the input process, which can be done by checking for a specific input value or by using a loop that continues until a certain condition is met. By carefully managing the input process and ensuring that only valid integers are added to the ArrayList, you can effectively use Scanner and ArrayList<Integer> together in your Java programs.""]","['[\'[\\\'To get ArrayList<Integer> and Scanner to work together, you can use the Scanner to read input from the user and then store those inputs in an ArrayList<Integer>. Below is an example that demonstrates how to do this. The program will prompt the user to enter integers, and it will store these integers in an ArrayList. The user can type \\\\\\\'done\\\\\\\' to finish the input process, and then the program will print out the contents of the ArrayList.\\\\nimport java.util.ArrayList;\\\\nimport java.util.Scanner;\\\\npublic class Main {\\\\n    public static void main(String[] args) {\\\\n        Scanner scanner = new Scanner(System.in);\\\\n        ArrayList<Integer> numbers = new ArrayList<>();\\\\n\\\\n        System.out.println(""Enter integers (type \\\\\\\'done\\\\\\\' to finish):"");\\\\n        while (true) {\\\\n            String input = scanner.nextLine();\\\\n            if (input.equalsIgnoreCase(""done"")) {\\\\n                break;\\\\n            }\\\\n            try {\\\\n                int number = Integer.parseInt(input);\\\\n                numbers.add(number);\\\\n            } catch (NumberFormatException e) {\\\\n                System.out.println(""Invalid input. Please enter an integer or \\\\\\\'done\\\\\\\' to finish."");\\\\n            }\\\\n        }\\\\n\\\\n        System.out.println(""You entered: "" + numbers);\\\\n    }\\\\n}\\\']\']']",0.0099009900990099,0.2,0.1666666666666666,0.0009165902841429,0.125,0.1428571428571428
util,Map,JAXB java.util.Map to key value pairs,['<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>\n<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.\n<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>\n<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>\nactually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>\nIf you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.\nThat means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>\nUsing a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();\nAs of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>\n(By the way  a map can t contain twice the same value  your second put will overwrite the first one.\nmap is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>\nIf you want your map to never change  you should after the initialization wrap your map by <code>Collections.\nThe map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.\nAlso  the key and the value of each entry is immutable  cannot be changed.\nSee the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>\nPass an existing map  get back an immutable copy of that map.</p> <p>\nFor efficiency  if the passed map is already truly immutable  the <code>copyOf</code>\nmethod produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.\nIf the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.\nWe see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>\nAn alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>\nThe utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>'],"['Most common way to construct:\nMap map = new HashMap();\nBased on 17 examples\n\nMany methods in Collections Framework interfaces are defined in terms of the {@link Object#equals(Object) equals} method. For example, the specification for the {@link #containsKey(Object) containsKey(Object key)} method says: ""returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k))."" This specification should not be construed to imply that invoking Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The {@link Object#hashCode()} specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying {@link Object} methods wherever the implementor deems it appropriate.']","['I\'m still working on a better solution but using MOXy JAXB, I\'ve been able to handle the following XML:\n\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<root>\n   <mapProperty>\n      <map>\n         <key>value</key>\n         <key2>value2</key2>\n      </map>\n   </mapProperty>\n</root>\nYou need to use an @XmlJavaTypeAdapter on your Map property:\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\n@XmlRootElement\npublic class Root {\n\n    private Map<String, String> mapProperty;\n\n    public Root() {\n        mapProperty = new HashMap<String, String>();\n    }\n\n    @XmlJavaTypeAdapter(MapAdapter.class)\n    public Map<String, String> getMapProperty() {\n        return mapProperty;\n    }\n\n    public void setMapProperty(Map<String, String> map) {\n        this.mapProperty = map;\n    }\n\n}\nThe implementation of the XmlAdapter is as follows:\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.xml.bind.annotation.adapters.XmlAdapter;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\n\npublic class MapAdapter extends XmlAdapter<AdaptedMap, Map<String, String>> {\n\n    @Override\n    public AdaptedMap marshal(Map<String, String> map) throws Exception {\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n        DocumentBuilder db = dbf.newDocumentBuilder();\n        Document document = db.newDocument();\n        Element rootElement = document.createElement(""map"");\n        document.appendChild(rootElement);\n\n        for(Entry<String,String> entry : map.entrySet()) {\n            Element mapElement = document.createElement(entry.getKey());\n            mapElement.setTextContent(entry.getValue());\n            rootElement.appendChild(mapElement);\n        }\n\n        AdaptedMap adaptedMap = new AdaptedMap();\n        adaptedMap.setValue(document);\n        return adaptedMap;\n    }\n\n    @Override\n    public Map<String, String> unmarshal(AdaptedMap adaptedMap) throws Exception {\n        Map<String, String> map = new HashMap<String, String>();\n        Element rootElement = (Element) adaptedMap.getValue();\n        NodeList childNodes = rootElement.getChildNodes();\n        for(int x=0,size=childNodes.getLength(); x<size; x++) {\n            Node childNode = childNodes.item(x);\n            if(childNode.getNodeType() == Node.ELEMENT_NODE) {\n                map.put(childNode.getLocalName(), childNode.getTextContent());\n            }\n        }\n        return map;\n    }\n\n}\nThe AdpatedMap class is where all the magic happens, we will use a DOM to represent the content. We will trick JAXB intro dealing with a DOM through the combination of @XmlAnyElement and a property of type Object:\n\nimport javax.xml.bind.annotation.XmlAnyElement;\n\npublic class AdaptedMap {\n\n    private Object value;\n\n    @XmlAnyElement\n    public Object getValue() {\n        return value;\n    }\n\n    public void setValue(Object value) {\n        this.value = value;\n    }\n\n}\nThis solution requires the MOXy JAXB implementation. You can configure the JAXB runtime to use the MOXy implementation by adding a file named jaxb.properties in with your model classes with the following entry:\n\njavax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory\nThe following demo code can be used to verify the code:\n\nimport java.io.File;\n\nimport javax.xml.bind.JAXBContext;\nimport javax.xml.bind.Marshaller;\nimport javax.xml.bind.Unmarshaller;\n\npublic class Demo {\n\n    public static void main(String[] args) throws Exception {\n        JAXBContext jc = JAXBContext.newInstance(Root.class);\n\n        Unmarshaller unmarshaller = jc.createUnmarshaller();\n        Root root = (Root) unmarshaller.unmarshal(new File(""src/forum74/input.xml""));\n\n        Marshaller marshaller = jc.createMarshaller();\n        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        marshaller.marshal(root, System.out);\n    }\n}']",['nan'],"[""JAXB (Java Architecture for XML Binding) is a framework that allows Java developers to map Java classes to XML representations. When dealing with a java.util.Map in JAXB, the default behavior does not directly support the serialization of Map objects to XML. To achieve this, you need to convert the Map into a format that JAXB can handle, such as a list of key-value pairs. This involves creating a wrapper class that contains a list of entries, where each entry represents a key-value pair. Each entry can be represented by a simple class with two fields: one for the key and one for the value. By annotating these fields with JAXB annotations, you can control how they are marshaled and unmarshaled to and from XML. This approach allows you to effectively serialize and deserialize a Map as a list of key-value pairs in XML, making it compatible with JAXB's capabilities.""]","['[\'[\\\'To convert a java.util.Map to key-value pairs using JAXB, we need to create a wrapper class that will hold the map and annotate it properly for JAXB to understand. JAXB (Java Architecture for XML Binding) allows us to convert Java objects to XML and vice versa. Below is an example of how to achieve this.\\\\nimport java.util.HashMap;\\\\nimport java.util.Map;\\\\nimport javax.xml.bind.JAXBContext;\\\\nimport javax.xml.bind.JAXBException;\\\\nimport javax.xml.bind.Marshaller;\\\\nimport javax.xml.bind.annotation.XmlElement;\\\\nimport javax.xml.bind.annotation.XmlElementWrapper;\\\\nimport javax.xml.bind.annotation.XmlRootElement;\\\\n@XmlRootElement(name = ""mapWrapper"")\\\\nclass MapWrapper {\\\\n    private Map<String, String> map = new HashMap<>();\\\\n\\\\n    @XmlElementWrapper(name = ""map"")\\\\n    @XmlElement(name = ""entry"")\\\\n    public Map<String, String> getMap() {\\\\n        return map;\\\\n    }\\\\n\\\\n    public void setMap(Map<String, String> map) {\\\\n        this.map = map;\\\\n    }\\\\n}\\\\n\\\\npublic class Main {\\\\n    public static void main(String[] args) throws JAXBException {\\\\n        MapWrapper mapWrapper = new MapWrapper();\\\\n        Map<String, String> map = new HashMap<>();\\\\n        map.put(""key1"", ""value1"");\\\\n        map.put(""key2"", ""value2"");\\\\n        mapWrapper.setMap(map);\\\\n\\\\n        JAXBContext context = JAXBContext.newInstance(MapWrapper.class);\\\\n        Marshaller marshaller = context.createMarshaller();\\\\n        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\\\\n\\\\n        marshaller.marshal(mapWrapper, System.out);\\\\n    }\\\\n}\\\']\']']",0.0357142857142857,0.8888888888888888,0.0096153846153846,1.0,1.0,0.25
util,Map,serialize json object which extends map,['<p>If your key is <strong>NOT</strong> guaranteed to be unique for all elements in the list  you should convert it to a <code>\n<p>Most of the answers listed miss a case when the <strong>list has duplicate items</strong>.\n<p>You can create a Stream of the indices using an IntStream and then convert them to a Map :</p>\n<p>I was trying to do this and found that  using the answers above  when using <code>Functions.identity()</code> for the key to the Map  then I had issues with using a local method like <code>this::localMethodName</code> to actually work because of typing issues.</p>\nactually does something to the typing in this case so the method would only work by returning <code>Object</code> and accepting a param of <code>Object</code></p>\nIf you want the map to be mutable  you could copy it again  e.g. using <code>mutableMap = new HashMap&lt;&gt;(Map.of(&quot;a&quot;  &quot;b&quot;));</code>.\nThat means the object of the outer class cannot be garbage collected while the created map object is still referenced  thus blocking additional memory</li> </ul> <p>\nUsing a function for initialization will also enable you to generate a map in an initializer  but avoids nasty side-effects:</p> <pre><code>Map&lt;String  String&gt; myMap = createMap();\nAs of 2021  Java has no Map literals (yet - I think they were proposed for Java 8  but didn t make it).</p> <p>\n(By the way  a map can t contain twice the same value  your second put will overwrite the first one.\nmap is an instance variable  put the initialization in a constructor or instance initializer:</p> <pre><code>\nIf you want your map to never change  you should after the initialization wrap your map by <code>Collections.\nThe map (a collection of entries) is immutable  so you cannot add or remove entries after instantiating.\nAlso  the key and the value of each entry is immutable  cannot be changed.\nSee the Javadoc</a> for other rules  such as no NULLs allowed  no duplicate keys allowed  and the iteration order of mappings is arbitrary.</p> <p>\nPass an existing map  get back an immutable copy of that map.</p> <p>\nFor efficiency  if the passed map is already truly immutable  the <code>copyOf</code>\nmethod produces a <em>view</em> onto the original map  a mere wrapper  not a true copy.\nIf the original map gets modified (<code>put</code>  <code>remove</code>  etc.)  the supposedly-unmodifiable will actually show the modification.\nWe see that the supposedly unmodifiable is indeed modifiable <em>indirectly</em>  by modifying the original map on which the unmodifiable map is a view.</li> <li>In contrast  the <code>copyOf</code>\nAn alternative way to get a map with null values using a builder syntax on Java 8 is writing a custom collector <strong>backed by a HashMap</strong>\nThe utility class isn t limited neither regarding the type of keys and values nor regarding the amount of entries nor regarding the type of the resulting Map.</p> <p>'],"['Most common way to construct:\nMap map = new HashMap();\nBased on 17 examples\n\nMany methods in Collections Framework interfaces are defined in terms of the {@link Object#equals(Object) equals} method. For example, the specification for the {@link #containsKey(Object) containsKey(Object key)} method says: ""returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k))."" This specification should not be construed to imply that invoking Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The {@link Object#hashCode()} specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying {@link Object} methods wherever the implementor deems it appropriate.']","['I came up with this solution:\n\npublic class ArrayToMapDeserializer extends JsonDeserializer<SortedMap<Object, Object>>\n    implements ContextualDeserializer {\n\n    private Class<?> keyAs;\n\n    private Class<?> contentAs;\n\n    @Override\n    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt)\n        throws IOException, JsonProcessingException {\n        return this.deserialize(p, ctxt, new HashMap<>());\n    }\n\n    @Override\n    public Map<Object, Object> deserialize(JsonParser p, DeserializationContext ctxt,\n        Map<Object, Object> intoValue) throws IOException, JsonProcessingException {\n        JsonNode node = p.readValueAsTree();\n        ObjectCodec codec = p.getCodec();\n        if (node.isArray()) {\n            node.forEach(entry -> {\n                try {\n                    JsonNode keyNode = entry.get(0);\n                    JsonNode valueNode = entry.get(1);\n                    intoValue.put(keyNode.traverse(codec).readValueAs(this.keyAs),\n                        valueNode.traverse(codec).readValueAs(this.contentAs));\n                } catch (NullPointerException | IOException e) {\n                    // skip entry\n                }\n            });\n        }\n        return intoValue;\n    }\n\n    @Override\n    public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property)\n        throws JsonMappingException {\n        JsonDeserialize jsonDeserialize = property.getAnnotation(JsonDeserialize.class);\n        this.keyAs = jsonDeserialize.keyAs();\n        this.contentAs = jsonDeserialize.contentAs();\n        return this;\n    }\n\n}\nwhich can be used like this:\n\npublic class Baz {\n\n    @JsonSerialize(using = MapToArraySerializer.class)\n    @JsonDeserialize(using = ArrayToMapDeserializer.class,\n        keyAs = Foo.class, contentAs = Bar.class)\n    Map<Foo, Bar> map;\n\n}']",['nan'],"[""To serialize a JSON object that extends a Map in Java, you need to understand how JSON serialization works with Java's Map interface. Java Maps are collections of key-value pairs, and JSON objects are similarly structured. To serialize such an object, you can use libraries like Jackson or Gson, which provide robust mechanisms for converting Java objects to JSON and vice versa. When a class extends Map, these libraries can automatically handle the serialization process by iterating over the entries in the Map and converting them to JSON key-value pairs. The resulting JSON object will have the same structure as the Map, with each key-value pair in the Map becoming a key-value pair in the JSON object. It is important to ensure that the keys and values in the Map are serializable types, meaning they can be converted to JSON format. If the Map contains complex objects, those objects must also be serializable. Additionally, you may need to configure the serialization library to handle specific requirements, such as custom serializers or deserializers, to manage how certain types are converted to and from JSON.""]","['[\'[\\\'To serialize a JSON object that extends a Map in Java, we can use the Jackson library. Jackson is a popular library for processing JSON in Java, including serialization and deserialization. Below is an example of how to achieve this.\\\\nimport com.fasterxml.jackson.core.JsonProcessingException;\\\\nimport com.fasterxml.jackson.databind.ObjectMapper;\\\\nimport java.util.HashMap;\\\\npublic class CustomMap extends HashMap<String, Object> {\\\\n    // Additional fields and methods can be added here\\\\n}\\\\n\\\\npublic class Main {\\\\n    public static void main(String[] args) {\\\\n        // Create an instance of CustomMap\\\\n        CustomMap customMap = new CustomMap();\\\\n        customMap.put(""key1"", ""value1"");\\\\n        customMap.put(""key2"", 123);\\\\n        customMap.put(""key3"", true);\\\\n\\\\n        // Serialize the CustomMap to JSON\\\\n        ObjectMapper objectMapper = new ObjectMapper();\\\\n        try {\\\\n            String jsonString = objectMapper.writeValueAsString(customMap);\\\\n            System.out.println(""Serialized JSON: "" + jsonString);\\\\n        } catch (JsonProcessingException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",0.6428571428571429,1.0,0.46,1.0,1.0,0.25
awt,Image,Take a screenshot and save as Image in Java,['nan'],['nan'],"['Use Robot#createScreenCapture().\n\nBufferedImage image = new Robot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));\nImageIO.write(image, ""png"", new File(""/screenshot.png""));']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCapture HTML Canvas as gif/jpg/png/pdf?\n----------Explanation----------\n\n----------Code Sample----------\nvar canvas = document.getElementById(""mycanvas"");\nvar img = canvas.toDataURL(""image/png"");\n\ndocument.write(\'\');\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nhow to show alternate image if source image is not found? (onerror working in IE but not in mozilla)\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHTML5 Canvas Resize (Downscale) Image High Quality?\n----------Explanation----------\nfiddle result : \nhttp://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ \nfiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/\n----------Code Sample----------\n// scales the image by (float) scale < 1\n// returns a canvas containing the scaled image.\nfunction downScaleImage(img, scale) {\nvar imgCV = document.createElement(\'canvas\');\nimgCV.width = img.width;\nimgCV.height = img.height;\nvar imgCtx = imgCV.getContext(\'2d\');\nimgCtx.drawImage(img, 0, 0);\nreturn downScaleCanvas(imgCV, scale);\n}\n\n// scales the canvas by (float) scale < 1\n// returns a new canvas containing the scaled image.\nfunction downScaleCanvas(cv, scale) {\nif (!(scale < 1) || !(scale > 0)) throw (\'scale must be a positive number <1 \');\nvar sqScale = scale * scale; // square scale = area of source pixel within target\nvar sw = cv.width; // source image width\nvar sh = cv.height; // source image height\nvar tw = Math.floor(sw * scale); // target image width\nvar th = Math.floor(sh * scale); // target image height\nvar sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array\nvar tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array\nvar tX = 0, tY = 0; // rounded tx, ty\nvar w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y\n// weight is weight of current source point within target.\n// next weight is weight of current source point within next target\'s point.\nvar crossX = false; // does scaled px cross its current px right border ?\nvar crossY = false; // does scaled px cross its current px bottom border ?\nvar sBuffer = cv.getContext(\'2d\').\ngetImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba\nvar tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb\nvar sR = 0, sG = 0, sB = 0; // source\'s current point r,g,b\n/* untested !\nvar sA = 0; //source alpha */ \n\nfor (sy = 0; sy < sh; sy++) {\nty = sy * scale; // y src position within target\ntY = 0 | ty; // rounded : target pixel\'s y\nyIndex = 3 * tY * tw; // line index within target array\ncrossY = (tY != (0 | ty + scale)); \nif (crossY) { // if pixel is crossing botton target pixel\nwy = (tY + 1 - ty); // weight of point within target pixel\nnwy = (ty + scale - tY - 1); // ... within y+1 target pixel\n}\nfor (sx = 0; sx < sw; sx++, sIndex += 4) {\ntx = sx * scale; // x src position within target\ntX = 0 | ?tx; // rounded : target pixel\'s x\ntIndex = yIndex + tX * 3; // target pixel index within target array\ncrossX = (tX != (0 | tx + scale));\nif (crossX) { // if pixel is crossing target pixel\'s right\nwx = (tX + 1 - tx); // weight of point within target pixel\nnwx = (tx + scale - tX - 1); // ... within x+1 target pixel\n}\nsR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.\nsG = sBuffer[sIndex + 1];\nsB = sBuffer[sIndex + 2];\n\n/* !! untested : handling alpha !!\nsA = sBuffer[sIndex + 3];\nif (!sA) continue;\nif (sA != 0xFF) {\nsR = (sR * sA) >> 8; // or use /256 instead ??\nsG = (sG * sA) >> 8;\nsB = (sB * sA) >> 8;\n}\n*/\nif (!crossX && !crossY) { // pixel does not cross\n// just add components weighted by squared scale.\ntBuffer[tIndex ] += sR * sqScale;\ntBuffer[tIndex + 1] += sG * sqScale;\ntBuffer[tIndex + 2] += sB * sqScale;\n} else if (crossX && !crossY) { // cross on X only\nw = wx * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tX+1) px \nnw = nwx * scale\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n} else if (crossY && !crossX) { // cross on Y only\nw = wy * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tY+1) px \nnw = nwy * scale\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n} else { // crosses both x and y : four target points involved\n// add weighted component for current px\nw = wx * wy;\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// for tX + 1; tY px\nnw = nwx * wy;\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n// for tX ; tY + 1 px\nnw = wx * nwy;\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n// for tX + 1 ; tY +1 px\nnw = nwx * nwy;\ntBuffer[tIndex + 3 * tw + 3] += sR * nw;\ntBuffer[tIndex + 3 * tw + 4] += sG * nw;\ntBuffer[tIndex + 3 * tw + 5] += sB * nw;\n}\n} // end for sx \n} // end for sy\n\n// create result canvas\nvar resCV = document.createElement(\'canvas\');\nresCV.width = tw;\nresCV.height = th;\nvar resCtx = resCV.getContext(\'2d\');\nvar imgRes = resCtx.getImageData(0, 0, tw, th);\nvar tByteBuffer = imgRes.data;\n// convert float32 array into a UInt8Clamped Array\nvar pxIndex = 0; // \nfor (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {\ntByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);\ntByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);\ntByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);\ntByteBuffer[tIndex + 3] = 255;\n}\n// writing result to canvas.\nresCtx.putImageData(imgRes, 0, 0);\nreturn resCV;\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to check a uploaded file whether it is a image or other file?\n----------Explanation----------\nI\'m assuming that you\'re running this in a servlet context. If it\'s affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .\n----------Code Sample----------\nString fileName = uploadedFile.getFileName();\nString mimeType = getServletContext().getMimeType(fileName);\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\ntry {\nImageIO.read(input).toString();\n// It\'s an image (only BMP, GIF, JPG and PNG are recognized).\n} catch (Exception e) {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nString mimeType = Magic.getMagicMatch(input, false).getMimeType();\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n} else {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nFiles.copy(input, new File(uploadFolder, fileName).toPath());\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava Switch Statement - Is ""or""/""and"" possible?\n----------Explanation----------\nYou can use switch-case fall through by omitting the break; statement.\n----------Code Sample----------\nchar c = /* whatever */;\n\nswitch(c) {\ncase \'a\':\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'b\':\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'z\':\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n\nchar c = Character.toUpperCase(/* whatever */);\n\nswitch(c) {\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow do you cache an image in Javascript\n----------Explanation----------\nSo, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it\'s probably best to do it with javascript as it generally won\'t hold up the page load when done from javascript. You can do that like this:\n----------Code Sample----------\nfunction preloadImages(array) {\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nvar list = preloadImages.list;\nfor (var i = 0; i < array.length; i++) {\nvar img = new Image();\nimg.onload = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = array[i];\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);\n\nfunction preloadImages(array, waitForOtherResources, timeout) {\nvar loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nif (!waitForOtherResources || document.readyState === \'complete\') {\nloadNow();\n} else {\nwindow.addEventListener(""load"", function() {\nclearTimeout(timer);\nloadNow();\n});\n// in case window.addEventListener doesn\'t get called (sometimes some resource gets stuck)\n// then preload the images anyway after some timeout time\ntimer = setTimeout(loadNow, t);\n}\n\nfunction loadNow() {\nif (!loaded) {\nloaded = true;\nfor (var i = 0; i < imgs.length; i++) {\nvar img = new Image();\nimg.onload = img.onerror = img.onabort = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = imgs[i];\n}\n}\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);\npreloadImages([""url99.jpg"", ""url98.jpg""], true);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCheck if an image is loaded (no errors) in JavaScript\n----------Explanation----------\nAnother option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here\'s an example of what I mean:\n----------Code Sample----------\n$("""")\n.on(\'load\', function() { console.log(""image loaded correctly""); })\n.on(\'error\', function() { console.log(""error loading image""); })\n.attr(""src"", $(originalImage).attr(""src""))\n;\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nUnable to read JPEG image using ImageIO.read(File file)\n----------Explanation----------\nRead a CMYK image into RGB BufferedImage.\n----------Code Sample----------\nFile f = new File(""/path/imagefile.jpg"");\n\n//Find a suitable ImageReader\nIterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");\nImageReader reader = null;\nwhile(readers.hasNext()) {\nreader = (ImageReader)readers.next();\nif(reader.canReadRaster()) {\nbreak;\n}\n}\n\n//Stream the image file (the original CMYK image)\nImageInputStream input = ImageIO.createImageInputStream(f); \nreader.setInput(input); \n\n//Read the image raster\nRaster raster = reader.readRaster(0, null); \n\n//Create a new RGB image\nBufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), \nBufferedImage.TYPE_4BYTE_ABGR); \n\n//Fill the new image with the old raster\nbi.getRaster().setRect(raster);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to upload and store an image with google app engine (java)\n----------Explanation----------\nDeclaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc\n----------Code Sample----------\n@Entity\npublic class MyImage {\n@PrimaryKey\n@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\nprivate Long id;\n\n@Persistent\nprivate String name;\n\n@Persistent\nBlob image;\n\npublic MyImage() { }\npublic MyImage(String name, Blob image) {\nthis.name = name; \nthis.image = image;\n}\n\n// JPA getters and setters and empty contructor\n// ...\npublic Blob getImage() { return image; }\npublic void setImage(Blob image) { this.image = image; }\n}\n\n// Your upload handle would look like\npublic void doPost(HttpServletRequest req, HttpServletResponse res) {\n// Get the image representation\nServletFileUpload upload = new ServletFileUpload();\nFileItemIterator iter = upload.getItemIterator(req);\nFileItemStream imageItem = iter.next();\nInputStream imgStream = imageItem.openStream();\n\n// construct our entity objects\nBlob imageBlob = new Blob(IOUtils.toByteArray(imgStream));\nMyImage myImage = new MyImage(imageItem.getName(), imageBlob);\n\n// persist image\nPersistenceManager pm = PMF.get().getPersistenceManager();\npm.makePersistent(myImage);\npm.close();\n\n// respond to query\nres.setContentType(""text/plain"");\nres.getOutputStream().write(""OK!"".getBytes());\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nAndroid Bitmap: Convert transparent pixels to a color\n----------Explanation----------\nIf you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .\n----------Code Sample----------\nBitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size\nimageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want\nCanvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image\ncanvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background\nimage.recycle(); // clear out old image\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nIs it possible to apply CSS to half of a character?\n----------Explanation----------\nHTML\n----------Code Sample----------\nNow on GitHub as a Plugin!\n\n\nenter image description here Feel free to fork and improve.\n\n\n\nDemo | Download Zip | Half-Style.com (Redirects to GitHub)\n\n\n\n\n\nPure CSS for a Single Character\n\nJavaScript used for automation accross text or multiple characters\n\nPreserves Text Accessibility for screen readers for the blind or visually\nimpaired\n\n\n\nPart1: Basic Solution\n\n\nHalf Style on text\n\n\n\nDemo: http://jsfiddle.net/pd9yB/817/\n\n\n\n\n\nThis works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.\n\n\n\nAlso, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.\n\n\n\nExplanation for a single character:\n\n\n\nPure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.\n\n\n\nFor each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won\'t need to hard code it for every instance.\n\n\n\nExplanation for any text:\n\n\n\nSimply add textToHalfStyle class to the element containing the text.\n\n\n\n\n\nCSS:\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: black; /* or transparent, any color */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    left:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: #f00;\n\n}\n\n\n\nSingle Characters:\n\n\n\nX\n\nY\n\nZ\n\nA\n\n\n\n\n\nAutomated:\n\n\n\n\n\nHalf-style, please.\n\n\n\njQuery(function($) {\n\n    var text, chars, $el, i, output;\n\n\n\n    // Iterate over all class occurences\n\n    $(\'.textToHalfStyle\').each(function(idx, el) {\n\n        $el = $(el);\n\n        text = $el.text();\n\n        chars = text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $el.html(\'\' + text + \'\');\n\n\n\n        // Reset output for appending\n\n        output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (i = 0; i < chars.length; i++) {\n\n            // Create a styled element for each character and append to container\n\n            output += \'\' + chars[i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $el.append(output);\n\n    });\n\n});\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before { /* creates the top part */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the bottom part */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 100%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the right 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the left 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    width: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\nbody{\n\n    background-color: black;\n\n}\n\n\n\n.textToHalfStyle{\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n\n\n.halfStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n\n\njQuery(function($) {\n\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n\n\n    // Iterate over all class occurrences\n\n    $(\'.textToHalfStyle\').each(function(idx, halfstyle_el) {\n\n        $halfstyle_el = $(halfstyle_el);\n\n        halfstyle_style = $halfstyle_el.data(\'halfstyle\');\n\n        halfstyle_text = $halfstyle_el.text();\n\n        halfstyle_chars = halfstyle_text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $halfstyle_el.html(\'\' + halfstyle_text + \'\');\n\n\n\n        // Reset output for appending\n\n        halfstyle_output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {\n\n            // Create a styled element for each character and append to container\n\n            halfstyle_output += \'\' + halfstyle_chars[halfstyle_i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $halfstyle_el.append(halfstyle_output);\n\n    });\n\n});\n\n\n\n /* start half-style hs-base */\n\n .halfStyle.hs-base {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #000; /* for demo purposes */\n\n}\n\n.halfStyle.hs-base:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    overflow:hidden;\n\n    color: #f00; /* for demo purposes */\n\n}\n\n /* end half-style hs-base */\n\n\n\n/* start half-style hs-horizontal-third */\n\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n/* end half-style hs-horizontal-third */\n\n\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n\n.halfStyle.hs-PeelingStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n/* end half-style hs-PeelingStyle */\n\n\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n\n.textToHalfStyle.hs-KevinGranger {\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle.hs-KevinGranger {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle.hs-KevinGranger:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n/* end half-style hs-KevinGranger\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n*******************end of usage scenario 11*****************\n\n\n\n*******************usage scenario 12**********************\n\n\n----------usage scenario----------\n\nChanging the image source using jQuery\n\n----------Explanation----------\n\nYou can use jQuery\'s  attr()  function.  For example, if you img tag has an id attribute of \'my_image\':\n\n----------Code Sample----------\n\n\n\n\n\n$(""#my_image"").attr(""src"",""second.jpg"");\n\n\n\n$(\'#my_image\').on({\n\n    \'click\': function(){\n\n        $(\'#my_image\').attr(\'src\',\'second.jpg\');\n\n    }\n\n});\n\n\n\n$(\'img\').on({\n\n    \'click\': function() {\n\n         var src = ($(this).attr(\'src\') === \'img1_on.jpg\')\n\n            ? \'img2_on.jpg\'\n\n            : \'img1_on.jpg\';\n\n         $(this).attr(\'src\', src);\n\n    }\n\n});\n\n*******************end of usage scenario 12*****************\n\n\n\n*******************usage scenario 13**********************\n\n\n----------usage scenario----------\n\nSetting background-image using jQuery CSS property\n\n----------Explanation----------\n\nYou probably want this (to make it like a normal CSS background-image declaration):\n\n----------Code Sample----------\n\n$(\'myOjbect\').css(\'background-image\', \'url(\' + imageUrl + \')\');\n\n*******************end of usage scenario 13*****************\n\n\n\n*******************usage scenario 14**********************\n\n\n----------usage scenario----------\n\nWhat is the best way to display millions of images in Java?\n\n----------Explanation----------\n\n\n\n----------Code Sample----------\n\nImage tile = new Image(""tile.png"");\n\n\n\nGroup house = new Group();\n\nhouse.setCache(true);\n\nhouse.setCacheHint(CacheHint.SPEED);\n\n\n\nEffect lighting = new Lighting();\n\n\n\nfor (int i = 0; i < houseWidth; i++) {\n\n  // here is the critical part => don\'t do new ImageView(new Image(""tile.png""))\n\n  ImageView tileView = new ImageView(tile));\n\n  tileView.setEffect(lighting);\n\n  tileView.setCache(true);\n\n  tileView.setCacheHint(CacheHint.SPEED);\n\n\n\n  house.add(tileView);  \n\n}\n\n*******************end of usage scenario 14*****************\n\n\n\n*******************usage scenario 15**********************\n\n\n----------usage scenario----------\n\nHow to flip BufferedImage in java\n\n----------Explanation----------\n\nBased on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .\n\n----------Code Sample----------\n\nimport java.awt.Component;\n\nimport java.awt.Graphics2D;\n\nimport java.awt.GridLayout;\n\nimport java.awt.RenderingHints;\n\nimport java.awt.geom.AffineTransform;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.image.ByteLookupTable;\n\nimport java.awt.image.LookupOp;\n\nimport java.awt.image.LookupTable;\n\nimport java.io.File;\n\nimport java.io.IOException;\n\nimport java.util.Arrays;\n\n\n\nimport javax.imageio.ImageIO;\n\nimport javax.swing.BorderFactory;\n\nimport javax.swing.ImageIcon;\n\nimport javax.swing.JFrame;\n\nimport javax.swing.JLabel;\n\nimport javax.swing.JPanel;\n\nimport javax.swing.SwingUtilities;\n\n\n\npublic class ImageFlipTest\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n        SwingUtilities.invokeLater(new Runnable()\n\n        {\n\n            @Override\n\n            public void run()\n\n            {\n\n                createAndShowGUI();\n\n            }\n\n        });\n\n    }\n\n\n\n    private static void createAndShowGUI()\n\n    {\n\n        JFrame frame = new JFrame();\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        frame.getContentPane().setLayout(new GridLayout(1, 1));\n\n\n\n        BufferedImage image = null;\n\n        try\n\n        {\n\n            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));\n\n        }\n\n        catch (IOException e1)\n\n        {\n\n            e1.printStackTrace();\n\n        }\n\n\n\n        JPanel panel = new JPanel(new GridLayout(2,2));\n\n        panel.add(createComponent(""Original"", image));\n\n        panel.add(createComponent(""Flipped"", createFlipped(image)));\n\n        panel.add(createComponent(""Rotated"", createRotated(image)));\n\n        panel.add(createComponent(""Inverted"", createInverted(image)));\n\n\n\n        frame.getContentPane().add(panel);\n\n        frame.pack();\n\n        frame.setLocationRelativeTo(null);\n\n        frame.setVisible(true);\n\n    }\n\n\n\n    private static BufferedImage convertToARGB(BufferedImage image)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }    \n\n\n\n    private static BufferedImage createFlipped(BufferedImage image)\n\n    {\n\n        AffineTransform at = new AffineTransform();\n\n        at.concatenate(AffineTransform.getScaleInstance(1, -1));\n\n        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createRotated(BufferedImage image)\n\n    {\n\n        AffineTransform at = AffineTransform.getRotateInstance(\n\n            Math.PI, image.getWidth()/2, image.getHeight()/2.0);\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createTransformed(\n\n        BufferedImage image, AffineTransform at)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.transform(at);\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }\n\n\n\n    private static BufferedImage createInverted(BufferedImage image)\n\n    {\n\n        if (image.getType() != BufferedImage.TYPE_INT_ARGB)\n\n        {\n\n            image = convertToARGB(image);\n\n        }\n\n        LookupTable lookup = new LookupTable(0, 4)\n\n        {\n\n            @Override\n\n            public int[] lookupPixel(int[] src, int[] dest)\n\n            {\n\n                dest[0] = (int)(255-src[0]);\n\n                dest[1] = (int)(255-src[1]);\n\n                dest[2] = (int)(255-src[2]);\n\n                return dest;\n\n            }\n\n        };\n\n        LookupOp op = new LookupOp(lookup, new RenderingHints(null));\n\n        return op.filter(image, null);\n\n    }\n""""""]']","[""To take a screenshot and save it as an image in Java, you need to utilize the `java.awt` and `javax.imageio` packages. The process involves capturing the screen content and then writing it to an image file. First, you create a `Robot` instance, which allows you to capture the screen. You then define the screen dimensions using a `Rectangle` object that specifies the area to capture. The `Robot` instance's `createScreenCapture` method is used to capture the screen content within the defined rectangle, returning a `BufferedImage` object. Finally, you use the `ImageIO` class to write the `BufferedImage` to a file in the desired format, such as PNG or JPEG. This process ensures that the screenshot is captured and saved as an image file on your system.""]","['[\'[\\\'To take a screenshot and save it as an image in Java, we can use the `java.awt` and `javax.imageio` packages. The following code demonstrates how to capture the screen and save it as a PNG file.\\\\nimport java.awt.AWTException;\\\\nimport java.awt.Rectangle;\\\\nimport java.awt.Robot;\\\\nimport java.awt.Toolkit;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class ScreenshotExample {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Create a Robot instance\\\\n            Robot robot = new Robot();\\\\n\\\\n            // Get the screen size\\\\n            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());\\\\n\\\\n            // Capture the screen shot of the area of the screen defined by the rectangle\\\\n            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);\\\\n\\\\n            // Save the screenshot as a PNG file\\\\n            ImageIO.write(screenFullImage, ""png"", new File(""screenshot.png""));\\\\n\\\\n            System.out.println(""A full screenshot saved!"");\\\\n        } catch (AWTException | IOException ex) {\\\\n            System.err.println(ex);\\\\n        }\\\\n    }\\\\n}\\\']\']']",1.0,1.0,0.2,0.0083945435466946,1.0,0.5
awt,Image,Is there a way to take a screenshot using Java and save it to some sort of Image?,['nan'],['nan'],"['GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();  \nGraphicsDevice[] screens = ge.getScreenDevices();       \nRectangle allScreenBounds = new Rectangle();  \nfor (GraphicsDevice screen : screens) {  \n       Rectangle screenBounds = screen.getDefaultConfiguration().getBounds();        \n       allScreenBounds.width += screenBounds.width;  \n       allScreenBounds.height = Math.max(allScreenBounds.height, screenBounds.height);\n       allScreenBounds.x=Math.min(allScreenBounds.x, screenBounds.x);\n       allScreenBounds.y=Math.min(allScreenBounds.y, screenBounds.y);\n      } \nRobot robot = new Robot();\nBufferedImage bufferedImage = robot.createScreenCapture(allScreenBounds);\nFile file = new File(""C:\\\\Users\\\\Joe\\\\Desktop\\\\scr.png"");\nif(!file.exists())\n    file.createNewFile();\nFileOutputStream fos = new FileOutputStream(file);\nImageIO.write( bufferedImage, ""png"", fos );\nbufferedImage will contain a full screenshot, this was tested with three monitors']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCapture HTML Canvas as gif/jpg/png/pdf?\n----------Explanation----------\n\n----------Code Sample----------\nvar canvas = document.getElementById(""mycanvas"");\nvar img = canvas.toDataURL(""image/png"");\n\ndocument.write(\'\');\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nhow to show alternate image if source image is not found? (onerror working in IE but not in mozilla)\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHTML5 Canvas Resize (Downscale) Image High Quality?\n----------Explanation----------\nfiddle result : \nhttp://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ \nfiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/\n----------Code Sample----------\n// scales the image by (float) scale < 1\n// returns a canvas containing the scaled image.\nfunction downScaleImage(img, scale) {\nvar imgCV = document.createElement(\'canvas\');\nimgCV.width = img.width;\nimgCV.height = img.height;\nvar imgCtx = imgCV.getContext(\'2d\');\nimgCtx.drawImage(img, 0, 0);\nreturn downScaleCanvas(imgCV, scale);\n}\n\n// scales the canvas by (float) scale < 1\n// returns a new canvas containing the scaled image.\nfunction downScaleCanvas(cv, scale) {\nif (!(scale < 1) || !(scale > 0)) throw (\'scale must be a positive number <1 \');\nvar sqScale = scale * scale; // square scale = area of source pixel within target\nvar sw = cv.width; // source image width\nvar sh = cv.height; // source image height\nvar tw = Math.floor(sw * scale); // target image width\nvar th = Math.floor(sh * scale); // target image height\nvar sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array\nvar tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array\nvar tX = 0, tY = 0; // rounded tx, ty\nvar w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y\n// weight is weight of current source point within target.\n// next weight is weight of current source point within next target\'s point.\nvar crossX = false; // does scaled px cross its current px right border ?\nvar crossY = false; // does scaled px cross its current px bottom border ?\nvar sBuffer = cv.getContext(\'2d\').\ngetImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba\nvar tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb\nvar sR = 0, sG = 0, sB = 0; // source\'s current point r,g,b\n/* untested !\nvar sA = 0; //source alpha */ \n\nfor (sy = 0; sy < sh; sy++) {\nty = sy * scale; // y src position within target\ntY = 0 | ty; // rounded : target pixel\'s y\nyIndex = 3 * tY * tw; // line index within target array\ncrossY = (tY != (0 | ty + scale)); \nif (crossY) { // if pixel is crossing botton target pixel\nwy = (tY + 1 - ty); // weight of point within target pixel\nnwy = (ty + scale - tY - 1); // ... within y+1 target pixel\n}\nfor (sx = 0; sx < sw; sx++, sIndex += 4) {\ntx = sx * scale; // x src position within target\ntX = 0 | ?tx; // rounded : target pixel\'s x\ntIndex = yIndex + tX * 3; // target pixel index within target array\ncrossX = (tX != (0 | tx + scale));\nif (crossX) { // if pixel is crossing target pixel\'s right\nwx = (tX + 1 - tx); // weight of point within target pixel\nnwx = (tx + scale - tX - 1); // ... within x+1 target pixel\n}\nsR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.\nsG = sBuffer[sIndex + 1];\nsB = sBuffer[sIndex + 2];\n\n/* !! untested : handling alpha !!\nsA = sBuffer[sIndex + 3];\nif (!sA) continue;\nif (sA != 0xFF) {\nsR = (sR * sA) >> 8; // or use /256 instead ??\nsG = (sG * sA) >> 8;\nsB = (sB * sA) >> 8;\n}\n*/\nif (!crossX && !crossY) { // pixel does not cross\n// just add components weighted by squared scale.\ntBuffer[tIndex ] += sR * sqScale;\ntBuffer[tIndex + 1] += sG * sqScale;\ntBuffer[tIndex + 2] += sB * sqScale;\n} else if (crossX && !crossY) { // cross on X only\nw = wx * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tX+1) px \nnw = nwx * scale\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n} else if (crossY && !crossX) { // cross on Y only\nw = wy * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tY+1) px \nnw = nwy * scale\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n} else { // crosses both x and y : four target points involved\n// add weighted component for current px\nw = wx * wy;\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// for tX + 1; tY px\nnw = nwx * wy;\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n// for tX ; tY + 1 px\nnw = wx * nwy;\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n// for tX + 1 ; tY +1 px\nnw = nwx * nwy;\ntBuffer[tIndex + 3 * tw + 3] += sR * nw;\ntBuffer[tIndex + 3 * tw + 4] += sG * nw;\ntBuffer[tIndex + 3 * tw + 5] += sB * nw;\n}\n} // end for sx \n} // end for sy\n\n// create result canvas\nvar resCV = document.createElement(\'canvas\');\nresCV.width = tw;\nresCV.height = th;\nvar resCtx = resCV.getContext(\'2d\');\nvar imgRes = resCtx.getImageData(0, 0, tw, th);\nvar tByteBuffer = imgRes.data;\n// convert float32 array into a UInt8Clamped Array\nvar pxIndex = 0; // \nfor (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {\ntByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);\ntByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);\ntByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);\ntByteBuffer[tIndex + 3] = 255;\n}\n// writing result to canvas.\nresCtx.putImageData(imgRes, 0, 0);\nreturn resCV;\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to check a uploaded file whether it is a image or other file?\n----------Explanation----------\nI\'m assuming that you\'re running this in a servlet context. If it\'s affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .\n----------Code Sample----------\nString fileName = uploadedFile.getFileName();\nString mimeType = getServletContext().getMimeType(fileName);\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\ntry {\nImageIO.read(input).toString();\n// It\'s an image (only BMP, GIF, JPG and PNG are recognized).\n} catch (Exception e) {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nString mimeType = Magic.getMagicMatch(input, false).getMimeType();\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n} else {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nFiles.copy(input, new File(uploadFolder, fileName).toPath());\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava Switch Statement - Is ""or""/""and"" possible?\n----------Explanation----------\nYou can use switch-case fall through by omitting the break; statement.\n----------Code Sample----------\nchar c = /* whatever */;\n\nswitch(c) {\ncase \'a\':\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'b\':\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'z\':\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n\nchar c = Character.toUpperCase(/* whatever */);\n\nswitch(c) {\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow do you cache an image in Javascript\n----------Explanation----------\nSo, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it\'s probably best to do it with javascript as it generally won\'t hold up the page load when done from javascript. You can do that like this:\n----------Code Sample----------\nfunction preloadImages(array) {\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nvar list = preloadImages.list;\nfor (var i = 0; i < array.length; i++) {\nvar img = new Image();\nimg.onload = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = array[i];\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);\n\nfunction preloadImages(array, waitForOtherResources, timeout) {\nvar loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nif (!waitForOtherResources || document.readyState === \'complete\') {\nloadNow();\n} else {\nwindow.addEventListener(""load"", function() {\nclearTimeout(timer);\nloadNow();\n});\n// in case window.addEventListener doesn\'t get called (sometimes some resource gets stuck)\n// then preload the images anyway after some timeout time\ntimer = setTimeout(loadNow, t);\n}\n\nfunction loadNow() {\nif (!loaded) {\nloaded = true;\nfor (var i = 0; i < imgs.length; i++) {\nvar img = new Image();\nimg.onload = img.onerror = img.onabort = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = imgs[i];\n}\n}\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);\npreloadImages([""url99.jpg"", ""url98.jpg""], true);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCheck if an image is loaded (no errors) in JavaScript\n----------Explanation----------\nAnother option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here\'s an example of what I mean:\n----------Code Sample----------\n$("""")\n.on(\'load\', function() { console.log(""image loaded correctly""); })\n.on(\'error\', function() { console.log(""error loading image""); })\n.attr(""src"", $(originalImage).attr(""src""))\n;\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nUnable to read JPEG image using ImageIO.read(File file)\n----------Explanation----------\nRead a CMYK image into RGB BufferedImage.\n----------Code Sample----------\nFile f = new File(""/path/imagefile.jpg"");\n\n//Find a suitable ImageReader\nIterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");\nImageReader reader = null;\nwhile(readers.hasNext()) {\nreader = (ImageReader)readers.next();\nif(reader.canReadRaster()) {\nbreak;\n}\n}\n\n//Stream the image file (the original CMYK image)\nImageInputStream input = ImageIO.createImageInputStream(f); \nreader.setInput(input); \n\n//Read the image raster\nRaster raster = reader.readRaster(0, null); \n\n//Create a new RGB image\nBufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), \nBufferedImage.TYPE_4BYTE_ABGR); \n\n//Fill the new image with the old raster\nbi.getRaster().setRect(raster);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to upload and store an image with google app engine (java)\n----------Explanation----------\nDeclaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc\n----------Code Sample----------\n@Entity\npublic class MyImage {\n@PrimaryKey\n@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\nprivate Long id;\n\n@Persistent\nprivate String name;\n\n@Persistent\nBlob image;\n\npublic MyImage() { }\npublic MyImage(String name, Blob image) {\nthis.name = name; \nthis.image = image;\n}\n\n// JPA getters and setters and empty contructor\n// ...\npublic Blob getImage() { return image; }\npublic void setImage(Blob image) { this.image = image; }\n}\n\n// Your upload handle would look like\npublic void doPost(HttpServletRequest req, HttpServletResponse res) {\n// Get the image representation\nServletFileUpload upload = new ServletFileUpload();\nFileItemIterator iter = upload.getItemIterator(req);\nFileItemStream imageItem = iter.next();\nInputStream imgStream = imageItem.openStream();\n\n// construct our entity objects\nBlob imageBlob = new Blob(IOUtils.toByteArray(imgStream));\nMyImage myImage = new MyImage(imageItem.getName(), imageBlob);\n\n// persist image\nPersistenceManager pm = PMF.get().getPersistenceManager();\npm.makePersistent(myImage);\npm.close();\n\n// respond to query\nres.setContentType(""text/plain"");\nres.getOutputStream().write(""OK!"".getBytes());\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nAndroid Bitmap: Convert transparent pixels to a color\n----------Explanation----------\nIf you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .\n----------Code Sample----------\nBitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size\nimageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want\nCanvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image\ncanvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background\nimage.recycle(); // clear out old image\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nIs it possible to apply CSS to half of a character?\n----------Explanation----------\nHTML\n----------Code Sample----------\nNow on GitHub as a Plugin!\n\n\nenter image description here Feel free to fork and improve.\n\n\n\nDemo | Download Zip | Half-Style.com (Redirects to GitHub)\n\n\n\n\n\nPure CSS for a Single Character\n\nJavaScript used for automation accross text or multiple characters\n\nPreserves Text Accessibility for screen readers for the blind or visually\nimpaired\n\n\n\nPart1: Basic Solution\n\n\nHalf Style on text\n\n\n\nDemo: http://jsfiddle.net/pd9yB/817/\n\n\n\n\n\nThis works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.\n\n\n\nAlso, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.\n\n\n\nExplanation for a single character:\n\n\n\nPure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.\n\n\n\nFor each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won\'t need to hard code it for every instance.\n\n\n\nExplanation for any text:\n\n\n\nSimply add textToHalfStyle class to the element containing the text.\n\n\n\n\n\nCSS:\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: black; /* or transparent, any color */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    left:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: #f00;\n\n}\n\n\n\nSingle Characters:\n\n\n\nX\n\nY\n\nZ\n\nA\n\n\n\n\n\nAutomated:\n\n\n\n\n\nHalf-style, please.\n\n\n\njQuery(function($) {\n\n    var text, chars, $el, i, output;\n\n\n\n    // Iterate over all class occurences\n\n    $(\'.textToHalfStyle\').each(function(idx, el) {\n\n        $el = $(el);\n\n        text = $el.text();\n\n        chars = text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $el.html(\'\' + text + \'\');\n\n\n\n        // Reset output for appending\n\n        output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (i = 0; i < chars.length; i++) {\n\n            // Create a styled element for each character and append to container\n\n            output += \'\' + chars[i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $el.append(output);\n\n    });\n\n});\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before { /* creates the top part */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the bottom part */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 100%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the right 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the left 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    width: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\nbody{\n\n    background-color: black;\n\n}\n\n\n\n.textToHalfStyle{\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n\n\n.halfStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n\n\njQuery(function($) {\n\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n\n\n    // Iterate over all class occurrences\n\n    $(\'.textToHalfStyle\').each(function(idx, halfstyle_el) {\n\n        $halfstyle_el = $(halfstyle_el);\n\n        halfstyle_style = $halfstyle_el.data(\'halfstyle\');\n\n        halfstyle_text = $halfstyle_el.text();\n\n        halfstyle_chars = halfstyle_text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $halfstyle_el.html(\'\' + halfstyle_text + \'\');\n\n\n\n        // Reset output for appending\n\n        halfstyle_output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {\n\n            // Create a styled element for each character and append to container\n\n            halfstyle_output += \'\' + halfstyle_chars[halfstyle_i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $halfstyle_el.append(halfstyle_output);\n\n    });\n\n});\n\n\n\n /* start half-style hs-base */\n\n .halfStyle.hs-base {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #000; /* for demo purposes */\n\n}\n\n.halfStyle.hs-base:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    overflow:hidden;\n\n    color: #f00; /* for demo purposes */\n\n}\n\n /* end half-style hs-base */\n\n\n\n/* start half-style hs-horizontal-third */\n\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n/* end half-style hs-horizontal-third */\n\n\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n\n.halfStyle.hs-PeelingStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n/* end half-style hs-PeelingStyle */\n\n\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n\n.textToHalfStyle.hs-KevinGranger {\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle.hs-KevinGranger {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle.hs-KevinGranger:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n/* end half-style hs-KevinGranger\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n*******************end of usage scenario 11*****************\n\n\n\n*******************usage scenario 12**********************\n\n\n----------usage scenario----------\n\nChanging the image source using jQuery\n\n----------Explanation----------\n\nYou can use jQuery\'s  attr()  function.  For example, if you img tag has an id attribute of \'my_image\':\n\n----------Code Sample----------\n\n\n\n\n\n$(""#my_image"").attr(""src"",""second.jpg"");\n\n\n\n$(\'#my_image\').on({\n\n    \'click\': function(){\n\n        $(\'#my_image\').attr(\'src\',\'second.jpg\');\n\n    }\n\n});\n\n\n\n$(\'img\').on({\n\n    \'click\': function() {\n\n         var src = ($(this).attr(\'src\') === \'img1_on.jpg\')\n\n            ? \'img2_on.jpg\'\n\n            : \'img1_on.jpg\';\n\n         $(this).attr(\'src\', src);\n\n    }\n\n});\n\n*******************end of usage scenario 12*****************\n\n\n\n*******************usage scenario 13**********************\n\n\n----------usage scenario----------\n\nSetting background-image using jQuery CSS property\n\n----------Explanation----------\n\nYou probably want this (to make it like a normal CSS background-image declaration):\n\n----------Code Sample----------\n\n$(\'myOjbect\').css(\'background-image\', \'url(\' + imageUrl + \')\');\n\n*******************end of usage scenario 13*****************\n\n\n\n*******************usage scenario 14**********************\n\n\n----------usage scenario----------\n\nWhat is the best way to display millions of images in Java?\n\n----------Explanation----------\n\n\n\n----------Code Sample----------\n\nImage tile = new Image(""tile.png"");\n\n\n\nGroup house = new Group();\n\nhouse.setCache(true);\n\nhouse.setCacheHint(CacheHint.SPEED);\n\n\n\nEffect lighting = new Lighting();\n\n\n\nfor (int i = 0; i < houseWidth; i++) {\n\n  // here is the critical part => don\'t do new ImageView(new Image(""tile.png""))\n\n  ImageView tileView = new ImageView(tile));\n\n  tileView.setEffect(lighting);\n\n  tileView.setCache(true);\n\n  tileView.setCacheHint(CacheHint.SPEED);\n\n\n\n  house.add(tileView);  \n\n}\n\n*******************end of usage scenario 14*****************\n\n\n\n*******************usage scenario 15**********************\n\n\n----------usage scenario----------\n\nHow to flip BufferedImage in java\n\n----------Explanation----------\n\nBased on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .\n\n----------Code Sample----------\n\nimport java.awt.Component;\n\nimport java.awt.Graphics2D;\n\nimport java.awt.GridLayout;\n\nimport java.awt.RenderingHints;\n\nimport java.awt.geom.AffineTransform;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.image.ByteLookupTable;\n\nimport java.awt.image.LookupOp;\n\nimport java.awt.image.LookupTable;\n\nimport java.io.File;\n\nimport java.io.IOException;\n\nimport java.util.Arrays;\n\n\n\nimport javax.imageio.ImageIO;\n\nimport javax.swing.BorderFactory;\n\nimport javax.swing.ImageIcon;\n\nimport javax.swing.JFrame;\n\nimport javax.swing.JLabel;\n\nimport javax.swing.JPanel;\n\nimport javax.swing.SwingUtilities;\n\n\n\npublic class ImageFlipTest\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n        SwingUtilities.invokeLater(new Runnable()\n\n        {\n\n            @Override\n\n            public void run()\n\n            {\n\n                createAndShowGUI();\n\n            }\n\n        });\n\n    }\n\n\n\n    private static void createAndShowGUI()\n\n    {\n\n        JFrame frame = new JFrame();\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        frame.getContentPane().setLayout(new GridLayout(1, 1));\n\n\n\n        BufferedImage image = null;\n\n        try\n\n        {\n\n            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));\n\n        }\n\n        catch (IOException e1)\n\n        {\n\n            e1.printStackTrace();\n\n        }\n\n\n\n        JPanel panel = new JPanel(new GridLayout(2,2));\n\n        panel.add(createComponent(""Original"", image));\n\n        panel.add(createComponent(""Flipped"", createFlipped(image)));\n\n        panel.add(createComponent(""Rotated"", createRotated(image)));\n\n        panel.add(createComponent(""Inverted"", createInverted(image)));\n\n\n\n        frame.getContentPane().add(panel);\n\n        frame.pack();\n\n        frame.setLocationRelativeTo(null);\n\n        frame.setVisible(true);\n\n    }\n\n\n\n    private static BufferedImage convertToARGB(BufferedImage image)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }    \n\n\n\n    private static BufferedImage createFlipped(BufferedImage image)\n\n    {\n\n        AffineTransform at = new AffineTransform();\n\n        at.concatenate(AffineTransform.getScaleInstance(1, -1));\n\n        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createRotated(BufferedImage image)\n\n    {\n\n        AffineTransform at = AffineTransform.getRotateInstance(\n\n            Math.PI, image.getWidth()/2, image.getHeight()/2.0);\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createTransformed(\n\n        BufferedImage image, AffineTransform at)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.transform(at);\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }\n\n\n\n    private static BufferedImage createInverted(BufferedImage image)\n\n    {\n\n        if (image.getType() != BufferedImage.TYPE_INT_ARGB)\n\n        {\n\n            image = convertToARGB(image);\n\n        }\n\n        LookupTable lookup = new LookupTable(0, 4)\n\n        {\n\n            @Override\n\n            public int[] lookupPixel(int[] src, int[] dest)\n\n            {\n\n                dest[0] = (int)(255-src[0]);\n\n                dest[1] = (int)(255-src[1]);\n\n                dest[2] = (int)(255-src[2]);\n\n                return dest;\n\n            }\n\n        };\n\n        LookupOp op = new LookupOp(lookup, new RenderingHints(null));\n\n        return op.filter(image, null);\n\n    }\n""""""]']","['Yes, it is possible to take a screenshot using Java and save it as an image. This can be achieved using the java.awt.Robot class, which provides the capability to capture the screen. The Robot class has a method called createScreenCapture that takes a Rectangle object as a parameter, representing the area of the screen to be captured. The captured image is returned as a BufferedImage object. Once you have the BufferedImage, you can use the javax.imageio.ImageIO class to write the image to a file in various formats such as PNG, JPEG, etc. This approach allows you to programmatically capture the screen and save it as an image file in Java.']","['[\'[\\\'To take a screenshot using Java and save it as an image, you can use the `java.awt.Robot` class along with `java.awt.Rectangle` and `javax.imageio.ImageIO`. The `Robot` class allows you to create a screen capture of a specified area, and `ImageIO` can be used to write the captured image to a file. Below is an example code that demonstrates how to do this.\\\\nimport java.awt.AWTException;\\\\nimport java.awt.Rectangle;\\\\nimport java.awt.Robot;\\\\nimport java.awt.Toolkit;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class ScreenshotExample {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Create a Robot instance\\\\n            Robot robot = new Robot();\\\\n\\\\n            // Get the screen size\\\\n            Rectangle screenRect = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());\\\\n\\\\n            // Capture the screen shot of the area of the screen defined by the rectangle\\\\n            BufferedImage screenFullImage = robot.createScreenCapture(screenRect);\\\\n\\\\n            // Save the screenshot to a file\\\\n            ImageIO.write(screenFullImage, ""png"", new File(""screenshot.png""));\\\\n\\\\n            System.out.println(""A full screenshot saved!"");\\\\n        } catch (AWTException | IOException ex) {\\\\n            System.err.println(ex);\\\\n        }\\\\n    }\\\\n}\\\']\']']",1.0,1.0,0.05,0.0083945435466946,1.0,0.4
awt,Image,"Java- Write Text onto Image, then Write to Output File",['nan'],['nan'],"['It\'s easy, just get the Graphics object from the image and draw your string onto the image. This example (and output image) is doing that:\n\npublic static void main(String[] args) throws Exception {\n    final BufferedImage image = ImageIO.read(new URL(\n        ""http://upload.wikimedia.org/wikipedia/en/2/24/Lenna.png""));\n\n    Graphics g = image.getGraphics();\n    g.setFont(g.getFont().deriveFont(30f));\n    g.drawString(""Hello World!"", 100, 100);\n    g.dispose();\n\n    ImageIO.write(image, ""png"", new File(""test.png""));\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCapture HTML Canvas as gif/jpg/png/pdf?\n----------Explanation----------\n\n----------Code Sample----------\nvar canvas = document.getElementById(""mycanvas"");\nvar img = canvas.toDataURL(""image/png"");\n\ndocument.write(\'\');\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nhow to show alternate image if source image is not found? (onerror working in IE but not in mozilla)\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHTML5 Canvas Resize (Downscale) Image High Quality?\n----------Explanation----------\nfiddle result : \nhttp://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ \nfiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/\n----------Code Sample----------\n// scales the image by (float) scale < 1\n// returns a canvas containing the scaled image.\nfunction downScaleImage(img, scale) {\nvar imgCV = document.createElement(\'canvas\');\nimgCV.width = img.width;\nimgCV.height = img.height;\nvar imgCtx = imgCV.getContext(\'2d\');\nimgCtx.drawImage(img, 0, 0);\nreturn downScaleCanvas(imgCV, scale);\n}\n\n// scales the canvas by (float) scale < 1\n// returns a new canvas containing the scaled image.\nfunction downScaleCanvas(cv, scale) {\nif (!(scale < 1) || !(scale > 0)) throw (\'scale must be a positive number <1 \');\nvar sqScale = scale * scale; // square scale = area of source pixel within target\nvar sw = cv.width; // source image width\nvar sh = cv.height; // source image height\nvar tw = Math.floor(sw * scale); // target image width\nvar th = Math.floor(sh * scale); // target image height\nvar sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array\nvar tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array\nvar tX = 0, tY = 0; // rounded tx, ty\nvar w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y\n// weight is weight of current source point within target.\n// next weight is weight of current source point within next target\'s point.\nvar crossX = false; // does scaled px cross its current px right border ?\nvar crossY = false; // does scaled px cross its current px bottom border ?\nvar sBuffer = cv.getContext(\'2d\').\ngetImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba\nvar tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb\nvar sR = 0, sG = 0, sB = 0; // source\'s current point r,g,b\n/* untested !\nvar sA = 0; //source alpha */ \n\nfor (sy = 0; sy < sh; sy++) {\nty = sy * scale; // y src position within target\ntY = 0 | ty; // rounded : target pixel\'s y\nyIndex = 3 * tY * tw; // line index within target array\ncrossY = (tY != (0 | ty + scale)); \nif (crossY) { // if pixel is crossing botton target pixel\nwy = (tY + 1 - ty); // weight of point within target pixel\nnwy = (ty + scale - tY - 1); // ... within y+1 target pixel\n}\nfor (sx = 0; sx < sw; sx++, sIndex += 4) {\ntx = sx * scale; // x src position within target\ntX = 0 | ?tx; // rounded : target pixel\'s x\ntIndex = yIndex + tX * 3; // target pixel index within target array\ncrossX = (tX != (0 | tx + scale));\nif (crossX) { // if pixel is crossing target pixel\'s right\nwx = (tX + 1 - tx); // weight of point within target pixel\nnwx = (tx + scale - tX - 1); // ... within x+1 target pixel\n}\nsR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.\nsG = sBuffer[sIndex + 1];\nsB = sBuffer[sIndex + 2];\n\n/* !! untested : handling alpha !!\nsA = sBuffer[sIndex + 3];\nif (!sA) continue;\nif (sA != 0xFF) {\nsR = (sR * sA) >> 8; // or use /256 instead ??\nsG = (sG * sA) >> 8;\nsB = (sB * sA) >> 8;\n}\n*/\nif (!crossX && !crossY) { // pixel does not cross\n// just add components weighted by squared scale.\ntBuffer[tIndex ] += sR * sqScale;\ntBuffer[tIndex + 1] += sG * sqScale;\ntBuffer[tIndex + 2] += sB * sqScale;\n} else if (crossX && !crossY) { // cross on X only\nw = wx * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tX+1) px \nnw = nwx * scale\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n} else if (crossY && !crossX) { // cross on Y only\nw = wy * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tY+1) px \nnw = nwy * scale\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n} else { // crosses both x and y : four target points involved\n// add weighted component for current px\nw = wx * wy;\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// for tX + 1; tY px\nnw = nwx * wy;\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n// for tX ; tY + 1 px\nnw = wx * nwy;\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n// for tX + 1 ; tY +1 px\nnw = nwx * nwy;\ntBuffer[tIndex + 3 * tw + 3] += sR * nw;\ntBuffer[tIndex + 3 * tw + 4] += sG * nw;\ntBuffer[tIndex + 3 * tw + 5] += sB * nw;\n}\n} // end for sx \n} // end for sy\n\n// create result canvas\nvar resCV = document.createElement(\'canvas\');\nresCV.width = tw;\nresCV.height = th;\nvar resCtx = resCV.getContext(\'2d\');\nvar imgRes = resCtx.getImageData(0, 0, tw, th);\nvar tByteBuffer = imgRes.data;\n// convert float32 array into a UInt8Clamped Array\nvar pxIndex = 0; // \nfor (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {\ntByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);\ntByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);\ntByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);\ntByteBuffer[tIndex + 3] = 255;\n}\n// writing result to canvas.\nresCtx.putImageData(imgRes, 0, 0);\nreturn resCV;\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to check a uploaded file whether it is a image or other file?\n----------Explanation----------\nI\'m assuming that you\'re running this in a servlet context. If it\'s affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .\n----------Code Sample----------\nString fileName = uploadedFile.getFileName();\nString mimeType = getServletContext().getMimeType(fileName);\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\ntry {\nImageIO.read(input).toString();\n// It\'s an image (only BMP, GIF, JPG and PNG are recognized).\n} catch (Exception e) {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nString mimeType = Magic.getMagicMatch(input, false).getMimeType();\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n} else {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nFiles.copy(input, new File(uploadFolder, fileName).toPath());\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava Switch Statement - Is ""or""/""and"" possible?\n----------Explanation----------\nYou can use switch-case fall through by omitting the break; statement.\n----------Code Sample----------\nchar c = /* whatever */;\n\nswitch(c) {\ncase \'a\':\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'b\':\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'z\':\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n\nchar c = Character.toUpperCase(/* whatever */);\n\nswitch(c) {\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow do you cache an image in Javascript\n----------Explanation----------\nSo, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it\'s probably best to do it with javascript as it generally won\'t hold up the page load when done from javascript. You can do that like this:\n----------Code Sample----------\nfunction preloadImages(array) {\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nvar list = preloadImages.list;\nfor (var i = 0; i < array.length; i++) {\nvar img = new Image();\nimg.onload = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = array[i];\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);\n\nfunction preloadImages(array, waitForOtherResources, timeout) {\nvar loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nif (!waitForOtherResources || document.readyState === \'complete\') {\nloadNow();\n} else {\nwindow.addEventListener(""load"", function() {\nclearTimeout(timer);\nloadNow();\n});\n// in case window.addEventListener doesn\'t get called (sometimes some resource gets stuck)\n// then preload the images anyway after some timeout time\ntimer = setTimeout(loadNow, t);\n}\n\nfunction loadNow() {\nif (!loaded) {\nloaded = true;\nfor (var i = 0; i < imgs.length; i++) {\nvar img = new Image();\nimg.onload = img.onerror = img.onabort = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = imgs[i];\n}\n}\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);\npreloadImages([""url99.jpg"", ""url98.jpg""], true);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCheck if an image is loaded (no errors) in JavaScript\n----------Explanation----------\nAnother option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here\'s an example of what I mean:\n----------Code Sample----------\n$("""")\n.on(\'load\', function() { console.log(""image loaded correctly""); })\n.on(\'error\', function() { console.log(""error loading image""); })\n.attr(""src"", $(originalImage).attr(""src""))\n;\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nUnable to read JPEG image using ImageIO.read(File file)\n----------Explanation----------\nRead a CMYK image into RGB BufferedImage.\n----------Code Sample----------\nFile f = new File(""/path/imagefile.jpg"");\n\n//Find a suitable ImageReader\nIterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");\nImageReader reader = null;\nwhile(readers.hasNext()) {\nreader = (ImageReader)readers.next();\nif(reader.canReadRaster()) {\nbreak;\n}\n}\n\n//Stream the image file (the original CMYK image)\nImageInputStream input = ImageIO.createImageInputStream(f); \nreader.setInput(input); \n\n//Read the image raster\nRaster raster = reader.readRaster(0, null); \n\n//Create a new RGB image\nBufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), \nBufferedImage.TYPE_4BYTE_ABGR); \n\n//Fill the new image with the old raster\nbi.getRaster().setRect(raster);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to upload and store an image with google app engine (java)\n----------Explanation----------\nDeclaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc\n----------Code Sample----------\n@Entity\npublic class MyImage {\n@PrimaryKey\n@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\nprivate Long id;\n\n@Persistent\nprivate String name;\n\n@Persistent\nBlob image;\n\npublic MyImage() { }\npublic MyImage(String name, Blob image) {\nthis.name = name; \nthis.image = image;\n}\n\n// JPA getters and setters and empty contructor\n// ...\npublic Blob getImage() { return image; }\npublic void setImage(Blob image) { this.image = image; }\n}\n\n// Your upload handle would look like\npublic void doPost(HttpServletRequest req, HttpServletResponse res) {\n// Get the image representation\nServletFileUpload upload = new ServletFileUpload();\nFileItemIterator iter = upload.getItemIterator(req);\nFileItemStream imageItem = iter.next();\nInputStream imgStream = imageItem.openStream();\n\n// construct our entity objects\nBlob imageBlob = new Blob(IOUtils.toByteArray(imgStream));\nMyImage myImage = new MyImage(imageItem.getName(), imageBlob);\n\n// persist image\nPersistenceManager pm = PMF.get().getPersistenceManager();\npm.makePersistent(myImage);\npm.close();\n\n// respond to query\nres.setContentType(""text/plain"");\nres.getOutputStream().write(""OK!"".getBytes());\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nAndroid Bitmap: Convert transparent pixels to a color\n----------Explanation----------\nIf you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .\n----------Code Sample----------\nBitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size\nimageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want\nCanvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image\ncanvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background\nimage.recycle(); // clear out old image\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nIs it possible to apply CSS to half of a character?\n----------Explanation----------\nHTML\n----------Code Sample----------\nNow on GitHub as a Plugin!\n\n\nenter image description here Feel free to fork and improve.\n\n\n\nDemo | Download Zip | Half-Style.com (Redirects to GitHub)\n\n\n\n\n\nPure CSS for a Single Character\n\nJavaScript used for automation accross text or multiple characters\n\nPreserves Text Accessibility for screen readers for the blind or visually\nimpaired\n\n\n\nPart1: Basic Solution\n\n\nHalf Style on text\n\n\n\nDemo: http://jsfiddle.net/pd9yB/817/\n\n\n\n\n\nThis works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.\n\n\n\nAlso, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.\n\n\n\nExplanation for a single character:\n\n\n\nPure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.\n\n\n\nFor each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won\'t need to hard code it for every instance.\n\n\n\nExplanation for any text:\n\n\n\nSimply add textToHalfStyle class to the element containing the text.\n\n\n\n\n\nCSS:\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: black; /* or transparent, any color */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    left:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: #f00;\n\n}\n\n\n\nSingle Characters:\n\n\n\nX\n\nY\n\nZ\n\nA\n\n\n\n\n\nAutomated:\n\n\n\n\n\nHalf-style, please.\n\n\n\njQuery(function($) {\n\n    var text, chars, $el, i, output;\n\n\n\n    // Iterate over all class occurences\n\n    $(\'.textToHalfStyle\').each(function(idx, el) {\n\n        $el = $(el);\n\n        text = $el.text();\n\n        chars = text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $el.html(\'\' + text + \'\');\n\n\n\n        // Reset output for appending\n\n        output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (i = 0; i < chars.length; i++) {\n\n            // Create a styled element for each character and append to container\n\n            output += \'\' + chars[i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $el.append(output);\n\n    });\n\n});\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before { /* creates the top part */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the bottom part */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 100%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the right 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the left 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    width: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\nbody{\n\n    background-color: black;\n\n}\n\n\n\n.textToHalfStyle{\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n\n\n.halfStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n\n\njQuery(function($) {\n\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n\n\n    // Iterate over all class occurrences\n\n    $(\'.textToHalfStyle\').each(function(idx, halfstyle_el) {\n\n        $halfstyle_el = $(halfstyle_el);\n\n        halfstyle_style = $halfstyle_el.data(\'halfstyle\');\n\n        halfstyle_text = $halfstyle_el.text();\n\n        halfstyle_chars = halfstyle_text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $halfstyle_el.html(\'\' + halfstyle_text + \'\');\n\n\n\n        // Reset output for appending\n\n        halfstyle_output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {\n\n            // Create a styled element for each character and append to container\n\n            halfstyle_output += \'\' + halfstyle_chars[halfstyle_i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $halfstyle_el.append(halfstyle_output);\n\n    });\n\n});\n\n\n\n /* start half-style hs-base */\n\n .halfStyle.hs-base {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #000; /* for demo purposes */\n\n}\n\n.halfStyle.hs-base:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    overflow:hidden;\n\n    color: #f00; /* for demo purposes */\n\n}\n\n /* end half-style hs-base */\n\n\n\n/* start half-style hs-horizontal-third */\n\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n/* end half-style hs-horizontal-third */\n\n\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n\n.halfStyle.hs-PeelingStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n/* end half-style hs-PeelingStyle */\n\n\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n\n.textToHalfStyle.hs-KevinGranger {\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle.hs-KevinGranger {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle.hs-KevinGranger:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n/* end half-style hs-KevinGranger\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n*******************end of usage scenario 11*****************\n\n\n\n*******************usage scenario 12**********************\n\n\n----------usage scenario----------\n\nChanging the image source using jQuery\n\n----------Explanation----------\n\nYou can use jQuery\'s  attr()  function.  For example, if you img tag has an id attribute of \'my_image\':\n\n----------Code Sample----------\n\n\n\n\n\n$(""#my_image"").attr(""src"",""second.jpg"");\n\n\n\n$(\'#my_image\').on({\n\n    \'click\': function(){\n\n        $(\'#my_image\').attr(\'src\',\'second.jpg\');\n\n    }\n\n});\n\n\n\n$(\'img\').on({\n\n    \'click\': function() {\n\n         var src = ($(this).attr(\'src\') === \'img1_on.jpg\')\n\n            ? \'img2_on.jpg\'\n\n            : \'img1_on.jpg\';\n\n         $(this).attr(\'src\', src);\n\n    }\n\n});\n\n*******************end of usage scenario 12*****************\n\n\n\n*******************usage scenario 13**********************\n\n\n----------usage scenario----------\n\nSetting background-image using jQuery CSS property\n\n----------Explanation----------\n\nYou probably want this (to make it like a normal CSS background-image declaration):\n\n----------Code Sample----------\n\n$(\'myOjbect\').css(\'background-image\', \'url(\' + imageUrl + \')\');\n\n*******************end of usage scenario 13*****************\n\n\n\n*******************usage scenario 14**********************\n\n\n----------usage scenario----------\n\nWhat is the best way to display millions of images in Java?\n\n----------Explanation----------\n\n\n\n----------Code Sample----------\n\nImage tile = new Image(""tile.png"");\n\n\n\nGroup house = new Group();\n\nhouse.setCache(true);\n\nhouse.setCacheHint(CacheHint.SPEED);\n\n\n\nEffect lighting = new Lighting();\n\n\n\nfor (int i = 0; i < houseWidth; i++) {\n\n  // here is the critical part => don\'t do new ImageView(new Image(""tile.png""))\n\n  ImageView tileView = new ImageView(tile));\n\n  tileView.setEffect(lighting);\n\n  tileView.setCache(true);\n\n  tileView.setCacheHint(CacheHint.SPEED);\n\n\n\n  house.add(tileView);  \n\n}\n\n*******************end of usage scenario 14*****************\n\n\n\n*******************usage scenario 15**********************\n\n\n----------usage scenario----------\n\nHow to flip BufferedImage in java\n\n----------Explanation----------\n\nBased on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .\n\n----------Code Sample----------\n\nimport java.awt.Component;\n\nimport java.awt.Graphics2D;\n\nimport java.awt.GridLayout;\n\nimport java.awt.RenderingHints;\n\nimport java.awt.geom.AffineTransform;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.image.ByteLookupTable;\n\nimport java.awt.image.LookupOp;\n\nimport java.awt.image.LookupTable;\n\nimport java.io.File;\n\nimport java.io.IOException;\n\nimport java.util.Arrays;\n\n\n\nimport javax.imageio.ImageIO;\n\nimport javax.swing.BorderFactory;\n\nimport javax.swing.ImageIcon;\n\nimport javax.swing.JFrame;\n\nimport javax.swing.JLabel;\n\nimport javax.swing.JPanel;\n\nimport javax.swing.SwingUtilities;\n\n\n\npublic class ImageFlipTest\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n        SwingUtilities.invokeLater(new Runnable()\n\n        {\n\n            @Override\n\n            public void run()\n\n            {\n\n                createAndShowGUI();\n\n            }\n\n        });\n\n    }\n\n\n\n    private static void createAndShowGUI()\n\n    {\n\n        JFrame frame = new JFrame();\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        frame.getContentPane().setLayout(new GridLayout(1, 1));\n\n\n\n        BufferedImage image = null;\n\n        try\n\n        {\n\n            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));\n\n        }\n\n        catch (IOException e1)\n\n        {\n\n            e1.printStackTrace();\n\n        }\n\n\n\n        JPanel panel = new JPanel(new GridLayout(2,2));\n\n        panel.add(createComponent(""Original"", image));\n\n        panel.add(createComponent(""Flipped"", createFlipped(image)));\n\n        panel.add(createComponent(""Rotated"", createRotated(image)));\n\n        panel.add(createComponent(""Inverted"", createInverted(image)));\n\n\n\n        frame.getContentPane().add(panel);\n\n        frame.pack();\n\n        frame.setLocationRelativeTo(null);\n\n        frame.setVisible(true);\n\n    }\n\n\n\n    private static BufferedImage convertToARGB(BufferedImage image)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }    \n\n\n\n    private static BufferedImage createFlipped(BufferedImage image)\n\n    {\n\n        AffineTransform at = new AffineTransform();\n\n        at.concatenate(AffineTransform.getScaleInstance(1, -1));\n\n        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createRotated(BufferedImage image)\n\n    {\n\n        AffineTransform at = AffineTransform.getRotateInstance(\n\n            Math.PI, image.getWidth()/2, image.getHeight()/2.0);\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createTransformed(\n\n        BufferedImage image, AffineTransform at)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.transform(at);\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }\n\n\n\n    private static BufferedImage createInverted(BufferedImage image)\n\n    {\n\n        if (image.getType() != BufferedImage.TYPE_INT_ARGB)\n\n        {\n\n            image = convertToARGB(image);\n\n        }\n\n        LookupTable lookup = new LookupTable(0, 4)\n\n        {\n\n            @Override\n\n            public int[] lookupPixel(int[] src, int[] dest)\n\n            {\n\n                dest[0] = (int)(255-src[0]);\n\n                dest[1] = (int)(255-src[1]);\n\n                dest[2] = (int)(255-src[2]);\n\n                return dest;\n\n            }\n\n        };\n\n        LookupOp op = new LookupOp(lookup, new RenderingHints(null));\n\n        return op.filter(image, null);\n\n    }\n""""""]']","['To write text onto an image in Java and then save the modified image to an output file, you need to follow several steps. First, you will need to load the image into a BufferedImage object. This can be done using the ImageIO.read() method, which reads an image from a file or an input stream. Once the image is loaded, you can create a Graphics2D object from the BufferedImage. The Graphics2D class provides methods for drawing text, shapes, and images onto the BufferedImage. To draw text, you can use the drawString() method of the Graphics2D class, specifying the text, and the x and y coordinates where the text should be placed. You can also set the font and color of the text using the setFont() and setColor() methods of the Graphics2D class. After drawing the text onto the image, you need to write the modified BufferedImage to an output file. This can be done using the ImageIO.write() method, which writes an image to a file in a specified format, such as PNG or JPEG. By following these steps, you can successfully write text onto an image and save the modified image to an output file in Java.']","['[\'[\\\'The task is to write text onto an image and then save the modified image to an output file using Java. To achieve this, we will use the Java AWT and Swing libraries. The steps involved are: 1. Load the image from a file. 2. Create a Graphics2D object from the image. 3. Set the font and color for the text. 4. Draw the text onto the image. 5. Save the modified image to a new file. Below are the necessary imports and the complete code block to accomplish this task.\\\\nimport java.awt.Color;\\\\nimport java.awt.Font;\\\\nimport java.awt.Graphics2D;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class WriteTextOnImage {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Load the image from a file\\\\n            BufferedImage image = ImageIO.read(new File(""input.jpg""));\\\\n\\\\n            // Create a Graphics2D object from the image\\\\n            Graphics2D g2d = image.createGraphics();\\\\n\\\\n            // Set the font and color for the text\\\\n            g2d.setFont(new Font(""Arial"", Font.BOLD, 30));\\\\n            g2d.setColor(Color.RED);\\\\n\\\\n            // Draw the text onto the image\\\\n            String text = ""Hello, World!"";\\\\n            int x = 50; // x-coordinate of the text\\\\n            int y = 50; // y-coordinate of the text\\\\n            g2d.drawString(text, x, y);\\\\n\\\\n            // Dispose the Graphics2D object\\\\n            g2d.dispose();\\\\n\\\\n            // Save the modified image to a new file\\\\n            ImageIO.write(image, ""jpg"", new File(""output.jpg""));\\\\n\\\\n            System.out.println(""Text added to image successfully."");\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",1.0,1.0,0.3333333333333333,0.0828961175236096,0.1,0.3
sql,Connection,How to connect SQLite with Java?,['nan'],"['Most common way to construct:\nString url = Ã‰;\nConnection conn = DriverManager.getConnection(url, ""scott"", ""tiger"");\nBased on 78 examples']","['connection = DriverManager.getConnection(""jdbc:sqlite:D:\\\\testdb.db"");\nInstead of this put\n\nconnection = DriverManager.getConnection(""jdbc:sqlite:D:\\\\testdb"");']",['nan'],"[""To connect SQLite with Java, you need to follow several steps. First, ensure you have the SQLite JDBC driver, which is a library that allows Java applications to interact with SQLite databases. You can download the SQLite JDBC driver from the official website or include it as a dependency in your project using a build tool like Maven or Gradle. Once you have the driver, you need to load it in your Java application using the Class.forName method, which registers the driver with the DriverManager. After loading the driver, you can establish a connection to the SQLite database using the DriverManager.getConnection method, providing the database URL as a parameter. The URL typically starts with 'jdbc:sqlite:' followed by the path to the database file. If the database file does not exist, SQLite will create it. Once the connection is established, you can create a Statement or PreparedStatement object to execute SQL queries and updates. Finally, always ensure to close the connection and any other resources like Statement or ResultSet objects to avoid resource leaks. Proper exception handling using try-catch blocks is also essential to manage any SQL or ClassNotFound exceptions that may occur during the process.""]","['[\'[\\\'To connect SQLite with Java, you need to use the SQLite JDBC driver. Below is an example of how to establish a connection to an SQLite database, create a table, insert data, and query the data.\\\\nimport java.sql.Connection;\\\\nimport java.sql.DriverManager;\\\\nimport java.sql.ResultSet;\\\\nimport java.sql.SQLException;\\\\nimport java.sql.Statement;\\\\npublic class SQLiteExample {\\\\n    public static void main(String[] args) {\\\\n        Connection connection = null;\\\\n        try {\\\\n            // Load the SQLite JDBC driver (you must have the sqlite-jdbc-<version>.jar in your classpath)\\\\n            Class.forName(""org.sqlite.JDBC"");\\\\n\\\\n            // Create a connection to the database\\\\n            String url = ""jdbc:sqlite:sample.db"";\\\\n            connection = DriverManager.getConnection(url);\\\\n\\\\n            System.out.println(""Connection to SQLite has been established."");\\\\n\\\\n            // Create a statement object to execute SQL statements\\\\n            Statement statement = connection.createStatement();\\\\n\\\\n            // Create a new table\\\\n            String createTableSQL = ""CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, email TEXT);"";\\\\n            statement.execute(createTableSQL);\\\\n\\\\n            // Insert data into the table\\\\n            String insertDataSQL = ""INSERT INTO users (name, email) VALUES (\\\\\\\'John Doe\\\\\\\', \\\\\\\'john.doe@example.com\\\\\\\');"";\\\\n            statement.execute(insertDataSQL);\\\\n\\\\n            // Query the data\\\\n            String querySQL = ""SELECT * FROM users;"";\\\\n            ResultSet resultSet = statement.executeQuery(querySQL);\\\\n\\\\n            // Process the result set\\\\n            while (resultSet.next()) {\\\\n                int id = resultSet.getInt(""id"");\\\\n                String name = resultSet.getString(""name"");\\\\n                String email = resultSet.getString(""email"");\\\\n                System.out.println(""ID: "" + id + "", Name: "" + name + "", Email: "" + email);\\\\n            }\\\\n\\\\n            // Close the result set and statement\\\\n            resultSet.close();\\\\n            statement.close();\\\\n        } catch (ClassNotFoundException e) {\\\\n            System.err.println(""SQLite JDBC driver not found."");\\\\n            e.printStackTrace();\\\\n        } catch (SQLException e) {\\\\n            System.err.println(""SQL error."");\\\\n            e.printStackTrace();\\\\n        } finally {\\\\n            // Close the connection\\\\n            if (connection != null) {\\\\n                try {\\\\n                    connection.close();\\\\n                } catch (SQLException e) {\\\\n                    System.err.println(""Failed to close the connection."");\\\\n                    e.printStackTrace();\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\']\']']",1.0,1.0,1.0,1.0,1.0,1.0
awt,Image,Resize image while keeping aspect ratio in Java,['nan'],['nan'],"['I use these two methods to scale images, where max is the bigger dimension of your destination image. For 100x100 image it will be 100, for 200x300 image it will be 300.\n\n    public static BufferedImage scale(InputStream is, int max) {\n    Image image = null;\n    try {\n        image = ImageIO.read(is);\n    } catch (IOException e) {\n        e.printStackTrace();\n    }\n    int width = image.getWidth(null);\n    int height = image.getHeight(null);\n    double dWidth = 0;\n    double dHeight = 0;\n    if (width == height) {\n        dWidth = max;\n        dHeight = max;\n    } \n    else if (width > height) {\n        dWidth = max;\n        dHeight = ((double) height / (double) width) * max;\n    }\n    else {\n        dHeight = max;\n        dWidth = ((double) width / (double) height) * max;\n    }\n    image = image.getScaledInstance((int) dWidth, (int) dHeight, Image.SCALE_SMOOTH);\n    BufferedImage bImage = toBufferedImage(image);\n    return bImage;\n\n}\n\npublic static BufferedImage toBufferedImage(Image img)\n{\n    if (img instanceof BufferedImage)\n    {\n        return (BufferedImage) img;\n    }\n\n    BufferedImage bimage = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);\n\n    Graphics2D bGr = bimage.createGraphics();\n    bGr.drawImage(img, 0, 0, null);\n    bGr.dispose();\n\n    return bimage;\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nCapture HTML Canvas as gif/jpg/png/pdf?\n----------Explanation----------\n\n----------Code Sample----------\nvar canvas = document.getElementById(""mycanvas"");\nvar img = canvas.toDataURL(""image/png"");\n\ndocument.write(\'\');\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\nhow to show alternate image if source image is not found? (onerror working in IE but not in mozilla)\n----------Explanation----------\n\n----------Code Sample----------\n\n\n\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nHTML5 Canvas Resize (Downscale) Image High Quality?\n----------Explanation----------\nfiddle result : \nhttp://jsfiddle.net/gamealchemist/r6aVp/embedded/result/ \nfiddle itself : http://jsfiddle.net/gamealchemist/r6aVp/\n----------Code Sample----------\n// scales the image by (float) scale < 1\n// returns a canvas containing the scaled image.\nfunction downScaleImage(img, scale) {\nvar imgCV = document.createElement(\'canvas\');\nimgCV.width = img.width;\nimgCV.height = img.height;\nvar imgCtx = imgCV.getContext(\'2d\');\nimgCtx.drawImage(img, 0, 0);\nreturn downScaleCanvas(imgCV, scale);\n}\n\n// scales the canvas by (float) scale < 1\n// returns a new canvas containing the scaled image.\nfunction downScaleCanvas(cv, scale) {\nif (!(scale < 1) || !(scale > 0)) throw (\'scale must be a positive number <1 \');\nvar sqScale = scale * scale; // square scale = area of source pixel within target\nvar sw = cv.width; // source image width\nvar sh = cv.height; // source image height\nvar tw = Math.floor(sw * scale); // target image width\nvar th = Math.floor(sh * scale); // target image height\nvar sx = 0, sy = 0, sIndex = 0; // source x,y, index within source array\nvar tx = 0, ty = 0, yIndex = 0, tIndex = 0; // target x,y, x,y index within target array\nvar tX = 0, tY = 0; // rounded tx, ty\nvar w = 0, nw = 0, wx = 0, nwx = 0, wy = 0, nwy = 0; // weight / next weight x / y\n// weight is weight of current source point within target.\n// next weight is weight of current source point within next target\'s point.\nvar crossX = false; // does scaled px cross its current px right border ?\nvar crossY = false; // does scaled px cross its current px bottom border ?\nvar sBuffer = cv.getContext(\'2d\').\ngetImageData(0, 0, sw, sh).data; // source buffer 8 bit rgba\nvar tBuffer = new Float32Array(3 * tw * th); // target buffer Float32 rgb\nvar sR = 0, sG = 0, sB = 0; // source\'s current point r,g,b\n/* untested !\nvar sA = 0; //source alpha */ \n\nfor (sy = 0; sy < sh; sy++) {\nty = sy * scale; // y src position within target\ntY = 0 | ty; // rounded : target pixel\'s y\nyIndex = 3 * tY * tw; // line index within target array\ncrossY = (tY != (0 | ty + scale)); \nif (crossY) { // if pixel is crossing botton target pixel\nwy = (tY + 1 - ty); // weight of point within target pixel\nnwy = (ty + scale - tY - 1); // ... within y+1 target pixel\n}\nfor (sx = 0; sx < sw; sx++, sIndex += 4) {\ntx = sx * scale; // x src position within target\ntX = 0 | ?tx; // rounded : target pixel\'s x\ntIndex = yIndex + tX * 3; // target pixel index within target array\ncrossX = (tX != (0 | tx + scale));\nif (crossX) { // if pixel is crossing target pixel\'s right\nwx = (tX + 1 - tx); // weight of point within target pixel\nnwx = (tx + scale - tX - 1); // ... within x+1 target pixel\n}\nsR = sBuffer[sIndex ]; // retrieving r,g,b for curr src px.\nsG = sBuffer[sIndex + 1];\nsB = sBuffer[sIndex + 2];\n\n/* !! untested : handling alpha !!\nsA = sBuffer[sIndex + 3];\nif (!sA) continue;\nif (sA != 0xFF) {\nsR = (sR * sA) >> 8; // or use /256 instead ??\nsG = (sG * sA) >> 8;\nsB = (sB * sA) >> 8;\n}\n*/\nif (!crossX && !crossY) { // pixel does not cross\n// just add components weighted by squared scale.\ntBuffer[tIndex ] += sR * sqScale;\ntBuffer[tIndex + 1] += sG * sqScale;\ntBuffer[tIndex + 2] += sB * sqScale;\n} else if (crossX && !crossY) { // cross on X only\nw = wx * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tX+1) px \nnw = nwx * scale\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n} else if (crossY && !crossX) { // cross on Y only\nw = wy * scale;\n// add weighted component for current px\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// add weighted component for next (tY+1) px \nnw = nwy * scale\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n} else { // crosses both x and y : four target points involved\n// add weighted component for current px\nw = wx * wy;\ntBuffer[tIndex ] += sR * w;\ntBuffer[tIndex + 1] += sG * w;\ntBuffer[tIndex + 2] += sB * w;\n// for tX + 1; tY px\nnw = nwx * wy;\ntBuffer[tIndex + 3] += sR * nw;\ntBuffer[tIndex + 4] += sG * nw;\ntBuffer[tIndex + 5] += sB * nw;\n// for tX ; tY + 1 px\nnw = wx * nwy;\ntBuffer[tIndex + 3 * tw ] += sR * nw;\ntBuffer[tIndex + 3 * tw + 1] += sG * nw;\ntBuffer[tIndex + 3 * tw + 2] += sB * nw;\n// for tX + 1 ; tY +1 px\nnw = nwx * nwy;\ntBuffer[tIndex + 3 * tw + 3] += sR * nw;\ntBuffer[tIndex + 3 * tw + 4] += sG * nw;\ntBuffer[tIndex + 3 * tw + 5] += sB * nw;\n}\n} // end for sx \n} // end for sy\n\n// create result canvas\nvar resCV = document.createElement(\'canvas\');\nresCV.width = tw;\nresCV.height = th;\nvar resCtx = resCV.getContext(\'2d\');\nvar imgRes = resCtx.getImageData(0, 0, tw, th);\nvar tByteBuffer = imgRes.data;\n// convert float32 array into a UInt8Clamped Array\nvar pxIndex = 0; // \nfor (sIndex = 0, tIndex = 0; pxIndex < tw * th; sIndex += 3, tIndex += 4, pxIndex++) {\ntByteBuffer[tIndex] = Math.ceil(tBuffer[sIndex]);\ntByteBuffer[tIndex + 1] = Math.ceil(tBuffer[sIndex + 1]);\ntByteBuffer[tIndex + 2] = Math.ceil(tBuffer[sIndex + 2]);\ntByteBuffer[tIndex + 3] = 255;\n}\n// writing result to canvas.\nresCtx.putImageData(imgRes, 0, 0);\nreturn resCV;\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nHow to check a uploaded file whether it is a image or other file?\n----------Explanation----------\nI\'m assuming that you\'re running this in a servlet context. If it\'s affordable to check the content type based on just the file extension, then use ServletContext#getMimeType() to get the mime type (content type). Just check if it starts with image/ .\n----------Code Sample----------\nString fileName = uploadedFile.getFileName();\nString mimeType = getServletContext().getMimeType(fileName);\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\ntry {\nImageIO.read(input).toString();\n// It\'s an image (only BMP, GIF, JPG and PNG are recognized).\n} catch (Exception e) {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nString mimeType = Magic.getMagicMatch(input, false).getMimeType();\nif (mimeType.startsWith(""image/"")) {\n// It\'s an image.\n} else {\n// It\'s not an image.\n}\n}\n\ntry (InputStream input = uploadedFile.getInputStream()) {\nFiles.copy(input, new File(uploadFolder, fileName).toPath());\n}\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nJava Switch Statement - Is ""or""/""and"" possible?\n----------Explanation----------\nYou can use switch-case fall through by omitting the break; statement.\n----------Code Sample----------\nchar c = /* whatever */;\n\nswitch(c) {\ncase \'a\':\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'b\':\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'z\':\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n\nchar c = Character.toUpperCase(/* whatever */);\n\nswitch(c) {\ncase \'A\':\n//get the \'A\' image;\nbreak;\ncase \'B\':\n//get the \'B\' image;\nbreak;\n// (...)\ncase \'Z\':\n//get the \'Z\' image;\nbreak;\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nHow do you cache an image in Javascript\n----------Explanation----------\nSo, to precache images, all you have to do is load them into the browser. If you want to precache a bunch of images, it\'s probably best to do it with javascript as it generally won\'t hold up the page load when done from javascript. You can do that like this:\n----------Code Sample----------\nfunction preloadImages(array) {\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nvar list = preloadImages.list;\nfor (var i = 0; i < array.length; i++) {\nvar img = new Image();\nimg.onload = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = array[i];\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""]);\n\nfunction preloadImages(array, waitForOtherResources, timeout) {\nvar loaded = false, list = preloadImages.list, imgs = array.slice(0), t = timeout || 15*1000, timer;\nif (!preloadImages.list) {\npreloadImages.list = [];\n}\nif (!waitForOtherResources || document.readyState === \'complete\') {\nloadNow();\n} else {\nwindow.addEventListener(""load"", function() {\nclearTimeout(timer);\nloadNow();\n});\n// in case window.addEventListener doesn\'t get called (sometimes some resource gets stuck)\n// then preload the images anyway after some timeout time\ntimer = setTimeout(loadNow, t);\n}\n\nfunction loadNow() {\nif (!loaded) {\nloaded = true;\nfor (var i = 0; i < imgs.length; i++) {\nvar img = new Image();\nimg.onload = img.onerror = img.onabort = function() {\nvar index = list.indexOf(this);\nif (index !== -1) {\n// remove image from the array once it\'s loaded\n// for memory consumption reasons\nlist.splice(index, 1);\n}\n}\nlist.push(img);\nimg.src = imgs[i];\n}\n}\n}\n}\n\npreloadImages([""url1.jpg"", ""url2.jpg"", ""url3.jpg""], true);\npreloadImages([""url99.jpg"", ""url98.jpg""], true);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nCheck if an image is loaded (no errors) in JavaScript\n----------Explanation----------\nAnother option is to trigger the onload and/or onerror events by creating an in memory image element and setting its src attribute to the original src attribute of the original image. Here\'s an example of what I mean:\n----------Code Sample----------\n$("""")\n.on(\'load\', function() { console.log(""image loaded correctly""); })\n.on(\'error\', function() { console.log(""error loading image""); })\n.attr(""src"", $(originalImage).attr(""src""))\n;\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nUnable to read JPEG image using ImageIO.read(File file)\n----------Explanation----------\nRead a CMYK image into RGB BufferedImage.\n----------Code Sample----------\nFile f = new File(""/path/imagefile.jpg"");\n\n//Find a suitable ImageReader\nIterator readers = ImageIO.getImageReadersByFormatName(""JPEG"");\nImageReader reader = null;\nwhile(readers.hasNext()) {\nreader = (ImageReader)readers.next();\nif(reader.canReadRaster()) {\nbreak;\n}\n}\n\n//Stream the image file (the original CMYK image)\nImageInputStream input = ImageIO.createImageInputStream(f); \nreader.setInput(input); \n\n//Read the image raster\nRaster raster = reader.readRaster(0, null); \n\n//Create a new RGB image\nBufferedImage bi = new BufferedImage(raster.getWidth(), raster.getHeight(), \nBufferedImage.TYPE_4BYTE_ABGR); \n\n//Fill the new image with the old raster\nbi.getRaster().setRect(raster);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nHow to upload and store an image with google app engine (java)\n----------Explanation----------\nDeclaring your entity with the image. You can imagine having other fields, e.g. tags, location, etc\n----------Code Sample----------\n@Entity\npublic class MyImage {\n@PrimaryKey\n@Persistent(valueStrategy = IdGeneratorStrategy.IDENTITY)\nprivate Long id;\n\n@Persistent\nprivate String name;\n\n@Persistent\nBlob image;\n\npublic MyImage() { }\npublic MyImage(String name, Blob image) {\nthis.name = name; \nthis.image = image;\n}\n\n// JPA getters and setters and empty contructor\n// ...\npublic Blob getImage() { return image; }\npublic void setImage(Blob image) { this.image = image; }\n}\n\n// Your upload handle would look like\npublic void doPost(HttpServletRequest req, HttpServletResponse res) {\n// Get the image representation\nServletFileUpload upload = new ServletFileUpload();\nFileItemIterator iter = upload.getItemIterator(req);\nFileItemStream imageItem = iter.next();\nInputStream imgStream = imageItem.openStream();\n\n// construct our entity objects\nBlob imageBlob = new Blob(IOUtils.toByteArray(imgStream));\nMyImage myImage = new MyImage(imageItem.getName(), imageBlob);\n\n// persist image\nPersistenceManager pm = PMF.get().getPersistenceManager();\npm.makePersistent(myImage);\npm.close();\n\n// respond to query\nres.setContentType(""text/plain"");\nres.getOutputStream().write(""OK!"".getBytes());\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nAndroid Bitmap: Convert transparent pixels to a color\n----------Explanation----------\nIf you do not have control over the image yourself, you can modify it by doing something like, assuming your Bitmap is called image .\n----------Code Sample----------\nBitmap imageWithBG = Bitmap.createBitmap(image.getWidth(), image.getHeight(),image.getConfig()); // Create another image the same size\nimageWithBG.eraseColor(Color.WHITE); // set its background to white, or whatever color you want\nCanvas canvas = new Canvas(imageWithBG); // create a canvas to draw on the new image\ncanvas.drawBitmap(image, 0f, 0f, null); // draw old image on the background\nimage.recycle(); // clear out old image\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\nIs it possible to apply CSS to half of a character?\n----------Explanation----------\nHTML\n----------Code Sample----------\nNow on GitHub as a Plugin!\n\n\nenter image description here Feel free to fork and improve.\n\n\n\nDemo | Download Zip | Half-Style.com (Redirects to GitHub)\n\n\n\n\n\nPure CSS for a Single Character\n\nJavaScript used for automation accross text or multiple characters\n\nPreserves Text Accessibility for screen readers for the blind or visually\nimpaired\n\n\n\nPart1: Basic Solution\n\n\nHalf Style on text\n\n\n\nDemo: http://jsfiddle.net/pd9yB/817/\n\n\n\n\n\nThis works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.\n\n\n\nAlso, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.\n\n\n\nExplanation for a single character:\n\n\n\nPure CSS. All you need to do is to apply .halfStyle class to each element that contains the character you want to be half-styled.\n\n\n\nFor each span element containing the character, you can create a data attribute, for example here data-content=""X"", and on the pseudo element use content: attr(data-content); so the .halfStyle:before class will be dynamic and you won\'t need to hard code it for every instance.\n\n\n\nExplanation for any text:\n\n\n\nSimply add textToHalfStyle class to the element containing the text.\n\n\n\n\n\nCSS:\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: black; /* or transparent, any color */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    left:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: #f00;\n\n}\n\n\n\nSingle Characters:\n\n\n\nX\n\nY\n\nZ\n\nA\n\n\n\n\n\nAutomated:\n\n\n\n\n\nHalf-style, please.\n\n\n\njQuery(function($) {\n\n    var text, chars, $el, i, output;\n\n\n\n    // Iterate over all class occurences\n\n    $(\'.textToHalfStyle\').each(function(idx, el) {\n\n        $el = $(el);\n\n        text = $el.text();\n\n        chars = text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $el.html(\'\' + text + \'\');\n\n\n\n        // Reset output for appending\n\n        output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (i = 0; i < chars.length; i++) {\n\n            // Create a styled element for each character and append to container\n\n            output += \'\' + chars[i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $el.append(output);\n\n    });\n\n});\n\n\n\n.halfStyle {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n}\n\n.halfStyle:before { /* creates the top part */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the bottom part */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 100%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the right 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent; /* hide the base character */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the left 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    width: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\n.halfStyle { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n\n\nbody{\n\n    background-color: black;\n\n}\n\n\n\n.textToHalfStyle{\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n\n\n.halfStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n\n\njQuery(function($) {\n\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n\n\n    // Iterate over all class occurrences\n\n    $(\'.textToHalfStyle\').each(function(idx, halfstyle_el) {\n\n        $halfstyle_el = $(halfstyle_el);\n\n        halfstyle_style = $halfstyle_el.data(\'halfstyle\');\n\n        halfstyle_text = $halfstyle_el.text();\n\n        halfstyle_chars = halfstyle_text.split(\'\');\n\n\n\n        // Set the screen-reader text\n\n        $halfstyle_el.html(\'\' + halfstyle_text + \'\');\n\n\n\n        // Reset output for appending\n\n        halfstyle_output = \'\';\n\n\n\n        // Iterate over all chars in the text\n\n        for (halfstyle_i = 0; halfstyle_i < halfstyle_chars.length; halfstyle_i++) {\n\n            // Create a styled element for each character and append to container\n\n            halfstyle_output += \'\' + halfstyle_chars[halfstyle_i] + \'\';\n\n        }\n\n\n\n        // Write to DOM only once\n\n        $halfstyle_el.append(halfstyle_output);\n\n    });\n\n});\n\n\n\n /* start half-style hs-base */\n\n .halfStyle.hs-base {\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #000; /* for demo purposes */\n\n}\n\n.halfStyle.hs-base:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    overflow:hidden;\n\n    color: #f00; /* for demo purposes */\n\n}\n\n /* end half-style hs-base */\n\n\n\n/* start half-style hs-horizontal-third */\n\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n\n    position:relative;\n\n    display:inline-block;\n\n    font-size:80px; /* or any font size will work */\n\n    color: transparent;\n\n    overflow:hidden;\n\n    white-space: pre; /* to preserve the spaces from collapsing */\n\n    color: #f0f;\n\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n\n    display:block;\n\n    z-index:2;\n\n    position:absolute;\n\n    top:0;\n\n    height: 33.33%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #f00; /* for demo purposes */\n\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n\n}\n\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n\n    display:block;\n\n    position:absolute;\n\n    z-index:1;\n\n    top:0;\n\n    height: 66.66%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    pointer-events: none; /* so the base char is selectable by mouse */\n\n    color: #000; /* for demo purposes */\n\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n\n}\n\n/* end half-style hs-horizontal-third */\n\n\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n\n.halfStyle.hs-PeelingStyle {\n\n    position: relative;\n\n    display: inline-block;\n\n    font-size: 68px;\n\n    color: rgba(0, 0, 0, 0.8);\n\n    overflow: hidden;\n\n    white-space: pre;\n\n    transform: rotate(4deg);\n\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n\n}\n\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n\n    display: block;\n\n    z-index: 1;\n\n    position: absolute;\n\n    top: -0.5px;\n\n    left: -3px;\n\n    width: 100%;\n\n    content: attr(data-content);\n\n    overflow: hidden;\n\n    pointer-events: none;\n\n    color: #FFF;\n\n    transform: rotate(-4deg);\n\n    text-shadow: 0px 0px 1px #000;\n\n}\n\n/* end half-style hs-PeelingStyle */\n\n\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n\n.textToHalfStyle.hs-KevinGranger {\n\n    display:block;\n\n    margin: 200px 0 0 0;\n\n    text-align:center;\n\n}\n\n\n\n.halfStyle.hs-KevinGranger {\n\n    font-family: \'Libre Baskerville\', serif;\n\n    position:relative;\n\n    display:inline-block;\n\n    width:1;\n\n    font-size:70px;\n\n    color: black;\n\n    overflow:hidden;\n\n    white-space: pre;\n\n    text-shadow: 1px 2px 0 white;\n\n}\n\n.halfStyle.hs-KevinGranger:before {\n\n    display:block;\n\n    z-index:1;\n\n    position:absolute;\n\n    top:0;\n\n    width: 50%;\n\n    content: attr(data-content); /* dynamic content for the pseudo element */\n\n    overflow:hidden;\n\n    color: white;\n\n}\n\n/* end half-style hs-KevinGranger\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n\n\n    Half-style, please.\n\n\n\n\n*******************end of usage scenario 11*****************\n\n\n\n*******************usage scenario 12**********************\n\n\n----------usage scenario----------\n\nChanging the image source using jQuery\n\n----------Explanation----------\n\nYou can use jQuery\'s  attr()  function.  For example, if you img tag has an id attribute of \'my_image\':\n\n----------Code Sample----------\n\n\n\n\n\n$(""#my_image"").attr(""src"",""second.jpg"");\n\n\n\n$(\'#my_image\').on({\n\n    \'click\': function(){\n\n        $(\'#my_image\').attr(\'src\',\'second.jpg\');\n\n    }\n\n});\n\n\n\n$(\'img\').on({\n\n    \'click\': function() {\n\n         var src = ($(this).attr(\'src\') === \'img1_on.jpg\')\n\n            ? \'img2_on.jpg\'\n\n            : \'img1_on.jpg\';\n\n         $(this).attr(\'src\', src);\n\n    }\n\n});\n\n*******************end of usage scenario 12*****************\n\n\n\n*******************usage scenario 13**********************\n\n\n----------usage scenario----------\n\nSetting background-image using jQuery CSS property\n\n----------Explanation----------\n\nYou probably want this (to make it like a normal CSS background-image declaration):\n\n----------Code Sample----------\n\n$(\'myOjbect\').css(\'background-image\', \'url(\' + imageUrl + \')\');\n\n*******************end of usage scenario 13*****************\n\n\n\n*******************usage scenario 14**********************\n\n\n----------usage scenario----------\n\nWhat is the best way to display millions of images in Java?\n\n----------Explanation----------\n\n\n\n----------Code Sample----------\n\nImage tile = new Image(""tile.png"");\n\n\n\nGroup house = new Group();\n\nhouse.setCache(true);\n\nhouse.setCacheHint(CacheHint.SPEED);\n\n\n\nEffect lighting = new Lighting();\n\n\n\nfor (int i = 0; i < houseWidth; i++) {\n\n  // here is the critical part => don\'t do new ImageView(new Image(""tile.png""))\n\n  ImageView tileView = new ImageView(tile));\n\n  tileView.setEffect(lighting);\n\n  tileView.setCache(true);\n\n  tileView.setCacheHint(CacheHint.SPEED);\n\n\n\n  house.add(tileView);  \n\n}\n\n*******************end of usage scenario 14*****************\n\n\n\n*******************usage scenario 15**********************\n\n\n----------usage scenario----------\n\nHow to flip BufferedImage in java\n\n----------Explanation----------\n\nBased on the image that you posted, I assume that you want to  flip  the image vertically. This can be done pixel by pixel, or (when it should be done efficiently) with an  AffineTransformOp  or by directly painting the image using a transformed  Graphics2D .\n\n----------Code Sample----------\n\nimport java.awt.Component;\n\nimport java.awt.Graphics2D;\n\nimport java.awt.GridLayout;\n\nimport java.awt.RenderingHints;\n\nimport java.awt.geom.AffineTransform;\n\nimport java.awt.image.BufferedImage;\n\nimport java.awt.image.ByteLookupTable;\n\nimport java.awt.image.LookupOp;\n\nimport java.awt.image.LookupTable;\n\nimport java.io.File;\n\nimport java.io.IOException;\n\nimport java.util.Arrays;\n\n\n\nimport javax.imageio.ImageIO;\n\nimport javax.swing.BorderFactory;\n\nimport javax.swing.ImageIcon;\n\nimport javax.swing.JFrame;\n\nimport javax.swing.JLabel;\n\nimport javax.swing.JPanel;\n\nimport javax.swing.SwingUtilities;\n\n\n\npublic class ImageFlipTest\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n        SwingUtilities.invokeLater(new Runnable()\n\n        {\n\n            @Override\n\n            public void run()\n\n            {\n\n                createAndShowGUI();\n\n            }\n\n        });\n\n    }\n\n\n\n    private static void createAndShowGUI()\n\n    {\n\n        JFrame frame = new JFrame();\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        frame.getContentPane().setLayout(new GridLayout(1, 1));\n\n\n\n        BufferedImage image = null;\n\n        try\n\n        {\n\n            image = convertToARGB(ImageIO.read(new File(""lena512color.png"")));\n\n        }\n\n        catch (IOException e1)\n\n        {\n\n            e1.printStackTrace();\n\n        }\n\n\n\n        JPanel panel = new JPanel(new GridLayout(2,2));\n\n        panel.add(createComponent(""Original"", image));\n\n        panel.add(createComponent(""Flipped"", createFlipped(image)));\n\n        panel.add(createComponent(""Rotated"", createRotated(image)));\n\n        panel.add(createComponent(""Inverted"", createInverted(image)));\n\n\n\n        frame.getContentPane().add(panel);\n\n        frame.pack();\n\n        frame.setLocationRelativeTo(null);\n\n        frame.setVisible(true);\n\n    }\n\n\n\n    private static BufferedImage convertToARGB(BufferedImage image)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }    \n\n\n\n    private static BufferedImage createFlipped(BufferedImage image)\n\n    {\n\n        AffineTransform at = new AffineTransform();\n\n        at.concatenate(AffineTransform.getScaleInstance(1, -1));\n\n        at.concatenate(AffineTransform.getTranslateInstance(0, -image.getHeight()));\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createRotated(BufferedImage image)\n\n    {\n\n        AffineTransform at = AffineTransform.getRotateInstance(\n\n            Math.PI, image.getWidth()/2, image.getHeight()/2.0);\n\n        return createTransformed(image, at);\n\n    }\n\n\n\n    private static BufferedImage createTransformed(\n\n        BufferedImage image, AffineTransform at)\n\n    {\n\n        BufferedImage newImage = new BufferedImage(\n\n            image.getWidth(), image.getHeight(),\n\n            BufferedImage.TYPE_INT_ARGB);\n\n        Graphics2D g = newImage.createGraphics();\n\n        g.transform(at);\n\n        g.drawImage(image, 0, 0, null);\n\n        g.dispose();\n\n        return newImage;\n\n    }\n\n\n\n    private static BufferedImage createInverted(BufferedImage image)\n\n    {\n\n        if (image.getType() != BufferedImage.TYPE_INT_ARGB)\n\n        {\n\n            image = convertToARGB(image);\n\n        }\n\n        LookupTable lookup = new LookupTable(0, 4)\n\n        {\n\n            @Override\n\n            public int[] lookupPixel(int[] src, int[] dest)\n\n            {\n\n                dest[0] = (int)(255-src[0]);\n\n                dest[1] = (int)(255-src[1]);\n\n                dest[2] = (int)(255-src[2]);\n\n                return dest;\n\n            }\n\n        };\n\n        LookupOp op = new LookupOp(lookup, new RenderingHints(null));\n\n        return op.filter(image, null);\n\n    }\n""""""]']","['To resize an image while keeping its aspect ratio in Java, you need to follow a series of steps that involve loading the image, calculating the new dimensions while maintaining the aspect ratio, and then resizing the image accordingly. First, you load the image using a library such as `javax.imageio.ImageIO`. Once the image is loaded, you determine the aspect ratio by dividing the width by the height of the original image. To maintain this aspect ratio, you need to calculate the new dimensions based on either the desired width or height while keeping the ratio constant. For instance, if you want to resize the image to a specific width, you calculate the new height by dividing the desired width by the aspect ratio. Conversely, if you want to resize to a specific height, you calculate the new width by multiplying the desired height by the aspect ratio. After calculating the new dimensions, you create a new `BufferedImage` with these dimensions and use the `Graphics2D` class to draw the original image into the new image, effectively resizing it. Finally, you can save the resized image using `ImageIO.write`. This process ensures that the resized image maintains the same proportions as the original, preventing any distortion.']","['[\'[\\\'To resize an image while keeping its aspect ratio in Java, we can use the `java.awt` and `javax.imageio` packages. The following code demonstrates how to achieve this. The code reads an image from a file, resizes it while maintaining the aspect ratio, and then writes the resized image to a new file.\\\\nimport java.awt.Graphics2D;\\\\nimport java.awt.Image;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class ImageResizer {\\\\n    public static void main(String[] args) {\\\\n        try {\\\\n            // Read the original image from a file\\\\n            File inputFile = new File(""path/to/input/image.jpg"");\\\\n            BufferedImage inputImage = ImageIO.read(inputFile);\\\\n\\\\n            // Define the target width and height\\\\n            int targetWidth = 800;\\\\n            int targetHeight = 600;\\\\n\\\\n            // Calculate the new dimensions while maintaining the aspect ratio\\\\n            int originalWidth = inputImage.getWidth();\\\\n            int originalHeight = inputImage.getHeight();\\\\n            double aspectRatio = (double) originalWidth / originalHeight;\\\\n\\\\n            if (targetWidth / aspectRatio <= targetHeight) {\\\\n                targetHeight = (int) (targetWidth / aspectRatio);\\\\n            } else {\\\\n                targetWidth = (int) (targetHeight * aspectRatio);\\\\n            }\\\\n\\\\n            // Create a new buffered image with the new dimensions\\\\n            Image tmp = inputImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);\\\\n            BufferedImage outputImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);\\\\n\\\\n            // Draw the scaled image\\\\n            Graphics2D g2d = outputImage.createGraphics();\\\\n            g2d.drawImage(tmp, 0, 0, null);\\\\n            g2d.dispose();\\\\n\\\\n            // Write the output image to a file\\\\n            File outputFile = new File(""path/to/output/image_resized.jpg"");\\\\n            ImageIO.write(outputImage, ""jpg"", outputFile);\\\\n\\\\n            System.out.println(""Image resized successfully."");\\\\n        } catch (IOException e) {\\\\n            System.err.println(""Error resizing the image."");\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n}\\\']\']']",1.0,1.0,0.0975609756097561,0.0010493179433368,0.1111111111111111,0.75
swing,JLabel,How to resize JLabel ImageIcon?,['nan'],['Most common ways to construct:\nJLabel label1 = new JLabel();\nBased on 31 examples\n \nString s = Ã‰;\nJLabel l = new JLabel(s);\nBased on 30 examples'],"['Try this :\n\nImageIcon imageIcon = new ImageIcon(""./img/imageName.png""); // load the image to a imageIcon\nImage image = imageIcon.getImage(); // transform it \nImage newimg = image.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  \nimageIcon = new ImageIcon(newimg);  // transform it back']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nJava GUI: Sharing values across different JFrames\n----------Explanation----------\n\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.util.*;\n\n// TwoWindows is the Application \npublic class TwoWindows {\n// shared state ( model ) \nprivate int clickCount = 0;\n\n// UI\nprivate List toUpdate = new ArrayList();\n\n// listener ( listens for clicks on buttons kind of controller )\nprivate ActionListener actionListener = new ActionListener() {\n\n// Each time update the UI \npublic void actionPerformed( ActionEvent e ) {\nclickCount++; \nfor( JLabel label : toUpdate ) {\nlabel.setText( ""Count: "" + ( clickCount ) );\n}\n}\n};\n\n// Createsa winddow with a label and a button\npublic void showWindow( String named ) {\nJFrame f = new JFrame( named );\nf.add( createButtonAndLabel() );\nf.pack();\nf.setVisible( true );\n}\n\n// Creates the label and button and adds this.actionListener\n// to each button. \nprivate JComponent createButtonAndLabel() {\nJPanel panel = new JPanel();\nJLabel label = new JLabel(""Count: 0"");\nJButton clickMe = new JButton(""Click me"");\n// adding the label to a ""view"" list.\ntoUpdate.add( label );\n// adding the listener to each button \nclickMe.addActionListener( actionListener );\npanel.add( label );\npanel.add( clickMe );\nreturn panel;\n}\n\n// Run the app\npublic static void main( String [] args ) {\nTwoWindows t = new TwoWindows();\nt.showWindow(""A"");\nt.showWindow(""B"");\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\ndragging a jlabel around the screen\n----------Explanation----------\nAddition: You\'ve probably left this thread, but if you come back, or for the benefit of others, I wanted to clarify what I meant by using a JLayeredPane by posting an example.\n----------Code Sample----------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class DragLabelOnLayeredPane extends JLayeredPane {\npublic static final int WIDTH = 680;\npublic static final int HEIGHT = 480;\nprivate static final int GRID_ROWS = 8;\nprivate static final int GRID_COLS = 6;\nprivate static final int GAP = 3;\nprivate static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT);\nprivate static final Dimension LABEL_SIZE = new Dimension(60, 40);\nprivate GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP);\nprivate JPanel backingPanel = new JPanel(gridlayout);\nprivate JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS];\nprivate JLabel redLabel = new JLabel(""Red"", SwingConstants.CENTER);\nprivate JLabel blueLabel = new JLabel(""Blue"", SwingConstants.CENTER);\n\npublic DragLabelOnLayeredPane() {\nbackingPanel.setSize(LAYERED_PANE_SIZE);\nbackingPanel.setLocation(2 * GAP, 2 * GAP);\nbackingPanel.setBackground(Color.black);\nfor (int row = 0; row < GRID_ROWS; row++) {\nfor (int col = 0; col < GRID_COLS; col++) {\npanelGrid[row][col] = new JPanel(new GridBagLayout());\nbackingPanel.add(panelGrid[row][col]);\n}\n}\n\nredLabel.setOpaque(true);\nredLabel.setBackground(Color.red.brighter().brighter());\nredLabel.setPreferredSize(LABEL_SIZE);\npanelGrid[4][3].add(redLabel);\n\nblueLabel.setOpaque(true);\nblueLabel.setBackground(Color.blue.brighter().brighter());\nblueLabel.setPreferredSize(LABEL_SIZE);\npanelGrid[1][1].add(blueLabel);\n\nbackingPanel.setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));\nsetPreferredSize(LAYERED_PANE_SIZE);\nadd(backingPanel, JLayeredPane.DEFAULT_LAYER);\nMyMouseAdapter myMouseAdapter = new MyMouseAdapter();\naddMouseListener(myMouseAdapter);\naddMouseMotionListener(myMouseAdapter);\n}\n\nprivate class MyMouseAdapter extends MouseAdapter {\nprivate JLabel dragLabel = null;\nprivate int dragLabelWidthDiv2;\nprivate int dragLabelHeightDiv2;\nprivate JPanel clickedPanel = null;\n\n@Override\npublic void mousePressed(MouseEvent me) {\nclickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());\nComponent[] components = clickedPanel.getComponents();\nif (components.length == 0) {\nreturn;\n}\n// if we click on jpanel that holds a jlabel\nif (components[0] instanceof JLabel) {\n\n// remove label from panel\ndragLabel = (JLabel) components[0];\nclickedPanel.remove(dragLabel);\nclickedPanel.revalidate();\nclickedPanel.repaint();\n\ndragLabelWidthDiv2 = dragLabel.getWidth() / 2;\ndragLabelHeightDiv2 = dragLabel.getHeight() / 2;\n\nint x = me.getPoint().x - dragLabelWidthDiv2;\nint y = me.getPoint().y - dragLabelHeightDiv2;\ndragLabel.setLocation(x, y);\nadd(dragLabel, JLayeredPane.DRAG_LAYER);\nrepaint();\n}\n}\n\n@Override\npublic void mouseDragged(MouseEvent me) {\nif (dragLabel == null) {\nreturn;\n}\nint x = me.getPoint().x - dragLabelWidthDiv2;\nint y = me.getPoint().y - dragLabelHeightDiv2;\ndragLabel.setLocation(x, y);\nrepaint();\n}\n\n@Override\npublic void mouseReleased(MouseEvent me) {\nif (dragLabel == null) {\nreturn;\n}\nremove(dragLabel); // remove dragLabel for drag layer of JLayeredPane\nJPanel droppedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());\nif (droppedPanel == null) {\n// if off the grid, return label to home\nclickedPanel.add(dragLabel);\nclickedPanel.revalidate();\n} else {\nint r = -1;\nint c = -1;\nsearchPanelGrid: for (int row = 0; row < panelGrid.length; row++) {\nfor (int col = 0; col < panelGrid[row].length; col++) {\nif (panelGrid[row][col] == droppedPanel) {\nr = row;\nc = col;\nbreak searchPanelGrid;\n}\n}\n}\n\nif (r == -1 || c == -1) {\n// if off the grid, return label to home\nclickedPanel.add(dragLabel);\nclickedPanel.revalidate();\n} else {\ndroppedPanel.add(dragLabel);\ndroppedPanel.revalidate();\n}\n}\n\nrepaint();\ndragLabel = null;\n}\n}\n\nprivate static void createAndShowUI() {\nJFrame frame = new JFrame(""DragLabelOnLayeredPane"");\nframe.getContentPane().add(new DragLabelOnLayeredPane());\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\njava.awt.EventQueue.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowUI();\n}\n});\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nWhich layout can do this?\n----------Explanation----------\nYou don\'t need a layout manager which specifically supports this. You can calculate the x, y positions yourself with some fairly simple trigonometry, then use a regular layout such as SpringLayout .\n----------Code Sample----------\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.SpringLayout;\n\npublic class CircleLayout {\n\n/**\n* Calculate x,y positions of n labels positioned in\n* a circle around a central point. Assumes AWT coordinate\n* system where origin (0,0) is top left.\n* @param args\n*/\npublic static void main(String[] args) {\nint n = 6; //Number of labels\nint radius = 100;\nPoint centre = new Point(200,200);\n\ndouble angle = Math.toRadians(360/n);\nList points = new ArrayList();\npoints.add(centre);\n\n//Add points\nfor (int i=0; i double theta = i*angle;\nint dx = (int)(radius * Math.sin(theta));\nint dy = (int)(-radius * Math.cos(theta));\nPoint p = new Point(centre.x + dx, centre.y + dy);\npoints.add(p);\n}\n\ndraw(points);\n}\n\nprivate static void draw(List points) {\nJFrame frame = new JFrame(""Labels in a circle"");\nframe.setSize(500, 500);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel panel = new JPanel();;\nSpringLayout layout = new SpringLayout();\n\nint count = 0;\nfor (Point point : points) {\nJLabel label = new JLabel(""Point "" + count);\npanel.add(label);\ncount++;\nlayout.putConstraint(SpringLayout.WEST, label, point.x, SpringLayout.WEST, panel);\nlayout.putConstraint(SpringLayout.NORTH, label, point.y, SpringLayout.NORTH, panel);\n}\n\npanel.setLayout(layout);\n\nframe.add(panel);\nframe.setVisible(true);\n\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nMultiline text in JLabel\n----------Explanation----------\nYou can do it by putting HTML in the code, so:\n----------Code Sample----------\nJFrame frame = new JFrame();\nframe.setLayout(new GridLayout());\nJLabel label = new JLabel(""First line\nSecond line"");\nframe.add(label);\nframe.pack();\nframe.setVisible(true);\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nUnicode characters in javax.swing only display when using the default font-size\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.EventQueue;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class TestUnicodeFont {\n\npublic static void main(String[] args) {\nnew TestUnicodeFont();\n}\n\npublic TestUnicodeFont() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\npublic class TestPane extends JPanel {\n\npublic TestPane() {\nsetLayout(new GridBagLayout());\nGridBagConstraints gbc = new GridBagConstraints();\ngbc.gridwidth = GridBagConstraints.REMAINDER;\nJLabel normal = new JLabel(""Normal - ?"");\nJLabel byCode = new JLabel(""Normal code - \\u2109"");\n\nJLabel normalLarger = new JLabel(""Large - ?"");\nnormalLarger.setFont(normalLarger.getFont().deriveFont(48f));\nJLabel byCodeLatger = new JLabel(""Large code - \\u2109"");\nbyCodeLatger.setFont(byCodeLatger.getFont().deriveFont(48f));\n\nadd(normal, gbc);\nadd(byCode, gbc);\nadd(normalLarger, gbc);\nadd(byCodeLatger, gbc);\n}\n}\n\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nLabel will not update with the flow\n----------Explanation----------\nYou\'re shadowing your tieLabel variable by re-declaring it in the class. By doing this, the local variable declared in the constructor is initialized, but the field declared in the class remains null:\n----------Code Sample----------\npublic class GamePanel extends JPanel {\nprivate JButton rockButton, paperButton, scissorsButton;\n\n// all these variables are null and remain null\nprivate JLabel userLabel, computerLabel, resultLabel, winLabel, tieLabel,\nloseLabel;\n\n// ...\n\npublic GamePanel() {\n\n// ...\n\n// ***** shadowing vars here\nJButton rockButton = new JButton(rockButtonText);\nJButton paperButton = new JButton(paperButtonText);\nJButton scissorsButton = new JButton(scissorsButtonText);\n\n//...\n\n// *** and here\nJLabel userLabel = new JLabel(""User:"");\nJLabel computerLabel = new JLabel(""Computer:"");\nJLabel winLabel = new JLabel(""Win: "" + winInt);\nJLabel tieLabel = new JLabel(""Tie: "" + tieInt);\nJLabel loseLabel = new JLabel(""Lose:"" + loseInt);\n\npublic GamePanel() {\n\n// ...\n\nrockButton = new JButton(rockButtonText);\npaperButton = new JButton(paperButtonText);\nscissorsButton = new JButton(scissorsButtonText);\n\n//...\n\nuserLabel = new JLabel(""User:"");\ncomputerLabel = new JLabel(""Computer:"");\nwinLabel = new JLabel(""Win: "" + winInt);\ntieLabel = new JLabel(""Tie: "" + tieInt);\nloseLabel = new JLabel(""Lose:"" + loseInt);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nJava: How do I pass variables from JButton ActionListener to main class?\n----------Explanation----------\nMake a class, instance variable available for the numGenerator to access directly...\n----------Code Sample----------\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\n// This variable will be visible to the inner class numGenerator\nprivate JLabel output;\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\noutput = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator());\n}\n\npublic class numGenerator implements ActionListener{\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\noutput.setText(Integer.toString(num));\n\n}\n}\n}\n\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\nJLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator(output));\n}\n\npublic class numGenerator implements ActionListener{\nprivate JLabel label;\n\npublic numGenerator(JLabel label) {\nthis.label = label;\n}\n\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\nif (label != null) {\nlabel.setText(Integer.toString(num));\n}\n\n}\n}\n}\n\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\nfinal JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator(new NumberGeneratorListener() {\npublic void numberGenerated(int number) {\noutput.setText(Integer.toString(number));\n}\n}));\n}\n\npublic interface NumberGeneratorListener {\npublic void numberGenerated(int number);\n}\n\npublic class numGenerator implements ActionListener{\nprivate NumberGeneratorListener listener;\n\npublic numGenerator(NumberGeneratorListener listener) {\nthis.listener = listener;\n}\n\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\nif (listener != null) {\nlistener.numberGenerated(num);\n}\n\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to align a JLabel to the bottom of a JPanel\n----------Explanation----------\nYou could use BorderLayout and add the label to the PAGE_END position of the container\n----------Code Sample----------\nsetLayout(new BorderLayout());\nadd(itemLabel, BorderLayout.PAGE_END);\n\nJLabel itemLabel = new JLabel(""ccc"", JLabel.CENTER);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nCan\'t move JLabel on JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.LayoutManager2;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.Timer;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class Monopoly {\n\npublic static void main(String[] args) {\nnew Monopoly();\n}\n\npublic Monopoly() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\nex.printStackTrace();\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(new MonopolyBoard());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\npublic class MonopolyBoard extends JPanel {\n\nprivate List players;\n\npublic MonopolyBoard() {\nsetLayout(new MonopolyBoardLayout());\n\nplayers = new ArrayList<>(2);\ntry {\nplayers.add(makePlayer(""/Dog.png""));\nplayers.add(makePlayer(""/Car.png""));\n\nfor (JLabel player : players) {\nadd(player, new Integer(0));\n}\n} catch (IOException exp) {\nexp.printStackTrace();\n}\n\nTimer timer = new Timer(1000, new ActionListener() {\nprivate int count = 0;\nprivate Random rnd = new Random();\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nint playerIndex = count % players.size();\nJLabel player = players.get(playerIndex);\n\nMonopolyBoardLayout layout = (MonopolyBoardLayout) getLayout();\nint position = layout.getPosition(player);\n\nposition += rnd.nextInt(5) + 1;\nif (position > 35) {\nposition -= 35;\n}\n\nlayout.setPosition(player, position);\n\nrevalidate();\nrepaint();\ncount++;\n}\n});\ntimer.start();\n}\n\nprotected JLabel makePlayer(String path) throws IOException {\nJLabel label = new JLabel(new ImageIcon(ImageIO.read(getClass().getResource(path))), JLabel.CENTER);\nreturn label;\n}\n\n@Override\nprotected void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nGraphics2D g2d = (Graphics2D) g.create();\nint width = getWidth();\nint height = getHeight();\n\nfor (int index = 0; index < 36; index++) {\nRectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);\ng2d.draw(bounds);\n}\n\ng2d.dispose();\n}\n\n}\n\npublic static class MonopolyBoardLayoutHelper {\n\nprivate static Map mapBoardCells;\n\nstatic {\nmapBoardCells = new HashMap<>(25);\n\nmapBoardCells.put(10, new Point(0, 8));\nmapBoardCells.put(11, new Point(0, 7));\nmapBoardCells.put(12, new Point(0, 6));\nmapBoardCells.put(13, new Point(0, 5));\nmapBoardCells.put(14, new Point(0, 4));\nmapBoardCells.put(15, new Point(0, 3));\nmapBoardCells.put(16, new Point(0, 2));\nmapBoardCells.put(17, new Point(0, 1));\nmapBoardCells.put(18, new Point(0, 0));\n\nmapBoardCells.put(0, new Point(9, 9));\nmapBoardCells.put(1, new Point(8, 9));\nmapBoardCells.put(2, new Point(7, 9));\nmapBoardCells.put(3, new Point(6, 9));\nmapBoardCells.put(4, new Point(5, 9));\nmapBoardCells.put(5, new Point(4, 9));\nmapBoardCells.put(6, new Point(3, 9));\nmapBoardCells.put(7, new Point(2, 9));\nmapBoardCells.put(8, new Point(1, 9));\nmapBoardCells.put(9, new Point(0, 9));\n\nmapBoardCells.put(19, new Point(1, 0));\nmapBoardCells.put(20, new Point(2, 0));\nmapBoardCells.put(21, new Point(3, 0));\nmapBoardCells.put(22, new Point(4, 0));\nmapBoardCells.put(23, new Point(5, 0));\nmapBoardCells.put(24, new Point(6, 0));\nmapBoardCells.put(25, new Point(7, 0));\nmapBoardCells.put(26, new Point(8, 0));\nmapBoardCells.put(27, new Point(9, 0));\n\nmapBoardCells.put(28, new Point(9, 1));\nmapBoardCells.put(29, new Point(9, 2));\nmapBoardCells.put(30, new Point(9, 3));\nmapBoardCells.put(31, new Point(9, 4));\nmapBoardCells.put(32, new Point(9, 5));\nmapBoardCells.put(33, new Point(9, 6));\nmapBoardCells.put(34, new Point(9, 7));\nmapBoardCells.put(35, new Point(9, 8));\n\n}\n\npublic static Rectangle getCellBounds(int index, int width, int height) {\nRectangle bounds = new Rectangle(0, 0, 0, 0);\nint size = Math.min(width, height);\nint cellSize = size / 10;\n\nint xOffset = (width - size) / 2;\nint yOffset = (height - size) / 2;\n\nPoint point = mapBoardCells.get(index);\nif (point != null) {\n\nint x = xOffset + (point.x * cellSize);\nint y = yOffset + (point.y * cellSize);\nbounds = new Rectangle(x, y, cellSize, cellSize);\n\n}\n\nreturn bounds;\n\n}\n\n}\n\npublic static class MonopolyBoardLayout implements LayoutManager2 {\n\npublic static final int DEFAULT_CELL_SIZE = 64;\n\nprivate Map cellConstraints;\n\npublic MonopolyBoardLayout() {\ncellConstraints = new HashMap<>(5);\n}\n\npublic Integer getPosition(Component comp) {\nreturn cellConstraints.get(comp);\n}\n\npublic void setPosition(Component comp, int position) {\ncellConstraints.put(comp, position);\n}\n\n@Override\npublic void addLayoutComponent(Component comp, Object constraints) {\nif (constraints instanceof Integer) {\nint cell = (int) constraints;\nif (cell >= 0 && cell <= 35) {\ncellConstraints.put(comp, cell);\n} else {\nthrow new IllegalArgumentException(constraints + "" is not within the bounds of a valid cell reference (0-35)"");\n}\n} else {\nthrow new IllegalArgumentException(constraints + "" is not a valid cell reference (integer within 0-35)"");\n}\n}\n\n@Override\npublic Dimension maximumLayoutSize(Container target) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic float getLayoutAlignmentX(Container target) {\nreturn 0.5f;\n}\n\n@Override\npublic float getLayoutAlignmentY(Container target) {\nreturn 0.5f;\n}\n\n@Override\npublic void invalidateLayout(Container target) {\n}\n\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n}\n\n@Override\npublic void removeLayoutComponent(Component comp) {\ncellConstraints.remove(comp);\n}\n\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic void layoutContainer(Container parent) {\nint width = parent.getWidth();\nint height = parent.getHeight();\n\nMap> components = new HashMap<>(25);\n\nfor (Component child : parent.getComponents()) {\nInteger cell = cellConstraints.get(child);\nif (cell != null) {\nList children = components.get(cell);\nif (children == null) {\nchildren = new ArrayList<>(4);\ncomponents.put(cell, children);\n}\nchildren.add(child);\n} else {\nchild.setBounds(0, 0, 0, 0);\n}\n}\n\nfor (Map.Entry> entry : components.entrySet()) {\nint index = entry.getKey();\nRectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);\nList comp = entry.getValue();\nint xDelta = 0;\nint yDelta = 0;\nint availableWidth = bounds.width;\nint availableHeight = bounds.height;\nswitch (comp.size()) {\ncase 2:\navailableWidth /= 2;\nxDelta = availableWidth;\nbreak;\ncase 3:\ncase 4:\navailableWidth /= 2;\nxDelta = availableWidth;\navailableHeight /= 2;\nyDelta = availableHeight;\nbreak;\n}\nint x = bounds.x;\nint y = bounds.y;\nfor (int count = 0; count < comp.size() && count < 4; count++) {\nComponent child = comp.get(count);\nchild.setSize(availableWidth, availableHeight);\nchild.setLocation(x, y);\n\nx += xDelta;\nif (x >= bounds.x + bounds.width) {\nx = bounds.x;\ny += yDelta;\n}\n}\n}\n\n}\n\n}\n\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nHow Do I Make These JLabels of JButtons invisible\n----------Explanation----------\nEdit \nFor example, a bad code example as a proof of concept. Try compiling and running this.\n----------Code Sample----------\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.GridLayout;\nimport java.awt.Point;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.util.EnumMap;\nimport java.util.Map;\n\nimport javax.swing.*;\n\n@SuppressWarnings(""serial"")\npublic class Checkers extends JPanel {\npublic static final int SIDE_LENGTH = 60;\npublic static final int ROW_COUNT = 8;\nprivate static final String ROW = ""row"";\nprivate static final String COLUMN = ""column"";\nprivate static final Color LIGHT_COLOR = new Color(210, 180, 140);\nprivate static final Color DARK_COLOR = new Color(107, 68, 35);\nprivate Map checkerIconMap = new EnumMap(\nChecker.class);\nprivate JLabel[][] labelGrid = new JLabel[ROW_COUNT][ROW_COUNT];\nprivate Checker[][] checkerGrid = new Checker[ROW_COUNT][ROW_COUNT];\n\npublic Checkers() {\nfor (Checker checker : Checker.values()) {\ncheckerIconMap.put(checker, createCheckerIcon(checker));\n}\nsetLayout(new GridLayout(ROW_COUNT, ROW_COUNT));\n\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\ncheckerGrid[row][col] = Checker.EMPTY;\nJLabel gridCell = new JLabel(checkerIconMap.get(Checker.EMPTY));\ngridCell.setOpaque(true);\ngridCell.putClientProperty(ROW, row);\ngridCell.putClientProperty(COLUMN, col);\nColor c = row % 2 == col % 2 ? LIGHT_COLOR : DARK_COLOR;\ngridCell.setBackground(c);\nadd(gridCell);\nlabelGrid[row][col] = gridCell;\n}\n}\n\nfor (int i = 0; i < labelGrid.length / 2 - 1; i++) {\nfor (int j = 0; j < labelGrid.length / 2; j++) {\nint row = i;\nint col = j * 2;\ncol += row % 2 == 0 ? 1 : 0;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.BLACK));\ncheckerGrid[row][col] = Checker.BLACK;\n\nrow = ROW_COUNT - row - 1;\ncol = ROW_COUNT - col - 1;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.RED));\ncheckerGrid[row][col] = Checker.RED;\n}\n}\n\nMyMouseAdapter myMouseAdapter = new MyMouseAdapter();\naddMouseListener(myMouseAdapter);\naddMouseMotionListener(myMouseAdapter);\n}\n\nprivate Icon createCheckerIcon(Checker checker) {\nBufferedImage img = new BufferedImage(SIDE_LENGTH, SIDE_LENGTH,\nBufferedImage.TYPE_INT_ARGB);\nGraphics2D g2 = img.createGraphics();\ng2.setColor(checker.getColor());\ng2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\nRenderingHints.VALUE_ANTIALIAS_ON);\nint x = 3;\nint y = x;\nint width = SIDE_LENGTH - 2 * x;\nint height = width;\ng2.fillOval(x, y, width, height);\ng2.dispose();\n\nreturn new ImageIcon(img);\n}\n\nprivate class MyMouseAdapter extends MouseAdapter {\nprivate int selectedRow = -1;\nprivate int selectedCol = -1;\nprivate Checker selectedChecker = null;\nprivate JPanel glassPane = null;\nprivate Point p = null;\nprivate JLabel movingLabel = new JLabel(checkerIconMap.get(Checker.EMPTY));\n\npublic MyMouseAdapter() {\nmovingLabel.setSize(movingLabel.getPreferredSize());\nmovingLabel.setVisible(false);\n}\n\n@Override\npublic void mousePressed(MouseEvent e) {\np = e.getPoint();\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\nJLabel gridCell = labelGrid[row][col];\nif (gridCell == getComponentAt(p)) {\nif (checkerGrid[row][col] != Checker.EMPTY) {\nselectedRow = row;\nselectedCol = col;\nselectedChecker = checkerGrid[row][col];\ncheckerGrid[row][col] = Checker.EMPTY;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.EMPTY));\n\nJRootPane rootPane = SwingUtilities.getRootPane(Checkers.this);\nglassPane = (JPanel) rootPane.getGlassPane();\nglassPane.setVisible(true);\nglassPane.setLayout(null);\nmovingLabel.setIcon(checkerIconMap.get(selectedChecker));\nmovingLabel.setVisible(true);\nglassPane.add(movingLabel);\nint x = p.x - SIDE_LENGTH / 2;\nint y = p.y - SIDE_LENGTH / 2;\nmovingLabel.setLocation(x, y);\n}\n}\n}\n}\n}\n\n@Override\npublic void mouseReleased(MouseEvent e) {\nif (selectedChecker == null) {\nreturn;\n}\n\np = e.getPoint();\nif (!Checkers.this.contains(p)) {\n// if mouse releases and is totally off of the grid\nreturnCheckerToOriginalCell();\nclearGlassPane();\nreturn;\n}\n\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\nJLabel gridCell = labelGrid[row][col];\nif (gridCell == getComponentAt(p)) {\nif (isMoveLegal(row, col)) {\ncheckerGrid[row][col] = selectedChecker;\nlabelGrid[row][col].setIcon(checkerIconMap.get(selectedChecker));\n\n// todo: check for jumped pieces...\n} else {\n// illegal move\nreturnCheckerToOriginalCell();\n}\n}\n}\n}\nclearGlassPane();\n}\n\n// this code would go in the model class\nprivate boolean isMoveLegal(int row, int col) {\nif (checkerGrid[row][col] != Checker.EMPTY) {\n// trying to put a checker on another checker\nreturnCheckerToOriginalCell();\n} else if (row == selectedRow && col == selectedCol) {\n// trying to put checker back in same position\nreturnCheckerToOriginalCell();\n} else if (row % 2 == col % 2) {\n// invalid square\nreturnCheckerToOriginalCell();\n} else {\n// TODO: more logic needs to go here to test for a legal move\n// and to remove jumped pieces\n\nreturn true;\n}\nreturn false;\n}\n\n@Override\npublic void mouseDragged(MouseEvent e) {\nif (selectedChecker == null || p == null) {\nreturn;\n}\np = e.getPoint();\nint x = p.x - SIDE_LENGTH / 2;\nint y = p.y - SIDE_LENGTH / 2;\nmovingLabel.setLocation(x, y);\n}\n\nprivate void clearGlassPane() {\nglassPane.setVisible(false);\nmovingLabel.setVisible(false);\nselectedChecker = null;\np = null;\nselectedCol = -1;\nselectedRow = -1;\n}\n\nprivate void returnCheckerToOriginalCell() {\ncheckerGrid[selectedRow][selectedCol] = selectedChecker;\nlabelGrid[selectedRow][selectedCol].setIcon(checkerIconMap.get(selectedChecker));\n}\n}\n\nprivate static void createAndShowGui() {\nCheckers mainPanel = new Checkers();\n\nJFrame frame = new JFrame(""JLabelGrid"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass CheckerModel {\n\n}\n\nenum Checker {\nEMPTY(new Color(0, 0, 0, 0)), RED(Color.red), BLACK(Color.black);\nprivate Color color;\n\nprivate Checker(Color color) {\nthis.color = color;\n}\n\npublic Color getColor() {\nreturn color;\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\ndesign panel with GridBagLayout properly\n----------Explanation----------\nHere\'s the code. This is what is meant by a short, self-contained, runnable example of the solution.\n----------Code Sample----------\npackage com.ggl.testing;\n\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\n\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\n\npublic class StudentDataEditor implements Runnable {\n\nprivate static final Insets normalInsets = new Insets(10, 10, 0, 10);\nprivate static final Insets topInsets = new Insets(30, 10, 0, 10);\n\nprivate Student student;\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new StudentDataEditor());\n}\n\npublic StudentDataEditor() {\nthis.student = new Student(""00000017108"", ""Sutandi"",\n""Information Systems"", 2);\n}\n\n@Override\npublic void run() {\nJFrame frame = new JFrame(""Student Data Editor"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(createMainPanel());\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\nprivate JPanel createMainPanel() {\nJPanel panel = new JPanel();\npanel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n\npanel.add(createTitlePanel());\npanel.add(createStudentPanel());\npanel.add(createMPPanel());\npanel.add(Box.createVerticalStrut(30));\npanel.add(createEmailPanel());\npanel.add(Box.createVerticalStrut(10));\n\nreturn panel;\n}\n\nprivate JPanel createTitlePanel() {\nJPanel panel = new JPanel();\n\nJLabel titleLabel = new JLabel(""CEK NILAI"");\ntitleLabel.setFont(titleLabel.getFont().deriveFont(24F));\n\npanel.add(titleLabel);\n\nreturn panel;\n}\n\nprivate JPanel createStudentPanel() {\nJPanel panel = new JPanel();\npanel.setLayout(new GridBagLayout());\n\nint gridy = 0;\n\nJLabel idLabel = new JLabel(""ID:"");\naddComponent(panel, idLabel, 0, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJTextField idTextField = new JTextField(15);\nidTextField.setEditable(false);\nidTextField.setText(student.getId());\naddComponent(panel, idTextField, 1, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJLabel jurusanLabel = new JLabel(""Jurusan:"");\naddComponent(panel, jurusanLabel, 2, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJTextField jurusanTextField = new JTextField(15);\njurusanTextField.setEditable(false);\njurusanTextField.setText(student.getJurusan());\nad""""""]']","['To resize a JLabel ImageIcon in Java, you need to follow a series of steps that involve manipulating the image before setting it to the JLabel. First, you need to retrieve the original Image from the ImageIcon. Once you have the Image, you can use the getScaledInstance method to resize it to the desired dimensions. This method allows you to specify the new width and height, as well as the scaling algorithm to use, such as Image.SCALE_SMOOTH for a smoother result. After resizing the image, you create a new ImageIcon with the scaled image. Finally, you set this new ImageIcon to your JLabel using the setIcon method. This process ensures that the image displayed in the JLabel is resized according to your specifications.']","['[\'[\\\'To resize a JLabel ImageIcon in Java, you can use the `Image` class to scale the image to the desired dimensions and then set it back to the `JLabel`. Below is an example of how to do this:\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\npublic class ResizeImageIcon {\\\\n    public static void main(String[] args) {\\\\n        // Create a JFrame\\\\n        JFrame frame = new JFrame();\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        frame.setSize(300, 300);\\\\n\\\\n        // Load the original image\\\\n        ImageIcon originalIcon = new ImageIcon(""path/to/your/image.jpg"");\\\\n\\\\n        // Resize the image to 100x100 pixels\\\\n        Image originalImage = originalIcon.getImage();\\\\n        Image resizedImage = originalImage.getScaledInstance(100, 100, Image.SCALE_SMOOTH);\\\\n        ImageIcon resizedIcon = new ImageIcon(resizedImage);\\\\n\\\\n        // Create a JLabel with the resized icon\\\\n        JLabel label = new JLabel(resizedIcon);\\\\n\\\\n        // Add the label to the frame\\\\n        frame.add(label);\\\\n\\\\n        // Make the frame visible\\\\n        frame.setVisible(true);\\\\n    }\\\\n}\\\']\']']",1.0,0.1666666666666666,0.2,0.0009372071227741,0.1428571428571428,0.25
swing,JPanel,Java JPanel resize Image,['<p>If you are using JPanels  then are probably working with Swing.\n<p>The image is now a swing component.\nIt becomes subject to layout conditions like any other component.</p>\nLevel; import java.util.logging.Logger; import javax.imageio.ImageIO; import javax.swing.\n<p>Since I only have a finite number (about 10) images that I need to load using this method  it works quite well.\n<p>I think there is no need to subclass of anything.\nYou can set an image into a Jlabel.\nSo  resize the Jlabel then fill it with an image.\n<p>You can avoid rolling your own Component subclass completely by using the JXImagePanel class from the free <a href= https://swingx.java.net//  rel= noreferrer >SwingX</a> libraries.</p>\n<p>You can subclass JPanel - here is an extract from my ImagePanel  which puts an image in any one of 5 locations  top/left  top/right  middle/middle  bottom/left or bottom/right:</p>\nThere shouldn t be any problem (other than any general problems you might have with very large images).</li> <li>\nIf you re talking about adding multiple images to a single panel  I would use <code>ImageIcon</code>s.\nFor a single image  I would think about making a custom subclass of <code>JPanel</code> and overriding its <code>paintComponent</code>\n<p><code>JPanel</code> is almost always the wrong class to subclass.\n<p>There is a slight problem with <code>ImageIcon</code> in that the constructor blocks reading the image.\nNot really a problem when loading from the application jar  but maybe if you re potentially reading over a network connection.\n<p>I m doing something very similar in a private project I m working on.\nThus far I ve generated images up to 1024x1024 without any problems (except memory) and can display them very quickly and without any performance problems.\n<p>Overriding the paint method of JPanel subclass is overkill and requires more work than you need to do.\nThis reduces the amount of flashing done while you generate your images  and you can thread it.\n<p>So then I use a JScrollPane to hold the MapLabel  which contains only the MapIcon.\n<p>But for your scenario (just show the whole image every time).\nYou need to add the MapLabel to the top JPanel  and make sure to size them all to the full size of the image (by overriding the GetPreferredSize()).\n<p>Set an <code>EmptyBorder</code> around your <code>JPanel</code>.<br>\ngenerally you add padding with the layout manager you are using.\nThere are cases that you can just expand the border of the <code>JPanel</code>.</p>\n<p>I will suppose your JPanel contains JTextField  for the sake of the demo.</p>\nmethod which seems to be what you re looking for.</p>\nSince it doesn t have to keep the elements sorted  <code>LinkedHashMap</code>\nThis will allow you not to leak specific implementations into your API and switch to either of those specific classes or a completely different implementation at will afterwards.</p>\n<p>LinkedHashMap will return the elements in the order they were inserted into the map when you iterate over the keySet()  entrySet() or values() of the map.\nObviously put and remove are not supported.\n<p>You can use <strong>LinkedHashMap</strong> to main insertion order in Map</p> <p>\nLinkedHashMap contains values based on the key.</p> </li> <li><p>\n<p>You can maintain a <code>Map</code> (for fast lookup) and <code>List</code> (for order) but a <code>LinkedHashMap</code>\nmay be the simplest.\n<ul> <li>Insertion order is maintained  by using LinkedHashMap internally.</li> <li>Keys with <code>null</code>\nOnce key with value is created  we are not overriding its value.</li> </ul>\n@SuppressWarnings({  rawtypes    unchecked  }) public class CustomHashMap&lt;K  V&gt; implements CustomMap&lt;K  V&gt; {     private Map&lt;K  V&gt; entryMap;     // SET: Adds the specified element to this set if it is not already present.\n@Override     public boolean insertionRule(K key  V value) {         // KEY as null and EMPTY String is not allowed.\nIf key already available then  we are not overriding its value.\n<p>If you know the KEY s are fixed then you can use EnumMap.\nhttp://www.java2s.com/Code/Java/Collections-Data-Structure/ArrayMapextendsAbstractMap.htm  rel= nofollow noreferrer >this implementation of Map using ArrayList</a>.\nIt seems to be pre-1.5 Java  so you might want to genericize it  which should be easy.\nNote that this implementation has O(N) access  but this shouldn t be a problem if you don t add hundreds of widgets to your JPanel  which you shouldn t anyway.</p>\n<p>Whenever i need to maintain the natural order of things that are known ahead of time  i use a <a href= \n<p>the keys will be enums and you can insert in any order you want but when you iterate it will iterate in the enum order (the natural order).\n<p>Also when using EnumMap there should be no collisions which can be more efficient.\n<p>I really find that using enumMap makes for clean readable code.\n<p>LinkedHashMap is used for maintaing insertion order.\nThe LinkedHashMap class of the Collections framework is the Hashtable and LinkedList implementation of the Map interface.\n<p>The problem is  a component can only reside in a single container  once  so doing something like...</p>\n<p>What I would suggest you do is create a  wrapper  or  card  panel which can contain the two images.\n<p>Yes  it is most definitely possible to do this.\n<p>Then you have an error in your code  but unfortunately based on code you ve posted I doubt that any of us can do more than just guess.\nIf you need more specific help  then you will want to post a small runnable example that demonstrates your problem  an <a href= http://sscce.org  rel= nofollow >sscce</a>.</p>'],['Most common way to construct:\nJPanel panel = new JPanel();\nBased on 51 examples'],"['You can resize an image like this,\n\nImage new_image = old_image.getScaledInstance( new_width, new_height,  java.awt.Image.SCALE_SMOOTH ) ;\nTo make sure the ball does not exceed the maximum size,\n\nif(prevImage.getWidth(null) >= max_width || prevImage.getHeight(null) >= max_height)\n{\n    System.out.println(""MAX Size reached !"");\n}\nelse\n{\n    // increase the size\n    Image new_image = old_image.getScaledInstance( new_width, new_height,  java.awt.Image.SCALE_SMOOTH ) ;\n}']","['[""""""*******************usage scenario 1********************** \n----------usage scenario----------\nJava GUI: Sharing values across different JFrames\n----------Explanation----------\n\n----------Code Sample----------\nimport javax.swing.*;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ActionEvent;\nimport java.util.*;\n\n// TwoWindows is the Application \npublic class TwoWindows {\n// shared state ( model ) \nprivate int clickCount = 0;\n\n// UI\nprivate List toUpdate = new ArrayList();\n\n// listener ( listens for clicks on buttons kind of controller )\nprivate ActionListener actionListener = new ActionListener() {\n\n// Each time update the UI \npublic void actionPerformed( ActionEvent e ) {\nclickCount++; \nfor( JLabel label : toUpdate ) {\nlabel.setText( ""Count: "" + ( clickCount ) );\n}\n}\n};\n\n// Createsa winddow with a label and a button\npublic void showWindow( String named ) {\nJFrame f = new JFrame( named );\nf.add( createButtonAndLabel() );\nf.pack();\nf.setVisible( true );\n}\n\n// Creates the label and button and adds this.actionListener\n// to each button. \nprivate JComponent createButtonAndLabel() {\nJPanel panel = new JPanel();\nJLabel label = new JLabel(""Count: 0"");\nJButton clickMe = new JButton(""Click me"");\n// adding the label to a ""view"" list.\ntoUpdate.add( label );\n// adding the listener to each button \nclickMe.addActionListener( actionListener );\npanel.add( label );\npanel.add( clickMe );\nreturn panel;\n}\n\n// Run the app\npublic static void main( String [] args ) {\nTwoWindows t = new TwoWindows();\nt.showWindow(""A"");\nt.showWindow(""B"");\n}\n}\n*******************end of usage scenario 1***************** \n\n*******************usage scenario 2********************** \n----------usage scenario----------\ndragging a jlabel around the screen\n----------Explanation----------\nAddition: You\'ve probably left this thread, but if you come back, or for the benefit of others, I wanted to clarify what I meant by using a JLayeredPane by posting an example.\n----------Code Sample----------\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class DragLabelOnLayeredPane extends JLayeredPane {\npublic static final int WIDTH = 680;\npublic static final int HEIGHT = 480;\nprivate static final int GRID_ROWS = 8;\nprivate static final int GRID_COLS = 6;\nprivate static final int GAP = 3;\nprivate static final Dimension LAYERED_PANE_SIZE = new Dimension(WIDTH, HEIGHT);\nprivate static final Dimension LABEL_SIZE = new Dimension(60, 40);\nprivate GridLayout gridlayout = new GridLayout(GRID_ROWS, GRID_COLS, GAP, GAP);\nprivate JPanel backingPanel = new JPanel(gridlayout);\nprivate JPanel[][] panelGrid = new JPanel[GRID_ROWS][GRID_COLS];\nprivate JLabel redLabel = new JLabel(""Red"", SwingConstants.CENTER);\nprivate JLabel blueLabel = new JLabel(""Blue"", SwingConstants.CENTER);\n\npublic DragLabelOnLayeredPane() {\nbackingPanel.setSize(LAYERED_PANE_SIZE);\nbackingPanel.setLocation(2 * GAP, 2 * GAP);\nbackingPanel.setBackground(Color.black);\nfor (int row = 0; row < GRID_ROWS; row++) {\nfor (int col = 0; col < GRID_COLS; col++) {\npanelGrid[row][col] = new JPanel(new GridBagLayout());\nbackingPanel.add(panelGrid[row][col]);\n}\n}\n\nredLabel.setOpaque(true);\nredLabel.setBackground(Color.red.brighter().brighter());\nredLabel.setPreferredSize(LABEL_SIZE);\npanelGrid[4][3].add(redLabel);\n\nblueLabel.setOpaque(true);\nblueLabel.setBackground(Color.blue.brighter().brighter());\nblueLabel.setPreferredSize(LABEL_SIZE);\npanelGrid[1][1].add(blueLabel);\n\nbackingPanel.setBorder(BorderFactory.createEmptyBorder(GAP, GAP, GAP, GAP));\nsetPreferredSize(LAYERED_PANE_SIZE);\nadd(backingPanel, JLayeredPane.DEFAULT_LAYER);\nMyMouseAdapter myMouseAdapter = new MyMouseAdapter();\naddMouseListener(myMouseAdapter);\naddMouseMotionListener(myMouseAdapter);\n}\n\nprivate class MyMouseAdapter extends MouseAdapter {\nprivate JLabel dragLabel = null;\nprivate int dragLabelWidthDiv2;\nprivate int dragLabelHeightDiv2;\nprivate JPanel clickedPanel = null;\n\n@Override\npublic void mousePressed(MouseEvent me) {\nclickedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());\nComponent[] components = clickedPanel.getComponents();\nif (components.length == 0) {\nreturn;\n}\n// if we click on jpanel that holds a jlabel\nif (components[0] instanceof JLabel) {\n\n// remove label from panel\ndragLabel = (JLabel) components[0];\nclickedPanel.remove(dragLabel);\nclickedPanel.revalidate();\nclickedPanel.repaint();\n\ndragLabelWidthDiv2 = dragLabel.getWidth() / 2;\ndragLabelHeightDiv2 = dragLabel.getHeight() / 2;\n\nint x = me.getPoint().x - dragLabelWidthDiv2;\nint y = me.getPoint().y - dragLabelHeightDiv2;\ndragLabel.setLocation(x, y);\nadd(dragLabel, JLayeredPane.DRAG_LAYER);\nrepaint();\n}\n}\n\n@Override\npublic void mouseDragged(MouseEvent me) {\nif (dragLabel == null) {\nreturn;\n}\nint x = me.getPoint().x - dragLabelWidthDiv2;\nint y = me.getPoint().y - dragLabelHeightDiv2;\ndragLabel.setLocation(x, y);\nrepaint();\n}\n\n@Override\npublic void mouseReleased(MouseEvent me) {\nif (dragLabel == null) {\nreturn;\n}\nremove(dragLabel); // remove dragLabel for drag layer of JLayeredPane\nJPanel droppedPanel = (JPanel) backingPanel.getComponentAt(me.getPoint());\nif (droppedPanel == null) {\n// if off the grid, return label to home\nclickedPanel.add(dragLabel);\nclickedPanel.revalidate();\n} else {\nint r = -1;\nint c = -1;\nsearchPanelGrid: for (int row = 0; row < panelGrid.length; row++) {\nfor (int col = 0; col < panelGrid[row].length; col++) {\nif (panelGrid[row][col] == droppedPanel) {\nr = row;\nc = col;\nbreak searchPanelGrid;\n}\n}\n}\n\nif (r == -1 || c == -1) {\n// if off the grid, return label to home\nclickedPanel.add(dragLabel);\nclickedPanel.revalidate();\n} else {\ndroppedPanel.add(dragLabel);\ndroppedPanel.revalidate();\n}\n}\n\nrepaint();\ndragLabel = null;\n}\n}\n\nprivate static void createAndShowUI() {\nJFrame frame = new JFrame(""DragLabelOnLayeredPane"");\nframe.getContentPane().add(new DragLabelOnLayeredPane());\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\njava.awt.EventQueue.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowUI();\n}\n});\n}\n}\n*******************end of usage scenario 2***************** \n\n*******************usage scenario 3********************** \n----------usage scenario----------\nWhich layout can do this?\n----------Explanation----------\nYou don\'t need a layout manager which specifically supports this. You can calculate the x, y positions yourself with some fairly simple trigonometry, then use a regular layout such as SpringLayout .\n----------Code Sample----------\nimport java.awt.Point;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.SpringLayout;\n\npublic class CircleLayout {\n\n/**\n* Calculate x,y positions of n labels positioned in\n* a circle around a central point. Assumes AWT coordinate\n* system where origin (0,0) is top left.\n* @param args\n*/\npublic static void main(String[] args) {\nint n = 6; //Number of labels\nint radius = 100;\nPoint centre = new Point(200,200);\n\ndouble angle = Math.toRadians(360/n);\nList points = new ArrayList();\npoints.add(centre);\n\n//Add points\nfor (int i=0; i double theta = i*angle;\nint dx = (int)(radius * Math.sin(theta));\nint dy = (int)(-radius * Math.cos(theta));\nPoint p = new Point(centre.x + dx, centre.y + dy);\npoints.add(p);\n}\n\ndraw(points);\n}\n\nprivate static void draw(List points) {\nJFrame frame = new JFrame(""Labels in a circle"");\nframe.setSize(500, 500);\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\nJPanel panel = new JPanel();;\nSpringLayout layout = new SpringLayout();\n\nint count = 0;\nfor (Point point : points) {\nJLabel label = new JLabel(""Point "" + count);\npanel.add(label);\ncount++;\nlayout.putConstraint(SpringLayout.WEST, label, point.x, SpringLayout.WEST, panel);\nlayout.putConstraint(SpringLayout.NORTH, label, point.y, SpringLayout.NORTH, panel);\n}\n\npanel.setLayout(layout);\n\nframe.add(panel);\nframe.setVisible(true);\n\n}\n}\n*******************end of usage scenario 3***************** \n\n*******************usage scenario 4********************** \n----------usage scenario----------\nMultiline text in JLabel\n----------Explanation----------\nYou can do it by putting HTML in the code, so:\n----------Code Sample----------\nJFrame frame = new JFrame();\nframe.setLayout(new GridLayout());\nJLabel label = new JLabel(""First line\nSecond line"");\nframe.add(label);\nframe.pack();\nframe.setVisible(true);\n*******************end of usage scenario 4***************** \n\n*******************usage scenario 5********************** \n----------usage scenario----------\nUnicode characters in javax.swing only display when using the default font-size\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.BorderLayout;\nimport java.awt.EventQueue;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class TestUnicodeFont {\n\npublic static void main(String[] args) {\nnew TestUnicodeFont();\n}\n\npublic TestUnicodeFont() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.setLayout(new BorderLayout());\nframe.add(new TestPane());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\npublic class TestPane extends JPanel {\n\npublic TestPane() {\nsetLayout(new GridBagLayout());\nGridBagConstraints gbc = new GridBagConstraints();\ngbc.gridwidth = GridBagConstraints.REMAINDER;\nJLabel normal = new JLabel(""Normal - ?"");\nJLabel byCode = new JLabel(""Normal code - \\u2109"");\n\nJLabel normalLarger = new JLabel(""Large - ?"");\nnormalLarger.setFont(normalLarger.getFont().deriveFont(48f));\nJLabel byCodeLatger = new JLabel(""Large code - \\u2109"");\nbyCodeLatger.setFont(byCodeLatger.getFont().deriveFont(48f));\n\nadd(normal, gbc);\nadd(byCode, gbc);\nadd(normalLarger, gbc);\nadd(byCodeLatger, gbc);\n}\n}\n\n}\n*******************end of usage scenario 5***************** \n\n*******************usage scenario 6********************** \n----------usage scenario----------\nLabel will not update with the flow\n----------Explanation----------\nYou\'re shadowing your tieLabel variable by re-declaring it in the class. By doing this, the local variable declared in the constructor is initialized, but the field declared in the class remains null:\n----------Code Sample----------\npublic class GamePanel extends JPanel {\nprivate JButton rockButton, paperButton, scissorsButton;\n\n// all these variables are null and remain null\nprivate JLabel userLabel, computerLabel, resultLabel, winLabel, tieLabel,\nloseLabel;\n\n// ...\n\npublic GamePanel() {\n\n// ...\n\n// ***** shadowing vars here\nJButton rockButton = new JButton(rockButtonText);\nJButton paperButton = new JButton(paperButtonText);\nJButton scissorsButton = new JButton(scissorsButtonText);\n\n//...\n\n// *** and here\nJLabel userLabel = new JLabel(""User:"");\nJLabel computerLabel = new JLabel(""Computer:"");\nJLabel winLabel = new JLabel(""Win: "" + winInt);\nJLabel tieLabel = new JLabel(""Tie: "" + tieInt);\nJLabel loseLabel = new JLabel(""Lose:"" + loseInt);\n\npublic GamePanel() {\n\n// ...\n\nrockButton = new JButton(rockButtonText);\npaperButton = new JButton(paperButtonText);\nscissorsButton = new JButton(scissorsButtonText);\n\n//...\n\nuserLabel = new JLabel(""User:"");\ncomputerLabel = new JLabel(""Computer:"");\nwinLabel = new JLabel(""Win: "" + winInt);\ntieLabel = new JLabel(""Tie: "" + tieInt);\nloseLabel = new JLabel(""Lose:"" + loseInt);\n*******************end of usage scenario 6***************** \n\n*******************usage scenario 7********************** \n----------usage scenario----------\nJava: How do I pass variables from JButton ActionListener to main class?\n----------Explanation----------\nMake a class, instance variable available for the numGenerator to access directly...\n----------Code Sample----------\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\n// This variable will be visible to the inner class numGenerator\nprivate JLabel output;\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\noutput = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator());\n}\n\npublic class numGenerator implements ActionListener{\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\noutput.setText(Integer.toString(num));\n\n}\n}\n}\n\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\nJLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator(output));\n}\n\npublic class numGenerator implements ActionListener{\nprivate JLabel label;\n\npublic numGenerator(JLabel label) {\nthis.label = label;\n}\n\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\nif (label != null) {\nlabel.setText(Integer.toString(num));\n}\n\n}\n}\n}\n\npublic class Main{\npublic static void main(String[] args){\nnew Main();\n}\n\npublic Main() {\nJFrame mainFrame = new JFrame(""Experiment"");\nmainFrame.setSize(500,500);\nmainFrame.setVisible(true);\n\nPanel panel = new Panel();\nmainFrame.getContentPane().add(panel);\n\nfinal JLabel output = new JLabel(""This is where the result from the num variable in the numGenerator class would go""); \npanel.add(output); \n\nJButton numGenerator = new JButton(""Generate Number"");\npanel.add(numGenerator);\nnumGenerator.addActionListener(new numGenerator(new NumberGeneratorListener() {\npublic void numberGenerated(int number) {\noutput.setText(Integer.toString(number));\n}\n}));\n}\n\npublic interface NumberGeneratorListener {\npublic void numberGenerated(int number);\n}\n\npublic class numGenerator implements ActionListener{\nprivate NumberGeneratorListener listener;\n\npublic numGenerator(NumberGeneratorListener listener) {\nthis.listener = listener;\n}\n\npublic void actionPerformed(ActionEvent e){\n\nRandom dice = new Random();\nint num = dice.nextInt(3);\nif (listener != null) {\nlistener.numberGenerated(num);\n}\n\n}\n}\n}\n*******************end of usage scenario 7***************** \n\n*******************usage scenario 8********************** \n----------usage scenario----------\nHow to align a JLabel to the bottom of a JPanel\n----------Explanation----------\nYou could use BorderLayout and add the label to the PAGE_END position of the container\n----------Code Sample----------\nsetLayout(new BorderLayout());\nadd(itemLabel, BorderLayout.PAGE_END);\n\nJLabel itemLabel = new JLabel(""ccc"", JLabel.CENTER);\n*******************end of usage scenario 8***************** \n\n*******************usage scenario 9********************** \n----------usage scenario----------\nCan\'t move JLabel on JPanel\n----------Explanation----------\n\n----------Code Sample----------\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.LayoutManager2;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Random;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.Timer;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class Monopoly {\n\npublic static void main(String[] args) {\nnew Monopoly();\n}\n\npublic Monopoly() {\nEventQueue.invokeLater(new Runnable() {\n@Override\npublic void run() {\ntry {\nUIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\nex.printStackTrace();\n}\n\nJFrame frame = new JFrame(""Testing"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(new MonopolyBoard());\nframe.pack();\nframe.setLocationRelativeTo(null);\nframe.setVisible(true);\n}\n});\n}\n\npublic class MonopolyBoard extends JPanel {\n\nprivate List players;\n\npublic MonopolyBoard() {\nsetLayout(new MonopolyBoardLayout());\n\nplayers = new ArrayList<>(2);\ntry {\nplayers.add(makePlayer(""/Dog.png""));\nplayers.add(makePlayer(""/Car.png""));\n\nfor (JLabel player : players) {\nadd(player, new Integer(0));\n}\n} catch (IOException exp) {\nexp.printStackTrace();\n}\n\nTimer timer = new Timer(1000, new ActionListener() {\nprivate int count = 0;\nprivate Random rnd = new Random();\n\n@Override\npublic void actionPerformed(ActionEvent e) {\nint playerIndex = count % players.size();\nJLabel player = players.get(playerIndex);\n\nMonopolyBoardLayout layout = (MonopolyBoardLayout) getLayout();\nint position = layout.getPosition(player);\n\nposition += rnd.nextInt(5) + 1;\nif (position > 35) {\nposition -= 35;\n}\n\nlayout.setPosition(player, position);\n\nrevalidate();\nrepaint();\ncount++;\n}\n});\ntimer.start();\n}\n\nprotected JLabel makePlayer(String path) throws IOException {\nJLabel label = new JLabel(new ImageIcon(ImageIO.read(getClass().getResource(path))), JLabel.CENTER);\nreturn label;\n}\n\n@Override\nprotected void paintComponent(Graphics g) {\nsuper.paintComponent(g);\nGraphics2D g2d = (Graphics2D) g.create();\nint width = getWidth();\nint height = getHeight();\n\nfor (int index = 0; index < 36; index++) {\nRectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);\ng2d.draw(bounds);\n}\n\ng2d.dispose();\n}\n\n}\n\npublic static class MonopolyBoardLayoutHelper {\n\nprivate static Map mapBoardCells;\n\nstatic {\nmapBoardCells = new HashMap<>(25);\n\nmapBoardCells.put(10, new Point(0, 8));\nmapBoardCells.put(11, new Point(0, 7));\nmapBoardCells.put(12, new Point(0, 6));\nmapBoardCells.put(13, new Point(0, 5));\nmapBoardCells.put(14, new Point(0, 4));\nmapBoardCells.put(15, new Point(0, 3));\nmapBoardCells.put(16, new Point(0, 2));\nmapBoardCells.put(17, new Point(0, 1));\nmapBoardCells.put(18, new Point(0, 0));\n\nmapBoardCells.put(0, new Point(9, 9));\nmapBoardCells.put(1, new Point(8, 9));\nmapBoardCells.put(2, new Point(7, 9));\nmapBoardCells.put(3, new Point(6, 9));\nmapBoardCells.put(4, new Point(5, 9));\nmapBoardCells.put(5, new Point(4, 9));\nmapBoardCells.put(6, new Point(3, 9));\nmapBoardCells.put(7, new Point(2, 9));\nmapBoardCells.put(8, new Point(1, 9));\nmapBoardCells.put(9, new Point(0, 9));\n\nmapBoardCells.put(19, new Point(1, 0));\nmapBoardCells.put(20, new Point(2, 0));\nmapBoardCells.put(21, new Point(3, 0));\nmapBoardCells.put(22, new Point(4, 0));\nmapBoardCells.put(23, new Point(5, 0));\nmapBoardCells.put(24, new Point(6, 0));\nmapBoardCells.put(25, new Point(7, 0));\nmapBoardCells.put(26, new Point(8, 0));\nmapBoardCells.put(27, new Point(9, 0));\n\nmapBoardCells.put(28, new Point(9, 1));\nmapBoardCells.put(29, new Point(9, 2));\nmapBoardCells.put(30, new Point(9, 3));\nmapBoardCells.put(31, new Point(9, 4));\nmapBoardCells.put(32, new Point(9, 5));\nmapBoardCells.put(33, new Point(9, 6));\nmapBoardCells.put(34, new Point(9, 7));\nmapBoardCells.put(35, new Point(9, 8));\n\n}\n\npublic static Rectangle getCellBounds(int index, int width, int height) {\nRectangle bounds = new Rectangle(0, 0, 0, 0);\nint size = Math.min(width, height);\nint cellSize = size / 10;\n\nint xOffset = (width - size) / 2;\nint yOffset = (height - size) / 2;\n\nPoint point = mapBoardCells.get(index);\nif (point != null) {\n\nint x = xOffset + (point.x * cellSize);\nint y = yOffset + (point.y * cellSize);\nbounds = new Rectangle(x, y, cellSize, cellSize);\n\n}\n\nreturn bounds;\n\n}\n\n}\n\npublic static class MonopolyBoardLayout implements LayoutManager2 {\n\npublic static final int DEFAULT_CELL_SIZE = 64;\n\nprivate Map cellConstraints;\n\npublic MonopolyBoardLayout() {\ncellConstraints = new HashMap<>(5);\n}\n\npublic Integer getPosition(Component comp) {\nreturn cellConstraints.get(comp);\n}\n\npublic void setPosition(Component comp, int position) {\ncellConstraints.put(comp, position);\n}\n\n@Override\npublic void addLayoutComponent(Component comp, Object constraints) {\nif (constraints instanceof Integer) {\nint cell = (int) constraints;\nif (cell >= 0 && cell <= 35) {\ncellConstraints.put(comp, cell);\n} else {\nthrow new IllegalArgumentException(constraints + "" is not within the bounds of a valid cell reference (0-35)"");\n}\n} else {\nthrow new IllegalArgumentException(constraints + "" is not a valid cell reference (integer within 0-35)"");\n}\n}\n\n@Override\npublic Dimension maximumLayoutSize(Container target) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic float getLayoutAlignmentX(Container target) {\nreturn 0.5f;\n}\n\n@Override\npublic float getLayoutAlignmentY(Container target) {\nreturn 0.5f;\n}\n\n@Override\npublic void invalidateLayout(Container target) {\n}\n\n@Override\npublic void addLayoutComponent(String name, Component comp) {\n}\n\n@Override\npublic void removeLayoutComponent(Component comp) {\ncellConstraints.remove(comp);\n}\n\n@Override\npublic Dimension preferredLayoutSize(Container parent) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic Dimension minimumLayoutSize(Container parent) {\nreturn new Dimension(DEFAULT_CELL_SIZE * 10, DEFAULT_CELL_SIZE * 10);\n}\n\n@Override\npublic void layoutContainer(Container parent) {\nint width = parent.getWidth();\nint height = parent.getHeight();\n\nMap> components = new HashMap<>(25);\n\nfor (Component child : parent.getComponents()) {\nInteger cell = cellConstraints.get(child);\nif (cell != null) {\nList children = components.get(cell);\nif (children == null) {\nchildren = new ArrayList<>(4);\ncomponents.put(cell, children);\n}\nchildren.add(child);\n} else {\nchild.setBounds(0, 0, 0, 0);\n}\n}\n\nfor (Map.Entry> entry : components.entrySet()) {\nint index = entry.getKey();\nRectangle bounds = MonopolyBoardLayoutHelper.getCellBounds(index, width, height);\nList comp = entry.getValue();\nint xDelta = 0;\nint yDelta = 0;\nint availableWidth = bounds.width;\nint availableHeight = bounds.height;\nswitch (comp.size()) {\ncase 2:\navailableWidth /= 2;\nxDelta = availableWidth;\nbreak;\ncase 3:\ncase 4:\navailableWidth /= 2;\nxDelta = availableWidth;\navailableHeight /= 2;\nyDelta = availableHeight;\nbreak;\n}\nint x = bounds.x;\nint y = bounds.y;\nfor (int count = 0; count < comp.size() && count < 4; count++) {\nComponent child = comp.get(count);\nchild.setSize(availableWidth, availableHeight);\nchild.setLocation(x, y);\n\nx += xDelta;\nif (x >= bounds.x + bounds.width) {\nx = bounds.x;\ny += yDelta;\n}\n}\n}\n\n}\n\n}\n\n}\n*******************end of usage scenario 9***************** \n\n*******************usage scenario 10********************** \n----------usage scenario----------\nHow Do I Make These JLabels of JButtons invisible\n----------Explanation----------\nEdit \nFor example, a bad code example as a proof of concept. Try compiling and running this.\n----------Code Sample----------\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.GridLayout;\nimport java.awt.Point;\nimport java.awt.RenderingHints;\nimport java.awt.event.*;\nimport java.awt.image.BufferedImage;\nimport java.util.EnumMap;\nimport java.util.Map;\n\nimport javax.swing.*;\n\n@SuppressWarnings(""serial"")\npublic class Checkers extends JPanel {\npublic static final int SIDE_LENGTH = 60;\npublic static final int ROW_COUNT = 8;\nprivate static final String ROW = ""row"";\nprivate static final String COLUMN = ""column"";\nprivate static final Color LIGHT_COLOR = new Color(210, 180, 140);\nprivate static final Color DARK_COLOR = new Color(107, 68, 35);\nprivate Map checkerIconMap = new EnumMap(\nChecker.class);\nprivate JLabel[][] labelGrid = new JLabel[ROW_COUNT][ROW_COUNT];\nprivate Checker[][] checkerGrid = new Checker[ROW_COUNT][ROW_COUNT];\n\npublic Checkers() {\nfor (Checker checker : Checker.values()) {\ncheckerIconMap.put(checker, createCheckerIcon(checker));\n}\nsetLayout(new GridLayout(ROW_COUNT, ROW_COUNT));\n\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\ncheckerGrid[row][col] = Checker.EMPTY;\nJLabel gridCell = new JLabel(checkerIconMap.get(Checker.EMPTY));\ngridCell.setOpaque(true);\ngridCell.putClientProperty(ROW, row);\ngridCell.putClientProperty(COLUMN, col);\nColor c = row % 2 == col % 2 ? LIGHT_COLOR : DARK_COLOR;\ngridCell.setBackground(c);\nadd(gridCell);\nlabelGrid[row][col] = gridCell;\n}\n}\n\nfor (int i = 0; i < labelGrid.length / 2 - 1; i++) {\nfor (int j = 0; j < labelGrid.length / 2; j++) {\nint row = i;\nint col = j * 2;\ncol += row % 2 == 0 ? 1 : 0;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.BLACK));\ncheckerGrid[row][col] = Checker.BLACK;\n\nrow = ROW_COUNT - row - 1;\ncol = ROW_COUNT - col - 1;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.RED));\ncheckerGrid[row][col] = Checker.RED;\n}\n}\n\nMyMouseAdapter myMouseAdapter = new MyMouseAdapter();\naddMouseListener(myMouseAdapter);\naddMouseMotionListener(myMouseAdapter);\n}\n\nprivate Icon createCheckerIcon(Checker checker) {\nBufferedImage img = new BufferedImage(SIDE_LENGTH, SIDE_LENGTH,\nBufferedImage.TYPE_INT_ARGB);\nGraphics2D g2 = img.createGraphics();\ng2.setColor(checker.getColor());\ng2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,\nRenderingHints.VALUE_ANTIALIAS_ON);\nint x = 3;\nint y = x;\nint width = SIDE_LENGTH - 2 * x;\nint height = width;\ng2.fillOval(x, y, width, height);\ng2.dispose();\n\nreturn new ImageIcon(img);\n}\n\nprivate class MyMouseAdapter extends MouseAdapter {\nprivate int selectedRow = -1;\nprivate int selectedCol = -1;\nprivate Checker selectedChecker = null;\nprivate JPanel glassPane = null;\nprivate Point p = null;\nprivate JLabel movingLabel = new JLabel(checkerIconMap.get(Checker.EMPTY));\n\npublic MyMouseAdapter() {\nmovingLabel.setSize(movingLabel.getPreferredSize());\nmovingLabel.setVisible(false);\n}\n\n@Override\npublic void mousePressed(MouseEvent e) {\np = e.getPoint();\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\nJLabel gridCell = labelGrid[row][col];\nif (gridCell == getComponentAt(p)) {\nif (checkerGrid[row][col] != Checker.EMPTY) {\nselectedRow = row;\nselectedCol = col;\nselectedChecker = checkerGrid[row][col];\ncheckerGrid[row][col] = Checker.EMPTY;\nlabelGrid[row][col].setIcon(checkerIconMap.get(Checker.EMPTY));\n\nJRootPane rootPane = SwingUtilities.getRootPane(Checkers.this);\nglassPane = (JPanel) rootPane.getGlassPane();\nglassPane.setVisible(true);\nglassPane.setLayout(null);\nmovingLabel.setIcon(checkerIconMap.get(selectedChecker));\nmovingLabel.setVisible(true);\nglassPane.add(movingLabel);\nint x = p.x - SIDE_LENGTH / 2;\nint y = p.y - SIDE_LENGTH / 2;\nmovingLabel.setLocation(x, y);\n}\n}\n}\n}\n}\n\n@Override\npublic void mouseReleased(MouseEvent e) {\nif (selectedChecker == null) {\nreturn;\n}\n\np = e.getPoint();\nif (!Checkers.this.contains(p)) {\n// if mouse releases and is totally off of the grid\nreturnCheckerToOriginalCell();\nclearGlassPane();\nreturn;\n}\n\nfor (int row = 0; row < labelGrid.length; row++) {\nfor (int col = 0; col < labelGrid[row].length; col++) {\nJLabel gridCell = labelGrid[row][col];\nif (gridCell == getComponentAt(p)) {\nif (isMoveLegal(row, col)) {\ncheckerGrid[row][col] = selectedChecker;\nlabelGrid[row][col].setIcon(checkerIconMap.get(selectedChecker));\n\n// todo: check for jumped pieces...\n} else {\n// illegal move\nreturnCheckerToOriginalCell();\n}\n}\n}\n}\nclearGlassPane();\n}\n\n// this code would go in the model class\nprivate boolean isMoveLegal(int row, int col) {\nif (checkerGrid[row][col] != Checker.EMPTY) {\n// trying to put a checker on another checker\nreturnCheckerToOriginalCell();\n} else if (row == selectedRow && col == selectedCol) {\n// trying to put checker back in same position\nreturnCheckerToOriginalCell();\n} else if (row % 2 == col % 2) {\n// invalid square\nreturnCheckerToOriginalCell();\n} else {\n// TODO: more logic needs to go here to test for a legal move\n// and to remove jumped pieces\n\nreturn true;\n}\nreturn false;\n}\n\n@Override\npublic void mouseDragged(MouseEvent e) {\nif (selectedChecker == null || p == null) {\nreturn;\n}\np = e.getPoint();\nint x = p.x - SIDE_LENGTH / 2;\nint y = p.y - SIDE_LENGTH / 2;\nmovingLabel.setLocation(x, y);\n}\n\nprivate void clearGlassPane() {\nglassPane.setVisible(false);\nmovingLabel.setVisible(false);\nselectedChecker = null;\np = null;\nselectedCol = -1;\nselectedRow = -1;\n}\n\nprivate void returnCheckerToOriginalCell() {\ncheckerGrid[selectedRow][selectedCol] = selectedChecker;\nlabelGrid[selectedRow][selectedCol].setIcon(checkerIconMap.get(selectedChecker));\n}\n}\n\nprivate static void createAndShowGui() {\nCheckers mainPanel = new Checkers();\n\nJFrame frame = new JFrame(""JLabelGrid"");\nframe.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\nframe.getContentPane().add(mainPanel);\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new Runnable() {\npublic void run() {\ncreateAndShowGui();\n}\n});\n}\n}\n\nclass CheckerModel {\n\n}\n\nenum Checker {\nEMPTY(new Color(0, 0, 0, 0)), RED(Color.red), BLACK(Color.black);\nprivate Color color;\n\nprivate Checker(Color color) {\nthis.color = color;\n}\n\npublic Color getColor() {\nreturn color;\n}\n}\n*******************end of usage scenario 10***************** \n\n*******************usage scenario 11********************** \n----------usage scenario----------\ndesign panel with GridBagLayout properly\n----------Explanation----------\nHere\'s the code. This is what is meant by a short, self-contained, runnable example of the solution.\n----------Code Sample----------\npackage com.ggl.testing;\n\nimport java.awt.Component;\nimport java.awt.Container;\nimport java.awt.GridBagConstraints;\nimport java.awt.GridBagLayout;\nimport java.awt.Insets;\n\nimport javax.swing.Box;\nimport javax.swing.BoxLayout;\nimport javax.swing.JButton;\nimport javax.swing.JFrame;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.SwingUtilities;\n\npublic class StudentDataEditor implements Runnable {\n\nprivate static final Insets normalInsets = new Insets(10, 10, 0, 10);\nprivate static final Insets topInsets = new Insets(30, 10, 0, 10);\n\nprivate Student student;\n\npublic static void main(String[] args) {\nSwingUtilities.invokeLater(new StudentDataEditor());\n}\n\npublic StudentDataEditor() {\nthis.student = new Student(""00000017108"", ""Sutandi"",\n""Information Systems"", 2);\n}\n\n@Override\npublic void run() {\nJFrame frame = new JFrame(""Student Data Editor"");\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\nframe.add(createMainPanel());\nframe.pack();\nframe.setLocationByPlatform(true);\nframe.setVisible(true);\n}\n\nprivate JPanel createMainPanel() {\nJPanel panel = new JPanel();\npanel.setLayout(new BoxLayout(panel, BoxLayout.PAGE_AXIS));\n\npanel.add(createTitlePanel());\npanel.add(createStudentPanel());\npanel.add(createMPPanel());\npanel.add(Box.createVerticalStrut(30));\npanel.add(createEmailPanel());\npanel.add(Box.createVerticalStrut(10));\n\nreturn panel;\n}\n\nprivate JPanel createTitlePanel() {\nJPanel panel = new JPanel();\n\nJLabel titleLabel = new JLabel(""CEK NILAI"");\ntitleLabel.setFont(titleLabel.getFont().deriveFont(24F));\n\npanel.add(titleLabel);\n\nreturn panel;\n}\n\nprivate JPanel createStudentPanel() {\nJPanel panel = new JPanel();\npanel.setLayout(new GridBagLayout());\n\nint gridy = 0;\n\nJLabel idLabel = new JLabel(""ID:"");\naddComponent(panel, idLabel, 0, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJTextField idTextField = new JTextField(15);\nidTextField.setEditable(false);\nidTextField.setText(student.getId());\naddComponent(panel, idTextField, 1, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJLabel jurusanLabel = new JLabel(""Jurusan:"");\naddComponent(panel, jurusanLabel, 2, gridy, 1, 1, topInsets,\nGridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL);\n\nJTextField jurusanTextField = new JTextField(15);\njurusanTextField.setEditable(false);\njurusanTextField.setText(student.getJurusan());\nad""""""]']","['To resize an image within a Java JPanel, you need to follow a series of steps that involve loading the image, resizing it, and then drawing it onto the JPanel. First, you load the image using the ImageIO class. Once the image is loaded, you can resize it using the getScaledInstance method of the Image class, which allows you to specify the new width and height. After resizing the image, you override the paintComponent method of the JPanel to draw the resized image. Within the paintComponent method, you use the Graphics object to draw the image at the desired location on the JPanel. This approach ensures that the image is properly resized and displayed within the JPanel.']","['[\'[\\\'To resize an image in a Java JPanel, you can use the `Graphics2D` class to draw the image with the desired dimensions. Below is an example of how to achieve this. The code creates a simple JFrame with a JPanel that resizes an image to fit the panel\\\\\\\'s dimensions. The image is loaded from a file and then drawn with the new dimensions in the `paintComponent` method of the JPanel.\\\\nimport javax.swing.*;\\\\nimport java.awt.*;\\\\nimport java.awt.image.BufferedImage;\\\\nimport java.io.File;\\\\nimport java.io.IOException;\\\\nimport javax.imageio.ImageIO;\\\\npublic class ImageResizer extends JPanel {\\\\n    private BufferedImage image;\\\\n\\\\n    public ImageResizer(String imagePath) {\\\\n        try {\\\\n            image = ImageIO.read(new File(imagePath));\\\\n        } catch (IOException e) {\\\\n            e.printStackTrace();\\\\n        }\\\\n    }\\\\n\\\\n    @Override\\\\n    protected void paintComponent(Graphics g) {\\\\n        super.paintComponent(g);\\\\n        if (image != null) {\\\\n            Graphics2D g2d = (Graphics2D) g;\\\\n            int newWidth = getWidth();\\\\n            int newHeight = getHeight();\\\\n            g2d.drawImage(image, 0, 0, newWidth, newHeight, this);\\\\n        }\\\\n    }\\\\n\\\\n    public static void main(String[] args) {\\\\n        JFrame frame = new JFrame(""Image Resizer"");\\\\n        ImageResizer imageResizer = new ImageResizer(""path/to/your/image.jpg"");\\\\n        frame.add(imageResizer);\\\\n        frame.setSize(800, 600);\\\\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\\\\n        frame.setVisible(true);\\\\n    }\\\\n}\\\']\']']",0.072463768115942,0.6666666666666666,0.5833333333333334,0.0009372071227741,0.1666666666666666,0.1428571428571428
